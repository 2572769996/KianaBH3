syntax = "proto3";

option csharp_namespace = "KianaBH.Proto";

message AvatarSubSkill {
  uint32 sub_skill_id = 1;
  uint32 level = 2;
  bool is_mask = 3;
}

message AvatarSkill {
  uint32 skill_id = 1;
  repeated AvatarSubSkill sub_skill_list = 2;
}

message Avatar {
  uint32 avatar_id = 1;
  uint32 star = 2;
  uint32 level = 3;
  uint32 exp = 4;
  uint32 fragment = 5;
  uint32 weapon_unique_id = 6;
  uint32 stigmata_unique_id_1 = 7;
  uint32 stigmata_unique_id_2 = 8;
  uint32 stigmata_unique_id_3 = 9;
  repeated AvatarSkill skill_list = 10;
  uint32 touch_goodfeel = 11;
  uint32 today_has_add_goodfeel = 12;
  uint32 stage_goodfeel = 13;
  repeated uint32 dress_list = 14;
  uint32 dress_id = 15;
  AvatarBindEquipMode mode = 17;
  AvatarArtifactDetail avatar_artifact = 18;
  uint32 sub_star = 19;
}

message EquipmentItem {
  EquipmentType type = 1;
  uint32 id_or_unique_id = 2;
  uint32 num = 3;
}

message EquipmentItemList {
  repeated EquipmentItem item_list = 1;
}

message Mecha {
  uint32 unique_id = 1;
  uint32 id = 2;
}

message Weapon {
  uint32 unique_id = 1;
  uint32 id = 2;
  uint32 level = 3;
  uint32 exp = 4;
  bool is_protected = 5;
  uint32 cancel_protect_time = 6;
  bool is_extracted = 7;
  uint32 sub_weapon_id = 8;
  repeated uint32 quantum_branch_list = 9;
  uint32 homology_level = 10;
}

message Stigmata {
  uint32 unique_id = 1;
  uint32 id = 2;
  uint32 level = 3;
  uint32 exp = 4;
  bool is_protected = 5;
  bool is_affix_identify = 6;
  uint32 cancel_protect_time = 7;
  uint32 slot_num = 8;
  repeated StigmataRune rune_list = 9;
  repeated StigmataRune wait_select_rune_list = 10;
  uint32 refine_value = 11;
  uint32 promote_times = 12;
  repeated StigmataRuneGroup wait_select_rune_group_list = 16;
}

message Material {
  uint32 id = 1;
  uint32 num = 2;
}

message GenericItemNum {
  uint32 id = 1;
  uint32 num = 2;
  uint32 level = 3;
}

message Stage {
  uint32 id = 1;
  uint32 progress = 2;
  uint32 enter_times = 3;
  uint32 reset_times = 4;
  repeated uint32 challenge_index_list = 5;
  uint32 bonus_end_time = 6;
  uint32 bonus_enter_times = 7;
  uint32 bonus_total_times = 8;
  uint32 min_stage_time = 9;
  uint32 max_score = 10;
  uint32 stamina_discount = 11;
  uint32 total_score = 12;
  bool is_done = 16;
  repeated uint32 backup_challenge_index_list = 18;
  uint32 max_battle_score = 19;
  uint32 max_rank = 20;
  string client_data = 21;
  uint32 first_stamina_discount = 22;
}

message StageEventData {
  uint32 begin_time = 1;
  uint32 end_time = 2;
  uint32 chapter_id = 3;
  uint32 unlock_level = 4;
}

message DropItem {
  uint32 item_id = 1;
  uint32 level = 2;
  uint32 num = 3;
  uint32 rarity = 4;
  bool is_baodi = 5;
  bool is_rare_drop = 6;
  uint32 gift_item_id = 7;
  uint32 gift_level = 8;
  uint32 gift_num = 9;
  bool is_treasure = 10;
  bool is_equip_drop = 11;
  bool is_stage_clear_drop = 12;
  bool is_avatar_drop = 13;
  bool is_theme_wanted_double_drop = 14;
}

message RewardItemData {
  uint32 id = 1;
  uint32 level = 2;
  uint32 num = 3;
  uint32 split_fragment_num = 4;
}

message RewardData {
  uint32 exp = 1;
  uint32 scoin = 2;
  uint32 hcoin = 3;
  uint32 stamina = 4;
  uint32 friends_point = 6;
  repeated RewardItemData item_list = 7;
  uint32 exp_convert_scoin = 9;
}

message StageCheatData {
  enum Type {
    TYPE_NONE = 0;
    STAGE_ID = 1;
    STAGE_PROGRESS = 2;
    STAGE_MAX_SCORE = 3;
    TIME_START = 1001;
    TIME_USE = 1002;
    AVG_FRAME_TIME = 1003;
    PLAYER_LEVEL = 1004;
    STAGE_SCORE = 1005;
    MONSTER_TOTAL_HP = 1006;
    MONSTER_TOTAL_LOSS_HP = 1007;
    MONSTER_HIT_MISS_NUM = 1008;
    MONSTER_HIT_NUM = 1009;
    NATURE_DAMAGE_BONUS_RATIO_MAX = 1010;
    STAR_RING_USE_TIME = 1011;
    AVATAR_ID_1 = 2001;
    AVATAR_LEVEL_1 = 2002;
    AVATAR_COMBAT_1 = 2003;
    ATTACK_MAX_1 = 2004;
    SP_MAX_1 = 2005;
    SP_BEGIN_1 = 2006;
    SP_END_1 = 2007;
    SP_GAIN_1 = 2008;
    SP_USE_1 = 2009;
    HP_MAX_1 = 2010;
    HP_BEGIN_1 = 2011;
    HP_END_1 = 2012;
    HP_GAIN_1 = 2013;
    HIT_COUNT_1 = 2014;
    HIT_DAMAGE_1 = 2015;
    HIT_NORMAL_DAMAGE_MAX_1 = 2016;
    HIT_CRITICAL_DAMAGE_MAX_1 = 2017;
    BEHIT_COUNT_1 = 2018;
    BEHIT_NORMAL_DAMAGE_MAX_1 = 2019;
    BEHIT_CRITICAL_DAMAGE_MAX_1 = 2020;
    COMBO_MAX_1 = 2021;
    AVATAR_TIME_USE_1 = 2022;
    WEAPON_LEVEL_1 = 2023;
    STIGMATA_LEVEL_MAX_1 = 2024;
    MP_TEAM_SKILL_TIMES_1 = 2025;
    MP_QTE_SKILL_TIMES_1 = 2026;
    MP_BE_RESCUED_TIMES_1 = 2027;
    MP_RESCUE_TIMES_1 = 2028;
    MP_AVG_RESCUE_TIME_1 = 2029;
    MP_CHAT_TIMES_1 = 2030;
    ULTIMATE_SKILL_TIMES_1 = 2031;
    ULTIMATE_SKILL_DURATION_1 = 2032;
    ATTACK_SP_GAIN_1 = 2033;
    WEAPON_SKILL_TIMES_1 = 2034;
    SWITCH_IN_SKILL_DAMAGE_MAX_1 = 2035;
    BRANCH_SKILL_DAMAGE_MAX_1 = 2036;
    CHARGE_SKILL_DAMAGE_MAX_1 = 2037;
    ULTIMATE_SKILL_DAMAGE_MAX_1 = 2038;
    ULTIMATE_SKILL_INTERVAL_TIME_MIN_1 = 2039;
    WEAPON_SKILL_INTERVAL_TIME_MIN_1 = 2040;
    HIT_INTERVAL_TIME_MIN_1 = 2041;
    SP_MIN_1 = 2042;
    HP_MIN_1 = 2043;
    STIGMATA_1_1 = 2044;
    STIGMATA_1_2 = 2045;
    STIGMATA_1_3 = 2046;
    WEAPON_ID_1 = 2047;
    DRESS_ID_1 = 2048;
    SERVER_AVATAR_ID_1 = 2049;
    SERVER_STIGMATA_1_1 = 2050;
    SERVER_STIGMATA_1_2 = 2051;
    SERVER_STIGMATA_1_3 = 2052;
    SERVER_WEAPON_ID_1 = 2053;
    SERVER_DRESS_ID_1 = 2054;
    AVATAR_ID_2 = 2101;
    AVATAR_LEVEL_2 = 2102;
    AVATAR_COMBAT_2 = 2103;
    ATTACK_MAX_2 = 2104;
    SP_MAX_2 = 2105;
    SP_BEGIN_2 = 2106;
    SP_END_2 = 2107;
    SP_GAIN_2 = 2108;
    SP_USE_2 = 2109;
    HP_MAX_2 = 2110;
    HP_BEGIN_2 = 2111;
    HP_END_2 = 2112;
    HP_GAIN_2 = 2113;
    HIT_COUNT_2 = 2114;
    HIT_DAMAGE_2 = 2115;
    HIT_NORMAL_DAMAGE_MAX_2 = 2116;
    HIT_CRITICAL_DAMAGE_MAX_2 = 2117;
    BEHIT_COUNT_2 = 2118;
    BEHIT_NORMAL_DAMAGE_MAX_2 = 2119;
    BEHIT_CRITICAL_DAMAGE_MAX_2 = 2120;
    COMBO_MAX_2 = 2121;
    AVATAR_TIME_USE_2 = 2122;
    WEAPON_LEVEL_2 = 2123;
    STIGMATA_LEVEL_MAX_2 = 2124;
    MP_TEAM_SKILL_TIMES_2 = 2125;
    MP_QTE_SKILL_TIMES_2 = 2126;
    MP_BE_RESCUED_TIMES_2 = 2127;
    MP_RESCUE_TIMES_2 = 2128;
    MP_AVG_RESCUE_TIME_2 = 2129;
    MP_CHAT_TIMES_2 = 2130;
    ULTIMATE_SKILL_TIMES_2 = 2131;
    ULTIMATE_SKILL_DURATION_2 = 2132;
    ATTACK_SP_GAIN_2 = 2133;
    WEAPON_SKILL_TIMES_2 = 2134;
    SWITCH_IN_SKILL_DAMAGE_MAX_2 = 2135;
    BRANCH_SKILL_DAMAGE_MAX_2 = 2136;
    CHARGE_SKILL_DAMAGE_MAX_2 = 2137;
    ULTIMATE_SKILL_DAMAGE_MAX_2 = 2138;
    ULTIMATE_SKILL_INTERVAL_TIME_MIN_2 = 2139;
    WEAPON_SKILL_INTERVAL_TIME_MIN_2 = 2140;
    HIT_INTERVAL_TIME_MIN_2 = 2141;
    SP_MIN_2 = 2142;
    HP_MIN_2 = 2143;
    STIGMATA_2_1 = 2144;
    STIGMATA_2_2 = 2145;
    STIGMATA_2_3 = 2146;
    WEAPON_ID_2 = 2147;
    DRESS_ID_2 = 2148;
    SERVER_AVATAR_ID_2 = 2149;
    SERVER_STIGMATA_2_1 = 2150;
    SERVER_STIGMATA_2_2 = 2151;
    SERVER_STIGMATA_2_3 = 2152;
    SERVER_WEAPON_ID_2 = 2153;
    SERVER_DRESS_ID_2 = 2154;
    AVATAR_ID_3 = 2201;
    AVATAR_LEVEL_3 = 2202;
    AVATAR_COMBAT_3 = 2203;
    ATTACK_MAX_3 = 2204;
    SP_MAX_3 = 2205;
    SP_BEGIN_3 = 2206;
    SP_END_3 = 2207;
    SP_GAIN_3 = 2208;
    SP_USE_3 = 2209;
    HP_MAX_3 = 2210;
    HP_BEGIN_3 = 2211;
    HP_END_3 = 2212;
    HP_GAIN_3 = 2213;
    HIT_COUNT_3 = 2214;
    HIT_DAMAGE_3 = 2215;
    HIT_NORMAL_DAMAGE_MAX_3 = 2216;
    HIT_CRITICAL_DAMAGE_MAX_3 = 2217;
    BEHIT_COUNT_3 = 2218;
    BEHIT_NORMAL_DAMAGE_MAX_3 = 2219;
    BEHIT_CRITICAL_DAMAGE_MAX_3 = 2220;
    COMBO_MAX_3 = 2221;
    AVATAR_TIME_USE_3 = 2222;
    WEAPON_LEVEL_3 = 2223;
    STIGMATA_LEVEL_MAX_3 = 2224;
    MP_TEAM_SKILL_TIMES_3 = 2225;
    MP_QTE_SKILL_TIMES_3 = 2226;
    MP_BE_RESCUED_TIMES_3 = 2227;
    MP_RESCUE_TIMES_3 = 2228;
    MP_AVG_RESCUE_TIME_3 = 2229;
    MP_CHAT_TIMES_3 = 2230;
    ULTIMATE_SKILL_TIMES_3 = 2231;
    ULTIMATE_SKILL_DURATION_3 = 2232;
    ATTACK_SP_GAIN_3 = 2233;
    WEAPON_SKILL_TIMES_3 = 2234;
    SWITCH_IN_SKILL_DAMAGE_MAX_3 = 2235;
    BRANCH_SKILL_DAMAGE_MAX_3 = 2236;
    CHARGE_SKILL_DAMAGE_MAX_3 = 2237;
    ULTIMATE_SKILL_DAMAGE_MAX_3 = 2238;
    ULTIMATE_SKILL_INTERVAL_TIME_MIN_3 = 2239;
    WEAPON_SKILL_INTERVAL_TIME_MIN_3 = 2240;
    HIT_INTERVAL_TIME_MIN_3 = 2241;
    SP_MIN_3 = 2242;
    HP_MIN_3 = 2243;
    STIGMATA_3_1 = 2244;
    STIGMATA_3_2 = 2245;
    STIGMATA_3_3 = 2246;
    WEAPON_ID_3 = 2247;
    DRESS_ID_3 = 2248;
    SERVER_AVATAR_ID_3 = 2249;
    SERVER_STIGMATA_3_1 = 2250;
    SERVER_STIGMATA_3_2 = 2251;
    SERVER_STIGMATA_3_3 = 2252;
    SERVER_WEAPON_ID_3 = 2253;
    SERVER_DRESS_ID_3 = 2254;
    ELF_ID = 2301;
    ELF_LEVEL = 2302;
    ELF_COMBAT = 2303;
    ELF_ATTACK = 2304;
    ELF_SP_MAX = 2305;
    ELF_ULTIMATE_SKILL_TIMES = 2306;
    ELF_SP_USE = 2307;
    ELF_HIT_CRITICAL_DAMAGE_MAX = 2308;
    ELF_HIT_NORMAL_DAMAGE_MAX = 2309;
    ELF_ULTIMATE_SKILL_INTERVAL_TIME_MIN = 2310;
    ELF_HIT_INTERVAL_TIME_MIN = 2311;
    SERVER_ELF_ID = 2312;
    ELF_ID_2 = 2401;
    ELF_LEVEL_2 = 2402;
    ELF_COMBAT_2 = 2403;
    ELF_ATTACK_2 = 2404;
    ELF_SP_MAX_2 = 2405;
    ELF_ULTIMATE_SKILL_TIMES_2 = 2406;
    ELF_SP_USE_2 = 2407;
    ELF_HIT_CRITICAL_DAMAGE_MAX_2 = 2408;
    ELF_HIT_NORMAL_DAMAGE_MAX_2 = 2409;
    ELF_ULTIMATE_SKILL_INTERVAL_TIME_MIN_2 = 2410;
    ELF_HIT_INTERVAL_TIME_MIN_2 = 2411;
    SERVER_ELF_ID_2 = 2412;
    ELF_ID_3 = 2501;
    ELF_LEVEL_3 = 2502;
    ELF_COMBAT_3 = 2503;
    ELF_ATTACK_3 = 2504;
    ELF_SP_MAX_3 = 2505;
    ELF_ULTIMATE_SKILL_TIMES_3 = 2506;
    ELF_SP_USE_3 = 2507;
    ELF_HIT_CRITICAL_DAMAGE_MAX_3 = 2508;
    ELF_HIT_NORMAL_DAMAGE_MAX_3 = 2509;
    ELF_ULTIMATE_SKILL_INTERVAL_TIME_MIN_3 = 2510;
    ELF_HIT_INTERVAL_TIME_MIN_3 = 2511;
    SERVER_ELF_ID_3 = 2512;
    IS_MP_VOICE_USED = 3001;
    MP_VOICE_USE_TIME = 3002;
    SEALED_EVENT_ID = 4001;
  }

  StageCheatData.Type type = 1;
  float value = 2;
}

message StageChallengeData {
  uint32 challenge_index = 1;
  RewardData reward = 2;
}

message MpStageMvpReward {
  uint32 extra_coin = 1;
  uint32 extra_avatar_exp = 2;
  uint32 extra_mp_exp = 3;
}

message StageSpecialChallengeData {
  uint32 challenge_index = 1;
  DropItem drop_item = 2;
}

message AccountBuffReward {
  uint32 scoin_reward = 1;
  uint32 avatar_exp_reward = 2;
  uint32 player_exp_reward = 3;
}

message AvatarTeam {
  uint32 stage_type = 1;
  repeated uint32 avatar_id_list = 2;
}

message CustomAvatarTeam {
  uint32 team_id = 1;
  string name = 2;
  repeated uint32 avatar_id_list = 3;
  repeated uint32 elf_id_list = 4;
  uint32 astra_mate_id = 5;
  bool is_using_astra_mate = 6;
}

message StageDropDisplayInfo {
  uint32 stage_id = 1;
  repeated uint32 drop_item_id_list = 2;
  repeated uint32 first_drop_item_id_list = 3;
  bool double_drop = 4;
  repeated uint32 bonus_drop_item_id_list = 5;
  repeated string battle_buff_list = 6;
  repeated uint32 bonus_equip_need_list = 7;
  uint32 battle_display_id = 8;
  repeated string battle_attr_list = 9;
  repeated RewardItemData first_drop_item_data_list = 10;
}

message SettingDict {
  message DictItem {
    string key = 1;
    SettingDict.ValueType type = 2;
    string value = 3;
    repeated string value_list = 4;
  }

  enum ValueType {
    VALUE_TYPE_NONE = 0;
    INT = 1;
    FLOAT = 2;
    STRING = 3;
    INT_LIST = 4;
  }

  repeated SettingDict.DictItem dict_item_list = 1;
}

message WeaponDetailData {
  uint32 id = 1;
  uint32 level = 2;
  uint32 unique_id = 3;
  uint32 sub_weapon_id = 4;
  uint32 homology_level = 5;
}

message StigmataDetailData {
  uint32 id = 1;
  uint32 level = 2;
  repeated StigmataRune rune_list = 3;
  uint32 unique_id = 7;
}

message AvatarSubSkillDetailData {
  uint32 sub_skill_id = 1;
  uint32 level = 2;
  bool is_mask = 3;
}

message AvatarSkillDetailData {
  uint32 skill_id = 1;
  repeated AvatarSubSkillDetailData sub_skill_list = 2;
}

message AvatarArtifactDetail {
  uint32 artifact_id = 1;
  uint32 artifact_level = 2;
  bool is_artifact_switch_on = 3;
}

message AvatarDetailData {
  uint32 avatar_id = 1;
  uint32 avatar_star = 2;
  uint32 avatar_level = 3;
  WeaponDetailData weapon = 4;
  StigmataDetailData stigmata_1 = 5;
  StigmataDetailData stigmata_2 = 6;
  StigmataDetailData stigmata_3 = 7;
  repeated AvatarSkillDetailData skill_list = 8;
  uint32 dress_id = 9;
  uint32 avatar_combat = 10;
  AvatarArtifactDetail avatar_artifact = 12;
  uint32 avatar_sub_star = 13;
}

message ElfTalentDetailData {
  uint32 elf_talent_id = 1;
  uint32 talent_level = 2;
}

message ElfSkillDetailData {
  uint32 elf_skill_id = 1;
  uint32 skill_level = 2;
}

message ElfDetailData {
  uint32 elf_id = 1;
  uint32 level = 2;
  uint32 star = 3;
  repeated ElfTalentDetailData equip_talent_list = 4;
  repeated ElfSkillDetailData skill_list = 5;
}

message MasterDetailData {
  uint32 uid = 1;
  string nickname = 2;
  uint32 level = 3;
  MasterPupilCard card = 4;
}

message PupilDetailData {
  uint32 uid = 1;
  string nickname = 2;
  MasterPupilStatus status = 3;
}

message MasterPupilDetailData {
  MasterPupilData master = 1;
  repeated MasterPupilData pupil_list = 2;
}

message AdventureAvatar {
  message Skill {
    uint32 skill_id = 1;
    uint32 skill_level = 2;
  }

  uint32 avatar_id = 1;
  uint32 star = 2;
  repeated AdventureAvatar.Skill skill_list = 3;
}

message PlayerAdventureData {
  uint32 adventure_group_level = 1;
  repeated AdventureAvatar adventure_avatar_list = 2;
}

message PlayerDetailData {
  uint32 uid = 1;
  string nickname = 2;
  uint32 level = 3;
  AvatarDetailData leader_avatar = 4;
  string self_desc = 5;
  uint32 armada_id = 6;
  string armada_name = 7;
  uint32 mp_level = 8;
  uint32 on_medal_id = 9;
  bool is_newbie = 10;
  bool is_goback = 11;
  uint32 mp_like_num = 12;
  repeated GrandKey grand_key_list = 13;
  ElfDetailData leader_elf = 14;
  uint32 custom_head_id = 15;
  uint32 frame_id = 16;
  PlayerAdventureData adventure = 17;
  repeated AvatarDetailData backup_avatar_list = 18;
  uint32 on_medal = 19;
  bool is_allow_visit = 30;
  uint32 visit_avatar = 31;
  uint32 be_liked_num = 32;
  uint32 show_house = 33;
  uint32 comfort_value = 34;
  uint32 house_level = 35;
  string house_name = 36;
  uint32 total_wiki_score = 37;
  uint32 total_achievement_num_get = 38;
  uint32 total_achievement_num = 39;
  uint32 chat_forbid_finish_time = 40;
  uint32 master_uid = 41;
  MasterPupilType master_pupil_tag = 42;
  uint32 season_id = 43;
  uint32 season_group_id = 44;
  uint32 season_level = 45;
  bool is_logoff = 46;
}

message PlayerFriendBriefData {
  uint32 uid = 1;
  string nickname = 2;
  uint32 level = 3;
  uint32 avatar_id = 4;
  uint32 avatar_star = 5;
  uint32 avatar_combat = 6;
  uint32 avatar_level = 7;
  repeated AvatarSubSkillDetailData main_sub_skill_list = 8;
  uint32 last_login_time = 10;
  uint32 dress_id = 11;
  uint32 armada_id = 12;
  string armada_name = 13;
  uint32 bond = 14;
  uint32 on_medal_id = 15;
  uint32 on_medal = 16;
  uint32 frame_id = 17;
  uint32 mp_level = 18;
  uint32 custom_head_id = 19;
  bool is_allow_visit = 30;
  uint32 visit_avatar = 31;
  uint32 be_liked_num = 32;
  uint32 show_house = 33;
  uint32 comfort_value = 34;
  uint32 house_level = 35;
  string house_name = 36;
  bool is_goback = 37;
  uint32 avatar_sub_star = 38;
  uint32 last_logout_time = 39;
  uint32 online_status = 40;
  uint32 season_id = 41;
  uint32 season_group_id = 42;
  uint32 season_level = 43;
  bool is_logoff = 44;
}

message WeaponBriefInfo {
  uint32 weapon_id = 1;
  uint32 weapon_level = 2;
  uint32 weapon_homology_level = 3;
}

message StigmataBriefInfo {
  uint32 stigmata_id = 1;
  uint32 stigmata_level = 2;
}

message AvatarBriefInfo {
  uint32 avatar_id = 1;
  uint32 avatar_level = 2;
  uint32 avatar_star = 3;
  uint32 weapon_id = 4;
  repeated uint32 stigmata_id_list = 5;
  uint32 sub_weapon_id = 6;
  uint32 dress_id = 7;
  bool is_artifact_switch_on = 8;
  uint32 weapon_homology_level = 9;
  WeaponBriefInfo weapon_info = 10;
  repeated StigmataBriefInfo stigmata_info_list = 11;
  bool is_new_equip_info = 12;
  uint32 avatar_sub_star = 13;
}

message ElfBriefInfo {
  message Skill {
    uint32 skill_id = 1;
    uint32 skill_level = 2;
  }

  uint32 elf_id = 1;
  uint32 elf_level = 2;
  uint32 elf_star = 3;
  repeated uint32 equip_talent_id_list = 4;
  repeated ElfBriefInfo.Skill skill_list = 5;
}

message LineupBriefInfo {
  repeated AvatarBriefInfo avatar_info_list = 1;
  repeated ElfBriefInfo elf_info_list = 2;
}

message MailItem {
  uint32 item_id = 1;
  uint32 level = 2;
  uint32 num = 3;
  uint32 split_fragment_num = 4;
}

message MailAttachment {
  repeated MailItem item_list = 1;
  uint32 hcoin = 2;
  uint32 scoin = 3;
  uint32 stamina = 4;
  uint32 exp = 5;
  uint32 exp_convert_scoin = 6;
  uint32 mcoin = 7;
}

message Mail {
  uint32 id = 1;
  MailType type = 2;
  string title = 3;
  string content = 4;
  string sender = 5;
  uint32 time = 6;
  MailAttachment attachment = 7;
  bool is_attachment_got = 8;
  uint32 expire_time = 9;
  repeated string content_param_list = 10;
}

message MailKey {
  uint32 id = 1;
  MailType type = 2;
}

message ChatMsgWeapon {
  uint32 unique_id = 1;
  WeaponDetailData weapon = 2;
}

message ChatMsgStigmata {
  uint32 unique_id = 1;
  StigmataDetailData stigmata = 2;
}

message ChatMsgAvatar {
  uint32 id = 1;
  AvatarDetailData avatar = 2;
}

message ChatMsgLobby {
  string msg = 1;
  uint32 level = 2;
}

message ChatMsgKeyValue {
  string key = 1;
  string value = 2;
}

message ChatMsgInternal {
  repeated ChatMsgKeyValue key_value_list = 1;
}

message ChatSendRedEnvelope {
  uint32 item_id = 1;
  string msg = 2;
  uint32 red_envelope_id = 3;
}

message ChatTakeRedEnvelope {
  uint32 sender_uid = 1;
  string sender_nickname = 2;
  uint32 item_id = 3;
  uint32 take_scoin = 4;
  repeated DropItem drop_item_list = 5;
  string msg = 6;
  Material take_material = 7;
}

message ChatMsgElf {
  uint32 id = 1;
  ElfDetailData elf = 2;
}

message ChatRedEnvelopeTakeOver {
  uint32 sender_uid = 1;
  string sender_nickname = 2;
  uint32 item_id = 3;
  string msg = 4;
  uint32 red_envelope_id = 5;
}

message ChatMsgWorldBeast {
  uint32 chatworld_id = 1;
  uint32 scene_id = 2;
  uint64 beast_unique_id_u64 = 3;
  uint32 stage_id = 4;
}

message ChatMsgMonsterCardPvp {
  uint32 activity_id = 1;
  uint32 stage_id = 2;
  repeated MonsterPvpCardBriefData card_data_list = 3;
  repeated MonsterPvpCardBriefData support_card_data_list = 4;
  uint32 site_id = 5;
  uint32 level = 6;
  string stage_transaction_str = 7;
}

message ChatMsgItem {
  enum ChatMsgType {
    CHAT_MSG_TYPE_NONE = 0;
    STR_MSG = 1;
    WEAPON_MSG = 2;
    STIGMATA_MSG = 3;
    AVATAR_MSG = 4;
    LOBBY_MSG = 5;
    INTERNAL_MSG = 6;
    SEND_RED_ENVELOPE_MSG = 7;
    TAKE_RED_ENVELOPE_MSG = 8;
    EMOJI = 9;
    ELF_MSG = 10;
    RED_ENVELOPE_TAKE_OVER_MSG = 11;
    CHATWORLD_BEAST_MSG = 12;
    MONSTER_CARD_PVP_MSG = 13;
  }

  ChatMsgItem.ChatMsgType type = 1;
  string msg_str = 2;
  ChatMsgWeapon weapon = 3;
  ChatMsgStigmata stigmata = 4;
  ChatMsgAvatar avatar = 5;
  ChatMsgLobby lobby = 6;
  ChatMsgInternal internal = 7;
  ChatSendRedEnvelope send_red_envelope = 8;
  ChatTakeRedEnvelope take_red_envelope = 9;
  uint32 emoji_id = 10;
  ChatMsgElf elf = 11;
  ChatRedEnvelopeTakeOver red_envelope_take_over = 12;
  ChatMsgWorldBeast chatworld_beast = 13;
  ChatMsgMonsterCardPvp monster_card_pvp = 14;
}

message ChatMsgContent {
  repeated ChatMsgItem items = 1;
}

message ChatMsgSensitiveCheckResult {
  int32 shield_type = 1;
  int32 number_check = 2;
  string rewrite_text = 3;
}

message ChatMsg {
  message SystemChatMsg {
    SystemChatMsgType type = 1;
    uint32 item_id = 2;
    uint32 item_level = 3;
    uint32 item_num = 4;
    GachaType gacha_type = 5;
  }

  enum MsgChannel {
    DEFAULT = 0;
    WORLD = 1;
    FRIEND = 2;
    ARMADA = 3;
    PLAYER_CARD = 4;
    LOBBY = 5;
    MASTER_PUPIL = 6;
    COMMON_CHATWORLD = 7;
    GROUP = 8;
    TEAM = 9;
    CAMPAIGN = 10;
    ROOM = 11;
    WORLD_ACTIVITY = 12;
    PRIVATE = 13;
    BATTLE = 14;
  }

  uint32 uid = 1;
  string nickname = 2;
  uint32 time = 3;
  string msg = 4;
  uint32 avatar_id = 5;
  uint32 dress_id = 6;
  ChatMsgContent content = 7;
  ChatMsg.MsgChannel channel = 8;
  uint32 frame_id = 9;
  bool is_sensitive = 10;
  bool is_goback = 11;
  uint32 channel_id = 12;
  uint32 custom_head_id = 13;
  MasterPupilType master_pupil_tag = 14;
  ChatMsg.SystemChatMsg system_msg = 15;
  uint32 target_uid = 16;
  uint32 season_id = 17;
  uint32 season_group_id = 18;
  uint32 season_level = 19;
  uint32 mode = 20;
  uint32 mode_para = 21;
  bool is_armada_leader = 22;
  bool is_team_leader = 23;
  ChatMsgSensitiveCheckResult check_result = 24;
  bool is_lobby_invite = 25;
}

message AssistantFrozen {
  uint32 uid = 1;
  uint32 left_frozen_time = 2;
  uint32 left_assistant_times = 3;
}

message AvatarFragment {
  uint32 fragment_id = 1;
  uint32 num = 2;
}

message AvatarCostPlusConfig {
  uint32 star = 1;
  uint32 cost_plus = 2;
}

message BulletinActivityConfig {
  uint32 activity_id = 1;
  uint32 activity_type = 2;
  uint32 begin_time = 3;
  uint32 end_time = 4;
  uint32 bulletin_id = 5;
  repeated uint32 mission_ids = 6;
  repeated uint32 type_param_list = 7;
  string type_param_str = 8;
  uint32 min_player_level = 9;
  uint32 max_player_level = 10;
  repeated uint32 item_list = 11;
  string title_name = 12;
  string title_image = 13;
  string image_path = 14;
  string link_button = 15;
  string description = 16;
  uint32 weight = 17;
  string background_path = 18;
  string text_image_path = 19;
  repeated uint32 currency_list = 20;
  string unlock_param_str = 21;
  string link_button_2 = 22;
}

message ChallengeMissionStep {
  enum StepStatus {
    UNLOCK = 0;
    DOING = 1;
    REWARDING = 2;
    FINISH = 3;
  }

  uint32 step_id = 1;
  ChallengeMissionStep.StepStatus status = 2;
  bool has_take_bonus = 3;
}

message ChallengeMissionData {
  bool is_unlock = 1;
  repeated ChallengeMissionStep step_list = 2;
}

message ActivitySeries {
  uint32 series_id = 1;
  uint32 available_sweep_num = 2;
}

message StageInnerAvatarData {
  uint32 avatar_id = 1;
  uint32 avatar_level = 2;
  uint32 avatar_star = 3;
  uint32 total_output = 4;
  uint32 no_restrict_output = 5;
  uint32 do_restrict_output = 6;
  uint32 be_restrict_output = 7;
  uint32 total_input = 8;
  float battle_time = 9;
  float total_time = 10;
  uint32 enter_times = 11;
  uint32 leave_times = 12;
  uint32 do_break_times = 13;
  uint32 be_break_times = 14;
  uint32 do_hit_times = 15;
  uint32 be_hit_times = 16;
  uint32 exskill_times = 17;
  uint32 evade_times = 18;
  uint32 evade_effect_times = 19;
  uint32 attack_sp_recover = 20;
  uint32 total_sp_recover = 21;
  uint32 dps = 22;
  uint32 special_attack_times = 23;
  uint32 evade_success_times = 24;
  uint32 weapon_active_skill = 25;
  uint32 stage_id = 26;
  uint32 normal_output = 27;
  uint32 ultra_output = 28;
  uint32 switchin_output = 29;
  uint32 branch_output = 30;
  uint32 charge_output = 31;
  uint32 hp_cost = 32;
  uint32 hp_recover = 33;
  uint32 sp_cost = 34;
  uint32 shield_damage = 35;
  uint32 avatar_sub_star = 36;
  bool is_player_avatar = 37;
  bool is_trial_avatar = 38;
  uint32 charge_attack_times = 39;
  uint32 branch_attack_times = 40;
  uint32 max_damage_5 = 41;
  uint32 max_damage_15 = 42;
}

message StageInnerMonsterData {
  string monster_name = 1;
  string monster_type = 2;
  uint32 monster_level = 3;
  uint32 monster_num = 4;
  uint32 avg_output = 5;
  uint32 avg_live_time = 6;
  uint32 dps = 7;
  uint32 hit_avatar_times = 8;
  uint32 break_avatar_times = 9;
}

message StageInnerElfData {
  uint32 elf_id = 1;
  uint32 elf_star = 2;
  uint32 elf_level = 3;
  uint32 attack_times = 4;
  uint32 hit_times = 5;
  uint32 total_output = 6;
  uint32 normal_output = 7;
  uint32 ultra_output = 8;
  uint32 total_sp_recover = 9;
  uint32 skill_use_times = 10;
}

message Bulletin {
  uint32 id = 1;
  uint32 type = 2;
  uint32 weight = 3;
  string title_button = 4;
  string title = 5;
  string banner_path = 6;
  string event_date_str = 7;
  string content = 8;
  uint32 mark = 9;
  uint32 begin_time = 10;
  uint32 end_time = 11;
  uint32 update_time = 12;
  uint32 show_config_id = 13;
  uint32 client_req_type = 14;
}

message EndlessAvatar {
  uint32 avatar_id = 1;
  uint32 star = 2;
  uint32 level = 3;
  uint32 weapon_id = 4;
  uint32 stigmata_id_1 = 5;
  uint32 stigmata_id_2 = 6;
  uint32 stigmata_id_3 = 7;
  uint32 quantum_weapon_id = 8;
}

message OpenworldEndlessPlayerInvasionData {
  uint32 id = 1;
  uint32 invader_id = 2;
  uint32 active_time = 3;
  repeated uint32 buff_list = 4;
  uint32 sub_score = 5;
  uint32 battle_id = 6;
  uint32 invasion_id = 7;
}

message OpenworldEndlessPlayer {
  uint32 uid = 1;
  uint32 score = 2;
  uint32 score_time = 3;
  repeated OpenworldEndlessPlayerInvasionData invasion_list = 4;
  LineupBriefInfo last_lineup_info = 5;
  repeated OpenworldEndlessItem effect_item_list = 6;
  uint32 max_score = 7;
  uint32 reward_progress = 8;
  uint32 group_level = 9;
  uint32 unfinished_monster_max_progress = 10;
  LineupBriefInfo max_score_lineup_info = 11;
  uint32 greedy_max_finish_floor = 12;
}

message OpenworldEndlessItem {
  uint32 item_id = 1;
  uint32 num = 2;
}

message CabinTech {
  int32 pos_x = 1;
  int32 pos_y = 2;
}

message Cabin {
  uint32 type = 1;
  uint32 level = 2;
  uint32 extend_grade = 3;
  uint32 level_up_end_time = 4;
  repeated CabinTech tech_list = 5;
}

message IslandVenture {
  uint32 id = 1;
  uint32 end_time = 2;
  repeated uint32 avatar_id = 3;
}

message CabinTechAddAttr {
  AvatarAttrType attr_type = 1;
  float add_ratio = 2;
}

message StigmataRune {
  uint32 rune_id = 1;
  uint32 strength_percent = 2;
}

message StigmataRuneGroup {
  uint32 unique_id = 1;
  repeated StigmataRune rune_list = 2;
}

message ExtraStoryAct {
  uint32 act_id = 1;
  uint32 begin_time = 2;
  uint32 end_time = 3;
}

message ExtraStoryArea {
  uint32 area_id = 1;
  repeated ExtraStoryAct act_list = 2;
  uint32 begin_time = 3;
  uint32 end_time = 4;
}

message ExtraStoryChapter {
  uint32 chapter_id = 1;
  uint32 min_player_level = 2;
  repeated ExtraStoryArea area_list = 3;
  uint32 begin_time = 4;
  uint32 end_time = 5;
  bool is_need_key = 6;
}

message ExtraStoryAchieve {
  uint32 achieve_id = 1;
  bool is_take = 2;
}

message IslandAvatarPos {
  uint32 avatar_class = 1;
  uint32 pos_type = 2;
  repeated uint32 event_id_list = 3;
}

message FriendCabin {
  uint32 type = 1;
  uint32 level = 2;
  uint32 extend_grade = 3;
}

message IslandVisitRecord {
  IslandVisitRecordType record_type = 1;
  uint32 visit_time = 2;
  uint32 visit_uid = 3;
  uint32 visit_event_id = 4;
  repeated RewardData reward_list = 5;
}

message MpTeamMemberInfo {
  PlayerDetailData detail = 1;
  PlayerCardData card = 3;
}

message MpTeamMember {
  uint32 index = 1;
  uint32 uid = 2;
  uint32 mp_exp = 3;
  uint32 stamina = 4;
  repeated MpSkill skill_list = 5;
  uint32 head_avatar_id = 6;
  uint32 dress_id = 7;
  uint32 punish_end_time = 8;
  uint32 voice_id = 9;
  MpTeamMemberInfo member_info = 11;
  LobbyMemberStatus status = 12;
  LobbyClientStatus client_status = 13;
  uint32 avatar_trial_id = 14;
  bool is_wild = 15;
  string region_name = 18;
  OpenworldBossMp openworld_boss_info = 19;
  uint32 frame_id = 20;
  uint32 enter_type = 21;
  uint32 custom_head_id = 22;
  uint32 newbie_id = 23;
  uint32 data_version = 24;
  uint32 season_id = 25;
  uint32 season_group_id = 26;
  uint32 season_level = 27;
  uint32 extra_skill_id = 28;
}

message MpTeamData {
  uint32 team_id = 1;
  uint32 leader_uid = 2;
  MpTeamStatus status = 3;
  LobbyStatus lobby_status = 4;
  repeated MpTeamMember member_list = 5;
  uint32 min_level = 6;
  LobbyEnterType lobby_enter_type = 7;
  uint32 stage_id = 8;
  string team_name = 9;
  uint32 max_level = 11;
}

message MpBadge {
  uint64 unique_id_u64 = 1;
  uint32 badge_id = 2;
}

message MpBadgeData {
  uint64 equiped_badge_uid_u64 = 1;
  repeated MpBadge badge_list = 2;
}

message MpSkillPoint {
  MpSkillType type = 1;
  uint32 value = 2;
}

message MpSkill {
  uint32 skill_id = 1;
  uint32 level = 2;
}

message MpStageSettle {
  uint32 uid = 1;
  uint32 score = 2;
  uint32 damage = 3;
  uint32 mvp_score = 4;
}

message ConsignedOrder {
  uint32 id = 1;
  uint32 consigner_uid = 2;
  uint32 reward_id = 3;
  uint32 progress = 4;
  uint32 unique_id = 5;
  uint32 order_level = 6;
  repeated RewardData reward_list = 7;
  repeated DropItem drop_item_list = 8;
  uint32 order_credit = 9;
}

message BuffEffect {
  uint32 effect_id = 1;
  uint32 end_time = 2;
  uint32 max_during = 3;
  uint32 total_contri_num = 4;
}

message GrandKeySkill {
  uint32 key_id = 1;
  uint32 skill_id = 2;
  uint32 last_time = 3;
}

message GrandKey {
  uint32 id = 1;
  uint32 end_time = 2;
  uint32 unlock_level = 3;
  uint32 scoin_num = 4;
  uint32 level = 5;
  uint32 breach_level = 6;
  uint32 activate_level = 7;
  GrandKeySkill skill = 8;
  repeated uint32 unlock_skill_list = 9;
}

message Medal {
  uint32 id = 1;
  uint32 end_time = 2;
  int32 extra_param = 3;
  bool is_favorite = 4;
}

message CustomHead {
  uint32 id = 1;
  uint32 end_time = 2;
}

message PhonePendant {
  uint32 id = 1;
  uint32 end_time = 2;
}

message StageActDifficultyInfo {
  uint32 act_id = 1;
  uint32 difficulty = 2;
  repeated uint32 has_take_challenge_num_index = 3;
}

message GachaTotalProb {
  string name = 1;
  string prob = 2;
  uint32 order_value = 3;
}

message GachaDetailProb {
  string name = 1;
  string star = 2;
  string content = 3;
  string prob = 4;
  bool is_up = 5;
  uint32 order_value = 6;
}

message MpMatchInfo {
  uint32 stage_id = 1;
  uint32 start_match_time = 2;
}

message PlayerCardSlot {
  uint32 index = 1;
  uint32 target_id = 2;
}

message PlayerCardAvatarData {
  uint32 index = 1;
  AvatarDetailData avatar = 2;
}

message PlayerCardMedalData {
  uint32 index = 1;
  uint32 medal_id = 2;
  int32 extra_param = 3;
}

message PlayerCardElfData {
  uint32 index = 1;
  ElfDetailData elf = 2;
}

message PlayerCardMsg {
  uint32 index = 1;
  ChatMsg msg = 2;
}

message PlayerCardMsgData {
  uint32 msg_index = 1;
  uint32 msg_config = 2;
  repeated PlayerCardMsg msg_list = 3;
}

message PlayerCardData {
  uint32 uid = 1;
  repeated PlayerCardAvatarData avatar_list = 2;
  repeated PlayerCardMedalData medal_list = 3;
  PlayerCardMsgData msg_data = 4;
  uint32 island_like_num = 5;
  uint32 on_phone_pendant_id = 6;
  repeated PlayerCardElfData elf_list = 7;
}

message ChallengeModeAvatar {
  uint32 avatar_id = 1;
  uint32 hp_percent = 2;
  uint32 sp_percent = 3;
  uint32 last_recover_time = 4;
  bool is_die = 5;
}

message ChallengeModeArea {
  uint32 area_id = 1;
  repeated ChallengeModeAvatar avatar_list = 2;
  repeated uint32 weapon_uid_list = 3;
  repeated uint32 stigmata_uid_list = 4;
}

message MpRecordMember {
  uint32 uid = 1;
  uint32 avatar_id = 2;
  uint32 dress_id = 3;
  bool is_mvp = 4;
  bool is_leader = 5;
  string nick_name = 6;
  uint32 avatar_level = 7;
  uint32 avatar_star_level = 8;
  string region_name = 9;
}

message MpStageRecord {
  uint32 stage_id = 1;
  uint32 begin_time = 2;
  uint32 duration = 3;
  repeated MpRecordMember member_list = 4;
}

message StageFightInfo {
  uint32 damage = 1;
  uint32 elf_damage = 2;
  uint32 score = 3;
  uint32 charge_num = 4;
}

message MpStageDamageInfo {
  uint32 hit_damage_1 = 1;
  uint32 hit_damage_2 = 2;
  uint32 hit_damage_3 = 3;
}

message GodWarStatus {
  uint32 teleport_id = 1;
  bool is_abandon = 3;
  uint32 star_ring_energy = 4;
}

message ScDLCStatus {
  uint32 sc_dlc_fever_score = 1;
  uint32 sc_dlc_climax_score = 2;
}

message OwChapterStatus {
  repeated uint32 antigravity_coin_index_list = 1;
}

message ChapterArkStatus {
  repeated uint32 chosen_branch_site_list = 1;
  bool is_abandon = 2;
}

message StageEndReqBody {
  uint32 stage_id = 1;
  StageEndStatus end_status = 2;
  bool is_mvp = 3;
  uint32 avatar_exp_reward = 4;
  uint32 scoin_reward = 5;
  repeated uint32 challenge_index_list = 6;
  repeated DropItem drop_item_list = 7;
  repeated StageCheatData cheat_data_list = 8;
  uint32 stage_pass_time = 10;
  uint32 max_combo_num = 11;
  uint32 score = 12;
  uint32 client_average_rtt = 13;
  uint32 client_max_rtt = 14;
  uint32 be_hit_times = 15;
  uint32 team_id = 16;
  uint32 mvp_score = 17;
  repeated ChallengeModeAvatar avatar_list = 18;
  uint32 evade_times = 19;
  uint32 evade_success_times = 20;
  uint32 boss_damage = 21;
  uint32 battle_score = 23;
  uint32 rank = 24;
  MpStageRecord mp_stage_record = 25;
  uint32 dungeons_evaluation = 26;
  StageFightInfo fight_info = 27;
  MpStageDamageInfo mp_stage_damage_info = 28;
  bytes security_cmd_reply = 29;
  repeated uint32 buff_id_list = 30;
  uint32 stage_end_floor = 31;
  GodWarStatus god_war_status = 32;
  ScDLCStatus sc_dlc_status = 33;
  OwChapterStatus ow_chapter_status = 34;
  repeated GenericItemNum selected_item_list = 35;
  ChapterArkStatus chapter_ark_status = 36;
  uint32 activity_id = 37;
  repeated uint32 monster_card_list = 38;
}

message AvatarEquipBuff {
  uint32 avatar_id = 1;
  string buff_name = 2;
  uint32 buff_num = 3;
}

message UserRankWeeklyReportEndless {
  uint32 final_boss_id = 1;
  EndlessRewardType reward_type = 3;
  uint32 battle_config_id = 4;
}

message UserRankWeeklyReportExBoss {
  repeated FinishedExBossInfo finished_boss_info_list = 1;
  uint32 rank_percent = 2;
}

message UserRankWeeklyReportUltraEndless {
  uint32 group_level = 1;
  uint32 cup_num_before = 2;
  uint32 cup_num_after_schedule_settle = 3;
  uint32 battle_config_id = 4;
}

message UserRankSlgBattle {
  uint32 country_id = 1;
}

message RanchMonsterBriefInfo {
  uint32 monster_id = 1;
  repeated uint32 skill_id_list = 2;
  uint32 monster_level = 3;
}

message MonsterCardCardBriefData {
  uint32 unique_id = 1;
  uint32 star = 2;
  uint32 level = 3;
  repeated uint32 talent_list = 4;
}

message MonsterCardActivityRankInfo {
  repeated MonsterCardCardBriefData team_brief_data_list = 1;
  uint32 collection_level = 2;
  uint32 floor = 3;
}

message ThemeTowerBuffBriefInfo {
  uint32 buff_id = 1;
  uint32 buff_level = 2;
}

message DevilAutoChessActivitySpecialRankInfo {
  uint32 wave_num = 1;
  uint32 round_num = 2;
  uint32 card_num = 3;
}

message FutariBattleActivityBriefInfo {
  uint32 support_avatar_id = 1;
}

message UserRankData {
  uint32 uid = 1;
  uint32 score = 2;
  uint32 rank = 3;
  string nick_name = 4;
  uint32 armada_id = 5;
  string armada_name = 6;
  uint32 avatar_id = 7;
  uint32 dress_id = 8;
  uint32 frame_id = 9;
  string house_name = 10;
  uint32 custom_head_id = 11;
  bool is_logoff = 12;
  repeated AvatarBriefInfo avatar_info_list = 31;
  repeated ElfBriefInfo elf_info_list = 32;
  string dlc_name = 33;
  UserRankWeeklyReportEndless weekly_report_endless_info = 34;
  UserRankWeeklyReportExBoss weekly_report_ex_boss_info = 35;
  uint32 ultra_endless_group_level = 36;
  UserRankWeeklyReportUltraEndless weekly_report_ultra_endless_info = 37;
  UserRankSlgBattle slg_battle_info = 39;
  repeated RanchMonsterBriefInfo monster_info_list = 40;
  MonsterCardActivityRankInfo monster_card_rank_info = 41;
  uint32 kingdom_id = 42;
  repeated ThemeTowerBuffBriefInfo theme_tower_buff_info_list = 43;
  DevilAutoChessActivitySpecialRankInfo devil_auto_chess_rank_info = 44;
  FutariBattleActivityBriefInfo futari_battle_activity_brief_info = 45;
  MonsterCardPvpPlayerBriefData monster_card_pvp_player_brief_data = 46;
}

message RankShowData {
  uint32 my_rank_type = 1;
  uint32 my_rank = 2;
  repeated UserRankData rank_list = 3;
  uint32 my_score = 4;
  bool is_feature_closed = 5;
}

message MasterPupilRetcode {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    PUPIL_LEVEL_LIMIT = 2;
    MASTER_LEVEL_LIMIT = 3;
    APPLY_NUM_LIMIT = 6;
    TARGET_APPLY_NUM_LIMIT = 7;
    INVALID_UID = 8;
    IS_EVALED = 9;
    EXAM_MISSION_UNFINISH = 10;
    FAME_LEVEL_LIMIT = 12;
    FAME_LEVEL_REWARDED = 13;
    CONTENT_STR_INVALID = 14;
    MASTER_PUPIL_TYPE_ERROR = 16;
    APPLY_REPEATE = 17;
    HAS_RELATION = 18;
    NO_RELATION = 19;
    RELATION_CD_LIMIT = 21;
    HAS_STEP_UNFINISH = 22;
    NO_STEP_DOING = 23;
    DAILY_REFRESH_TIMES_LIMIT = 24;
    SAME_DAY_TIME = 25;
    RECOMMEND_CD = 26;
    INVALID_STAR = 27;
    NOT_OPEN = 28;
    NOT_ALLOW_CROSS_REGION_MASTER_PUPIL = 29;
    FEATURE_LIMIT = 30;
    SELF_PUPIL_NUM_LIMIT = 101;
    SELF_HAS_MASTER = 102;
    SELF_STEP_ERROR = 103;
    SELF_DISMISS_TIME_LIMIT = 104;
    SELF_IS_GRADUATED = 105;
    SELF_MONTH_PUPIL_NUM_LIMIT = 106;
    SELF_IS_MASTER = 107;
    SELF_FRIEND_FULL = 108;
    TARGET_PUPIL_NUM_LIMIT = 201;
    TARGET_HAS_MASTER = 202;
    TARGET_STEP_ERROR = 203;
    TARGET_DISMISS_TIME_LIMIT = 204;
    TARGET_IS_GRADUATED = 205;
    TARGET_MONTH_PUPIL_NUM_LIMIT = 206;
    TARGET_IS_MASTER = 207;
    DECLARATION_IN_CD = 208;
    DECLARATION_IN_AUDIT = 209;
    FEATURE_CLOSED = 210;
    TARGET_RECALLED = 211;
    TARGET_FRIEND_FULL = 212;
  }

}

message MasterPupilCard {
  MasterPupilType type = 1;
  PlayerGenderType gender = 2;
  PlayerAreaType area = 3;
  PlayerInterestType interest = 4;
  string declaration = 5;
  uint32 uid = 6;
  bool is_recommend = 7;
  uint32 score = 8;
}

message MasterPupilEventData {
  message CompanyMission {
    uint32 mission_id = 1;
    uint32 time = 2;
  }

  uint32 uid = 1;
  string nickname = 2;
  MasterPupilMission mission = 3;
  MasterPupilApplyMsg apply = 4;
  MasterPupilDealMsg deal = 5;
  MasterPupilEvalMsg eval = 6;
  repeated MasterPupilEventData.CompanyMission company_mission_list = 7;
}

message MasterPupilApplyMsg {
  uint32 uid = 1;
  MasterPupilType type = 2;
  MasterPupilCard card = 3;
  uint32 level = 4;
  string nickname = 5;
  uint32 teacher_rank = 6;
  uint32 last_online_time = 7;
  uint32 avatar_id = 8;
  uint32 dress_id = 9;
  uint32 score = 10;
  uint32 frame_id = 11;
  uint32 custom_head_id = 12;
  uint32 last_logout_time = 13;
  uint32 online_status = 14;
  bool is_logoff = 15;
}

message MasterPupilData {
  uint32 uid = 1;
  MasterPupilType type = 2;
  MasterPupilCard card = 3;
  uint32 level = 4;
  string nickname = 5;
  uint32 teacher_rank = 6;
  uint32 last_online_time = 7;
  uint32 avatar_id = 8;
  uint32 dress_id = 9;
  MasterPupilStatus status = 10;
  uint32 relation_time = 11;
  PlayerFriendBriefData brief_data = 12;
  uint32 score = 13;
  bool is_logoff = 14;
}

message MasterPupilDealMsg {
  uint32 target_uid = 1;
  MasterPupilType type = 2;
  MasterPupilOpType op = 3;
  string nickname = 4;
}

message MasterPoolData {
  repeated Material material_list = 1;
}

message MasterPupilEvalMsg {
  repeated PupilMainData pupil_list = 1;
  uint32 score = 2;
}

message MasterMainData {
  uint32 exp = 1;
  uint32 level = 2;
  repeated uint32 reward_level = 3;
  uint32 last_dismiss_time = 4;
  uint32 score = 5;
  uint32 period_master_medal_num = 6;
}

message PupilFinishExamMissionMsg {
  uint32 uid = 1;
  string nickname = 2;
  MasterPupilMission mission = 3;
}

message MasterPupilMission {
  enum MissionStatus {
    MISSION_STATUS_NONE = 0;
    DOING = 1;
    FINISH = 2;
  }

  uint32 id = 1;
  uint32 status = 2;
}

message PupilStep {
  uint32 step_id = 1;
  uint32 master_id = 2;
  uint32 star = 3;
  string comment = 4;
  uint32 level = 5;
  MasterPoolData pool_reward = 6;
  repeated uint32 exam_mission_id_list = 7;
}

message PupilMainData {
  repeated PupilStep step_list = 1;
  uint32 last_dismiss_time = 2;
  uint32 pupil_id = 3;
  string nickname = 4;
  uint32 cur_step_id = 5;
  uint32 left_assistant_times = 6;
  uint32 left_frozen_time = 7;
  PlayerFriendBriefData master_brief = 8;
  uint32 pool_fame_num = 9;
  bool is_graduated = 10;
}

message TrialAvatar {
  uint32 sample_id = 1;
  uint32 end_time = 2;
  bool is_first_show = 3;
}

message Furniture {
  uint32 id = 1;
  uint32 pos_x = 2;
  uint32 pos_y = 3;
  uint32 direction = 4;
  uint32 location = 5;
}

message DormRoom {
  uint32 id = 1;
  string name = 2;
  repeated Furniture furniture_list = 3;
  repeated uint32 avatar_list = 4;
}

message DormHouse {
  uint32 id = 1;
  string name = 2;
  repeated DormRoom room_list = 3;
  uint32 level = 4;
}

message DepotFurniture {
  uint32 id = 1;
  uint32 num = 2;
}

message DormRoomAvatar {
  uint32 room_id = 1;
  repeated uint32 avatar_list = 2;
}

message DormEvent {
  uint32 avatar_id = 1;
  repeated uint32 event_id_list = 2;
}

message DormFacility {
  uint32 type = 1;
  uint32 level = 2;
  uint32 id = 3;
  uint32 begin_time = 4;
}

message DormPowerBonus {
  uint32 house_id = 1;
  uint32 bonus = 2;
}

message DormFacilityData {
  repeated DormFacility facility_list = 1;
  uint32 level_up_facility_type = 2;
  uint32 level_up_end_time = 3;
  uint32 store_stamina = 4;
  bool is_can_store_stamina = 5;
  uint32 power = 10;
  uint32 power_recover_left_time = 11;
  uint32 power_recover_config_time = 12;
  uint32 power_limit = 13;
  uint32 base_power_limit = 14;
  repeated DormPowerBonus limit_bonus_list = 15;
  uint32 power_recovery = 16;
  uint32 base_power_recovery = 17;
  uint32 bonus_power_recovery = 18;
}

message DormVisitRecord {
  uint32 visit_time = 1;
  uint32 visit_uid = 2;
  uint32 visit_avatar = 3;
  uint32 level = 4;
  string name = 5;
}

message AvatarRoll {
  uint32 avatar_id = 1;
  uint32 progress = 2;
  repeated uint32 has_take_group_list = 3;
  bool is_unlock = 4;
}

message OpenworldBossMp {
  uint32 boss_id = 1;
  uint32 left_hp = 2;
  uint32 mp_left_hp = 3;
  repeated uint32 buff_list = 4;
}

message MainlineStepMission {
  bool is_update = 1;
  repeated uint32 cur_mainline_step_list = 2;
  repeated uint32 finished_mainline_step_list = 3;
}

message LotteryPlayerInfo {
  uint32 uid = 1;
  uint32 level = 2;
  uint32 vip_point = 3;
  uint32 vip_level = 4;
  uint32 account_type = 5;
  uint32 tag = 6;
  uint32 first_reward_num = 7;
  bool is_last_schedule_get_rare_reward = 8;
}

message ChatworldDishReward {
  uint32 reward_id = 1;
  uint32 taken_times = 2;
  uint32 last_take_time = 3;
}

message FinishedExBossInfo {
  uint32 boss_id = 1;
  uint32 score = 2;
  repeated AvatarBriefInfo avatar_info_list = 3;
  repeated ElfBriefInfo elf_info_list = 4;
}

message WarshipComponent {
  uint32 type = 1;
  uint32 component_id = 2;
}

message WarshipThemeData {
  uint32 warship_id = 1;
  repeated WarshipComponent component_list = 2;
  uint32 bgm_play_mode = 3;
  bool is_weather_fixed = 4;
  uint32 weather_idx = 5;
}

message VirtualAvatar {
  uint32 virtual_avatar_id = 1;
  uint32 virtual_weapon_id = 2;
  uint32 virtual_stigmata_id_1 = 3;
  uint32 virtual_stigmata_id_2 = 4;
  uint32 virtual_stigmata_id_3 = 5;
  uint32 virtual_buff_id = 6;
  bool is_away = 7;
}

message OpenworldQuest {
  uint32 id = 2;
  OpenworldQuestStatus status = 3;
  uint32 buff_id = 4;
  uint32 debuff_id = 5;
  uint32 position = 6;
  repeated uint32 finish_challenge_list = 7;
  uint32 progress = 8;
  uint32 rarity_reward_id = 9;
  uint32 quest_activity_id = 10;
  uint32 special_timeout_sec = 11;
}

message OpenworldTalent {
  uint32 talent_id = 1;
  uint32 level = 2;
}

message LobbyPlayer {
  uint32 uid = 1;
  string nick_name = 2;
  uint32 level = 4;
  uint32 avatar_trial_id = 5;
  bool is_newbie = 6;
  bool is_goback = 7;
  string region_name = 8;
  uint32 armada_id = 9;
}

message SnsShowPriviledge {
  uint32 sns_show_type = 1;
  uint32 sns_show_priviledge_state = 2;
}

message TakeChatRedEnvelopePlayer {
  uint32 uid = 1;
  string nickname = 2;
  uint32 scoin_num = 3;
  DropItem drop_item = 4;
  Material material = 5;
}

message WikiDetailData {
  uint32 wiki_detail_type = 1;
  uint32 wiki_detail_num_get = 2;
  uint32 wiki_detail_score = 3;
  uint32 wiki_detail_num_total = 4;
}

message CommonUintKVStruct {
  uint32 key = 1;
  uint32 value = 2;
}

message PjmsCoreUnit {
  uint32 unit_id = 1;
  uint32 level = 2;
}

message PjmsAuxiliaryUnit {
  uint32 unique_id = 1;
  uint32 unit_id = 2;
  uint32 exp = 3;
  uint32 level = 4;
  PjmsAuxiliaryUnitLockStatus lock_status = 7;
  repeated uint32 affix_list = 8;
}

message PanelMissionData {
  message PanelMissionCycleData {
    uint32 cycle_id = 1;
    uint32 begin_time = 2;
    uint32 end_time = 3;
  }

  uint32 mission_id = 1;
  repeated PanelMissionData.PanelMissionCycleData cycle_list = 2;
}

message MonsterCardPvpPlayerData {
  uint32 player_uid = 1;
  string nickname = 2;
  uint32 elo_score = 3;
  uint32 level = 4;
  repeated MonsterPvpCardBriefData card_data_list = 5;
  uint32 robot_id = 6;
  repeated MonsterPvpCardBriefData support_card_data_list = 7;
  uint32 rank = 8;
}

message MonsterCardPvpCombatData {
  MonsterCardPvpPlayerData attacker = 1;
  MonsterCardPvpPlayerData defender = 2;
}

message MonsterPvpCardBriefData {
  uint32 unique_id = 1;
  uint32 star = 2;
  repeated uint32 skill_list = 3;
  bool is_hidden = 4;
}

message MonsterCardPvpPlayerBriefData {
  uint32 uid = 1;
  uint32 max_elo_score = 2;
  uint32 level = 3;
  repeated MonsterPvpCardBriefData card_data_list = 4;
  string nickname = 5;
  uint32 last_refresh_time = 6;
  uint32 today_add_elo_score = 7;
  uint32 today_sub_elo_score = 8;
  repeated MonsterPvpCardBriefData support_card_data_list = 9;
}

message MonsterCardPvpCombatLog {
  MonsterCardPvpPlayerData my_data = 1;
  MonsterCardPvpPlayerData opponent_data = 2;
  bool is_win = 3;
  int32 delta_score = 4;
}

message MonsterCardPvpCombatHistoryData {
  repeated MonsterCardPvpCombatLog combat_log_list = 1;
}

enum ConstantEnum {
  CONSTANT_ENUM_NONE = 0;
  UN_LIMIT_TIMES = 65535;
  FRAME_DEFAULT_ID = 200001;
}

enum SpecialItemId {
  SPECIAL_ITEM_ID_NONE = 0;
  ITEM_GREEN_STONE = 4;
  ITEM_PURPLE_JADE = 5;
  ITEM_FRIENDS_POINT = 6;
  ITEM_SCOIN = 100;
  ITEM_FIGHT_OPENWORLD_STAGE_BOSS = 901;
  ITEM_ARMADA_WAR_ENERGE_ITEM_ID = 914;
  ITEM_DLC_COIN = 801;
  ITEM_DLC_REVIVE_COIN = 803;
  ITEM_SC_DLC_REVIVE_COIN = 835;
  ITEM_STAMINA_MEDICINE = 7033;
  ITEM_BENG_HUAI_FRAGMENTS = 7032;
  ITEM_WEEK_DAY_ACTIVITY_COIN = 7034;
  ITEM_SPEED_UP_STAGE = 9007;
  ITEM_ROGUE_STAGE_COIN = 9008;
}

enum SpecialMailId {
  SPECIAL_MAIL_ID_NONE = 0;
  MAIL_INVITE = 1001;
  MAIL_INVITEE = 1002;
  MAIL_ACTIVITY_INVITE = 1003;
  MAIL_ARMADA_KICK = 2001;
  MAIL_ARMADA_DISSOLVE = 2002;
  MAIL_RECLAIM_RANK_REWARD = 2017;
  MAIL_CHAPTER_RESET = 2021;
  MAIL_CHAPTER_RESET_AVATAR_COMPENSATE = 2022;
  MAIL_MP_RAID_HCOIN_COMPENSATE = 2023;
  MAIL_ARMADA_CHANGE_NAME = 2101;
  MAIL_ARMADA_LEADER_OFFLINE_NOTICE = 2102;
  MAIL_ARMADA_IMPEACH_LEADER_START = 2103;
  MAIL_ARMADA_IMPEACH_LEADER_SUCCESS = 2104;
  MAIL_ARMADA_IMPEACH_LEADER_FAIL = 2105;
  MAIL_ARMADA_IMPEACH_LEADER_CANCEL = 2106;
  MAIL_MP_NEWBIE = 3001;
  MAIL_MP_REPORT = 3002;
  MAIL_PAY_CARD = 4001;
  MAIL_PAY_SUBS = 4002;
  MAIL_SECURITY_PASSWORD_RESET = 4101;
  MAIL_OPENWORLD_QUEST_REWARD = 5001;
  MAIL_SIMULATE_REWARD = 6004;
  MAIL_ARMADA_WAREHOUSE_AUTO_CANCEL = 6023;
  MAIL_CHATWORLD_DISH_COMPENSATE = 6024;
  MAIL_RAFFLE_COMPENSATE = 6025;
  MAIL_BULLETIN_SCORE_REWARD = 6039;
  MAIL_BIRTHDAY_REWARD = 6101;
  MAIL_RAID_RANK_REWARD = 6201;
  MAIL_RAID_SCORE_REWARD = 6202;
  MAIL_RAID_SPECIAL_REWARD = 6203;
  MAIL_SEASON_WEEK_RANK_REWARD = 6301;
  MAIL_SEASON_RANK_REWARD = 6302;
  MAIL_SEASON_SCORE_REWARD = 6303;
  MAIL_EXTRA_STORY_COMPENSATE_REWARD = 6401;
  MAIL_WORLD_BOSS_SCORE_REWARD = 6501;
  MAIL_WORLD_BOSS_RANK_REWARD = 6502;
  MAIL_WORLD_BOSS_KILL_BOSS_REWARD = 6503;
  MAIL_HCOIN_GACHA_RESET = 6601;
  MAIL_GACHA_EX_REWARD = 6602;
  MAIL_COUPLE_TOWER_ACTIVITY_FLOOR_REWARD = 6801;
  MAIL_PLAYER_WEEKLY_REPORT = 6901;
  MAIL_MASTER_PUPIL_MASTER_REWARD_0_STAR = 7001;
  MAIL_MASTER_PUPIL_MASTER_REWARD_1_STAR = 7002;
  MAIL_MASTER_PUPIL_MASTER_REWARD_2_STAR = 7003;
  MAIL_MASTER_PUPIL_MASTER_REWARD_3_STAR = 7004;
  MAIL_MASTER_PUPIL_PUPIL_REWARD = 7005;
  MAIL_MASTER_PUPIL_DISMISS = 7006;
  MAIL_ARMADA_MATRIX_DEPOSIT_REWARD = 7101;
  MAIL_ARMADA_WAR_SEASON_REWARD = 7102;
  MAIL_ARMADA_WAR_BATTLE_REWARD = 7103;
  MAIL_ARMADA_WAR_BATTLE_CONTRIBUTION_REWARD = 7104;
  MAIL_ARMADA_WAR_BATTLE_RANK_REWARD = 7105;
  MAIL_ARMADA_WAR_APPLY_NOTIFY_MAIL = 7106;
  MAIL_ARMADA_WAR_ARMADA_RESET_MAIL = 7107;
  MAIL_ARMADA_WAR_PLAYER_BATTLE_NUM_REWARD = 7108;
  MAIL_ARMADA_FIRST_JOIN_REWARD = 7109;
  MAIL_TIME_LIMIT_ADD_UP_REWARD = 7201;
  MAIL_ARMADA_MATRIX_ARMADA_REWARD = 7305;
  MAIL_MP_RAID_RESET_MISSION_REWARD = 7402;
  MAIL_BLOCK_ZONE_MISSION_REWARD = 7403;
  MAIL_AVATAR_STAR_UP_RETURN = 7601;
  MAIL_ROGUE_TOWER_ENDLESS_SCORE_REWARD = 7602;
  MAIL_DREAM_REWARD = 7604;
  MAIL_SLG_BATTLE_COUNTRY_RANK_REWARD = 7607;
  MAIL_SINGLE_WANTED_WEEKLY_ENGAGE_REWARD = 7608;
  MAIL_SINGLE_WANTED_BOX_FIXED_REWARD = 7609;
  MAIL_SINGLE_WANTED_BOX_CHOICE_REWARD = 7610;
  MAIL_SLG_BATTLE_SCORE_REWARD = 7611;
  MAIL_SLG_ACTIVITY_SCORE_REWARD = 7612;
  MAIL_WANTED_OFF_COMPENSATE_REWARD = 7613;
  MAIL_OPENWORLD_CHAPTER_LIMIT_REWARD_COMPENSATE = 7617;
  MAIL_SC_DLC_DAILY_QUEST_COMPENSATE = 7619;
  MAIL_NEWBIE_LEVEL_RUSH_COMPENSATE = 7620;
  MAIL_SC_DLC_EVENT_COMPENSATE = 7621;
  MAIL_MODIFY_PLAYER_DATA_580_LEVEL_DATA_COMPENSATE = 7625;
  MAIL_NEWBIE_MATERIAL_RECYCLE = 8058;
  MAIL_GLOABL_EXPLORE_WIN_REWARD = 8070;
  MAIL_GLOABL_EXPLORE_LOSE_REWARD = 8071;
}

enum AccountType {
  ACCOUNT_NONE = 0;
  ACCOUNT_MIHOYO = 1;
  ACCOUNT_BILIBILI = 2;
  ACCOUNT_UC = 3;
  ACCOUNT_360 = 4;
  ACCOUNT_YYB = 5;
  ACCOUNT_XIAOMI = 6;
  ACCOUNT_HUAWEI = 7;
  ACCOUNT_OPPO = 8;
  ACCOUNT_VIVO = 9;
  ACCOUNT_MEIZU = 10;
  ACCOUNT_COOLPAD = 11;
  ACCOUNT_LENOVO = 12;
  ACCOUNT_GIONEE = 13;
  ACCOUNT_BAIDU = 14;
  ACCOUNT_WANDOUJIA = 15;
  ACCOUNT_LESHI = 16;
  ACCOUNT_GOOGLE = 17;
  ACCOUNT_FACEBOOK = 18;
  ACCOUNT_ITUNES_GC = 19;
  ACCOUNT_SIGNIN_APPLE = 20;
  ACCOUNT_WEGAME = 21;
  ACCOUNT_BYTEDANCE = 22;
  ACCOUNT_STEAM = 23;
  ACCOUNT_HOYOLAB = 24;
}

enum CGType {
  CG_NONE = 0;
  CG_START = 1;
  CG_SEVEN_CHAPTER = 2;
}

enum AvatarPartType {
  AVATAR_PART_TYPE_NONE = 0;
  AVATAR_PART_TYPE_ONE = 1;
  AVATAR_PART_TYPE_TWO = 2;
}

enum EquipmentType {
  EQUIPMENT_TYPE_NONE = 0;
  EQUIPMENT_MATERIAL = 1;
  EQUIPMENT_AVATAR_FRAGMENT = 2;
  EQUIPMENT_WEAPON = 3;
  EQUIPMENT_STIGMATA = 4;
  EQUIPMENT_AVATAR_CARD = 5;
  EQUIPMENT_ENDLESS_ITEM = 6;
  EQUIPMENT_DRESS = 7;
  EQUIPMENT_VIRTUAL = 8;
  EQUIPMENT_MEDAL = 10;
  EQUIPMENT_FURNITURE = 14;
  EQUIPMENT_OPENWORLD_ENDLESS_ITEM = 15;
  EQUIPMENT_CUSTOM_HEAD = 16;
  EQUIPMENT_FRAME = 20;
  EQUIPMENT_SHOPPING_MALL_GIFT = 30;
  EQUIPMENT_MECHA = 34;
  EQUIPMENT_PHONE_PENDANT = 35;
  EQUIPMENT_EMOJI = 36;
  EQUIPMENT_ELF_FRAGMENT = 37;
  EQUIPMENT_ELF_CARD = 38;
  EQUIPMENT_DLC_AVATAR_CARD = 39;
  EQUIPMENT_WARSHIP = 40;
  EQUIPMENT_TRIAL_WARSHIP = 41;
  EQUIPMENT_ERROR = 100;
}

enum WeaponBranchType {
  WEAPON_BRANCH_TYPE_NONE = 0;
  WEAPON_DEFAULT = 1;
  WEAPON_BEFALL = 2;
}

enum EquipmentVirtualType {
  EQUIPMENT_VIRTUAL_TYPE_NONE = 0;
  EQUIPMENT_VIRTUAL_ARMADA_FUND = 80001;
  EQUIPMENT_VIRTUAL_MP_EXP = 80002;
  EQUIPMENT_VIRTUAL_SCOIN = 80006;
  EQUIPMENT_MASTER_FAME_EXP = 80007;
  EQUIPMENT_VIRTUAL_SEASON_EXP = 80008;
  EQUIPMENT_VIRTUAL_PLAYER_EXP = 80009;
  EQUIPMENT_VIRTUAL_ARMADA_CONTRIBUTION = 80011;
  EQUIPMENT_VIRTUAL_VITALITY = 80012;
  EQUIPMENT_VIRTUAL_CARD_PRODUCT = 80013;
  EQUIPMENT_VIRTUAL_CONTRACT_POINT = 80014;
  EQUIPMENT_VIRTUAL_DLC_EXP = 80015;
  EQUIPMENT_VIRTUAL_BATTLE_PASS_EXP_ACTIVITY = 80016;
  EQUIPMENT_VIRTUAL_ADVENTURE_BADGE = 80017;
  EQUIPMENT_VIRTUAL_ADVENTURE_GRAIN = 80018;
  EQUIPMENT_VIRTUAL_CHAPTER_ACTIVITY_EXP = 80019;
  EQUIPMENT_VIRTUAL_PICTURE_SCORE = 80020;
  EQUIPMENT_VIRTUAL_OW_FOX_EXP = 80021;
  EQUIPMENT_VIRTUAL_OW_AI_EXP = 80022;
  EQUIPMENT_VIRTUAL_SANCTUARY_EXP = 80023;
  EQUIPMENT_VIRTUAL_CUSTOM_GACHA_ENERGY = 80024;
  EQUIPMENT_VIRTUAL_OPTIONAL_GACHA_ENERGY = 80026;
  EQUIPMENT_VIRTUAL_NEWBIE_PRIVILEGE = 80027;
  EQUIPMENT_VIRTUAL_SC_DLC_EXP = 80028;
  EQUIPMENT_VIRTUAL_BATTLE_PASS_EXP_DUTY = 80029;
  EQUIPMENT_VIRTUAL_CUSTOM_GOBACK_GACHA_ENERGY = 80030;
  EQUIPMENT_VIRTUAL_OW_TERMINAL_EXP = 80031;
  EQUIPMENT_VIRTUAL_PJMS_CHAPTER_EXP_1 = 80032;
  EQUIPMENT_VIRTUAL_PJMS_CHAPTER_EXP_2 = 80033;
  EQUIPMENT_VIRTUAL_PJMS_CHAPTER_EXP_3 = 80034;
  EQUIPMENT_VIRTUAL_PJMS_CHAPTER_EXP_4 = 80035;
  EQUIPMENT_VIRTUAL_PJMS_CHAPTER_EXP_5 = 80036;
  EQUIPMENT_VIRTUAL_PJMS_CHAPTER_EXP_6 = 80037;
  EQUIPMENT_VIRTUAL_PJMS_CHAPTER_EXP_7 = 80038;
  EQUIPMENT_VIRTUAL_PJMS_CHAPTER_EXP_8 = 80039;
  EQUIPMENT_VIRTUAL_PJMS_CHAPTER_EXP_9 = 80040;
  EQUIPMENT_VIRTUAL_PJMS_CHAPTER_EXP_10 = 80041;
}

enum MechaSlot {
  MECHA_SLOT_NONE = 0;
  MECHA_SLOT_LEFT_1 = 1;
  MECHA_SLOT_LEFT_2 = 2;
  MECHA_SLOT_CENTER = 3;
  MECHA_SLOT_RIGHT_2 = 4;
  MECHA_SLOT_RIGHT_1 = 5;
}

enum WeaponType {
  WEAPON_TYPE_NONE = 0;
  WEAPON_DOUBLE_GUN = 1;
  WEAPON_SWORD = 2;
  WEAPON_HAND_GUN = 3;
  WEAPON_HEAVY_SWORD = 4;
  WEAPON_TAIL = 5;
  WEAPON_FIST = 6;
  WEAPON_SCYTHE = 7;
  WEAPON_LANCE = 8;
  WEAPON_BOW = 9;
  WEAPON_BLADE_RING = 10;
  WEAPON_JAVELIN = 11;
  WEAPON_DRIVE_CORE = 12;
  WEAPON_ROCKET_HAMMER = 13;
  WEAPON_DUAL_CROSSBOW = 14;
  WEAPON_CHAIN_SWORD = 15;
  WEAPON_SWITCH_STAFF = 16;
}

enum StigmataType {
  STIGMATA_TYPE_NONE = 0;
  STIGMATA_SLOT_1 = 1;
  STIGMATA_SLOT_2 = 2;
  STIGMATA_SLOT_3 = 3;
}

enum EquipmentSlot {
  EQUIPMENT_SLOT_NONE = 0;
  EQUIPMENT_SLOT_WEAPON_1 = 1;
  EQUIPMENT_SLOT_STIGMATA_1 = 2;
  EQUIPMENT_SLOT_STIGMATA_2 = 3;
  EQUIPMENT_SLOT_STIGMATA_3 = 4;
}

enum StageType {
  STAGE_TYPE_NONE = 0;
  STAGE_STORY = 1;
  STAGE_WEEK_DAY = 2;
  STAGE_BEFALL = 3;
  STAGE_ENDLESS = 4;
  STAGE_NUCLEAR = 5;
  STAGE_EXTRA_STORY = 7;
  STAGE_ROGUE = 9;
  STAGE_ARMADA = 10;
  STAGE_OPENWORLD = 11;
  STAGE_OPENWORLD_BOSS = 12;
  STAGE_TUTORIAL = 13;
  STAGE_CAMPWAR = 14;
  STAGE_EX_BOSS = 15;
  STAGE_MINUTE = 16;
  STAGE_SEALED = 17;
  STAGE_WORLDBOSS = 18;
  STAGE_LEVELMATRIX = 19;
  STAGE_PUSHTOWER = 20;
  STAGE_TEAM_ASSAULT = 21;
  STAGE_GENERAL_ACTIVITY = 22;
  STAGE_AVATAR_TRAINING = 23;
  STAGE_ARMADA_WAR = 24;
  STAGE_DUNGEONS = 25;
  STAGE_OPENWORLD_DEFENSE = 26;
  STAGE_RECLAIM = 27;
  STAGE_OPENWORLD_BOSS_MP = 28;
  STAGE_OPENWORLD_ENDLESS = 29;
  STAGE_MATRIX_NORMAL = 30;
  STAGE_MATRIX_QAVATAR = 31;
  STAGE_COUPLE_TOWER = 32;
  STAGE_CAMPAIGN = 33;
  STAGE_TOWER_RAID = 34;
  STAGE_KINGDOM_WAR = 35;
  STAGE_TVT = 36;
  STAGE_QUANTUM_ENDLESS = 37;
  STAGE_WANTED = 38;
  STAGE_QAVATAR_PVE = 39;
  STAGE_DLC_TOWER = 40;
  STAGE_ENDLESS_SINGLE = 41;
  STAGE_MONOPOLY_BOSS = 42;
  STAGE_ADVENTURE_GROUP = 43;
  STAGE_GLOBAL_WAR = 44;
  STAGE_GRATUITY = 45;
  STAGE_NINJA = 46;
  STAGE_SINGLE_RAID_STEP = 47;
  STAGE_ARMADA_STAGE_SCORE_ACTIVITY = 48;
  STAGE_NEWBIE_CHALLENGE_ACTIVITY = 49;
  STAGE_CHALLENGE_WAR = 50;
  STAGE_MASSIVE_WAR = 51;
  STAGE_SANCTUARY = 52;
  STAGE_CRISIS_MODE = 53;
  STAGE_SCHEDULED_MAP_SITE = 54;
  STAGE_EXAMINATION = 55;
  STAGE_MONOPOLY_MONSTER = 56;
  STAGE_ULTIMATE_ENDLESS = 57;
  STAGE_HYBRID = 58;
  STAGE_DAILY_MP = 59;
  STAGE_ULTRA_ENDLESS = 60;
  STAGE_BUFF_TOWER = 61;
  STAGE_ROGUE_TOWER = 62;
  STAGE_ROGUE_TOWER_ENDLESS = 64;
  STAGE_CHATWORLD_BEAST = 65;
  STAGE_SLG = 66;
  STAGE_THEME_WANTED = 67;
  STAGE_GOD_WAR = 68;
  STAGE_HYBRID_RELAY = 69;
  STAGE_GENSHIN_LD = 70;
  STAGE_RANCH = 71;
  STAGE_SINK_CITY_DLC_PREHEAT = 72;
  STAGE_SC_DLC_CHALLENGE = 73;
  STAGE_OW_CHAPTER_TOWER = 74;
  STAGE_OW_CHAPTER_ENDLESS_TOWER = 75;
  STAGE_CHATWORLD_BOX = 76;
  STAGE_SC_DLC_MP = 77;
  STAGE_GREEDY_ENDLESS = 78;
  STAGE_OW_CHAPTER_CYCLE = 79;
  STAGE_OW_HUNT_ACTIVITY = 80;
  STAGE_FRONT_ENDLESS = 81;
  STAGE_MONSTER_CARD_NORMAL = 82;
  STAGE_MONSTER_CARD_BOSS = 83;
  STAGE_MONSTER_CARD_TOWER = 84;
  STAGE_DICEY_DUNGEON_STORY = 85;
  STAGE_DICEY_DUNGEON_SCHEDULE = 86;
  STAGE_BUFF_ASSIST = 87;
  STAGE_QCANDY_TUTORIAL = 88;
  STAGE_QCANDY_PVP = 89;
  STAGE_WAVE_RUSH = 90;
  STAGE_AI_CYBER = 91;
  STAGE_OW_CHAPTER_ANTIGRAVITY = 92;
  STAGE_PLATFORM_SHOOTER = 93;
  STAGE_CHAPTER_AVATAR_CULTIVATE = 94;
  STAGE_GLOBAL_EXPLORE = 95;
  STAGE_GLOBAL_EXPLORE_NORMAL = 96;
  STAGE_MIRAGE = 97;
  STAGE_SUSANNA_TRIAL = 98;
  STAGE_SUSANNA_TRIAL_CHALLENGE = 99;
  STAGE_GOD_WAR_AVATAR_CHALLENGE = 100;
  STAGE_CHAPTER_36_RPG = 101;
  STAGE_SUSANNA_TRIAL_STORY = 102;
  STAGE_SHIGURE_KIRA = 103;
  STAGE_THEME_TOWER = 104;
  STAGE_BW_WORLD_CAMP = 105;
  STAGE_MAHOU_CARD_AVATAR = 106;
  STAGE_GOBACK_SPECIAL = 107;
  STAGE_TILED_GAME_LUNA_MAIN = 108;
  STAGE_TILED_GAME_LUNA_DAILY = 109;
  STAGE_RESIDENT = 110;
  STAGE_TILED_GAME_FARM_MAIN = 111;
  STAGE_MINION_CLASH = 112;
  STAGE_ARK_PLUS = 113;
  STAGE_DICEY_DUNGEON_VOLLEYBALL = 114;
  STAGE_RAID_REPLACE = 115;
  STAGE_GOURMET_HUNT = 116;
  STAGE_MATCH_THREE_PLUS = 117;
  STAGE_SIMPLIFIED_GOD_WAR = 118;
  STAGE_GAME_ROOM = 119;
  STAGE_QRTS = 120;
  STAGE_FUTARI_BATTLE = 121;
  STAGE_PJMS_GAME_ROOM = 122;
  STAGE_TILED_GAME_SRPG = 123;
  STAGE_PJMS_RE_ACTIVITY = 124;
  STAGE_RICH_MAN = 125;
  STAGE_QRTS_AVATAR = 126;
  STAGE_MONSTER_FARM = 127;
  STAGE_MONSTER_MORPH = 128;
  STAGE_PRPG_AVATAR = 129;
  STAGE_KIANA_AUTO_CHESS = 130;
  STAGE_MONSTER_CARD_SPECIAL = 131;
  STAGE_SPACE_ADVENTURE = 132;
  STAGE_TILED_GAME_INN = 133;
}

enum StageDifficulty {
  STAGE_DIFFICULTY_NONE = 0;
  STAGE_DIFFICULTY_NORMAL = 1;
  STAGE_DIFFICULTY_HARD = 2;
  STAGE_DIFFICULTY_HELL = 3;
}

enum StageRecordType {
  STAGE_RECORD_TYPE_NONE = 0;
  STAGE_RECORD_SCORE = 1;
  STAGE_RECORD_TIME = 2;
  STAGE_RECORD_TOTAL_SCORE = 3;
  STAGE_RECORD_BATTLE_SCORE = 4;
  STAGE_RECORD_BATTLE_SCORE_NO_COIN = 5;
}

enum StageOpenStatus {
  STAGE_OPEN_STATUS_NONE = 0;
  STAGE_NOT_OPEN = 1;
  STAGE_OPENED = 2;
  STAGE_CLOSED = 3;
}

enum StageStatus {
  STAGE_STATUS_NONE = 0;
  STAGE_LOCKED = 1;
  STAGE_DOING = 2;
  STAGE_DONE = 3;
}

enum SpecialStageId {
  SPECIAL_STAGE_ID_NONE = 0;
  STAGE_ID_ENDLESS = 900101;
  STAGE_ID_ROGUE = 900201;
  STAGE_ID_ARMADA = 900301;
  STAGE_ID_ARMADA_MP = 900302;
  STAGE_ID_OPENWORLD = 900401;
  STAGE_ID_OPENWORLD_BOSS = 900402;
  STAGE_ID_OPENWORLD_DEFENSE = 900408;
  STAGE_ID_EXBOSS = 900501;
  STAGE_ID_ARMADA_MATRIX = 900601;
  STAGE_ID_SC_DLC_TOWER = 900701;
  STAGE_ID_SEVEN_CHAPTER_CG = 901000;
  STAGE_ID_ARMADA_BOSS = 100000000;
}

enum ChapterType {
  CHAPTER_TYPE_NONE = 0;
  CHAPTER_TYPE_MAIN_STORY = 1;
  CHAPTER_TYPE_EVENT = 2;
  CHAPTER_TYPE_SPECIAL_STORY = 3;
  CHAPTER_MP = 4;
  CHAPTER_TYPE_CHAPTER_ACTIVITY = 5;
  CHAPTER_TYPE_HYBRID_SITE_ACTIVITY = 6;
  CHAPTER_TYPE_OPENWORLD = 7;
  CHAPTER_TYPE_PJMS = 8;
  CHAPTER_TYPE_PJMS_NO_ENTER_WORLD = 9;
}

enum AvatarReviveEnum {
  AVATAR_REVIVE_ENUM_NONE = 0;
  AVATAR_REVIVE_TIMES_UN_LIMIT = 65535;
}

enum AvatarElementTag {
  AVATAR_ELEMENT_TAG_NONE = 0;
  AVATAR_ELEMENT_TAG_FIRE = 1004;
  AVATAR_ELEMENT_TAG_ICE = 1005;
  AVATAR_ELEMENT_TAG_LIGHTNING = 1006;
}

enum TeamRestrictType {
  TEAM_RESTRICT_TYPE_NONE = 0;
  TEAM_RESTRICT_TYPE_AVATAR_NUM = 1;
  TEAM_RESTRICT_TYPE_AVATAR_CLASS_NUM = 2;
  TEAM_RESTRICT_TYPE_AVATAR_EACH_LEVEL = 3;
  TEAM_RESTRICT_TYPE_AVATAR_EACH_STAR = 4;
  TEAM_RESTRICT_TYPE_AVATAR_ONE_STAR = 5;
  TEAM_RESTRICT_TYPE_AVATAR_CLASS_NOT_SAME = 6;
  TEAM_RESTRICT_TYPE_AVATAR_ATTR_NOT_SAME = 7;
  TEAM_RESTRICT_TYPE_AVATAR_EACH_ATTR = 8;
  TEAM_RESTRICT_TYPE_AVATAR_NOT_ATTR = 9;
  TEAM_RESTRICT_TYPE_AVATAR_EACH_CLASS = 10;
  TEAM_RESTRICT_TYPE_AVATAR_NOT_CLASS = 11;
  TEAM_RESTRICT_TYPE_HAS_AVATAR_ID = 12;
  TEAM_RESTRICT_TYPE_AVATAR_NOT_ID = 13;
  TEMA_RESTRICT_TYPE_ROLE_AVATAR_NUM = 15;
  TEAM_RESTRICT_TYPE_ROLE_LIST = 16;
  TEAM_RESTRICT_TYPE_IN_AVATAR_LIST = 17;
  TEAM_RESTRICT_TYPE_RESISTANCE = 18;
  TEAM_RESTRICT_TYPE_HAS_ELF = 19;
  TEAM_RESTRICT_TYPE_AVATAR_EACH_TAG_LIST = 20;
  TEAM_RESTRICT_TYPE_AVATAR_NOT_TAG_LIST = 21;
  TEAM_RESTRICT_TYPE_AVATAR_ONE_TAG = 22;
  TEAM_RESTRICT_TYPE_AVATAR_TAG_NUM = 23;
  TEAM_RESTRICT_TYPE_AVATAR_ATTR_NUM = 24;
  TEAM_RESTRICT_TYPE_AVATAR_ATTR_SAME_NUM = 25;
  TEAM_RESTRICT_TYPE_IN_RPG_ROLE_LIST = 26;
  TEAM_RESTRICT_TYPE_AVATAR_ELEMENT_TAG_NUM = 27;
  TEAM_RESTRICT_TYPE_ALL_PJMS_AVATAR = 28;
}

enum StageEnterTimesType {
  STAGE_ENTER_TIMES_DAILY = 0;
  STAGE_ENTER_TIMES_WEEKLY = 1;
}

enum WeekdayActivityEnterTimesType {
  WEEKDAY_ACTIVITY_ENTER_TIMES_DAILY = 0;
  WEEKDAY_ACTIVITY_ENTER_TIMES_WEEKLY = 1;
}

enum ActivitySeriesSweepTimesType {
  ACTIVITY_SERIES_SWEEP_TIMES_NONE = 0;
  ACTIVITY_SERIES_SWEEP_TIMES_DAILY = 1;
  ACTIVITY_SERIES_SWEEP_TIMES_WEEKLY = 2;
}

enum StageEndStatus {
  STAGE_END_STATUS_NONE = 0;
  STAGE_WIN = 1;
  STAGE_NOT_MEET_CONDITION = 2;
  STAGE_All_DEAD = 3;
  STAGE_EXIT = 4;
}

enum StageChallengeType {
  STAGE_CHALLENGE_TYPE_NONE = 0;
  CHALLENGE_LIMIT_AVATAR = 1;
  CHALLENGE_LIMIT_AVATAR_KILLED = 2;
  CHALLENGE_MAX_COMBO = 3;
  CHALLENGE_LIMIT_BE_HIT = 4;
  CHALLENGE_LIMIT_LEVEL_TIME = 5;
  CHALLENGE_LIMIT_WITCH_TIME_TRIGGERED = 6;
  CHALLENGE_MAX_DAMAGE_IN_WITCH_TIME = 7;
  CHALLENGE_MAX_ULTIMATE_SKILL_TRIGGERED = 8;
  CHALLENGE_MAX_DAMAGE_IN_CERTAIN_TIME = 9;
  CHALLENGE_MAX_ULTIMATE_SKILL_TRIGGERED_BY_DISTINCT_AVATAR = 10;
  CHALLENGE_LIMIT_BE_HIT_DOWN = 11;
  CHALLENGE_MAX_AVATAR_CLASS_IN_TEAM = 12;
  CHALLENGE_MAX_MONSTER_KILLED = 13;
  CHALLENGE_MAX_AVATAR_NATURE_IN_TEAM = 14;
  CHALLENGE_LIMIT_TOTAL_DAMAGE = 15;
  CHALLENGE_HELPER_AVATAR_ALIVE = 16;
  CHALLENGE_LIMIT_TRAP_TRIGGERED = 17;
  CHALLENGE_MAX_BOX_OPENED = 18;
  CHALLENGE_MAX_DEBUFF_ADD = 19;
  CHALLENGE_LIMIT_BE_ADDED_DEBUFF = 20;
  CHALLENGE_MAX_ALL_DAMAGE_IND_WITCH_TIME = 21;
  CHALLENGE_MAX_MONSTER_KILLED_BY_SWITCH_IN_ATTACK = 22;
  CHALLENGE_MAX_MONSTER_KILLED_IN_WITCH_TIME = 23;
  CHALLENGE_MONSTER_LAST_KILLED_BY_SWITCH_IN_ATTACK = 24;
  CHALLENGE_MAX_MONSTER_KILLED_IN_CERTAIN_TIME = 25;
  CHALLENGE_MAX_MONSTER_HIT_AIR = 26;
  CHALLENGE_FINISH_STAGE_NORMAL = 27;
  CHALLENGE_FINISH_STAGE_FAST = 28;
  CHALLENGE_FINISH_STAGE_VERY_FAST = 29;
  CHALLENGE_MONSTER_KILLED_BY_BRANCH = 30;
  CHALLENGE_QTE_TRIGGERED = 31;
  CHALLENGE_MAX_MONSTER_KILLED_BY_ASSASSIN = 32;
  CHALLENGE_MAX_MONSTER_CONTINOUS_KILLED_BY_ASSASSIN = 33;
  CHALLENGE_MAX_ELITE_MONSTER_KLLED = 34;
  CHALLENGE_LIMIT_DISCOVERED = 35;
  CHALLENGE_MAX_DEFEND_OBJECT_DAMAGE = 36;
  CHALLENGE_MAX_TEAM_SKILL_TRIGGERED = 37;
  CHALLENGE_ALL_STORY_MISSION_COMPLETE = 38;
  CHALLENGE_MAX_SCORE = 39;
  CHALLENGE_MAX_TEAM_SKILL_TRIGGERED_FOR_ALL_TEAM_MEMBER = 40;
  CHALLENGE_MAX_MONSTER_KILLED_IN_WITCH_TIME_FOR_ALL_TEAM_MEMBER = 41;
  CHALLENGE_MAX_MONSTER_KILLED_FOR_ALL_TEAM_MEMBER = 42;
  CHALLENGE_MONSTER_KILLED_BY_BRANCH_FOR_ALL_TEAM_MEMBER = 43;
  CHALLENGE_MAX_QTE_TRIGGERED_FOR_ALL_TEAM_MEMBER = 44;
  CHALLENGE_LIMIT_EVADE_SUCCESS_TRIGGERED_FOR_ALL_TEAM_MEMBER = 45;
  CHALLENGE_MAX_ULTIMATE_SKILL_TRIGGERED_FOR_ALL_TEAM_MEMBER = 46;
  CHALLENGE_LIMIT_AVATAR_KILLED_FOR_ALL_TEAM_MEMBER = 47;
  CHALLENGE_MONSTER_KILLED_BY_QTE_FOR_ALL_TEAM_MEMBER = 48;
  CHALLENGE_CLIENT_CUSTOM = 49;
  CHALLENGE_CUSTOM_BUTTON = 50;
  CHALLENGE_LIMIT_LEVEL_TIME2 = 51;
  CHALLENGE_MONSTERCARD_LIMIT_AVATARSIDE_MONSTER_KILLED = 52;
}

enum StagePassType {
  STAGE_PASS_TYPE_NORMAL = 0;
  STAGE_PASS_TYPE_BURDEN_ALLEVIATION = 1;
  STAGE_PASS_TYPE_SETTLE_PRE_STAGE = 2;
  STAGE_PASS_TYPE_BURDEN_ALLEVIATION_V2 = 3;
  STAGE_PASS_TYPE_MONSTER_CARD_SKIP = 4;
}

enum AvatarClassType {
  AVATAR_CLASS_TYPE_NONE = 0;
  AVATAR_KIANA = 1;
  AVATAR_MEI = 2;
  AVATAR_BRONYA = 3;
  AVATAR_HIMEKO = 4;
  AVATAR_THERESA = 5;
  AVATAR_FUKA = 6;
  AVATAR_RITA = 7;
  AVATAR_DURANDAL = 8;
  AVATAR_FISCHL = 9;
  AVATAR_PARDOFELIS = 10;
  AVATAR_FEATHEREDRABBIT = 11;
  AVATAR_SENADINA = 12;
  AVATAR_CORALIE = 13;
  AVATAR_HELIA = 14;
  AVATAR_THELEMA = 15;
  AVATAR_SONGQUE = 16;
}

enum AvatarID {
  AVATAR_ID_NONE = 0;
  AVATAR_KIANA_PT = 101;
  AVATAR_KIANA_FX = 102;
  AVATAR_KIANA_YN = 103;
  AVATAR_KIANA_QN = 104;
  AVATAR_MEI_CK = 201;
  AVATAR_MEI_WS = 202;
  AVATAR_MEI_DH = 203;
  AVATAR_MEI_LD = 204;
  AVATAR_SAKURA_YS = 211;
  AVATAR_SAKURA_ZF = 212;
  AVATAR_BRONYA_ZP = 301;
  AVATAR_BRONYA_BQ = 302;
  AVATAR_BRONYA_JJ = 303;
  AVATAR_BRONYA_BX = 304;
  AVATAR_HIMEKO_VV = 401;
  AVATAR_HIMEKO_NX = 402;
  AVATAR_HIMEKO_KZ = 403;
  AVATAR_HIMEKO_BZ = 404;
  AVATAR_THERESA_YD = 501;
  AVATAR_THERESA_TP = 502;
  AVATAR_THERESA_FY = 503;
  AVATAR_THERESA_JX = 504;
  AVATAR_RITA_NP = 701;
}

enum GachaType {
  GACHA_TYPE_NONE = 0;
  GACHA_HCOIN = 2;
  GACHA_SPECIAL_HCOIN = 3;
  GACHA_ACTIVITY_1 = 4;
  GACHA_CUSTOM_AVATAR = 5;
  GACHA_ACTIVITY_2 = 6;
  GACHA_CUSTOM_EQUIP = 7;
  GACHA_BOX_1 = 8;
  GACHA_UNIQUE = 9;
  GACHA_EQUIP_HCOIN = 10;
  GACHA_SPECIAL_2 = 12;
  GACHA_CONTROLLABLE_BOX = 14;
  GACHA_ACTIVITY_3 = 15;
  GACHA_BOX_2 = 16;
  GACHA_BOX_3 = 17;
  GACHA_OPTIONAL_AVATAR = 18;
  GACHA_OPTIONAL_EQUIP = 19;
  GACHA_ADVENTURE = 20;
  GACHA_BOX_4 = 21;
  GACHA_BOX_5 = 22;
  GACHA_ADVENTURE_EQUIP = 23;
  GACHA_BOX_6 = 24;
  GACHA_SP_EQUIP = 25;
  GACHA_ELF_1 = 26;
  GACHA_ACTIVITY_4 = 27;
  GACHA_ACTIVITY_5 = 28;
  GACHA_ACTIVITY_6 = 29;
  GACHA_SPECIAL_3 = 30;
  GACHA_ADVENTURE_NEWBIE_1 = 31;
  GACHA_ADVENTURE_NEWBIE_2 = 32;
  GACHA_SPECIAL_NEWBIE_1 = 33;
  GACHA_SPECIAL_NEWBIE_2 = 34;
  GACHA_BOX_7 = 35;
  GACHA_SPECIAL_NEWBIE_3 = 36;
  GACHA_SPECIAL_NEWBIE_4 = 37;
  GACHA_CUSTOM_AVATAR_GOBACK = 38;
  GACHA_EQUIP_GOBACK = 39;
  GACHA_SPECIAL_NEWBIE_5 = 40;
  GACHA_SPECIAL_NEWBIE_6 = 41;
  GACHA_SPECIAL_NEWBIE_7 = 42;
  GACHA_SPECIAL_NEWBIE_8 = 43;
  GACHA_PJMS_AVATAR_1 = 44;
  GACHA_PJMS_AVATAR_2 = 45;
  GACHA_PJMS_EQUIP_1 = 46;
  GACHA_PJMS_EQUIP_2 = 47;
  GACHA_PJMS_ELF = 48;
  GACHA_PJMS_AVATAR_3 = 49;
  GACHA_PJMS_AVATAR_4 = 50;
  GACHA_PJMS_EQUIP_3 = 51;
  GACHA_PJMS_EQUIP_4 = 52;
  GACHA_PJMS_AVATAR_NEWBIE_1 = 53;
  GACHA_PJMS_AVATAR_NEWBIE_2 = 54;
  GACHA_PJMS_EQUIP_NEWBIE_1 = 55;
  GACHA_PJMS_EQUIP_NEWBIE_2 = 56;
  GACHA_PJMS_ADVANCE_AVATAR_1 = 57;
  GACHA_PJMS_ADVANCE_EQUIP_1 = 58;
  GACHA_TYPE_ERROR = 100;
}

enum PjmsGachaGroupType {
  PJMS_GACHA_GROUP_NONE = 0;
  PJMS_GACHA_GROUP_CORE = 1;
  PJMS_GACHA_GROUP_RARE = 2;
  PJMS_GACHA_GROUP_NORMAL = 3;
}

enum PjmsGachaMergeType {
  PJMS_GACHA_MERGE_NONE = 0;
  PJMS_GACHA_MERGE_AVATAR = 1;
  PJMS_GACHA_MERGE_EQUIP = 2;
  PJMS_GACHA_MERGE_ELF = 3;
  PJMS_GACHA_MERGE_AVATAR_2 = 4;
  PJMS_GACHA_MERGE_EQUIP_2 = 5;
  PJMS_GACHA_MERGE_AVATAR_NEWBIE = 6;
  PJMS_GACHA_MERGE_EQUIP_NEWBIE = 7;
  PJMS_GACHA_MERGE_ADVANCE_AVATAR = 8;
  PJMS_GACHA_MERGE_ADVANCE_EQUIP = 9;
}

enum AddFriendAction {
  ADD_FRIEND_ACTION_NONE = 0;
  ADD_FRIEND_ACTION_ASK = 1;
  ADD_FRIEND_ACTION_AGREE = 2;
  ADD_FRIEND_ACTION_REJECT = 3;
}

enum PrivilegeProductType {
  PRIVILEGE_PRODUCT_ALL = 0;
  PRIVILEGE_PRODUCT_NEWBIE = 1;
  PRIVILEGE_PRODUCT_GOBACK = 2;
  PRIVILEGE_PRODUCT_ADVENTURE = 3;
}

enum PrivilegeRightType {
  PRIVILEGE_RIGHT_TYPE_NONE = 0;
  PRIVILEGE_RIGHT_DAILY_FREE_GACHA = 1;
  PRIVILEGE_RIGHT_CARD_DAILY_REWARD = 2;
  PRIVILEGE_RIGHT_DAILY_ONE_FREE_GACHA = 3;
  PRIVILEGE_RIGHT_DAILY_TEN_FREE_GACHA = 4;
}

enum PrivilegeOpenType {
  PRIVILEGE_OPEN_NORMAL = 0;
  PRIVILEGE_OPEN_SCHEDULED = 1;
}

enum MailType {
  MAIL_TYPE_NONE = 0;
  MAIL_INNER = 1;
  MAIL_OUTER = 2;
  MAIL_NOTICE = 3;
}

enum SystemChatMsgType {
  CHAT_MSG_NONE = 0;
  CHAT_MSG_GACHA = 1;
  CHAT_MSG_LOBBY = 2;
  CHAT_MSG_FORGE = 3;
  CHAT_MSG_SCRATCH = 4;
}

enum StageResetType {
  STAGE_RESET_TYPE_RESET = 0;
  STAGE_RESET_TYPE_ADD = 1;
}

enum DiscountType {
  DISCOUNT_TYPE_NONE = 0;
  DISCOUNT_EQUIP_POWER_UP_SCOIN = 1;
  DISCOUNT_AVATAR_SKILL_UP_SCOIN = 2;
  DISCOUNT_EQUIP_POWER_UP_BOOST_RATE = 3;
  DISCOUNT_EQUIP_POWER_UP_BOOST_PROB = 4;
}

enum BulletinActivityType {
  BULLETIN_ACTIVITY_TYPE_NONE = 0;
  BULLETIN_ACTIVITY_TYPE_MOSAIC = 1;
  BULLETIN_ACTIVITY_TYPE_GACHA = 2;
  BULLETIN_ACTIVITY_TYPE_SHOP = 3;
  BULLETIN_ACTIVITY_TYPE_MISSION = 4;
  BULLETIN_ACTIVITY_TYPE_BULLETIN = 5;
  BULLETIN_ACTIVITY_TYPE_CITYACTIVITY = 6;
  BULLETIN_ACTIVITY_TYPE_NEWROLE = 7;
  BULLETIN_ACTIVITY_TYPE_GACHA_TIMELINE = 8;
  BULLETIN_ACTIVITY_TYPE_ACTIVITY_TIMELINE = 9;
  BULLETIN_ACTIVITY_TYPE_FLOP_CARD = 10;
  BULLETIN_ACTIVITY_TYPE_BINGO = 11;
  BULLETIN_ACTIVITY_TYPE_SCORE = 12;
  BULLETIN_ACTIVITY_TYPE_RELATION = 13;
  BULLETIN_ACTIVITY_TYPE_WEB = 14;
  BULLETIN_ACTIVITY_TYPE_LOTTERY_DRAW_NUMBER = 15;
  BULLETIN_ACTIVITY_TYPE_LOTTERY_TAKE_REWARD = 16;
  BULLETIN_ACTIVITY_TYPE_CONTINUOUS_RECHARGE = 17;
  BULLETIN_ACTIVITY_TYPE_SUPER_SIGN_IN = 18;
  BULLETIN_ACTIVITY_TYPE_OVERLAP = 19;
  BULLETIN_ACTIVITY_TYPE_REWARD_OVERVIEW = 20;
  BULLETIN_ACTIVITY_TYPE_SCRATCH_TICKET = 21;
  BULLETIN_ACTIVITY_TYPE_BBQ = 22;
  BULLETIN_ACTIVITY_TYPE_PICTURE = 23;
  BULLETIN_ACTIVITY_TYPE_JIGSAW = 24;
  BULLETIN_ACTIVITY_TYPE_REUNION = 25;
  BULLETIN_ACTIVITY_TYPE_GIFT = 26;
  BULLETIN_ACTIVITY_TYPE_SLOT_MACHINE = 27;
  BULLETIN_ACTIVITY_TYPE_RAFFLE = 28;
  BULLETIN_ACTIVITY_TYPE_LOGIN_REWARD = 29;
  BULLETIN_ACTIVITY_TYPE_LOGIN_WISH = 30;
  BULLETIN_ACTIVITY_TYPE_WEBVIEW = 31;
  BULLETIN_ACTIVITY_TYPE_ALLEVIATION = 32;
  BULLETIN_ACTIVITY_TYPE_SHOW_PICTURE = 33;
  BULLETIN_ACTIVITY_TYPE_SHOW_MAIN_EVENT_INFO = 34;
  BULLETIN_ACTIVITY_TYPE_REUNION_COOK = 35;
  BULLETIN_ACTIVITY_TYPE_REUNION_TIMELINE = 36;
  BULLETIN_ACTIVITY_TYPE_DREAM = 37;
  BULLETIN_ACTIVITY_TYPE_SPACESHIP_GIFT = 38;
  BULLETIN_ACTIVITY_TYPE_MISSION_THEME = 39;
  BULLETIN_ACTIVITY_TYPE_RECHARGE_ADD_UP = 41;
  BULLETIN_ACTIVITY_TYPE_NEW_GIFT = 42;
  BULLETIN_ACTIVITY_TYPE_ANNIVERSARY_GIFT = 43;
  BULLETIN_ACTIVITY_TYPE_DATA_REFACTOR = 44;
  BULLETIN_ACTIVITY_TYPE_OW_CHAPTER = 45;
  BULLETIN_ACTIVITY_TYPE_PLAYER_LEVEL_LOCK = 46;
  BULLETIN_ACTIVITY_TYPE_PV_LOGIN = 47;
  BULLETIN_ACTIVITY_TYPE_ANNIVERSARY_INTEGRATE = 48;
  BULLETIN_ACTIVITY_TYPE_MINI_MONOPOLY = 49;
  BULLETIN_ACTIVITY_TYPE_MISSION_VERTICAL = 50;
  BULLETIN_ACTIVITY_TYPE_PON_MACHINE = 51;
  BULLETIN_ACTIVITY_TYPE_CARNIVAL_LOTTERY = 52;
  BULLETIN_ACTIVITY_TYPE_MARS_TUTORIAL_VERSION_REWARD = 53;
  BULLETIN_ACTIVITY_TYPE_BURDEN_ALLEVIATION_V2 = 54;
  BULLETIN_ACTIVITY_TYPE_CRYSTAL_LOTTERY = 55;
}

enum MissionType {
  MISSION_NONE = 0;
  MISSION_LINEAR = 1;
  MISSION_BOUNTY = 2;
  MISSION_TIMED = 3;
  MISSION_SIDE = 4;
  MISSION_CYCLE = 5;
  MISSION_DAILY = 6;
  MISSION_PROGRESS = 7;
  MISSION_CHALLENGE = 8;
  MISSION_MASTER_PUPIL_EXAM = 10;
  MISSION_MASTER_PUPIL_DAILY = 11;
  MISSION_AVATAR_TRAINING = 12;
  MISSION_RPG_TALE = 13;
  MISSION_MAINLINE_STEP = 14;
  MISSION_GOBACK = 15;
  MISSION_WEEKLY_ROUTINE = 16;
  MISSION_ADVENTURE_GROUP = 18;
  MISSION_MASTER_PUPIL_COMPANY = 19;
  MISSION_ACTIVITY = 20;
  MISSION_COMPETITION_SEASON = 21;
  MISSION_PJMS_ACTIVITY = 22;
}

enum MissionSubType {
  MISSION_SUB_TYPE_NONE = 0;
  MISSION_SUB_BRANCH = 1;
  MISSION_SUB_MP_RAID = 102;
  MISSION_SUB_ARMADA = 301;
  MISSION_SUB_SHOP_ADD_ON = 501;
  MISSION_SUB_RAFFLE = 502;
  MISSION_SUB_WEB_ACTIVITY = 503;
  MISSION_SUB_COMPETITION_SEASON = 504;
  MISSION_SUB_DREAM = 505;
  MISSION_SUB_REFRESH_CYCLE_ON_FINISH = 506;
  MISSION_SUB_GOD_WAR = 507;
  MISSION_SUB_SC_DLC = 508;
  MISSION_SUB_CHAPTER_OW = 509;
  MISSION_SUB_OW_STORY = 510;
  MISSION_SUB_PJMS_ACHIEVEMENT = 511;
  MISSION_SUB_RPG_TAKE_REWARD_DROP = 1301;
  MISSION_SUB_GOBACK = 1501;
  MISSION_SUB_GOBACK_ACTIVITY = 1502;
  MISSION_SUB_GOBACK_LIMIT_TIME = 1503;
  MISSION_SUB_ADVENTURE_GROUP = 1801;
  MISSION_SUB_NINJA = 2001;
  MISSION_SUB_ARMADA_REUNION = 2002;
  MISSION_SUB_LOGIN_MISSION = 2003;
  MISSION_SUB_INVITEE = 2004;
}

enum SideMissionCond {
  SIDE_MISSION_COND_NONE = 0;
  SIDE_MISSION_COND_AVATAR_GOODFEEL = 1;
}

enum MissionFinishWay {
  MISSION_FINISH_NONE = 0;
  MISSION_AUTO = 1;
  MISSION_ANY_STORY_STAGE_NORMAL = 2;
  MISSION_ANY_STORY_STAGE_HARD = 3;
  MISSION_ANY_STORY_STAGE_HELL = 4;
  MISSION_SPECIFIC_STAGE_ID = 5;
  MISSION_SPECIFIC_MONSTER_ID = 6;
  MISSION_SPECIFIC_UNIQUE_MONSTER_ID = 7;
  MISSION_TRIGGER_ABILITY_ACTION = 10;
  MISSION_KILL_WITH_ANIM_EVENT_ID = 11;
  MISSION_AVATAR_LEVEL_UP_BY_MATERIAL = 12;
  MISSION_AVATAR_SUB_SKILL_LEVEL_UP = 13;
  MISSION_GACHA = 14;
  MISSION_EQUIPMENT_POWER_UP = 15;
  MISSION_STAGE_NORMAL_WITH_SPECIFIC_AVATAR_CLASS = 18;
  MISSION_STAGE_HARD_WITH_SPECIFIC_AVATAR_CLASS = 19;
  MISSION_ANY_WEEK_DAY_STAGE = 20;
  MISSION_ANY_BEFALL_STAGE = 21;
  MISSION_ANY_NOT_STORY_STAGE = 22;
  MISSION_STAGE_HELL_WITH_SPECIFIC_AVATAR_CLASS = 27;
  MISSION_STAGE_NORMAL_WITH_SPECIFIC_AVATAR = 28;
  MISSION_STAGE_HARD_WITH_SPECIFIC_AVATAR = 29;
  MISSION_STAGE_HELL_WITH_SPECIFIC_AVATAR = 30;
  MISSION_FINISH_NO_ACHIEVEMENT_NUM = 36;
  MISSION_TOTAL_AVATAR_SKILL_POINT_NUM = 37;
  MISSION_TEN_HCOIN_GACHA_STAR_NUM = 43;
  MISSION_STAGE_MIN_TIME_TEN_SECOND = 45;
  MISSION_STAGE_ASSISTANT_NUM = 46;
  MISSION_STAGE_SUCC_NUM = 47;
  MISSION_STAGE_WITH_ASSISTANT_SUCC_NUM = 48;
  MISSION_WEAPON_POWER_UP = 49;
  MISSION_STIGMATA_POWER_UP = 50;
  MISSION_ISLAND_COLLECT = 52;
  MISSION_ISLAND_GET_VENTURE_REWARD = 53;
  MISSION_AVATAR_TOUCH_NUM = 54;
  MISSION_ISLAND_MAX_COST_POWER = 57;
  MISSION_ISLAND_VENTURE_TOTAL_COST_HOUR = 58;
  MISSION_AVATAR_ADD_SUB_SKILL = 64;
  MISSION_MULTI_WEAPON_POWER_UP_LEVEL = 65;
  MISSION_MULTI_STIGMATA_POWER_UP_LEVEL = 66;
  MISSION_ISLAND_CABIN_LEVEL_UP = 67;
  MISSION_ISLAND_CABIN_EXTEND_GRADE = 68;
  MISSION_ISLAND_ADD_TECH = 69;
  MISSION_GACHA_WITH_TYPE = 70;
  MISSION_REAL_NAME = 73;
  MISSION_ENDLESS_GROUP_LEVEL = 75;
  MISSION_SHARE_GAME_IN_SNS = 80;
  MISSION_COLLECT = 81;
  MISSION_ACTIVITY_PROGRESS = 82;
  MISSION_BUY_GOODS_WITH_SCOIN_OR_HCOIN = 83;
  MISSION_SCOIN_EXCHANGE = 84;
  MISSION_STAMINA_EXCHANGE = 85;
  MISSION_CONSIGNED_ORDER = 86;
  MISSION_ROGUE_STAGE = 87;
  MISSION_STAGE_MAX_COMBO_PASS = 88;
  MISSION_OPENWORLD_FIGHT_BOSS = 91;
  MISSION_OPENWORLD_KILL_BOSS = 92;
  MISSION_OPENWORLD_BOSS_DAMAGE = 93;
  MISSION_OPENWORLD_QUEST_LEVEL = 94;
  MISSION_OPENWORLD_FINISH_SIDE_QUEST_NUM = 96;
  MISSION_EQUIPMENT_POWER_UP_NO_BACKTRACK = 98;
  MISSION_FIGHT_ARMADA_STAGE = 100;
  MISSION_OPENWORLD_FINISH_QUEST_NO_BACKTRACK = 101;
  MISSION_OPENWORLD_REWARD_NUM = 102;
  MISSION_WAREHOUSE_DONATE = 103;
  MISSION_STORY_STAGE_WITH_AVATAR_NUM = 105;
  MISSION_EQUIPMENT_EVO = 107;
  MISSION_USE_AVATAR_KILL_MONSTER = 108;
  MISSION_HELP_FRIEND_ISLAND = 112;
  MISSION_STAGE_MIN_BE_HIT_PASS = 113;
  MISSION_STAGE_COSMOS_BREAK = 114;
  MISSION_STAGE_COSMOS_BREAK_DAMAGE = 115;
  MISSION_STAGE_USE_EX_SKILL = 116;
  MISSION_REFINE_STIGMATA = 117;
  MISSION_DISJOIN_EQUIPMENT = 118;
  MISSION_FINISH_MP_STAGE_WITH_TYPE = 119;
  MISSION_USE_MP_TEAM_SKILL = 120;
  MISSION_USE_MP_QTE_SKILL = 121;
  MISSION_OPENWORLD_FINISH_EVENT_TYPE_NO_BACKTRACK = 122;
  MISSION_MIN_BE_HIT_PASS_WITH_STAGE_ID = 123;
  MISSION_FINISH_MP_STAGE = 124;
  MISSION_STAGE_DEFEND_TARGET_MIN_HP_PASS = 126;
  MISSION_STAGE_DEFEND_TARGET_MIN_HP_PERCENT_PASS = 127;
  MISSION_GET_CARD_REWARD_NUM = 131;
  MISSION_TOTAL_COST_SCOIN_NUM = 132;
  MISSION_TOTAL_COST_HCOIN_NUM = 134;
  MISSION_MP_MVP_NUM = 136;
  MISSION_FACEBOOK_LIKE = 145;
  MISSION_STAGE_MIN_TIME_WITH_STAGE_ID = 146;
  MISSION_STAGE_TAG_COMBO_PASS = 147;
  MISSION_STAGE_TAG_WITH_SPECIFIC_AVATAR = 148;
  MISSION_POWERUP_MULTI_SPECIFIC_EQUIP_LEVEL = 151;
  MISSION_EVO_MULTI_SPECIFIC_EQUIP_STAR = 152;
  MISSION_EVO_ANY_BEFALL_WEAPON_STAR = 153;
  MISSION_FRAGMENTS_EXCHANGE_STIGMATA = 154;
  MISSION_STAGE_TAG_SUCCESS_EVADE_PASS = 156;
  MISSION_CHALLENGE_SPECIFIC_STAGE_ID = 157;
  MISSION_FINISH_EXBOSS_NUM = 160;
  MISSION_WIN_LEVEL_EXBOSS = 162;
  MISSION_GET_EXBOSS_RANK = 163;
  MISSION_BIND_MOBILE = 165;
  MISSION_BIND_EMAIL = 166;
  MISSION_SET_ACCOUNT_USERNAME = 167;
  MISSION_FINISH_SPECIFIC_MISSION = 169;
  MISSION_FINISH_SPECIFIED_DIFFICULTY_RAID_WITH_MASTER = 170;
  MISSION_PUBLISH_MASTER_PUPIL_CARD = 175;
  MISSION_GET_EXBOSS_RANK_PERCENT = 179;
  MISSION_MP_LIKE_NUM = 181;
  MISSION_CLICK_LINK = 182;
  MISSION_BUY_FURNITURE = 184;
  MISSION_MATERIAL_RECYCLE = 192;
  MISSION_OPENWORLD_FINISH_EVENT_SUBTYPE_LIST = 193;
  MISSION_OPENWORLD_FINISH_QUEST_SPECIFIC_AVATAR = 194;
  MISSION_EXBOSS_STAGE_SPECIFIC_AVATAR = 195;
  MISSION_RAID_STAGE_SPECIFIC_AVATAR = 197;
  MISSION_ISLAND_VENTURE_SPECIFIC_AVATAR = 198;
  MISSION_DORM_EVENT_SPECIFIC_AVATAR = 199;
  MISSION_PASS_STAGE_SPECIFIC_AVATAR = 201;
  MISSION_PASS_SPECIFIC_STAGE_SPECIFIC_AVATAR = 202;
  MISSION_PASS_STAGE_SPECIFIC_REQUIRE = 203;
  MISSION_DORM_USE_FACILITY_NUM = 206;
  MISSION_COLLECT_SPECIFIC_AMOUNT_ITEMS = 213;
  MISSION_USE_SPECIFIC_AVATARS_KILL_MONSTER = 214;
  MISSION_PASS_STAGE_WITH_EQUIPMENT_MAINID = 218;
  MISSION_REACH_DAILY_DUTY_POINT = 219;
  MISSION_REACH_WEEKLY_DUTY_POINT = 221;
  MISSION_STAGE_TOTAL_BATTLE_SCORE_WITH_STAGE_TAG = 227;
  MISSION_STAGE_RANK_WITH_STAGE_TAG = 228;
  MISSION_GENERAL_ACTIVITY_FINISH_TIMES = 233;
  MISSION_DORM_CLIENT_CUSTOM = 241;
  MISSION_OPENWORLD_CHOOSE_QUEST = 242;
  MISSION_SHOP_BUY_GOODS = 243;
  MISSION_DORM_TAKE_DAILY_STAMINA = 244;
  MISSION_OPENWORLD_MAKE_MECHA_TIMES = 253;
  MISSION_OPENWORLD_TECH_ADD_EXP_TIMES = 255;
  MISSION_OPENWORLD_QUEST_RATE = 256;
  MISSION_OPENWORLD_QUEST_FINISHED_CHALLENGE_NUM = 258;
  MISSION_OPENWORLD_QUEST_FINISHED_WITH_MECHA = 259;
  MISSION_OPENWORLD_HACK_ITEM = 260;
  MISSION_OPENWORLD_TD_STAGE_RATE = 261;
  MISSION_OPENWORLD_QUEST_LEVEL_WITH_MAP = 264;
  MISSION_OPENWORLD_FINISH_QUEST_NO_BACKTRACK_WITH_MAP = 267;
  MISSION_OPENWORLD_FINISH_QUEST_NO_BACKTRACK_WITH_SUB_TYPE_AND_MAP = 268;
  MISSION_OPENWORLD_FINISH_EVENT_TYPE_NO_BACKTRACK_WITH_MAP = 269;
  MISSION_GOBACK_DUTY_POINT = 270;
  MISSION_ONLINE_TIME = 272;
  MISSION_TAKE_PHOTOS = 273;
  MISSION_WIKI_CG_NUM = 276;
  MISSION_BINGO_ACTIVITY_FLOP_CARD = 297;
  MISSION_BINGO_ACTIVITY_BINGO_COMPLETE = 298;
  MISSION_FINISH_MP_STAGE_WITH_GOBACK_PLAYER = 300;
  MISSION_OPENWORLD_BOSS_GET_RATING_NUM = 301;
  MISSION_OPENWORLD_BOSS_KILLED_NUM_WITHIN_TIME_LIMIT = 302;
  MISSION_OPENWORLD_ACTIVITY_LEVEL = 303;
  MISSION_OPENWORLD_BOSS_HUNT_FIND_CLUE_NUM = 304;
  MISSION_OPENWORLD_BOSS_KILLED_NUM_SPECIFIC_AVATAR = 305;
  MISSION_RPG_TALE_PASS_SITE = 309;
  MISSION_RPG_TALE_OVERALL_EQUAL = 310;
  MISSION_RPG_TALE_TOTAL_STAGE_SCORE = 311;
  MISSION_MATRIX_FINISH_EVENT = 315;
  MISSION_VIRTUAL_TRAIN_GACHA_TIMES = 319;
  MISSION_VIRTUAL_TRAIN_GACHA_AVATAR_STAR = 320;
  MISSION_RPG_TALE_TAKE_PRODUCT_TIMES = 321;
  MISSION_RPG_TALE_TAKE_PRODUCT_NUM = 322;
  MISSION_RPG_TALE_TOWER_TIMES = 324;
  MISSION_FINISH_ANY_RAID_ACTIVITY = 330;
  MISSION_FRIEND_INVITE = 331;
  MISSION_ARMADA_APPLY = 333;
  MISSION_ISLAND_CABIN_LEVEL = 335;
  MISSION_SHOPPING_TIMES = 337;
  MISSION_ADD_UP_VIP_POINT = 341;
  MISSION_DORM_USE_FACILITY_NUM_NO_RESULT = 342;
  MISSION_FINISH_SPECIFIC_PLOT_ID = 343;
  MISSION_OPENWORLD_ENDLESS_SCORE = 344;
  MISSION_OPENWORLD_ENDLESS_BOSS = 345;
  MISSION_OPENWORLD_ENDLESS_ADD_GROUP_LEVEL = 346;
  MISSION_OPENWORLD_ENDLESS_GROUP_LEVEL = 347;
  MISSION_OPENWORLD_ENDLESS_FINISH_MONSTER_GROUP = 348;
  MISSION_OPENWORLD_ENDLESS_USE_ITEM = 349;
  MISSION_ENDLESS_FINISH_STAGE_OR_BOSS_WITH_ENDLESS_TYPE = 350;
  MISSION_ENDLESS_FINISH_STAGE_OR_BOSS_SPECIFIC_AVATAR = 351;
  MISSION_QUANTUM_ENDLESS_PASS_MONSTER_GROUP = 352;
  MISSION_FRONT_ENDLESS_FINISH_FLOOR = 353;
  MISSION_FARM_ACTIVITY_SPEED_UP_PRODUCE_TIMES = 366;
  MISSION_FARM_ACTIVITY_FINISH_PRODUCE_TIMES = 367;
  MISSION_FARM_ACTIVITY_FARM_LEVEL = 368;
  MISSION_FARM_ACTIVITY_UNLOCK_SLOT_NUM = 369;
  MISSION_FARM_ACTIVITY_FINISH_PRODUCE_SPECIFIC_MATERIAL = 370;
  MISSION_TAKE_SPECIFIC_NPC_RED_ENVELOPE_NUM = 372;
  MISSION_GACHA_WITH_MULTI_TYPES = 373;
  MISSION_TOWER_RAID_NUM = 374;
  MISSION_TOWER_RAID_BOSS_NUM = 375;
  MISSION_TOWER_RAID_FINISH_ALL_NUM = 376;
  MISSION_CHATWORLD_ONLINE_TIME = 377;
  MISSION_CHATWORLD_USE_ITEM = 379;
  MISSION_CAMPAIGN_FINISH_PHASE = 380;
  MISSION_CAMPAIGN_FINISH = 381;
  MISSION_CAMPAIGN_FINISH_STAGE = 382;
  MISSION_STAGE_TAG_NUM_SPECIFIC_ELF = 390;
  MISSION_STAGE_NUM_SPECIFIC_ELF = 391;
  MISSION_ENDLESS_FINISH_STAGE_OR_BOSS_SPECIFIC_ELF = 392;
  MISSION_EXBOSS_STAGE_SPECIFIC_ELF = 393;
  MISSION_STORY_STAGE_SPECIFIC_ELF = 395;
  MISSION_STAGE_NUM_WITH_ELF = 400;
  MISSION_CAMPAIGN_SHORT_CHAT = 421;
  MISSION_CAMPAIGN_FINISH_SCORE = 422;
  MISSION_CAMPAIGN_MVP = 423;
  MISSION_CAMPAIGN_TEAM_DRAW_RARITY = 424;
  MISSION_CMAPAIGN_SELF_DRAW = 425;
  MISSION_CAMPAIGN_LIKE_NUM = 426;
  MISSION_CAMPAIGN_TEACH_MODE_FINISH_PHASE = 427;
  MISSION_CAMPAIGN_TEACH_MODE_FINISH = 428;
  MISSION_PASS_STAGE_WITH_ANY_SPECIFIC_AVATAR = 441;
  MISSION_CHATWORLD_KILL_NUM = 451;
  MISSION_CHATWORLD_BATTLE_SCORE = 457;
  MISSION_GACHA_TOTAL_SCORE = 463;
  MISSION_MONOPOLY_THROW_DICE = 464;
  MISSION_MONOPOLY_EXPLORE = 465;
  MISSION_MONOPOLY_PASS_AREA = 466;
  MISSION_MATRIX_FINISH_FLOOR = 467;
  MISSION_MATRIX_TRIGGER_EVENT = 468;
  MISSION_STAGE_TAG_CHALLENGE_NUM = 469;
  MISSION_EQUIPMENT_FORGE_TIMES = 470;
  MISSION_GLOBAL_WAR_TOTAL_CURRENCY = 471;
  MISSION_GLOBAL_WAR_CURRENCY_BY_STAGE = 472;
  MISSION_GLOBAL_WAR_CURRENCY_BY_EXCHANGE = 473;
  MISSION_GLOBAL_WAR_EXCHANGE_TIMES = 474;
  MISSION_GLOBAL_WAR_FINISH_POINT = 475;
  MISSION_GLOBAL_WAR_CURRENCY_BY_SWEEP = 476;
  MISSION_GLOBAL_WAR_FINISH_OR_EXCHANGE_TIMES_WITH_POINT_ID_LIST = 477;
  MISSION_SHOP_COST_MCOIN_NUM = 480;
  MISSION_VIRTUAL_TRAIN_CUSTOM_LEVEL = 481;
  MISSION_VIRTUAL_TRAIN_GROUP_TOTAL_LEVEL_UP_TIMES = 482;
  MISSION_SEND_RED_ENVELOPE_IN_SPECIFIC_TIME = 489;
  MISSION_ADVENTURE_ADD_BADGE = 491;
  MISSION_ADVENTURE_FINISH_ADVENTURE_BY_RARITY = 493;
  MISSION_ADVENTURE_TAKE_SCOIN = 495;
  MISSION_SCRATCH_TICKET_SCRATCH_NUM = 501;
  MISSION_SCRATCH_TICKET_ROUND_NUM = 502;
  MISSION_BBQ_COOK_NUM = 503;
  MISSION_DLC_USE_ACTIVE_SKILL = 505;
  MISSION_DLC_OUTER_AREA_KILL_NUM = 506;
  MISSION_DLC_SHIELD_MONSTER_KILL_NUM = 507;
  MISSION_DLC_IN_CIRCLE_KILL_NUM = 508;
  MISSION_DLC_AIR_KILL_NUM = 509;
  MISSION_DLC_THROW_SKILL_KILL_NUM = 510;
  MISSION_DLC_ACTIVE_SKILL_KILL_NUM = 511;
  MISSION_DLC_BREAK_FREQUENCY_SHIELD_NUM = 512;
  MISSION_DLC_BREAK_HARD_SHIELD_NUM = 513;
  MISSION_DLC_EX_JUMP = 514;
  MISSION_DLC_USE_THROW_SKILL = 515;
  MISSION_DLC_TOWER_TOTAL_PROGRESS = 518;
  MISSION_DLC_ENTER_STAGE_WITH_SPECIFIC_AVATAR = 519;
  MISSION_OPENWORLD_KILL_ENEMY_WITH_MAP = 524;
  MISSION_DLC_TOWER_MAX_PROGRESS_NO_BACKTRACK = 526;
  MISSION_OPENWORLD_CHOOSE_ANY_QUEST = 527;
  MISSION_CHATWORLD_MAKE_ACTION_NUM = 545;
  MISSION_CHATWORLD_FISH_SUCC_OR_WAIT_ASSIST_NUM = 546;
  MISSION_CHATWORLD_PRAY_NUM = 547;
  MISSION_STAGE_TAG_FAIL_NUM = 548;
  MISSION_LOGIN_WITH_SPECAIL_DEVICE_TYPE = 549;
  MISSION_UNLOCK_MONTH_CARD_OR_BATTLE_PASS = 550;
  MISSION_GACHA_COST_TICKET_TOTAL_SCORE = 551;
  MISSION_GARDEN_HARVEST_NUM = 552;
  MISSION_GARDEN_HARVEST_KIND = 553;
  MISSION_GARDEN_HARVEST_NUM_BY_KIND = 554;
  MISSION_JIGSAW_EXCHANGE_PIECE = 555;
  MISSION_JIGSAW_FINISH_JIGSAW = 556;
  MISSION_OVERLAP_SUMMON_NUM = 557;
  MISSION_CHATWORLD_QUESTION = 558;
  MISSION_CHATWORLD_DISH_NUM = 559;
  MISSION_ARMADA_REUNION_REWARD = 560;
  MISSION_ARMADA_REUNION_PREPARE = 561;
  MISSION_GARDEN_SPEED_UP_TIMES = 562;
  MISSION_WEB_ACTIVITY_1 = 581;
  MISSION_WEB_ACTIVITY_2 = 582;
  MISSION_WEB_ACTIVITY_3 = 583;
  MISSION_WEB_ACTIVITY_4 = 584;
  MISSION_WEB_ACTIVITY_5 = 585;
  MISSION_WEB_ACTIVITY_6 = 586;
  MISSION_WEB_ACTIVITY_7 = 587;
  MISSION_WEB_ACTIVITY_8 = 588;
  MISSION_WEB_ACTIVITY_9 = 589;
  MISSION_WEB_ACTIVITY_10 = 590;
  MISSION_NORMAL_FINISH_SPECIFIC_STAGE_ID = 591;
  MISSION_SHOP_BUY_GOODS_ID_COST_MCOIN = 592;
  MISSION_SANCTUARY_ACTIVITY_LEVEL = 593;
  MISSION_SANCTUARY_TAKE_PRODUCT_TIMES = 594;
  MISSION_SLOT_MACHINE_START_TIMES = 595;
  MISSION_RAFFLE_DRAW_TICKET_NUM = 597;
  MISSION_MONOPOLY_BUILDING_NUM = 599;
  MISSION_MONOPOLY_BUILDING_LEVEL = 600;
  MISSION_FINISH_MOSAIC_NUM = 601;
  MISSION_MONOPOLY_USE_ITEM = 602;
  MISSION_ULTRA_ENDLESS_FINISH_SITE = 603;
  MISSION_ULTRA_ENDLESS_FINISH_SITE_WITH_TAG_AVATAR = 604;
  MISSION_ULTRA_ENDLESS_TOTAL_SCORE = 605;
  MISSION_ULTRA_ENDLESS_FINISH_SITE_NUM = 606;
  MISSION_ULTRA_ENDLESS_TOTAL_ADD_SCORE = 607;
  MISSION_ULTRA_ENDLESS_MAX_GROUP_LEVEL = 608;
  MISSION_ULTRA_ENDLESS_SEASON_ADD_CUP_NUM = 609;
  MISSION_ULTRA_ENDLESS_TOP_RANK_TIMES = 610;
  MISSION_BATTLE_PASS_THEME_LEVEL = 611;
  MISSION_BATTLE_PASS_UNLOCK_TICKET = 612;
  MISSION_GET_EXBOSS_SCORE = 613;
  MISSION_TOTAL_DUTY_POINT_IN_PERIOD = 615;
  MISSION_FINISH_MISSION_TIMES_WITH_MISSION_ID_LIST = 617;
  MISSION_GACHA_CONSUME_TOTAL_SCORE = 618;
  MISSION_REPLAY_UPLOAD = 619;
  MISSION_REPLAY_PLAY = 620;
  MISSION_REPLAY_RECORD = 621;
  MISSION_FINISH_ELITE_STAGE_NUM = 622;
  MISSION_PASS_STAGE_NUM = 623;
  MISSION_STAGE_TAG_WITH_ALL_SPECIFIC_AVATAR = 624;
  MISSION_SPECIFIC_MATERIAL_ADD_NUM = 625;
  MISSION_SPECIFIC_MATERIAL_COST_NUM = 626;
  MISSION_UNLOCK_AVATAR_IN_SPECIFIC_NEWBIE_ACTIVITY = 627;
  MISSION_QAVATAR_BATTLE_PARTICIPATE_NUM = 630;
  MISSION_QAVATAR_BATTLE_KILL_NUM = 631;
  MISSION_QAVATAR_BATTLE_KILL_NUM_SINGLE_GAME = 632;
  MISSION_QAVATAR_BATTLE_WIN_NUM = 633;
  MISSION_QAVATAR_BATTLE_SCORE = 634;
  MISSION_VIRTUAL_TRAIN_SPECIFIC_STIGMATA_NUM = 635;
  MISSION_VIRTUAL_TRAIN_SPECIFIC_AVATAR_NUM = 636;
  MISSION_ROGUE_TOWER_ENDLESS_MAX_SCORE_WITH_AVATAR_ID_LIST = 637;
  MISSION_ROGUE_TOWER_ENDLESS_TOTAL_SCORE_WITH_AVATAR_ID_LIST = 638;
  MISSION_REUNION_COOK_WITH_BOOK_ID_LIST = 639;
  MISSION_CHATWORLD_BEAST_TREASURE_TAKE_TIMES = 640;
  MISSION_CHATWORLD_BEAST_SINGLE_DAMAGE = 641;
  MISSION_CHATWORLD_BEAST_TOTAL_DAMAGE = 642;
  MISSION_CHATWORLD_NORMAL_BOX_TAKE_TIMES = 643;
  MISSION_ADD_UP_VIP_POINT_BY_PRODUCT = 644;
  MISSION_OPENWORLD_AVATAR_ACTIVITY_CULTIVATE = 645;
  MISSION_OPENWORLD_AVATAR_ACTIVITY_TALENT = 646;
  MISSION_OPENWORLD_FINISH_QUEST_NO_BACKTRACK_WITH_RARITY_AND_MAP = 647;
  MISSION_OPENWORLD_AVATAR_ACTIVITY_LEVEL = 648;
  MISSION_BOSSRUSH_ACTIVITY_STAGE_TAG_ID_USE_SPECIFIC_BUFF_ID_LIST = 649;
  MISSION_STAGE_TAG_SCORE = 650;
  MISSION_OPENWORLD_AVATAR_ACCEPT_QUEST = 651;
  MISSION_THEME_WANTED_STAGE_PASS_NUM = 652;
  MISSION_THEME_WANTED_SPECIFIC_PROGRESS_PASS_NUM = 653;
  MISSION_SLG_OCCUPIED_POINT_NUM = 656;
  MISSION_SLG_OCCUPIED_BUFF_POINT_NUM = 657;
  MISSION_SLG_PLAYER_SCORE = 658;
  MISSION_RELAY_STAGE_PHASE_PASS_TIME = 659;
  MISSION_EXBOSS_ACC_SCORE = 660;
  MISSION_GOD_WAR_STAGE_WITH_ITEM = 661;
  MISSION_GOD_WAR_STAGE_WITH_SUPPORT_AVATAR = 662;
  MISSION_GOD_WAR_AVATAR_PUNISH_LEVEL_SUCC_NUM = 666;
  MISSION_GOD_WAR_PUNISH_BUFF_SUCC_NUM = 667;
  MISSION_GOD_WAR_STAGE_WITH_PUNISH_LEVEL = 668;
  MISSION_GOD_WAR_COLLECTION = 669;
  MISSION_GOD_WAR_COLLECTION_SUIT = 670;
  MISSION_GOD_WAR_FINISH_LOBBY_ACTION = 674;
  MISSION_GOD_WAR_STAGE_TAG_SPECIFIC_CHAPTER_ON_SETTLE = 675;
  MISSION_GOD_WAR_MAX_SCORE_ON_SETTLE = 676;
  MISSION_GOD_WAR_AVATAR_SPECIFIC_PUNISH_LEVEL_SUCC_NUM = 677;
  MISSION_GOD_WAR_AVATAR_PUNISH_LEVEL_SPECIFIC_MODE_SUCC_NUM = 678;
  MISSION_RANCH_MONSTER_RARITY_NUM = 691;
  MISSION_RANCH_COLLCTION_POINT = 693;
  MISSION_RANCH_TAKE_PRODUCT_TIMES = 694;
  MISSION_RANCH_MONSTER_SYNTHESIS_WITH_FORMULA_TIMES = 695;
  MISSION_RANCH_MONSTER_SYNTHESIS_WITHOUT_FORMULA_TIMES = 696;
  MISSION_OPENWORLD_FINISH_STORY_NUM = 702;
  MISSION_NINJA_SLOT_LIST_LEVEL = 704;
  MISSION_RESTAURANT_DELIVER_QUEST_NUM = 705;
  MISSION_RESTAURANT_COOK_SPECIFIC_RECIPE = 707;
  MISSION_RESTAURANT_COOK_SPECIFIC_RECIPE_WITH_AVATAR = 708;
  MISSION_SC_DLC_FINISH_DAILY_QUEST_NUM = 711;
  MISSION_SC_DLC_TOWER_MAX_PROGRESS = 716;
  MISSION_SC_DLC_ANALYSIS_MONSTER = 717;
  MISSION_SC_DLC_LEVELUP_TALENT_NUM = 721;
  MISSION_SC_DLC_ACHIEVE_EVENT_NUM = 722;
  MISSION_SC_DLC_TOWER_FINISH_FLOOR_NUM = 723;
  MISSION_TOWN_ACTIVITY_FINISH_GAMES = 751;
  MISSION_TOWN_ACTIVITY_FINISH_BOSS = 752;
  MISSION_TOWN_ACTIVITY_BUILD_NUM = 753;
  MISSION_TOWN_ACTIVITY_BUILD_NUM_IN_ONE_GAME = 754;
  MISSION_TUTORIAL_WATCH_SITE_VIDEO = 771;
  MISSION_CHATWORLD_BATTLE_BOX_TAKE_TIMES = 776;
  MISSION_FINISH_TUTORIAL_ID = 780;
  MISSION_BOSS_CHALLENGE_FINISH_STAGE = 786;
  MISSION_SELECT_ADVENTURE_QUEST = 792;
  MISSION_BEGIN_ADVENTURE_STORY_SWEEP = 793;
  MISSION_FINISH_EXBOSS_WITH_AVATAR_LIST = 800;
  MISSION_OPENWORLD_CHAPTER_ADD_HERO_CARD_NUM = 807;
  MISSION_OPENWORLD_CHAPTER_FINISH_CHALLENGE_GROUP = 812;
  MISSION_OPENWORLD_CHAPTER_FINISH_CHALLENGE_GROUP_INDEX = 813;
  MISSION_OPENWORLD_CHAPTER_FINISH_ENDLESS_CHALLENGE = 814;
  MISSION_OPENWORLD_CHAPTER_FINISH_QUEST_NUM = 816;
  MISSION_OPENWORLD_CHAPTER_FINISH_QTE_MAP_NUM = 817;
  MISSION_OPENWORLD_CHAPTER_QTE_MAP_GET_MATERIAL_NUM = 818;
  MISSION_OPENWORLD_CHAPTER_ACCEPT_QUEST_NUM = 819;
  MISSION_MONSTER_CARD_EXP_STAGE_PASS_TIMES = 829;
  MISSION_GACHA_NUM_SPECIFIC_TICKET_ID_LIST = 831;
  MISSION_GACHA_NUM_AFTER_DISCOUNT_SPECIFIC_TICKET_ID_LIST = 832;
  MISSION_OPENWORLD_FINISH_STORY_NO_BACKTRACK = 833;
  MISSION_EX_BOSS_FINISH_BOSS_NUM_WITH_LEVEL = 834;
  MISSION_BATTLE_PASS_EXP_ACTIVITY_MISSION = 835;
  MISSION_BUFF_ASSIST_SELECT_BUFF_TIMES = 836;
  MISSION_BUFF_ASSIST_PUBLISH_BUFF_TIMES = 837;
  MISSION_DICEY_DUNGEON_ENDLESS_PASSED_FLOOR = 838;
  MISSION_DICEY_DUNGEON_DAILY_PASSED_TIMES = 839;
  MISSION_DICEY_DUNGEON_WEAPON_UNLOCK = 840;
  MISSION_DICEY_DUNGEON_WEAPON_GACHA_TIMES = 841;
  MISSION_DICEY_DUNGEON_TOTAL_ROLE_LEVEL = 842;
  MISSION_DICEY_DUNGEON_ROLE_LEVEL_GREATER_EQUAL_NUM = 843;
  MISSION_DICEY_DUNGEON_ROLE_NUM_LEVEL_GREATER_EQUAL = 844;
  MISSION_PVZ_DAILY_PASS_TIMES = 845;
  MISSION_PVZ_QAVATAR_NUM_LEVEL_GREATER_EQUAL = 846;
  MISSION_PVZ_SPECIAL_MATERIAL_NUM = 847;
  MISSION_OPENWORLD_CHAPTER_FURNACE_PRODUCE = 849;
  MISSION_OPENWORLD_CHAPTER_FINAL_ROBOT_CATCH_KILL_CRYSTAL_MONSTER = 852;
  MISSION_WAVE_RUSH_SITE_PASS_TIMES = 871;
  MISSION_WAVE_RUSH_TOTAL_SCORE = 872;
  MISSION_WAVE_RUSH_SITE_MAX_SCORE = 873;
  MISSION_QCANDY_FINISH_BATTLE_TIMES = 876;
  MISSION_QCANDY_FINISH_BATTLE_TIMES_WITH_LE_RANK = 877;
  MISSION_QCANDY_MAX_RANK_SCORE = 878;
  MISSION_QCANDY_SPECIFIC_MAP_ID = 879;
  MISSION_WEIGHTED_FINISH_EXBOSS_NUM = 881;
  MISSION_ENDLESS_DETAIL_GROUP_LEVEL = 882;
  MISSION_MINI_MONOPOLY_FINISH_MAP = 886;
  MISSION_AI_CYBER_REPAIR_PROGRESS = 887;
  MISSION_GLOBAL_EXPLORE_AREA_EXPLORE = 888;
  MISSION_GLOBAL_EXPLORE_FINISH_QUEST = 889;
  MISSION_GLOBAL_EXPLORE_CUMULATIVE_DONATION = 890;
  MISSION_GLOBAL_EXPLORE_SPECIFIC_EXPLORE_LEVEL = 891;
  MISSION_GLOBAL_EXPLORE_TRIGGER_EVENT = 892;
  MISSION_CHATWORLD_WOODEN_BOY_WIN = 893;
  MISSION_CHATWORLD_WOODEN_BOY_FINISH = 894;
  MISSION_CHATWORLD_QUESTION_RIGHT = 895;
  MISSION_PLATFORM_SHOOTER_QAVATAR_NUM_LEVEL_GREATER_EQUAL = 896;
  MISSION_PLATFORM_SHOOTER_AFFIX_NUM = 897;
  MISSION_PLATFORM_SHOOTER_HAS_EXCLUSIVE_AFFIX_WEAPON_NUM = 898;
  MISSION_PLATFORM_SHOOTER_RPG_COLLECTION_SCORE = 899;
  MISSION_MIRAGE_ACTIVITY_CHALLENGE_SCORE_SUM = 901;
  MISSION_MIRAGE_ACTIVITY_TALENT_LEVEL = 902;
  MISSION_SUSANNA_TRIAL_ACTIVITY_MENTOR_PROGRESS = 903;
  MISSION_SHIGURE_KIRA_ACTIVITY_CONCERT_PROGRESS = 904;
  MISSION_MATCH_THREE_GEM_GACHA_TIMES = 906;
  MISSION_MATCH_THREE_DAILY_PASSED_TIMES = 907;
  MISSION_MATCH_THREE_ROLE_NUM_LEVEL_GREATER_EQUAL = 908;
  MISSION_CHAPTER_BW_WORLD_RUNE_GOT_NUM = 911;
  MISSION_CHAPTER_BW_WORLD_RUNE_REACH_LEVEL = 912;
  MISSION_CHAPTER_BW_WORLD_TOWER_STAGE_SCORE = 913;
  MISSION_THEME_TOWER_STAGE_PASSED_TIMES_WITH_STEP_LEVEL = 915;
  MISSION_THEME_TOWER_SECTION_PASSED_TIMES_WITH_STEP_LEVEL = 916;
  MISSION_THEME_TOWER_SPECIFIC_SECTION_NUM = 917;
  MISSION_MAHOU_CARD_UNLOCK_DAILY_SITE_TIMES = 921;
  MISSION_MAHOU_CARD_ROLE_LEVEL_GREATER_EQUAL = 922;
  MISSION_MAHOU_CARD_ENTER_ROOM = 923;
  MISSION_ULTRA_ENDLESS_MAX_GROUP_LEVEL_WITH_SCHEDULE = 926;
  MISSION_ULTRA_ENDLESS_FINISH_SITE_SCORE = 927;
  MISSION_CHAPTER_ARK_ROLE_LEVEL_EQUAL = 931;
  MISSION_CHAPTER_ARK_FINISH_LINEAR_STAGE_NUM = 932;
  MISSION_CHAPTER_ARK_MAIN_SUP_SKILL_LEVEL_EQUAL = 933;
  MISSION_GOBACK_SCHEDULEID_AND_LOSTDAYS = 936;
  MISSION_GOBACK_NOT_SCHEDULEID = 937;
  MISSION_MATRIX_NEW_FINISH_TRACK_EVENT = 941;
  MISSION_TILED_GAME_FARM_USE_TOOL_NUM = 946;
  MISSION_TILED_GAME_FARM_FACILTIY_LEVEL = 947;
  MISSION_TILED_GAME_FARM_ENTER_MINE_FLOOR = 948;
  MISSION_TILED_GAME_FARM_DAILY_QUEST = 949;
  MISSION_TILED_GAME_FARM_CHOOSE_DAILY_QUEST = 950;
  MISSION_TILED_GAME_FARM_ADD_LIVESTOCK = 951;
  MISSION_TILED_GAME_FARM_FILL_FOOD = 952;
  MISSION_TILED_GAME_FARM_TAME_LIVESTOCK = 953;
  MISSION_FIRST_WIN_SPECIFIC_STAGE_NUM = 954;
  MISSION_TILED_GAME_FARM_UNLOCK_GALLERY = 955;
  MISSION_MINION_CLASH_ACTIVITY_LEVEL_GE = 956;
  MISSION_MINION_CLASH_GET_CARD_WITH_STAR = 957;
  MISSION_MARBLES_SHOOT_PASS_NON_DAILY_ROOM = 961;
  MISSION_MARBLES_SHOOT_DAILY_GAME_SCORE = 962;
  MISSION_MARBLES_SHOOT_UNLOCK_WIKI = 963;
  MISSION_MARBLES_SHOOT_AVATAR_REACH_LEVEL = 964;
  MISSION_MARBLES_SHOOT_AVATAR_LEVEL_GREATER_EQUAL_NUM = 965;
  MISSION_MARBLES_SHOOT_BUY_OR_LEVEL_UP_BALL_TIMES = 966;
  MISSION_GOURMET_HUNT_MANAGEMENT_TIMES = 971;
  MISSION_GOURMET_HUNT_KILL_SPECIFIED_BOSS = 980;
  MISSION_GOURMET_HUNT_TAKE_OUT_SPECIFIED_INGREDIENT = 981;
  MISSION_GOURMET_HUNT_COST_STAMINA_NUM = 983;
  MISSION_GOURMET_HUNT_CLIENT_FINISH = 985;
  MISSION_GOURMET_HUNT_MANAGEMENT_REVENUE_WITH_SPECIFIED_IDENTITY_TYPE = 986;
  MISSION_GOURMET_HUNT_MANAGEMENT_TOTAL_REVENUE_WITH_SPECIFIED_IDENTITY_TYPE = 987;
  MISSION_GOURMET_HUNT_MANAGEMENT_SOLD_RECIPE_WITH_SPECIFIED_IDENTITY_TYPE = 988;
  MISSION_GOURMET_HUNT_MANAGEMENT_FINISH_SPECIAL_MISSION_WITH_SPECIFIED_IDENTITY_TYPE = 989;
  MISSION_GOURMET_HUNT_BRANCH_STORE_FLAG = 990;
  MISSION_WEAPON_HOMOLOGY_LEVEL = 991;
  MISSION_PJMS_CHAPTER_FINISH_DAILY_QUEST_NUM = 992;
  MISSION_PJMS_CHAPTER_RESIDENT_STAGE_GROUP_NUM = 993;
  MISSION_PJMS_ACHIEVE_EVENT_NUM = 994;
  MISSION_PJMS_CHAPTER_SET_UNIT_NUM = 995;
  MISSION_PJMS_RARITY_AUXILIARY_GET_AFFIX_LIST_NUM = 996;
  MISSION_PJMS_CORE_UNIT_LEVEL_NUM_GE = 997;
  MISSION_PJMS_AUXILIARY_UNIT_LEVEL_NUM_GE = 998;
  MISSION_PJMS_FIRST_ENTER = 999;
  MISSION_RAID_REPLACE_TOTAL_CHALLENGE_NUM = 1000;
  MISSION_RAID_REPLACE_STAGE_PASSED_TIMES = 1001;
  MISSION_RAID_REPLACE_BOSS_STAGE_PASSED_TIMES = 1002;
  MISSION_THELEMA_ACTIVITY_FINISH_QUESTION_NPC_NUM = 1010;
  MISSION_THELEMA_ACTIVITY_FINISH_ALL_QUESTION_NPC_NUM = 1011;
  MISSION_THELEMA_ACTIVITY_SKIP_QUESTION = 1012;
  MISSION_CHATWORLD_QCANDY_WISH_TIMES = 1015;
  MISSION_PJMS_SPECIFIC_STATUS_GADGET_NUM = 1016;
  MISSION_CHATWORLD_UNLOCKED_EFFECT_NUM = 1017;
  MISSION_CHATWORLD_TAKE_DISH_PREPARE = 1018;
  MISSION_GOURMET_HUNT_UNLOCK_WEAPON_MODULE_NUM = 1021;
  MISSION_MATCH_THREE_PLUS_PASS_DAILY = 1022;
  MISSION_MATCH_THREE_PLUS_GACHA_TIMES = 1023;
  MISSION_MATCH_THREE_PLUS_ROLE_LEVEL_EQUAL = 1024;
  MISSION_UNLOCK_AVATAR_NO_BACKTRACK = 1025;
  MISSION_DEVIL_AUTO_CHESS_ROLE_NUM_LEVEL_GREATER_EQUAL = 1026;
  MISSION_DEVIL_AUTO_CHESS_END_GAME = 1027;
  MISSION_DEVIL_AUTO_CHESS_BEGIN_GAME = 1028;
  MISSION_DEVIL_AUTO_CHESS_FINISH_WAVE = 1029;
  MISSION_DEVIL_AUTO_CHESS_TOTAL_SWEEP_TIMES = 1030;
  MISSION_TILED_GAME_SRPG_FINISH_BATTLE_WITH_BATTLE_TYPE = 1031;
  MISSION_TILED_GAME_SRPG_FINISH_BATTLE_WITH_ID = 1032;
  MISSION_TILED_GAME_SRPG_FINISH_BATTLE_WITH_WIN_TYPE = 1033;
  MISSION_TILED_GAME_SRPG_FINISH_BATTLE_WITH_BATTLE_TYPE_AND_AVATAR = 1034;
  MISSION_TILED_GAME_SRPG_AVATAR_LEVEL_EQUAL = 1035;
  MISSION_TILED_GAME_SRPG_AVATAR_MATERIAL_TYPE_NUM = 1036;
  MISSION_TILED_GAME_SRPG_AVATAR_SKILL_TIMES = 1037;
  MISSION_TILED_GAME_SRPG_DAMAGE_TIMES_WITH_SKILL_ONE_ROUND = 1038;
  MISSION_TILED_GAME_SRPG_FINISH_BATTLE_WITH_ID_LIST = 1039;
  MISSION_TILED_GAME_SRPG_BATTLE_REPORT = 1040;
  MISSION_TILED_GAME_SRPG_EXPLORE_LEVEL = 1041;
  MISSION_TILED_GAME_SRPG_CHALLENGE_NUM_WITH_BATTLE_ID_LIST = 1042;
  MISSION_THEME_WANTED_STAGE_MULTI_PASS_NUM = 1051;
  MISSION_FINISH_BY_ACTION_GRAPH = 1052;
  MISSION_STIGMATA_PRISM_NUM = 1053;
  MISSION_STAR_RING_ELF_NUM = 1054;
  MISSION_FUTARI_BATTLE_NORMAL_STAGE_MAX_SCORE = 1055;
  MISSION_FUTARI_BATTLE_STAGE_GROUP_MAX_SCORE = 1056;
  MISSION_FUTARI_BATTLE_MAX_SCORE = 1057;
  MISSION_RE_ACTIVITY_FIRST_WIN_SPECIFIC_TILE_MAP_LIST = 1058;
  MISSION_QRTS_UPGRADE_BUFF_NUM = 1059;
  MISSION_QRTS_SWEEP_NUM = 1060;
  MISSION_MONSTER_FARM_HIT_MINE = 1062;
  MISSION_MONSTER_FARM_USE_BREEDING_EFFECT_ITEM = 1063;
  MISSION_MONSTER_FARM_BREEDING_NUM = 1064;
  MISSION_MONSTER_FARM_USE_TOOL_NUM = 1065;
  MISSION_MONSTER_FARM_MONSTER_NUM_WITH_ID_LIST = 1066;
  MISSION_MONSTER_FARM_DAILY_QUEST = 1067;
  MISSION_MONSTER_FARM_BUILDING_WITH_SPECIAL_MONSTER_LIST = 1068;
  MISSION_MONSTER_FARM_BUILDING_WITH_RARE_MONSTER = 1069;
  MISSION_MONSTER_FARM_RARE_MONSTER_NUM = 1070;
  MISSION_PJMS_CHAPTER_KNIGHT_RICH_MAN_THROW_DICE_WITH_MAP_ID = 1071;
  MISSION_PJMS_CHAPTER_KNIGHT_RICH_MAN_FINISH_SITE_TYPE_WITH_MAP_ID = 1072;
  MISSION_PJMS_CHAPTER_KNIGHT_RICH_MAN_TOTAL_SCORE_WITH_MAP_ID = 1073;
  MISSION_PJMS_CHAPTER_KNIGHT_RICH_MAN_THROW_CONTROL_DICE_WITH_MAP_ID = 1074;
  MISSION_PJMS_CHAPTER_KNIGHT_RICH_MAN_USE_COIN_WITH_MAP_ID = 1075;
  MISSION_PJMS_CHAPTER_KNIGHT_RICH_MAN_FIRST_PASS_MAP = 1076;
  MISSION_PJMS_CHAPTER_KNIGHT_RICH_MAN_THROW_DICE_WITH_RICH_MAN_ID = 1077;
  MISSION_PJMS_CHAPTER_KNIGHT_RICH_MAN_FINISH_SITE_TYPE_WITH_RICH_MAN_ID = 1078;
  MISSION_PJMS_CHAPTER_KNIGHT_RICH_MAN_TOTAL_SCORE_WITH_RICH_MAN_ID = 1079;
  MISSION_PJMS_CHAPTER_KNIGHT_RICH_MAN_THROW_CONTROL_DICE_WITH_RICH_MAN_ID = 1080;
  MISSION_MONSTER_CARD_PVP_TAKE_PRODUCT_REWARD = 1081;
  MISSION_MONSTER_CARD_PVP_FINISH_COMBAT = 1082;
  MISSION_MONSTER_CARD_PVP_MAX_ELO_SCORE = 1083;
  MISSION_MONSTER_CARD_PVP_SPECIFIC_POOL_GACHA = 1084;
  MISSION_MONSTER_CARD_PVP_LEVEL = 1085;
  MISSION_MONSTER_CARD_PVP_SELECT_RARITY_SKILL_NUM = 1086;
  MISSION_MONSTER_FARM_DROP_MONSTER_WITH_MOOD = 1090;
  MISSION_ENTER_SPECIFIC_PAGE = 1091;
  MISSION_PJMS_CHAPTER_KNIGHT_RICH_MAN_USE_COIN_WITH_RICH_MAN_ID = 1096;
  MISSION_TILED_GAME_PRPG_FINISH_DAILY_BATTLE = 1106;
  MISSION_PJMS_CHAPTER_KNIGHT_RICH_MAN_GET_COIN_NUM_BY_GAMBLE = 1120;
  MISSION_PJMS_CHAPTER_KNIGHT_RICH_MAN_GET_COIN_NUM_BY_RENT = 1121;
  MISSION_PJMS_CHAPTER_KNIGHT_RICH_MAN_USE_CARD_NUM_WITH_MAP_ID = 1122;
  MISSION_PJMS_CHAPTER_KNIGHT_RICH_MAN_MAX_PASS_FLOOR_WITH_MAP_ID = 1123;
  MISSION_PJMS_CHAPTER_KNIGHT_RICH_MAN_PASS_FLOOR_NUM_WITH_MAP_ID = 1124;
  MISSION_PJMS_CHAPTER_KNIGHT_RICH_MAP_MAX_COIN_NUM_WITH_MAP_ID = 1126;
  MISSION_PJMS_CHAPTER_KNIGHT_RICH_MAN_HAS_GOT_FLOWER_TYPE_NUM = 1128;
  MISSION_PJMS_CHAPTER_KNIGHT_RICH_MAN_DURANDAL_CUBE_FIRST_WIN_SPECIFIC_TILE_MAP_LIST = 1131;
  MISSION_MONSTER_MORPH_MONSTER_LEVEL = 1135;
  MISSION_MONSTER_MORPH_MONSTER_STAR = 1136;
  MISSION_MONSTER_MORPH_STAGE_PASSED_TIMES = 1137;
  MISSION_KIANA_AUTO_CHESS_FINISH_PVP_WITH_RANK = 1138;
  MISSION_KIANA_AUTO_CHESS_COMBO_CARD_NUM = 1139;
  MISSION_CHATWORLD_GROUP_PHOTO_TIMES_WITH_BACKDROP_ID = 1140;
  MISSION_CHATWORLD_SEND_LANTERN_TIMES = 1141;
  MISSION_CHATWORLD_TAKE_DANCE_REWARD_TIMES = 1142;
  MISSION_KIANA_AUTO_CHESS_HONKAI_DISASTER_DAMAGE = 1143;
  MISSION_KIANA_AUTO_CHESS_CARD_DAMAGE_BY_MAIN_ID = 1144;
  MISSION_KIANA_AUTO_CHESS_COIN_GOT_NUM_BY_COMBO = 1145;
  MISSION_KIANA_AUTO_CHESS_OVERALL_VALUE = 1146;
  MISSION_TILED_GAME_INN_FINISH_MANAGE_TIMES = 1151;
  MISSION_TILED_GAME_INN_TRAVEL_TIMES = 1152;
  MISSION_TILED_GAME_INN_DEVELOP_DISH_NUM_WITH_SPECIFIC_TASTE = 1153;
  MISSION_TILED_GAME_INN_SOLD_DISH_NUM = 1154;
  MISSION_TILED_GAME_INN_EARN_GOLD_NUM_IN_ONCE_MANAGEMENT = 1155;
  MISSION_TILED_GAME_INN_BUY_SPECIFIC_FURNITURE_NUM = 1156;
  MISSION_TILED_GAME_INN_MANAGE_LEVEL = 1157;
  MISSION_TILED_GAME_INN_FOOD_TYPE_NUM = 1158;
  MISSION_TILED_GAME_INN_DEVELOP_DISH_NUM_WITH_SPECIFIC_TECHNIQUES = 1159;
  MISSION_TILED_GAME_INN_SOLD_DISH_NUM_WITH_SPECIFIC_TECHNIQUES = 1160;
  MISSION_TILED_GAME_INN_SOLD_DISH_NUM_WITH_SPECIFIC_TASTE = 1161;
  MISSION_TILED_GAME_INN_SOLD_UP_DISH_NUM = 1162;
  MISSION_TILED_GAME_INN_TRAVEl_AREA_NUM = 1163;
  MISSION_TILED_GAME_INN_DEVELOP_DISH_NUM_WITH_FOOD_NUM = 1164;
  MISSION_TILED_GAME_INN_COMFORTABLE_VALUE_NUM = 1165;
  MISSION_TILED_GAME_INN_TRAVEL_SPECIAL_AREA_TIMES = 1166;
  MISSION_TILED_GAME_INN_SOLD_EXQUISITE_DISH_NUM = 1167;
  MISSION_TILED_GAME_INN_CUSTOMER_NUM_WITH_MOOD = 1168;
  MISSION_TILED_GAME_INN_MANAGE_WITH_SPECIFIC_FOOD_NUM_DISHES = 1169;
  MISSION_TILED_GAME_INN_TRAVEL_WITH_SPECIFIC_STAFF = 1170;
  MISSION_TILED_GAME_INN_SOLD_DISH_NUM_MATCHING_CUSTOMER_TENDENCY = 1171;
  MISSION_TILED_GAME_INN_SOLD_DISH_NUM_WITH_SPECIFIC_PRICE = 1172;
  MISSION_BATTLE_PASS_UNLOCK_TICKET_WITH_SCHEDULE_ID = 1176;
  MISSION_PJMS_CHAPTER_KNIGHT_SPACE_ADVENTURE_PASS_SITE = 1180;
  MISSION_PJMS_CHAPTER_KNIGHT_SPACE_ADVENTURE_BUY_SPECIFIC_CARDS = 1181;
  MISSION_PJMS_CHAPTER_KNIGHT_SPACE_ADVENTURE_KILL_SPECIFIC_MONSTERS = 1182;
  MISSION_PJMS_CHAPTER_KNIGHT_SPACE_ADVENTURE_FINISH_SPECIFIC_EVENTS = 1183;
  MISSION_PJMS_CHAPTER_KNIGHT_SPACE_ADVENTURE_ADD_CARDS_NUM = 1184;
  MISSION_PJMS_CHAPTER_KNIGHT_SPACE_ADVENTURE_KILL_NUM = 1185;
  MISSION_PJMS_CHAPTER_KNIGHT_SPACE_ADVENTURE_FINISH_EVENT_NUM = 1186;
  MISSION_PJMS_CHAPTER_KNIGHT_SPACE_ADVENTURE_ADD_COIN_NUM = 1187;
  MISSION_PJMS_CHAPTER_KNIGHT_SPACE_ADVENTURE_EDIT_BATTLE_CARD = 1188;
  MISSION_PJMS_CHAPTER_KNIGHT_SPACE_ADVENTURE_COST_MISSILE_OR_EMP = 1189;
  MISSION_BUY_BATTLE_PASS_LEVEL_USE_HCOIN_OR_MCOIN = 1200;
  MISSION_CANNOT_FINISH = 9999;
  MISSION_KILL_ANY_ENEMY = 10008;
  MISSION_KILL_SPECIFIC_MONSTER_CATEGORY = 10009;
  MISSION_STAGE_SUCC_WITH_FRIEND = 10016;
  MISSION_COST_STAMINA = 10017;
  MISSION_KILL_BY_ATTACK_CATEGORY_TAG = 10023;
  MISSION_AVATAR_STAR = 10024;
  MISSION_AVATAR_SUB_SKILL_LEVEL = 10025;
  MISSION_AVATAR_LEVEL = 10026;
  MISSION_STORY_STAGE_FAIL_NUM = 10031;
  MISSION_STAGE_MAX_COMBO_NUM = 10032;
  MISSION_STORY_STAGE_NORMAL_NUM = 10033;
  MISSION_STORY_STAGE_HARD_NUM = 10034;
  MISSION_STORY_STAGE_HELL_NUM = 10035;
  MISSION_AVATAR_STAR_NUM = 10038;
  MISSION_AVATAR_GOODFEEL_LEVEL_NUM = 10039;
  MISSION_WEAPON_PICTORIAL_NUM = 10040;
  MISSION_STIGMATA_PICTORIAL_NUM = 10041;
  MISSION_STIGMATA_PICTORIAL_SUIT_NUM = 10042;
  MISSION_FRIEND_POINT_NUM = 10044;
  MISSION_STAGE_TAG_NUM = 10051;
  MISSION_STAGE_TAG_V2_NUM = 10052;
  MISSION_EQUIPMENT_POWER_UP_TWO_RATE = 10055;
  MISSION_SCOIN_EXCHANGE_TEN_RATE = 10056;
  MISSION_TOTAL_COST_STAMINA = 10059;
  MISSION_STAGE_MAX_SCORE_WITH_STAGE_ID = 10060;
  MISSION_STAGE_TOTAL_SCORE_WITH_STAGE_ID = 10061;
  MISSION_STAGE_MAX_SCORE_WITH_STAGE_TAG = 10062;
  MISSION_STAGE_TOTAL_SCORE_WITH_STAGE_TAG = 10063;
  MISSION_EXTRASTORY_CHALLENGE_NUM = 10071;
  MISSION_EXTRASTORY_STAGE_MAX_SCORE = 10072;
  MISSION_OPENWORLD_FINISH_EVENT_TYPE = 10090;
  MISSION_OPENWORLD_FINISH_QUEST_NUM = 10095;
  MISSION_OPENWORLD_PERFECT_REWARD_NUM = 10097;
  MISSION_JOIN_ARMADA = 10099;
  MISSION_OPENWORLD_FINISH_STORY = 10104;
  MISSION_AVATAR_MAX_LEVEL = 10109;
  MISSION_AVATAR_MAX_SUB_SKILL_LEVEL = 10110;
  MISSION_WEAPON_TYPE_MAX_LEVEL = 10111;
  MISSION_BIND_ACCOUNT = 10125;
  MISSION_EXTRASTORY_HAS_PASS_NUM_WITH_DIFFICULTY = 10128;
  MISSION_EXTRASTORY_HAS_PASS_NUM = 10129;
  MISSION_TOTAL_COST_SCOIN_NUM_BACKTRACK = 10133;
  MISSION_TOTAL_COST_HCOIN_NUM_BACKTRACK = 10135;
  MISSION_STAGE_TOTAL_MAX_SCORE_WITH_STAGE_TAG = 10144;
  MISSION_AVATAR_DRESSED_EQUIPMENTS = 10149;
  MISSION_DRESSED_ANY_BEFALL_WEAPON = 10150;
  MISSION_LEVEL_MULTI_EQUIP_RARITY_BACKTRACK = 10156;
  MISSION_POWERUP_MULTI_SPECIFIC_EQUIP_BACKTRACK = 10158;
  MISSION_EVO_MULTI_SPECIFIC_EQUIP_BACKTRACK = 10159;
  MISSION_FINISH_EXBOSS_NUM_BACKTRACK = 10161;
  MISSION_OPENWORLD_TECH_LEVEL = 10164;
  MISSION_UNLOCK_AVATAR = 10168;
  MISSION_FINISH_PLAYER_LEVEL = 10171;
  MISSION_GET_EXBOSS_SCORE_BACKTRACK = 10172;
  MISSION_PUPIL_GRADUATED_BACKTRACK = 10173;
  MISSION_MASTER_HAS_NUM_GRADUATED_PUPIL_BACKTRACK = 10174;
  MISSION_FINISH_BE_MASTER_BACKTRACK = 10176;
  MISSION_RECRUIT_NUM_PUPIL_BACKTRACK = 10177;
  MISSION_FINISH_BE_PUPIL_BACKTRACK = 10178;
  MISSION_SPECIFIC_STAGE_ID_BACKTRACK = 10180;
  MISSION_COLLECT_FURNITURE_SUIT = 10183;
  MISSION_COLLECT_SPECIFIC_ITEM = 10185;
  MISSION_DORM_COMFORT_LEVEL = 10186;
  MISSION_DORM_COMFORT_VALUE = 10187;
  MISSION_DORM_FACILITY_LEVEL = 10188;
  MISSION_DORM_HOUSE_LEVEL = 10189;
  MISSION_OPENWORLD_QUEST_LEVEL_BACKTRACK = 10190;
  MISSION_DORM_HOUSE_LEVEL_IN_PARAM = 10191;
  MISSION_POWERUP_MULTI_SPECIFIC_EQUIP_MAINID_BACKTRACK = 10207;
  MISSION_EVO_MULTI_SPECIFIC_EQUIP_MAINID_BACKTRACK = 10208;
  MISSION_AVATAR_GOODFEEL_LEVEL_SPECIFIC_AVATAR = 10212;
  MISSION_REACH_DAILY_DUTY_POINT_BACKTRACK = 10220;
  MISSION_REACH_WEEKLY_DUTY_POINT_BACKTRACK = 10222;
  MISSION_LEVEL_MULTI_EQUIP_MAINID_BACKTRACK = 10223;
  MISSION_STAR_MULTI_EQUIP_MAINID_BACKTRACK = 10224;
  MISSION_AVATAR_DRESSED_EQUIPMENTS_MAINID = 10225;
  MISSION_AVATAR_SUB_SKILL_LEVELUP_PROGRESS = 10226;
  MISSION_GENERAL_ACTIVITY_SCORE_BACKTRACK = 10234;
  MISSION_OPENWORLD_MAKE_MECHA_TIMES_BACKTRACK = 10254;
  MISSION_OPENWORLD_QUEST_RATE_BACKTRACK = 10257;
  MISSION_OPENWORLD_TD_STAGE_RATE_BACKTRACK = 10262;
  MISSION_OPENWORLD_FINISH_EVENT_TYPE_WITH_MAP = 10263;
  MISSION_OPENWORLD_QUEST_LEVEL_BACKTRACK_WITH_MAP = 10265;
  MISSION_OPENWORLD_FINISH_QUEST_NUM_WITH_MAP = 10266;
  MISSION_WIKI_EQUIPMENT_NUM_BY_RARITY = 10274;
  MISSION_WIKI_STIGMATA_SUIT_NUM_BY_RARITY = 10275;
  MISSION_WIKI_ACHIEVEMENT_NUM_BY_TYPE = 10277;
  MISSION_GOBACK_GAIN_EXP = 10299;
  MISSION_RPG_TALE_ROLE_NUM = 10308;
  MISSION_RPG_TALE_PASS_SITE_BACKTRACK = 10309;
  MISSION_MATRIX_COLLECT_ITEM = 10316;
  MISSION_VIRTUAL_TRAIN_AVATAR_NUM = 10317;
  MISSION_VIRTUAL_TRAIN_AVATAR_STAR_NUM = 10318;
  MISSION_RPG_TALE_TOWER_FLOOR = 10323;
  MISSION_RPG_TALE_ABILITY_LEVEL_BACKTRACK = 10325;
  MISSION_MASTER_PUPIL_INVITE = 10332;
  MISSION_AVATAR_LEVEL_NUM = 10334;
  MISSION_DORM_ROOM_UNLOCK = 10336;
  MISSION_EQUIPMENT_POWER_UP_LEVEL_BACKTRACK = 10365;
  MISSION_GOBACK_SCORE = 10378;
  MISSION_AVATAR_ARTIFACT_LEVEL = 10383;
  MISSION_LEVEL_LOCK_EXP = 10384;
  MISSION_SET_LEVEL_LOCK_ID = 10385;
  MISSION_ELF_STAR = 10386;
  MISSION_ELF_LEVEL = 10387;
  MISSION_ELF_STAR_NUM = 10388;
  MISSION_ELF_LEVEL_NUM = 10389;
  MISSION_ELF_TALENT_LEVEL = 10396;
  MISSION_ELF_TALENT_GROUP_LEVEL = 10397;
  MISSION_ELF_TALENT_SLOT_UNLOCK_NUM = 10398;
  MISSION_ELF_TOTAL_PERIOD_UPGRADE_TIMES = 10399;
  MISSION_ELF_TOTAL_SKILL_LEVEL = 10401;
  MISSION_GOBACK_TOTAL_LOGIN_DAYS = 10452;
  MISSION_TOTAL_LOGIN_DAYS = 10462;
  MISSION_ADVENTURE_LEVEL = 10490;
  MISSION_ADVENTURE_ADD_BADGE_BACKTRACK = 10492;
  MISSION_ADVENTURE_FINISH_ADVENTURE = 10494;
  MISSION_NINJA_SLOT_LEVEL = 10504;
  MISSION_DLC_AVATAR_TALENT_TOTAL_LEVEL = 10516;
  MISSION_DLC_TOWER_MAX_PROGRESS = 10517;
  MISSION_DLC_SUPPORT_NPC_LEVEL = 10520;
  MISSION_DLC_TALENT_LEVEL = 10521;
  MISSION_DLC_LEVEL = 10522;
  MISSION_DLC_COLLECTION_TYPE_NUM = 10523;
  MISSION_OPENWORLD_FINISH_ONCE_EVENT_BACKTRACK_WITH_MAP = 10525;
  MISSION_OPENWORLD_FINISH_SPECIFIC_STORY_NUM_BACKTRACK = 10528;
  MISSION_EXAMINATION_FINISH_NUM = 10596;
  MISSION_FINISH_MOSAIC_NUM_BACKTRACK = 10598;
  MISSION_OPENWORLD_QUEST_ACTIVITY_TOTAL_SCORE_BACKTRACK = 10614;
  MISSION_AVATAR_STAR_SUBSTAR = 10655;
  MISSION_GOD_WAR_ROLE_RELATION_LEVEL_BACKTRACK = 10663;
  MISSION_GOD_WAR_TALENT_LEVEL_NUM_BACKTRACK = 10664;
  MISSION_GOD_WAR_AVATAR_PUNISH_LEVEL_NUM_BACKTRACK = 10665;
  MISSION_GOD_WAR_COLLECTION_TYPE_NUM_BACKTRACK = 10671;
  MISSION_GOD_WAR_ROLE_AVATAR_LEVEL_NUM_BACKTRACK = 10672;
  MISSION_GOD_WAR_SETTLE_EVENT_BACKTRACK = 10673;
  MISSION_RANCH_MONSTER_WIKI_LIST = 10692;
  MISSION_BIND_HOYOLAB_ACCOUNT = 10701;
  MISSION_OPENWORLD_CHAPTER_EQUIP_COST = 10703;
  MISSION_RESTAURANT_FACILITY_LEVEL = 10706;
  MISSION_OPENWORLD_CHAPTER_FAME_LEVEL_BACKTRACK = 10709;
  MISSION_SPECIFIC_MATERIAL_NUM_BACKTRACK = 10710;
  MISSION_SC_DLC_LEVEL_BACKTRACK = 10712;
  MISSION_SC_DLC_AVATAR_LEVEL_BACKTRACK = 10713;
  MISSION_SC_DLC_AVATAR_TALENT_NUM_BACKTRACK = 10714;
  MISSION_SC_DLC_NPC_SUPPORT_LEVEL_BACKTRACK = 10715;
  MISSION_SC_DLC_AVATAR_LEVEL_NUM_BACKTRACK = 10718;
  MISSION_SC_DLC_UNLOCK_TALENT_NUM_BACKTRACK = 10719;
  MISSION_SC_DLC_NPC_SUPPORT_LEVEL_NUM_BACKTRACK = 10720;
  MISSION_SPECIFIC_STAGE_NUM_BACKTRACK = 10741;
  MISSION_UNLOCK_SPECIFIC_PHOTO_NUM_BACKTRACK = 10742;
  MISSION_TOWN_ACTIVITY_CHALLNGE_NUM_BACKTRACK = 10755;
  MISSION_SPECIFIC_AVATAR_EQUIP_WEAPON_LEVEL_BACKTRACK = 10781;
  MISSION_SPECIFIC_AVATAR_EQUIP_STIGMATA_SUIT_BACKTRACK = 10782;
  MISSION_AVATAR_SPECIFIC_UNLOCK_STAR_NUM_BACKTRACK = 10783;
  MISSION_AVATAR_SPECIFIC_TYPE_NUM_BACKTRACK = 10784;
  MISSION_AVATAR_SPECIFIC_UNLOCK_STAR_SPECIFC_LEVEL_NUM_BACKTRACK = 10785;
  MISSION_AVATAR_SPECIFIC_TYPE_SPECIFIC_LEVEL_NUM_BACKTRACK = 10790;
  MISSION_GRAND_KEY_GET_ANY_BACKTRACK = 10791;
  MISSION_STAGE_TAG_CHALLENGE_NUM_BACKTRACK = 10796;
  MISSION_FINISH_MISSION_TIMES_WITH_MISSION_ID_LIST_BACKTRACK = 10797;
  MISSION_OPENWORLD_CHAPTER_UNLOCK_HERO_BACKTRACK = 10806;
  MISSION_OPENWORLD_CHAPTER_HERO_CARD_LEVEL_BACKTRACK = 10808;
  MISSION_OPENWORLD_CHAPTER_HERO_LEVEL_BACKTRACK = 10809;
  MISSION_OPENWORLD_ACTIVE_CARD_GROUP_BATTLE_POINT_BACKTRACK = 10810;
  MISSION_OPENWORLD_CHAPTER_UNLOCK_HERO_CARD_BACKTRACK = 10811;
  MISSION_OPENWORLD_CHAPTER_BUILDING_LEVEL_BACKTRACK = 10815;
  MISSION_OPENWORLD_HUNT_FINISH_QUEST_NUM_BACKTRACK = 10820;
  MISSION_OPENWORLD_HUNT_DESTROY_STRONGHOLD_NUM_BACKTRACK = 10821;
  MISSION_OPENWORLD_HUNT_HUNTER_KILLED_MAP_NUM_BACKTRACK = 10822;
  MISSION_OPENWORLD_HUNT_TALENT_TOTAL_LEVEL_BACKTRACK = 10823;
  MISSION_MONSTER_CARD_COLLECTION_NUM_BACKTRACK = 10826;
  MISSION_MONSTER_CARD_COLLECTION_LEVEL_BACKTRACK = 10827;
  MISSION_MONSTER_CARD_NUM_LEVEL_GREATER_EQUAL_BACKTRACK = 10828;
  MISSION_OPENWORLD_CHAPTER_TERMINAL_LEVEL_BACKTRACK = 10848;
  MISSION_OPENWORLD_CHAPTER_MOON_CHALLENGE_TOWER_FINISH_FLOOR_BACKTRACK = 10850;
  MISSION_OPENWORLD_CHAPTER_MOON_CHALLENGE_TOWER_PASS_NUM_BACKTRACK = 10851;
  MISSION_OPENWORLD_CHAPTER_BUILDING_TYPE_UNLOCK_NUM_BACKTRACK = 10852;
  MISSION_OPENWORLD_CHAPTER_TALENT_LEVEL_BACKTRACK = 10853;
  MISSION_OPENWORLD_CHAPTER_TALENT_TOTAL_LEVEL_BACKTRACK = 10854;
  MISSION_OPENWORLD_CHAPTER_TERMINAL_PERIOD_UPGRADE_AT_LEVEL_BACKTRACK = 10855;
  MISSION_OPENWORLD_CHAPTER_ANTIGRAVITY_MATERIAL_COLLECTION_NUM_BACKTRACK = 10856;
  MISSION_RPG_TALE_ABILITY_LEVEL_SUM_BACKTRACK = 10857;
  MISSION_THEME_TOWER_SECTION_LEVEL_BACKTRACK = 10858;
  MISSION_THEME_TOWER_SECTION_SCORE_BACKTRACK = 10859;
  MISSION_THEME_TOWER_SPECIFIC_SCORE_BACKTRACK = 10860;
  MISSION_CHAPTER_BW_WORLD_RUNE_REACH_LEVEL_BACKTRACK = 10861;
  MISSION_GOBACK_SCHEDULEID_AND_LOSTDAYS_BACKTRACK = 10862;
  MISSION_GOBACK_NOT_SCHEDULEID_BACKTRACK = 10863;
  MISSION_PJMS_FINSIH_STORY_BACKTRACK = 10864;
  MISSION_PJMS_ADD_EXPLORE_NUM_IN_MATERIAL_ID_LIST_BACKTRACK = 10865;
  MISSION_PJMS_AVATAR_LEVEL_NUM_BACKTRACK = 10866;
  MISSION_PJMS_ELF_LEVEL_NUM_BACKTRACK = 10867;
  MISSION_PJMS_FINSIH_STORY_LIST_BACKTRACK = 10868;
  MISSION_PJMS_CHAPTER_LEVEL_BACKTRACK = 10869;
  MISSION_PJMS_UNLOCK_BGM_NUM_BACKTRACK = 10870;
  MISSION_PJMS_UNLOCK_FURNITURE_NUM_BACKTRACK = 10871;
  MISSION_PJMS_HAS_GOT_CORE_UINT_LIST_BACKTRACK = 10872;
  MISSION_PJMS_HAS_GOT_AUXILIARY_UINT_LIST_BACKTRACK = 10873;
  MISSION_UNLOCK_COLLECTION_ID_LIST_NUM_BACKTRACK = 10874;
  MISSION_PJMS_ACTIVATE_TELEPORT_ID_LIST_NUM_BACKTRACK = 10875;
  MISSION_PJMS_UNLOCK_FOG_ID_LIST_NUM_BACKTRACK = 10876;
  MISSION_PJMS_CHAPTER_LEVEL_LE_BACKTRACK = 10877;
  MISSION_GOURMET_HUNT_MANAGEMENT_TIMES_BACKTRACK = 10971;
  MISSION_GOURMET_HUNT_MANAGEMENT_TOTAL_REVENUE_BACKTRACK = 10972;
  MISSION_GOURMET_HUNT_MANAGEMENT_TOTAL_PRAISE_BACKTRACK = 10973;
  MISSION_GOURMET_HUNT_RATING_GE_BACKTRACK = 10974;
  MISSION_GOURMET_HUNT_UNLOCK_SPECIFIED_FURNITURE_BACKTRACK = 10975;
  MISSION_GOURMET_HUNT_UNLOCKED_FURNITURE_NUM_BACKTRACK = 10976;
  MISSION_GOURMET_HUNT_UNLOCKED_RECIPE_NUM_BACKTRACK = 10977;
  MISSION_GOURMET_HUNT_LEVEL_BACKTRACK = 10978;
  MISSION_GOURMET_HUNT_UNLOCK_SPECIFIED_WEAPON_MODULE_BACKTRACK = 10979;
  MISSION_GOURMET_HUNT_OPEN_TREASURE_NUM_BACKTRACK = 10982;
  MISSION_GOURMET_HUNT_UNLOCK_TELEPORT_NUM_IN_SPECIFIED_MAP_BACKTRACK = 10984;
  MISSION_EXBOSS_FINISH_TIME_SCORE_BACKTRACK = 10985;
  MISSION_STIGMATA_PRISM_LEVEL_NUM_BACKTRACK = 10986;
  MISSION_MONSTER_FARM_UNLOCK_GALLERY_BACKTRACK = 10987;
  MISSION_MONSTER_FARM_UNLOCK_MONSTER_GALLERY_BACKTRACK = 10988;
  MISSION_MONSTER_FARM_RARE_MONSTER_NUM_BACKTRACK = 10989;
  MISSION_MONSTER_FARM_LEVEL_BACKTRACK = 10990;
  MISSION_MONSTER_FARM_ENTER_MINE_FLOOR_BACKTRACK = 10991;
  MISSION_MONSTER_FARM_BUILDING_LEVEL_BACKTRACK = 10993;
  MISSION_MONSTER_FARM_BUILDING_LIST_LEVEL_BACKTRACK = 10994;
  MISSION_TILED_GAME_PRPG_PVP_MAX_RANK_SCORE_BACKTRACK = 10995;
  MISSION_TILED_GAME_PRPG_CARD_LEVEL_SUM_BACKTRACK = 10996;
  MISSION_TILED_GAME_PRPG_PVP_TOTAL_GAMES_BACKTRACK = 10997;
  MISSION_TILED_GAME_PRPG_DECK_LEVEL_BACKTRACK = 10998;
  MISSION_KIANA_AUTO_CHESS_PVP_HIGHEST_RANK_SCORE_BACKTRACK = 10999;
  MISSION_TILED_GAME_INN_MANAGE_LEVEL_BACKTRACK = 11000;
  MISSION_TILED_GAME_INN_FURNITURE_ID_NUM_BACKTRACK = 11001;
  MISSION_TILED_GAME_INN_UNLOCK_DISH_NUM_WITH_SPECIFIC_TASTE_BACKTRACK = 11002;
  MISSION_TILED_GAME_INN_STAFF_NUM_BACKTRACK = 11003;
  MISSION_TILED_GAME_INN_FOOD_TYPE_NUM_BACKTRACK = 11004;
  MISSION_TILED_GAME_INN_FINISH_MANAGE_TIMES_BACKTRACK = 11005;
  MISSION_TILED_GAME_INN_UNLOCK_DISH_NUM_WITH_FOOD_NUM_BACKTRACK = 11006;
  MISSION_TILED_GAME_INN_SOLD_RANK_DISH_BACKTRACK = 11007;
  MISSION_TILED_GAME_INN_TRAVEL_TIMES_BACKTRACK = 11008;
  MISSION_TILED_GAME_INN_UNLOCK_DISH_NUM_WITH_SPECIFIC_TASTE_COMBINATION = 11009;
  MISSION_TILED_GAME_INN_COMFORTABLE_VALUE_NUM_BACKTRACK = 11010;
}

enum LinearMissionSolveType {
  LINEAR_MISSION_SOLVE_CLOSE = 0;
  LINEAR_MISSION_SOLVE_RESERVE = 1;
  LINEAR_MISSION_SOLVE_AUTO = 2;
}

enum CycleMissionSolveType {
  CYCLE_MISSION_SOLVE_CLOSE = 0;
  CYCLE_MISSION_SOLVE_RESERVE = 1;
}

enum ActivityType {
  ACTIVITY_NONE = 0;
  ACTIVITY_WEEK_DAY = 1;
  ACTIVITY_BEFALL = 2;
  ACTIVITY_BOSS_RUSH = 8;
  ACTIVITY_MP_OPENWORLD_BOSS = 13;
  ACTIVITY_MATRIX = 14;
}

enum EndlessType {
  ENDLESS_TYPE_NONE = 0;
  ENDLESS_TYPE_NORMAL = 1;
  ENDLESS_TYPE_OPENWORLD = 2;
  ENDLESS_TYPE_QUANTUM = 3;
  ENDLESS_TYPE_ULTRA = 4;
  ENDLESS_TYPE_GREEDY = 5;
  ENDLESS_TYPE_FRONT = 6;
}

enum EndlessRewardType {
  ENDLESS_REWARD_TYPE_NONE = 0;
  ENDLESS_PROMOTE = 1;
  ENDLESS_NORMAL = 2;
  ENDLESS_DEMOTE = 3;
}

enum CabinType {
  CABIN_TYPE_NONE = 0;
  CABIN_POWER = 1;
  CABIN_ENHANCE_KIANA = 2;
  CABIN_COLLECT = 3;
  CABIN_MISC = 4;
  CABIN_VENTURE = 5;
  CABIN_ENHANCE_MEI = 6;
  CABIN_ENHANCE_BRONYA = 7;
  CABIN_ENHANCE_HIMEKO = 8;
  CABIN_ENHANCE_THERESA = 9;
  CABIN_ENHANCE_FUKA = 10;
}

enum AvatarAttrType {
  AVATAR_ATTR_TYPE_NONE = 0;
  AVATAR_HP = 1;
  AVATAR_SP = 2;
  AVATAR_ATTACK = 3;
  AVATAR_DEFENSE = 4;
  AVATAR_CRITICAL = 5;
}

enum CabinTechEffectType {
  CABIN_TECH_EFFECT_TYPE_NONE = 0;
  CABIN_TECH_ADD_AVATAR_ATTR = 1;
  CABIN_TECH_ADD_VENTURE_MAX_NUM = 2;
  CABIN_TECH_ADD_PROCESS_VENTURE_MAX_NUM = 3;
  CABIN_TECH_ADD_REFRESH_VENTURE_ATTR = 4;
  CABIN_TECH_ADD_FRIEND_NUM = 5;
  CABIN_TECH_DISJOIN_EQUIPMENT = 6;
  CABIN_TECH_ADD_COLLECT_SPEED = 7;
  CABIN_TECH_ADD_COLLECT_STORAGE = 8;
  CABIN_TECH_ADD_COLLECT_EXTRA_PERCENT = 9;
  CABIN_TECH_ADD_COLLECT_EXTRA_RATE = 10;
  CABIN_TECH_ADD_SKILL_POINT_LIMIT = 11;
  CABIN_TECH_ADD_COLLECT_EQUIPMENT_DROP = 12;
  CABIN_TECH_ADD_COLLECT_EQUIPMENT_PACKAGE_NUM = 13;
  CABIN_TECH_SUB_COLLECT_EQUIPMENT_TIME = 14;
}

enum IslandVentureDispatchCond {
  ISLAND_VENTURE_DISPATCH_COND_NONE = 0;
  ISLAND_VENTURE_AVATAR_ID = 1;
  ISLAND_VENTURE_AVATAR_EACH_LEVEL = 2;
  ISLAND_VENTURE_AVATAR_ONE_LEVEL = 3;
  ISLAND_VENTURE_AVATAR_TOTAL_LEVEL = 4;
  ISLAND_VENTURE_AVATAR_EACH_STAR = 5;
  ISLAND_VENTURE_AVATAR_ONE_STAR = 6;
  ISLAND_VENTURE_AVATAR_NUM = 7;
  ISLAND_VENTURE_AVATAR_ATTR_NUM = 8;
  ISLAND_VENTURE_AVATAR_CLASS_NUM = 9;
  ISLAND_VENTURE_AVATAR_ATTR_NOT_SAME = 10;
  ISLAND_VENTURE_AVATAR_CLASS_NOT_SAME = 11;
}

enum DisjoinType {
  DISJOIN_TYPE_NONE = 0;
  DISJOIN_TOTAL = 1;
  DISJOIN_TITLE = 2;
  DISJOIN_EX = 3;
}

enum StigmataRefineType {
  STIGMATA_REFINE_TYPE_NONE = 0;
  STIGMATA_REFINE_NORMAL = 1;
  STIGMATA_REFINE_ADD_SLOT = 2;
  STIGMATA_REFINE_SPECIAL = 3;
  STIGMATA_REFINE_LOCK = 4;
}

enum StigmataRefineTimesType {
  STIGMATA_REFINE_TIMES_TYPE_NONE = 0;
  STIGMATA_REFINE_TIMES_ONE = 1;
  STIGMATA_REFINE_TIMES_TEN = 10;
}

enum CommentType {
  COMMENT_TYPE_NONE = 0;
  COMMENT_OK = 1;
  COMMENT_CANCEL = 2;
  COMMENT_IGNORE = 3;
}

enum ExtraStoryActType {
  EXTRA_STORY_ACT_TYPE_NONE = 0;
  EXTRA_STORY_ACT_MAIN = 1;
  EXTRA_STORY_ACT_HIDDEN = 2;
  EXTRA_STORY_ACT_ENTROPY = 3;
  EXTRA_STORY_ACT_ACTIVITY = 4;
  EXTRA_STORY_ACT_FANTASY = 5;
  EXTRA_STORY_ACT_ROGUE = 6;
}

enum AvatarRoleType {
  AVATAR_ROLE_TYPE_NONE = 0;
  AVATAR_ROLE_KIANA = 1;
  AVATAR_ROLE_MEI = 2;
  AVATAR_ROLE_BRONYA = 3;
  AVATAR_ROLE_HIMEKO = 4;
  AVATAR_ROLE_THERESA = 5;
  AVATAR_ROLE_FUKA = 6;
  AVATAR_ROLE_RITA = 7;
  AVATAR_ROLE_TWINS = 8;
  AVATAR_ROLE_SEELE = 9;
  AVATAR_ROLE_DURANDAL = 10;
  AVATAR_ROLE_ASUKA = 11;
  AVATAR_ROLE_FISCHL = 12;
  AVATAR_ROLE_KEQING = 13;
  AVATAR_ROLE_ELYSIA = 14;
  AVATAR_ROLE_MOBIUS = 15;
  AVATAR_ROLE_RAVEN = 16;
  AVATAR_ROLE_PARDOFELIS = 17;
  AVATAR_ROLE_APONIA = 18;
  AVATAR_ROLE_EDEN = 19;
  AVATAR_ROLE_GRISEO = 20;
  AVATAR_ROLE_VILL_V = 21;
  AVATAR_ROLE_LISUSHANG = 22;
  AVATAR_ROLE_AI = 23;
  AVATAR_ROLE_SUSANNAH = 24;
  AVATAR_ROLE_FEATHEREDRABBIT = 25;
  AVATAR_ROLE_PROMETHEUS = 26;
  AVATAR_ROLE_SHIGURE = 27;
  AVATAR_ROLE_28 = 28;
  AVATAR_ROLE_29 = 29;
  AVATAR_ROLE_30 = 30;
  AVATAR_ROLE_31 = 31;
  AVATAR_ROLE_32 = 32;
  AVATAR_ROLE_33 = 33;
  AVATAR_ROLE_34 = 34;
  AVATAR_ROLE_35 = 35;
  AVATAR_ROLE_SAKURA = 101;
  AVATAR_ROLE_KALLEN = 102;
  AVATAR_ROLE_DLC_MEI = 103;
  AVATAR_ROLE_DLC_ADAM = 104;
  AVATAR_ROLE_DLC_CAROL = 105;
  AVATAR_ROLE_DLC_BRONYA = 106;
  AVATAR_ROLE_DLC_KONG = 107;
  AVATAR_ROLE_200 = 200;
  AVATAR_ROLE_201 = 201;
  AVATAR_ROLE_202 = 202;
  AVATAR_ROLE_203 = 203;
  AVATAR_ROLE_204 = 204;
  AVATAR_ROLE_205 = 205;
  AVATAR_ROLE_206 = 206;
  AVATAR_ROLE_207 = 207;
  AVATAR_ROLE_208 = 208;
  AVATAR_ROLE_209 = 209;
}

enum IslandPositionType {
  ISLAND_POSITION_TYPE_NONE = 0;
  ISLAND_POSITION_CABIN_POWER = 1;
  ISLAND_POSITION_CABIN_ENHANCE_KIANA = 2;
  ISLAND_POSITION_CABIN_COLLECT = 3;
  ISLAND_POSITION_CABIN_MISC = 4;
  ISLAND_POSITION_CABIN_VENTURE = 5;
  ISLAND_POSITION_CABIN_ENHANCE_MEI = 6;
  ISLAND_POSITION_CABIN_ENHANCE_BRONYA = 7;
  ISLAND_POSITION_CABIN_ENHANCE_HIMEKO = 8;
  ISLAND_POSITION_CABIN_ENHANCE_THERESA = 9;
  ISLAND_POSITION_CABIN_ENHANCE_FUKA = 10;
  ISLAND_POSITION_NULL = 21;
  ISLAND_POSITION_MAIN = 22;
}

enum IslandEventCondType {
  ISLAND_EVENT_COND_TYPE_NONE = 0;
  ISLAND_EVENT_COND_ONE_WEATHER = 1;
  ISLAND_EVENT_COND_AVATAR_GOODFEEL = 2;
  ISLAND_EVENT_COND_HAS_AVATAR = 3;
  ISLAND_EVENT_COND_ROLE_AFFINITY = 4;
  ISLAND_EVENT_COND_ALL_AFFINITY = 5;
  ISLAND_EVENT_COND_HAS_ONE_EQUIPMENT = 201;
  ISLAND_EVENT_COND_AVATAR = 202;
  ISLAND_EVENT_COND_FINISH_ONE_EVENT = 203;
  ISLAND_EVENT_COND_POS = 204;
  ISLAND_EVENT_COND_SITE = 205;
}

enum DressType {
  DRESS_TYPE_NONE = 0;
  DRESS_BATTLE = 1;
  DRESS_SUIT = 2;
  DRESS_ARTIFACT = 4;
}

enum MaterialUseType {
  MATERIAL_USE_TYPE_NONE = 0;
  MATERIAL_USE_GIFT = 1;
  MATERIAL_USE_TREASURE = 2;
  MATERIAL_USE_RAND_GIFT = 3;
  MATERIAL_USE_BUFF = 4;
  MATERIAL_USE_EXTRA_STORY = 5;
  MATERIAL_USE_TRIAL_AVATAR = 6;
  MATERIAL_USE_MATRIX_EXPLORE_POWER = 7;
  MATERIAL_USE_AUTO_GIFT = 10;
  MATERIAL_USE_OPTIONAL_REWARD = 11;
  MATERIAL_USE_RAND_REWARD = 12;
  MATERIAL_USE_RAND_AVATAR = 13;
  MATERIAL_USE_ARMADA_WAR_ENERGE_ITEM = 14;
  MATERIAL_USE_RAND_GIFT_RESTRICT = 15;
  MATERIAL_USE_ARMADA_REUNION = 17;
  MATERIAL_USE_ULTRA_ENDLESS_BUFFER_CUP = 20;
  MATERIAL_USE_BATTLE_PASS_TICKET = 24;
  MATERIAL_USE_AVATAR_FRAGMENT_TRANSFORM = 25;
  MATERIAL_USE_BAODI_TREASURE = 27;
  MATERIAL_USE_PRIVILEGE = 28;
  MATERIAL_USE_OPENWORLD_AVATAR_ACTIVITY_EXP = 29;
  MATERIAL_USE_CONVERT_EQUIPMENT = 30;
  MATERIAL_USE_AUTO_NEW_GIFT = 31;
  MATERIAL_USE_GOD_WAR_AVATAR = 32;
  MATERIAL_USE_GOD_WAR_SUPPORT_AVATAR = 33;
  MATERIAL_USE_RANCH_MONSTER = 34;
  MATERIAL_USE_OPENWORLD_CHAPTER_EQUIP_COST = 36;
  MATERIAL_USE_OPENWORLD_CHAPTER_EQUIP_BUFF = 37;
  MATERIAL_USE_SC_DLC_FEVER_SLOT = 38;
  MATERIAL_USE_SC_DLC_AVATAR = 39;
  MATERIAL_USE_OPENWORLD_CHAPTER_FAME = 40;
  MATERIAL_USE_REWARD_LINE_SCORE = 41;
  MATERIAL_USE_GOD_WAR_GAIN_COIN = 42;
  MATERIAL_USE_OPENWORLD_CHAPTER_HERO = 43;
  MATERIAL_USE_OPENWORLD_CHAPTER_HERO_CARD = 44;
  MATERIAL_USE_MONSTER_CARD = 45;
  MATERIAL_USE_MONSTER_CARD_NO_OVERFLOW = 46;
  MATERIAL_USE_MONSTER_CARD_DROP_NUM_LIMITED = 47;
  MATERIAL_USE_PVZ_ADD_SPECIAL_MATERIAL = 48;
  MATERIAL_USE_OPENWORLD_CHAPTER_FRAGMENT_TRANSFORM = 49;
  MATERIAL_USE_ADD_MEDAL_PARAM = 50;
  MATERIAL_USE_GLOBAL_EXPLORE_EXP = 51;
  MATERIAL_USE_GLOBAL_EXPLORE_STAMINA = 52;
  MATERIAL_USE_GLOBAL_EXPLORE_CONTRIBUTION = 53;
  MATERIAL_USE_GLOBAL_EXPLORE_ACTIVE_EXP = 54;
  MATERIAL_USE_AUTO_TRIAL_WARSHIP = 55;
  MATERIAL_USE_SUSANNA_TRIAL_MENTOR_PROGRESS = 56;
  MATERIAL_USE_CHAPTER_BW_WORLD_ADD_RUNE = 57;
  MATERIAL_USE_CHAPTER_BW_WORLD_ADD_RUNE_WITH_NOTIFY = 58;
  MATERIAL_USE_PJMS_BGM = 59;
  MATERIAL_USE_ADD_PJMS_CORE_UNIT = 60;
  MATERIAL_USE_ADD_PJMS_AUXILIARY_UNIT = 61;
  MATERIAL_USE_ADD_MINION_CLASH_EXP = 62;
  MATERIAL_USE_ADD_PJMS_FURNITURE = 63;
  MATERIAL_USE_ADD_TIELD_GAME_FARM_STAMINA = 64;
  MATERIAL_USE_MINION_CLASH_CARD = 65;
  MATERIAL_USE_ADD_COLLECTION = 66;
  MATERIAL_USE_ADD_GOURMET_HUNT_INGREDIENT = 67;
  MATERIAL_USE_SET_MEDAL_MP_INFO = 68;
  MATERIAL_USE_ADD_MATERIAL_AND_PJMS_EXPLORE_SCORE = 69;
  MATERIAL_USE_ADD_CHATWORLD_QCANDY_ITEM = 70;
  MATERIAL_USE_ADD_CHATWORLD_QCANDY_RED_ENVELOPE = 71;
  MATERIAL_USE_TILED_GAME_SRPG_ADD_EXPLORE_EXP = 72;
  MATERIAL_USE_WEAPON_LEVEL_UP_TICKET = 73;
  MATERIAL_USE_MONSTER_CARD_PVP_ACTIVITY_EXP = 74;
  MATERIAL_USE_MONSTER_FARM_ACTIVITY_MONSTER = 75;
  MATERIAL_USE_STIGMATA_LEVEL_UP_TICKET = 76;
  MATERIAL_USE_MONSTER_CARD_PVP_COMBAT_TIMES = 77;
  MATERIAL_USE_TILED_GAME_PRPG_ADD_DECK_EXP = 78;
  MATERIAL_USE_MONSTER_PVP_CARD = 79;
  MATERIAL_USE_BATTLE_PASS_TICKET_UPGRADE = 80;
  MATERIAL_USE_MONSTER_CARD_ADD_EXP = 81;
  MATERIAL_USE_GOD_WAR_MAX_PUNISH_LEVEL = 82;
  MATERIAL_USE_GET_NOTHING = 83;
  MATERIAL_USE_ADD_MONSTER_MORPH_MONSTER = 84;
  MATERIAL_USE_ADD_MONSTER_MORPH_MINION = 85;
  MATERIAL_USE_ADD_MONSTER_MORPH_SKILL = 86;
  MATERIAL_USE_TILED_GAME_INN_ADD_DROP_FOOD_NUM = 87;
  MATERIAL_USE_MONSTER_CARD_PVP_CUSTOM_PACK = 88;
  MATERIAL_USE_TILED_GAME_INN_ADD_FURNITURE = 89;
}

enum IslandVisitRecordType {
  ISLAND_VISIT_RECORD_TYPE_NONE = 0;
  ISLAND_RECORD_HELP_FRIEND = 1;
  ISLAND_RECORD_BE_HELPED = 2;
  ISLAND_RECORD_LIKE = 3;
  ISLAND_RECORD_BE_LIKED = 4;
}

enum DutyType {
  DUTY_TYPE_NONE = 0;
  DUTY_DAILY = 1;
  DUTY_WEEKLY = 2;
}

enum LobbyMemberStatus {
  LOBBY_MEMBER_STATUS_NONE = 0;
  LOBBY_MEMBER_UNREADY = 1;
  LOBBY_MEMBER_READY = 2;
  LOBBY_MEMBER_FIGHTING = 3;
}

enum LobbyClientStatus {
  LOBBY_CLIENT_NONE = 0;
  LOBBY_CLIENT_CHOOSING_AVATAR = 1;
  LOBBY_CLIENT_CHOOSING_WEAPON = 2;
  LOBBY_CLIENT_CHOOSING_STIGMATA = 3;
}

enum LobbyStatus {
  LOBBY_NONE = 0;
  LOBBY_PREPARING = 1;
  LOBBY_CONNECTING = 2;
  LOBBY_FIGHTING = 3;
  LOBBY_FINISHING = 4;
  LOBBY_WAIT_DESTROY = 5;
}

enum MpTeamStatus {
  TEAM_STATUS_NONE = 0;
  TEAM_STATUS_IN_TEAM = 1;
  TEAM_STATUS_IN_LOBBY = 2;
}

enum LobbyEnterType {
  LOBBY_ENTER_TYPE_NONE = 0;
  LOBBY_ENTER_TYPE_PRIVATE = 1;
  LOBBY_ENTER_TYPE_ENTER = 2;
  LOBBY_ENTER_TYPE_FAST = 3;
}

enum MpLeaveTeamReason {
  LEAVE_TEAM_REASON_NONE = 0;
  LEAVE_TEAM_REASON_KICK = 1;
}

enum MpDataType {
  MP_DATA_ALL = 0;
  MP_DATA_LEVEL = 1;
  MP_DATA_EXP = 2;
  MP_DATA_SKILL_POINT = 3;
  MP_DATA_SKILL = 4;
  MP_DATA_AVATAR = 5;
  MP_DATA_PUNISH_TIME = 6;
}

enum MpSkillType {
  MP_SKILL_NONE = 0;
  MP_SKILL_ATTACK = 1;
  MP_SKILL_DEFENCE = 2;
  MP_SKILL_OTHER = 3;
}

enum MissionMpMemberType {
  MISSION_MP_MEMBER_TYPE_NONE = 0;
  MISSION_MP_LEADER = 1;
  MISSION_MP_ASSISTANT = 2;
}

enum MpMemberClientStatus {
  MP_MEMBER_CLIENT_NONE = 0;
  MP_MEMBER_CLIENT_IN_TEAM = 1;
  MP_MEMBER_CLIENT_IN_LOBBY = 2;
}

enum OpenworldQuestStatus {
  OPENWORLD_QUEST_NONE = 0;
  OPENWORLD_QUEST_DOING = 1;
  OPENWORLD_QUEST_FINISH = 2;
  OPENWORLD_QUEST_CLOSE = 3;
}

enum BuffAcquireType {
  BUFF_ACQUIRE_TYPE_NONE = 0;
  BUFF_ACQUIRE_GOBACK = 1;
  BUFF_ACQUIRE_ITEMUSE = 3;
}

enum BuffEffectType {
  BUFF_EFFECT_TYPE_NONE = 0;
  BUFF_EFFECT_COMMANDER_EXP = 1;
  BUFF_EFFECT_AVATAR_EXP = 2;
  BUFF_EFFECT_SCOIN = 3;
  BUFF_EFFECT_NEWBIE = 4;
  BUFF_EFFECT_GOBACK = 5;
}

enum AreaType {
  AREA_TYPE_NONE = 0;
  AREA_CN = 1;
  AREA_JP = 2;
  AREA_ASIA = 3;
  AREA_WEST = 4;
  AREA_KR = 5;
  AREA_OVERSEAS = 6;
}

enum MedalTimeType {
  MEDAL_TIME_TYPE_NONE = 0;
  MEDAL_TIME_FOREVER = 1;
  MEDAL_TIME_DURATION = 2;
  MEDAL_TIME_UNTIL = 3;
}

enum MedalOpType {
  MEDAL_OP_TYPE_NONE = 0;
  MEDAL_WEAR = 1;
  MEDAL_OFF = 2;
  MEDAL_FAVORITE_ON = 3;
  MEDAL_FAVORITE_OFF = 4;
}

enum CustomHeadTimeType {
  CUSTOM_HEAD_TIME_TYPE_NONE = 0;
  CUSTOM_HEAD_TIME_FOREVER = 1;
  CUSTOM_HEAD_TIME_DURATION = 2;
  CUSTOM_HEAD_TIME_UNTIL = 3;
}

enum PhonePendantTimeType {
  PHONE_PENDANT_TIME_TYPE_NONE = 0;
  PHONE_PENDANT_TIME_FOREVER = 1;
  PHONE_PENDANT_TIME_LIMIT = 2;
}

enum PhonePendantOpType {
  PHONE_PENDANT_OP_TYPE_NONE = 0;
  PHONE_PENDANT_WEAR = 1;
  PHONE_PENDANT_OFF = 2;
}

enum PlayerCardType {
  CARD_ALL = 0;
  CARD_AVATAR = 1;
  CARD_MEDAL = 2;
  CARD_MESSAGE = 3;
  CARD_MSG_CONFIG = 4;
  CARD_ELF = 5;
}

enum PlayerCardMsgConfig {
  CARD_MSG_ALL = 0;
  CARD_MSG_FRIEND = 1;
  CARD_MSG_FORBIDDEN = 2;
}

enum RankPowerType {
  RANK_POWER_TYPE_NONE = 0;
  AVATAR_SSS_NUM = 101;
  AVATAR_SS_NUM = 102;
  AVATAR_S_NUM = 103;
  AVATAR_A_NUM = 104;
  WEAPON_5STAR_NUM = 201;
  WEAPON_4STAR_NUM = 202;
  WEAPON_3STAR_NUM = 203;
  STIGMATA_5STAR_NUM = 301;
  STIGMATA_4STAR_NUM = 302;
  STIGMATA_3STAR_NUM = 303;
}

enum UserRankType {
  USER_RANK_NONE = 0;
  USER_RANK_NORMAL = 1;
  USER_RANK_PERCENT = 2;
}

enum PlayerGenderType {
  GENDER_NONE_TYPE = 0;
  GENDER_MALE_TYPE = 1;
  GENDER_FEMALE_TYPE = 2;
}

enum PlayerAreaType {
  AREA_NO_LIMIT = 0;
  AREA_NORTH_CHINA = 1;
  AREA_NORTH_EAST = 2;
  AREA_EAST_CHINA = 3;
  AREA_CENTRAL_CHINA = 4;
  AREA_CENTRAL_SOUTH = 5;
  AREA_NORTH_WEST = 6;
  AREA_SOUTH_WEST = 7;
  AREA_HK_MC_TW = 8;
}

enum PlayerInterestType {
  INTEREST_NONE = 0;
  INTEREST_ANIMATION = 1;
  INTEREST_COMIC = 2;
  INTEREST_GAME = 3;
  INTEREST_MUSIC = 4;
  INTEREST_DANCING = 5;
  INTEREST_KITIKU = 6;
  INTEREST_MMD = 7;
  INTEREST_TOKUSATSU = 8;
}

enum MasterPupilOpType {
  MASTER_PUPIL_OP_NONE = 0;
  MASTER_PUPIL_OP_AGREE = 1;
  MASTER_PUPIL_OP_REJECT = 2;
  MASTER_PUPIL_OP_DISMISS = 3;
}

enum MasterPupilType {
  MASTER_PUPIL_NONE_TYPE = 0;
  MASTER_PUPIL_MASTER_TYPE = 1;
  MASTER_PUPIL_PUPIL_TYPE = 2;
  MASTER_PUPIL_NEITHER_ALL = 4;
}

enum MasterPupilEventType {
  MASTER_PUPIL_EVENT_TYPE_NONE = 0;
  MASTER_PUPIL_EVENT_GET_PUPIL = 1;
  MASTER_PUPIL_EVENT_GET_MASTER = 2;
  MASTER_PUPIL_EVENT_PUPIL_ONLINE = 3;
  MASTER_PUPIL_EVENT_MASTER_ONLINE = 4;
  MASTER_PUPIL_EVENT_PUPIL_OFFLINE = 5;
  MASTER_PUPIL_EVENT_MASTER_OFFLINE = 6;
  MASTER_PUPIL_EVENT_FINISH_MISSION = 7;
  MASTER_PUPIL_EVENT_STEP_EVAL = 8;
  MASTER_PUPIL_EVENT_PUPIL_GRADUATED = 9;
  MASTER_PUPIL_EVENT_SELF_MISSION = 10;
  MASTER_PUPIL_EVENT_APPLY_PUPIL = 11;
  MASTER_PUPIL_EVENT_APPLY_MASTER = 12;
  MASTER_PUPIL_EVENT_REJECT_MASTER = 13;
  MASTER_PUPIL_EVENT_REJECT_PUPIL = 14;
  MASTER_PUPIL_EVENT_AGREE_MASTER = 15;
  MASTER_PUPIL_EVENT_AGREE_PUPIL = 16;
  MASTER_PUPIL_EVENT_DISMISS_MASTER = 17;
  MASTER_PUPIL_EVENT_DISMISS_PUPIL = 18;
  MASTER_PUPIL_EVENT_COMPANY_MISSION = 19;
  MASTER_PUPIL_EVNET_RECALL_APPLICATION = 20;
}

enum MasterPupilStatus {
  MASTER_PUPIL_STATUS_NONE = 0;
  MASTER_PUPIL_STATUS_DURING = 1;
  MASTER_PUPIL_STATUS_FINISH = 2;
  MASTER_PUPIL_STATUS_DISMISS = 3;
}

enum AvatarType {
  AVATAR_TYPE_NONE = 0;
  AVATAR_TRIAL_TYPE = 1;
  AVATAR_LIMIT_TYPE = 2;
  AVATAR_FORMAL_TYPE = 3;
}

enum DormDataType {
  DORM_DATA_ALL = 0;
  DORM_DATA_DECORATION = 1;
  DORM_DATA_EVENT = 3;
  DORM_DATA_SNS = 4;
}

enum FurnitureDirection {
  FURNITURE_DIRECTION_DOWN = 0;
  FURNITURE_DIRECTION_LEFT = 1;
  FURNITURE_DIRECTION_UP = 2;
  FURNITURE_DIRECTION_RIGHT = 3;
}

enum FurnitureLocation {
  FURNITURE_LOCATION_FLOOR = 0;
  FURNITURE_LOCATION_WALL1 = 1;
  FURNITURE_LOCATION_WALL2 = 2;
  FURNITURE_LOCATION_WALL3 = 3;
  FURNITURE_LOCATION_WALL4 = 4;
}

enum RoomType {
  ROOM_TYPE_NONE = 0;
  ROOM_TYPE_HALL = 1;
  ROOM_TYPE_BEDROOM = 2;
}

enum DecorationEffectType {
  DECORATION_EFFECT_TYPE_NONE = 0;
  DECORATION_EFFECT_FURNITURE_LIMIT = 1;
  DECORATION_EFFECT_AVATAR_LIMIT = 2;
  DECORATION_EFFECT_UNLOCK_ROOM = 3;
  DECORATION_EFFECT_POWER_LIMIT = 4;
}

enum FacilityType {
  FACILITY_TYPE_NONE = 0;
  FACILITY_TYPE_AVATAR_EXP = 1;
  FACILITY_TYPE_AVATAR_SKILL_POINT = 2;
  FACILITY_TYPE_WEAPON_EXP = 3;
  FACILITY_TYPE_STIGMATA_EXP = 4;
  FACILITY_TYPE_BAR = 5;
  FACILITY_TYPE_AUDIO_PLAYER = 6;
  FACILITY_TYPE_ENERGY = 7;
  FACILITY_TYPE_HOMELAND = 8;
  FACILITY_TYPE_REFRIGERATOR = 9;
  FACILITY_TYPE_DOOR = 10;
}

enum DormEventConditionWay {
  DORM_EVENT_CONDITION_WAY_NONE = 0;
  DORM_EVENT_CONDITION_WAY_PASS_STAGE = 1;
  DORM_EVENT_CONDITION_WAY_ISLAND_ADVANTURE = 2;
  DORM_EVENT_CONDITION_WAY_AVATAR_STAR_UP = 3;
  DORM_EVENT_CONDITION_WAY_MP_STAGE = 4;
  DORM_EVENT_CONDITION_WAY_OPEN_WORLD_QUEST = 5;
  DORM_EVENT_CONDITION_WAY_MVP = 6;
  DORM_EVENT_CONDITION_WAY_NO_FIGHT = 7;
  DORM_EVENT_CONDITION_WAY_LEVEL_UP = 8;
  DORM_EVENT_CONDITION_WAY_PASS_STAGE_WITH_ROLE = 9;
  DORM_EVENT_CONDITION_WAY_FINISH_MISSION = 11;
  DORM_EVENT_CONDITION_WAY_ENDLESS_STAGE_PASS = 12;
  DORM_EVENT_CONDITION_WAY_OFFLINE = 13;
  DORM_EVENT_CONDITION_WAY_BIRTHDAY = 14;
  DORM_EVENT_CONDITION_WAY_GACHA = 15;
  DORM_EVENT_CONDITION_WAY_NEW_ROLE = 16;
  DORM_EVENT_CONDITION_WAY_ACTIVE_DEGREE = 17;
}

enum AvatarRollType {
  AVATAR_ROLL_TYPE_NONE = 0;
  AVATAR_ROLL_AVATAR = 1;
  AVATAR_ROLL_STIGMATA = 2;
  AVATAR_ROLL_ERROR = 100;
}

enum AvatarBindEquipMode {
  AVATAR_BIND_EQUIP_COMMON = 0;
  AVATAR_BIND_EQUIP_EXTRA_STORY = 1;
}

enum GalInteractTriggerCondition {
  GAL_INTERACT_TRIGGER_CONDITION_NONE = 0;
  GALINTERACT_CONDITION_DRESS = 1;
  GALINTERACT_CONDITION_SHAKE = 2;
  GALINTERACT_CONDITION_MAIN_SCREEN = 3;
  GALINTERACT_CONDITION_INTERVAL = 4;
  GALINTERACT_CONDITION_DATETIME_YMD = 5;
  GALINTERACT_CONDITION_DATETIME_MD = 6;
  GALINTERACT_CONDITION_WEEKDAY = 7;
  GALINTERACT_CONDITION_DAILY_DUTY_POINT = 8;
  GALINTERACT_CONDITION_WEEKLY_DUTY_POINT = 9;
  GALINTERACT_CONDITION_WEATHER = 10;
  GALINTERACT_CONDITION_GACHA = 11;
  GALINTERACT_CONDITION_ONLINE_TIME = 12;
  GALINTERACT_CONDITION_LOGIN_ITERVAL = 13;
  GALINTERACT_CONDITION_MONTH_DAY_INTERVAL = 14;
  GALINTERACT_CONDITION_USER_BIRTHDAY = 15;
  GALINTERACT_CONDITION_GOODFEEL_LEVEL = 16;
  GALINTERACT_CONDITION_AFFINITY_GET_GIFT_LEVEL = 17;
  GALINTERACT_CONDITION_MISSION_FINISH = 18;
}

enum GalInteractBubbleType {
  GALINTERACT_BUBBLE_NO = 0;
  GALINTERACT_BUBBLE_YES = 1;
  GALINTERACT_BUBBLE_PLACEHOLD = 2;
  GALINTERACT_BUBBLE_WITH_CONDITION = 3;
}

enum ExtraStoryChapterType {
  EXTRA_STORY_CHAPTER_INVALID = 0;
  EXTRA_STORY_CHAPTER_NORMAL = 1;
  EXTRA_STORY_CHAPTER_LINE = 2;
}

enum GeneralActivityType {
  GENERAL_ACTIVITY_INVALID = 0;
  GENERAL_ACTIVITY_MAIN_STORY = 1;
  GENERAL_ACTIVITY_EXTRA_STORY = 2;
  GENERAL_ACTIVITY_ENDLESS = 3;
  GENERAL_ACTIVITY_SEALED = 4;
  GENERAL_ACTIVITY_SIN_DEMON_EX = 5;
  GENERAL_ACTIVITY_WORLD_BOSS = 6;
  GENERAL_ACTIVITY_OPENWORLD_NORMAL = 7;
  GENERAL_ACTIVITY_RAID = 8;
  GENERAL_ACTIVITY_NORMAL_ACTIVITY = 9;
  GENERAL_ACTIVITY_SELAED_MODE = 12;
  GENERAL_ACTIVITY_ARMADA_MATRIX = 13;
  GENERAL_ACTIVITY_DUNGEONS = 15;
  GENERAL_ACTIVITY_OPENWORLD_ACTIVITY_BOSS = 17;
  GENERAL_ACTIVITY_OPENWORLD_ACTIVITY_ENDLESS = 18;
  GENERAL_ACTIVITY_CAMPAIGN = 19;
  GENERAL_ACTIVITY_RPG_TALE = 20;
  GENERAL_ACTIVITY_MONOPOLY = 21;
  GENERAL_ACTIVITY_GARDEN = 22;
  GENERAL_ACTIVITY_SANCTUARY = 23;
  GENERAL_ACTIVITY_ELITE_STAGE = 24;
  GENERAL_ACTIVITY_OPENWORLD_AVATAR = 26;
  GENERAL_ACTIVITY_GOD_WAR = 27;
  GENERAL_ACTIVITY_OPENWORLD_CHAPTER = 28;
  GENERAL_ACTIVITY_TUTORIAL_ENTRY = 29;
  GENERAL_ACTIVITY_OPENWORLD_HUNT_ACTIVITY = 30;
  GENERAL_ACTIVITY_AI_CYBER = 31;
  GENERAL_ACTIVITY_MAIN_STORY_OW_STAGE = 32;
  GENERAL_ACTIVITY_MIRAGE = 33;
  GENERAL_ACTIVITY_FARM = 34;
  GENERAL_ACTIVITY_MAIN_STORY_ACTIVITY = 35;
  GENERAL_ACTIVITY_RAID_REPLACE = 36;
  GENERAL_ACTIVITY_FUTARI_BATTLE = 37;
  GENERAL_ACTIVITY_RE_ACTIVITY = 38;
  GENERAL_ACTIVITY_UNIVERAL = 99;
  GENERAL_ACTIVITY_PUSH_TOWER = 100;
  GENERAL_ACTIVITY_STAGE = 102;
  GENERAL_ACTIVITY_MASTER_PUPIL = 104;
  GENERAL_ACTIVITY_TOWER_RAID = 105;
  GENERAL_ACTIVITY_QUANTUM_ENDLESS = 108;
  GENERAL_ACTIVITY_THEME_WANTED = 109;
  GENERAL_ACTIVITY_ENDLESS_SINGLE = 110;
  GENERAL_ACTIVITY_GLOBAL_WAR = 112;
  GENERAL_ACTIVITY_NEWBIE = 114;
  GENERAL_ACTIVITY_NINJA = 115;
  GENERAL_ACTIVITY_ARMADA_BOSS = 116;
  GENERAL_ACTIVITY_CRISIS_MODE = 120;
  GENERAL_ACTIVITY_SCHEDULED_MAP_SITE = 121;
  GENERAL_ACTIVITY_SLG = 122;
  GENERAL_ACTIVITY_BOSS_CHALLENGE = 123;
  GENERAL_ACTIVITY_FRONT_ENDLESS = 124;
  GENERAL_ACTIVITY_WAVE_RUSH = 125;
  GENERAL_ACTIVITY_THEME_TOWER = 126;
  GENERAL_ACTIVITY_MARS_CHAPTER_ENTRY = 127;
  GENERAL_ACTIVITY_PJMS_ACTIVITY_PANEL = 128;
  GENERAL_ACTIVITY_SIMPLIFIED_GOD_WAR = 129;
  GENERAL_ACTIVITY_RESIDENT_ACTIVITY = 130;
}

enum GeneralActivityScheduledMapSiteType {
  GENERAL_ACTIVITY_SCHEDULED_MAP_SITE_TYPE_NONE = 0;
  GENERAL_ACTIVITY_SCHEDULED_MAP_SITE_DAILY_RAID = 1;
  GENERAL_ACTIVITY_SCHEDULED_MAP_SITE_MINI_SKY_FIRE = 2;
  GENERAL_ACTIVITY_SCHEDULED_MAP_SITE_TWO_PLUS_TWO_PVE = 3;
  GENERAL_ACTIVITY_SCHEDULED_MAP_SITE_BOSS_RUSH = 4;
  GENERAL_ACTIVITY_SCHEDULED_MAP_SITE_CHAPTER_OW = 6;
}

enum GeneralStageActivityScoreType {
  GENERAL_STAGE_ACTIVITY_SCORE_TYPE_NONE = 0;
  GENERAL_ACTIVITY_SCORE_ACCUM = 1;
  GENERAL_ACTIVITY_SCORE_TOP = 2;
  GENERAL_ACTIVITY_SCORE_SINGLE_TOP = 3;
  GENERAL_ACTIVITY_SCORE_MATERIAL_NUM = 4;
}

enum GeneralActivityStageExchangeType {
  GENERAL_ACTIVITY_EXCHANGE_TYPE_NONE = 0;
  GENERAL_ACTIVITY_EXCHANGE_TYPE_TIMES = 1;
  GENERAL_ACTIVITY_EXCHANGE_TYPE_RESET = 2;
}

enum GeneralActivityScoreRewardType {
  GENERAL_ACTIVITY_SCORE_REWARD_TYPE_NONE = 0;
  GENERAL_ACTIVITY_SCORE_REWARD_AUTO = 1;
  GENERAL_ACTIVITY_SCORE_REWARD_MANUAL = 2;
}

enum StorySweepGroupType {
  STORY_SWEEP_GROUP_TYPE_NONE = 0;
  STORY_SWEEP_GROUP_AVATAR_FRAGMENT = 1;
  STORY_SWEEP_GROUP_MATERIAL = 2;
  STORY_SWEEP_GROUP_ACTIVITY = 3;
  STORY_SWEEP_GROUP_MATERIAL_NEW = 4;
}

enum PhoneEventStatus {
  PHONE_EVENT_NONE = 0;
  PHONE_EVENT_FINISH = 1;
  PHONE_EVENT_REFUSE = 2;
  PHONE_EVENT_HOLD = 3;
  PHONE_EVENT_OVER = 4;
}

enum EventType {
  EVENT_TYPE_NONE = 0;
  EVENT_TYPE_ISLAND = 1;
  EVENT_TYPE_CITY_ACTIVITY = 2;
}

enum ArmadaImpeachOperation {
  ARMADA_IMPEACH_OPERATION_NONE = 0;
  START_IMPEACH = 1;
  END_IMPEACH = 2;
  CANCEL_IMPEACH = 3;
}

enum ArmadaImpeachStatus {
  ARMADA_IMPEACH_STATUS_NORMAL = 0;
  ARMADA_IMPEACH_STATUS_IMPEACH = 1;
  ARMADA_IMPEACH_STATUS_ELECTION = 2;
}

enum LoginActivityRewardType {
  LOGIN_ACTIVITY_REWARD_NORMAL = 0;
  LOGIN_ACTIVITY_REWARD_BONUS = 1;
}

enum CheckConditionEnum {
  CHECK_CONDITION_ENUM_NONE = 0;
  CHECK_CONDITION_WEAPON = 13;
  CHECK_CONDITION_STIGMATA_SLOT_1 = 14;
  CHECK_CONDITION_STIGMATA_SLOT_2 = 15;
  CHECK_CONDITION_STIGMATA_SLOT_3 = 16;
}

enum GobackLoginRewardType {
  GOBACK_LOGIN_REWARD_TYPE_NONE = 0;
  GOBACK_LOGIN_REWARD_COMMON = 1;
  GOBACK_LOGIN_REWARD_BONUS = 2;
}

enum GobackNewbieLevelSourceType {
  GOBACK_NEWBIE_LEVEL_SOURCE_GOBACK_NEWBIE_LEVEL = 0;
  GOBACK_NEWBIE_LEVEL_SOURCE_GOBACK_LEVEL = 1;
}

enum CycleMissionProgressType {
  CYCLE_MISSION_PROGRESS_TYPE_NONE = 0;
  CYCLE_MISSION_PROGRESS_ALL = 1;
  CYCLE_MISSION_PROGRESS_ONE_BY_ONE = 2;
}

enum WikiType {
  WIKI_TYPE_OVERVIEW = 0;
  WIKI_TYPE_WEAPON = 1;
  WIKI_TYPE_STIGMATA = 2;
  WIKI_TYPE_FURNITURE = 3;
  WIKI_TYPE_CG = 4;
  WIKI_TYPE_MEDAL = 5;
  WIKI_TYPE_ACHIEVEMENT = 6;
  WIKI_TYPE_DRESS = 7;
  WIKI_TYPE_EMOJI = 8;
  WIKI_TYPE_AVATAR = 9;
  WIKI_TYPE_ACTIVITY = 10;
  WIKI_TYPE_MONSTER = 11;
}

enum AchievementType {
  ACHIEVE_TYPE_NONE = 0;
  ACHIEVE_TYPE_CAPTAIN = 1;
  ACHIEVE_TYPE_DEVELOP = 2;
  ACHIEVE_TYPE_SOCIAL = 3;
  ACHIEVE_TYPE_STAGE = 4;
  ACHIEVE_TYPE_ISLAND = 5;
  ACHIEVE_TYPE_CHALLENGE = 6;
  ACHIEVE_TYPE_DORM = 7;
  ACHIEVE_TYPE_EXTRA_STORY = 8;
}

enum PhotoType {
  PHOTO_TYPE_ALL = 0;
  PHOTO_TYPE_CITY_ACTIVITY = 1;
  PHOTO_TYPE_ANNIVERSARY = 2;
  PHOTO_TYPE_RPG_TALE = 3;
  PHOTO_TYPE_FARM = 4;
  PHOTO_TYPE_KINGDOM_WAR = 5;
  PHOTO_TYPE_DLC = 6;
  PHOTO_TYPE_GLOBAL_WAR = 7;
  PHOTO_TYPE_NINJA = 8;
  PHOTO_TYPE_CHAPTER_HIDDEN = 9;
  PHOTO_TYPE_OW_AVATAR = 10;
  PHOTO_TYPE_SLG = 11;
  PHOTO_TYPE_GOD_WAR = 12;
  PHOTO_TYPE_OPENWORLD_CHAPTER = 13;
  PHOTO_TYPE_SC_DLC = 14;
  PHOTO_TYPE_OW_HUNT = 15;
  PHOTO_TYPE_GLOBAL_EXPLORE = 16;
  PHOTO_TYPE_MARS_CHAPTER = 17;
}

enum PhotoUnlockType {
  PHOTO_UNLOCK_TYPE_NONE = 0;
  PHOTO_UNLOCK_FINISH_OW_EVENT = 1;
  PHOTO_UNLOCK_KILL_MONSTER = 2;
  PHOTO_UNLOCK_FINISH_OW_STORY = 3;
  PHOTO_UNLOCK_FINISH_DLC_DIALOG = 4;
  PHOTO_UNLOCK_GOD_WAR = 5;
  PHOTO_UNLOCK_VISUAL_NOVEL = 6;
  PHOTO_UNLOCK_MATERIAL = 7;
  PHOTO_UNLOCK_FINISH_PJMS_STORY = 8;
}

enum MpStageMatchType {
  MP_STAGE_MATCH_TYPE_NONE = 0;
  CREATE_ENTER = 1;
  MATCH_ENTER = 2;
}

enum MpStageMemberLimitType {
  MP_MEMBER_LIMIT_NONE = 0;
  MP_MEMBER_LIMIT_MASTER_ONLY = 1;
  MP_MEMBER_LIMIT_PUPIL_ONLY = 2;
  MP_MEMBER_LIMIT_ARMADA_ONLY = 3;
  MP_MEMBER_LIMIT_NEWBIE_ONLY = 4;
}

enum DisplayCurrencyType {
  DISPLAY_CURRENCY_TYPE_NONE = 0;
  DISPLAY_CURRENCY_TYPE_SCOIN = 1;
  DISPLAY_CURRENCY_TYPE_STAMINA = 2;
  DISPLAY_CURRENCY_TYPE_HCOIN = 3;
  DISPLAY_CURRENCY_TYPE_PURPLE_JADE = 5;
  DISPLAY_CURRENCY_TYPE_MCOIN = 6;
  DISPLAY_CURRENCY_TYPE_PLAIN_DRESS_TICKET = 7;
  DISPLAY_CURRENCY_TYPE_LUXURY_DRESS_TICKET = 8;
  DISPLAY_CURRENCY_TYPE_VITALITY = 12;
  DISPLAY_CURRENCY_TYPE_ETHER_PHLOGISTON = 13;
  DISPLAY_CURRENCY_TYPE_BRILLIANT_PURE_CRYSTAL = 14;
  DISPLAY_CURRENCY_TYPE_HONOR_MEDAL = 15;
}

enum SellCurrencyType {
  SELL_CURRENCY_TYPE_NONE = 0;
  SELL_CURRENCY_TYPE_SCOIN = 1;
  SELL_CURRENCY_TYPE_PURPLE_JADE = 5;
}

enum TowerRaidRating {
  TOWER_RAID_RATING_NONE = 0;
  TOWER_RAID_RATING_DEGRADE = 1;
  TOWER_RAID_RATING_KEEP = 2;
  TOWER_RAID_RATING_UPGRADE = 3;
}

enum ChatgroupPosition {
  CHATGROUP_POSITION_NONE = 0;
  CHATGROUP_POSITION_CREATER = 1;
  CHATGROUP_POSITION_MEMBER = 2;
}

enum WorldChatroomType {
  WORLD_CHATROOM_TYPE_NONE = 0;
  WORLD_CHATROOM_TYPE_NORMAL = 1;
  WORLD_CHATROOM_TYPE_ACTIVITY = 2;
}

enum ActivityWorldChatroomType {
  ACTIVITY_WORLD_CHATROOM_TYPE_NONE = 0;
  ACTIVITY_WORLD_CHATROOM_TYPE_GLOBAL_WAR = 2;
  ACTIVITY_WORLD_CHATROOM_TYPE_CHATWORLD_BEAST = 3;
  ACTIVITY_WORLD_CHATROOM_TYPE_SLG = 4;
  ACTIVITY_WORLD_CHATROOM_TYPE_GLOBAL_EXPLORE = 5;
}

enum FrameTimeType {
  FRAME_TIME_FOREVER = 0;
  FRAME_TIME_LIMIT = 1;
}

enum AvatarTeamType {
  AVATAR_TEAM_TYPE_NONE = 0;
  AVATAR_TEAM_NORMAL = 1;
  AVATAR_TEAM_VIRTUAL = 2;
  AVATAR_TEAM_DLC = 3;
  AVATAR_TEAM_SC_DLC = 4;
}

enum FeatureSwitchType {
  FEATURE_SWITCH_NONE = 0;
  FEATURE_SWITCH_STAGE = 1;
  FEATURE_SWITCH_SHOP = 2;
  FEATURE_SWITCH_SHOP_GOODS_POOL = 3;
  FEATURE_SWITCH_ACTIVITY_PANEL = 4;
  FEATURE_SWITCH_MISSION_HIDE = 5;
  FEATURE_SWITCH_ITEM_USE = 6;
  FEATURE_SWITCH_MATERIAL_HIDE = 7;
  FEATURE_SWITCH_MISSION_REWARD = 8;
  FEATURE_SWITCH_MAIL_ATTACHMENT_TAKE = 9;
  FEATURE_SWITCH_DANMAKU = 10;
  FEATURE_SWITCH_EX_BOSS = 11;
  FEATURE_SWITCH_SHOP_GOODS_POOL_HIDE = 12;
  FEATURE_SWITCH_CHAT = 13;
  FEATURE_SWITCH_HEXIE = 14;
  FEATURE_SWITCH_MCOIN_BUY = 15;
  FEATURE_SWITCH_SHOP_GOODS = 16;
  FEATURE_SWITCH_CMD_CD = 17;
  FEATURE_SWITCH_ENDLESS = 18;
  FEATURE_SWITCH_EX_BOSS_ENTER = 19;
  FEATURE_SWITCH_GACHA = 20;
  FEATURE_SWITCH_AVATAR_FRAGMENT = 22;
  FEATURE_SWITCH_ELF_FRAGMENT = 23;
  FEATURE_SWITCH_EQUIP_FORGE = 24;
  FEATURE_SWITCH_BATTLE_PASS = 25;
  FEATURE_SWITCH_GACHA_COIN_TRANSFER = 26;
  FEATURE_SWITCH_RPG_TALE_SITE = 27;
  FEATURE_SWITCH_ACTIVITY = 28;
  FEATURE_SWITCH_THEME_WANTED = 29;
  FEATURE_SWITCH_SNS_REQUEST = 30;
  FEATURE_SWITCH_GOD_WAR = 31;
  FEATURE_SWITCH_SERVER_STOP_GACHA_MSG = 32;
  FEATURE_SWITCH_REFINE_RUNE = 34;
  FEATURE_SWITCH_CHANGE_FRIEND_REMARK = 35;
  FEATURE_SWITCH_GACHA_DAILY_TIMES_LIMIT = 36;
  FEATURE_SWITCH_INVITE_ACTIVITY = 37;
  FEATURE_SWITCH_QCANDY_ACTIVITY = 38;
  FEATURE_SWITCH_GLOBAL_EXPLORE = 39;
  FEATURE_SWITCH_RPG_TALE_ACTIVITY = 40;
  FEATURE_SWITCH_RANK = 41;
  FEATURE_SWITCH_CHAPTER_BW_WORLD = 42;
  FEATURE_SWITCH_ULTRA_ENDLESS_FORCE_SYNC_LOCAL_SCORE = 43;
  FEATURE_SWITCH_EX_BOSS_LOCK_AVATAR = 44;
  FEATURE_SWITCH_CHAPTER_ARK = 45;
  FEATURE_SWITCH_RAID_REPLACE = 46;
  FEATURE_SWITCH_PJMS_ENTER_WORLD = 47;
  FEATURE_SWITCH_PJMS_CHAPTER_QUEST = 48;
  FEATURE_SWITCH_PJMS_ACTIVITY = 49;
  FEATURE_SWITCH_PJMS_FIRST_ENTER = 50;
  FEATURE_SWITCH_EQUIPMENT_QUICK_LEVEL_UP = 51;
  FEATURE_SWITCH_SIMPLIFIED_GOD_WAR = 52;
  FEATURE_SWITCH_DEVIL_AUTO_CHESS = 53;
  FEATURE_SWITCH_TILE = 54;
  FEATURE_SWITCH_FUTARI_BATTLE = 55;
  FEATURE_SWITCH_RPG_TALE_AREA = 56;
  FEATURE_SWITCH_PJMS_CHAPTER_KNIGHT_RICH_MAN = 57;
  FEATURE_SWITCH_BATTLE_PASS_UPGRADE = 58;
  FEATURE_SWITCH_CROSS_ROOM = 59;
  FEATURE_SWITCH_PJMS_CHAPTER_KNIGHT_SPACE_ADVENTURE = 60;
}

enum FeatureSwitchOpType {
  FEATURE_SWITCH_OP_NONE = 0;
  FEATURE_SWITCH_OP_ADD = 1;
  FEATURE_SWITCH_OP_DEL = 2;
}

enum DialogType {
  DIALOG_TYPE_NONE = 0;
  DIALOG_TYPE_CONTENT = 1;
  DIALOG_TYPE_SELECT = 2;
  DIALOG_TYPE_HIDE = 3;
}

enum DeviceType {
  DEVICE_TYPE_NONE = 0;
  DEVICE_TYPE_ANDROID = 1;
  DEVICE_TYPE_IOS = 2;
  DEVICE_TYPE_PC = 3;
}

enum UserType {
  USER_TYPE_NONE = 0;
  USER_TYPE_ANDROID = 1;
  USER_TYPE_IOS = 2;
  USER_TYPE_PC = 3;
  USER_TYPE_CHANNEL = 4;
  USER_TYPE_WEGAME = 5;
  USER_TYPE_STEAM = 6;
}

enum BonusThemeType {
  BONUS_THEME_TYPE_NONE = 0;
  BONUS_THEME_TYPE_BONUS_SCORE_RATIO = 1;
  BONUS_THEME_TYPE_BONUS_SCORE_FIXED = 2;
  BONUS_THEME_TYPE_BONUS_DROP_PROB = 3;
  BONUS_THEME_TYPE_BONUS_DROP_FIXED = 4;
}

enum FeatureLimitLevel {
  LIMIT_LEVEL_ALL = 0;
  LIMIT_LEVEL_MAIN = 100;
  LIMIT_LEVEL_CHAT = 200;
}

enum RoomMode {
  ROOM_MODE_INVALID = 0;
  ROOM_MODE_QAVATAR_BATTLE = 3;
  ROOM_MODE_QCANDY_BATTLE = 4;
  ROOM_MODE_PRPG = 5;
  ROOM_MODE_KIANA_AUTO_CHESS = 6;
  ROOM_MODE_GROUP_PHOTO = 7;
}

enum BattleMode {
  BATTLE_MODE_NONE = 0;
  BATTLE_MODE_QAVATAR_BATTLE = 1;
}

enum CommonChatMsgType {
  COMMON_CHAT_MSG_NONE = 0;
  COMMON_CHAT_MSG_TEAM = 1;
  COMMON_CHAT_MSG_CAMPAIGN = 2;
  COMMON_CHAT_MSG_ROOM = 3;
  COMMON_CHAT_MSG_PRIVATE = 4;
  COMMON_CHAT_MSG_CAHT_GROUP = 5;
  COMMON_CHAT_MSG_WORLD_CHAT = 6;
  COMMON_CHAT_MSG_ARMADA_CHAT = 7;
}

enum OpenworldStageType {
  OPENWORLD_STAGE_TYPE_NONE = 0;
  OPENWORLD_STAGE_TYPE_MAINLINE = 1;
  OPENWORLD_STAGE_TYPE_EXPORE = 2;
}

enum SecurityEngineCheckType {
  SECURITY_ENGINE_CHECK_NONE = 0;
  SECURITY_ENGINE_CHECK_LOGIN = 1;
  SECURITY_ENGINE_CHECK_STAGE = 2;
}

enum DropLimitType {
  DROP_LIMIT_TYPE_NONE = 0;
  DROP_LIMIT_STAGE = 1;
  DROP_LIMIT_DLC = 2;
  DROP_LIMIT_GOD_WAR = 3;
  DROP_LIMIT_SC_DLC = 4;
  DROP_LIMIT_CHAPTER_OW = 5;
  DROP_LIMIT_CHAPTER_OW_MOON_TOWER = 6;
  DROP_LIMIT_QCANDY = 7;
}

enum DropLimitRefreshType {
  DROP_LIMIT_REFRESH_TYPE_NONE = 0;
  DROP_LIMIT_REFRESH_WEEK_DAY = 1;
  DROP_LIMIT_REFRESH_MONTH = 2;
}

enum DanmakuChannelType {
  DANMAKU_CHANNEL_NONE = 0;
  DANMAKU_CHANNEL_NORMAL = 1;
}

enum StageTagRestrictType {
  STAGE_TAG_RESTRICT_NONE = 0;
  STAGE_TAG_RESTRICT_TAG = 1;
  STAGE_TAG_RESTRICT_NO_TAG = 2;
  STAGE_TAG_RESTRICT_ATTRIBUTE = 3;
  STAGE_TAG_RESTRICT_NO_ATTRIBUTE = 4;
  STAGE_TAG_RESTRICT_ROLE = 5;
  STAGE_TAG_RESTRICT_NO_ROLE = 6;
}

enum ExaminationTagType {
  EXAMINATION_TYPE_NONE = 0;
  EXAMINATION_TYPE_AVATAR = 1;
  EXAMINATION_TYPE_ELF = 2;
  EXAMINATION_TYPE_MONSTER = 3;
  EXAMINATION_TYPE_COMMON = 4;
}

enum WarshipItemType {
  WARSHIP_ITEM_TYPE_NONE = 0;
  WARSHIP_ITEM_TYPE_WARSHIP = 1;
  WARSHIP_ITEM_TYPE_BGM = 2;
}

enum WarshipBgmPlayMode {
  WARSHIP_BGM_PLAY_MODE_RANDOM = 0;
  WARSHIP_BGM_PLAY_MODE_SINGLE = 1;
}

enum LoginRewardTriggerType {
  LOGIN_REWARD_TRIGGER_TYPE_NONE = 0;
  LOGIN_REWARD_TRIGGER_TYPE_ONCE = 1;
  LOGIN_REWARD_TRIGGER_TYPE_ALWAYS = 2;
}

enum OffLineTagType {
  OFFLINE_TAG_TYPE_NORMAL = 0;
  OFFLINE_TAG_TYPE_SMURF = 1;
}

enum AuditOpType {
  AUDIT_OP_NONE = 0;
  AUDIT_OP_CHANGE_NICKNAME = 1;
  AUDIT_OP_CHANGE_DESC = 2;
  AUDIT_OP_CHANGE_ARMADA_NAME = 3;
  AUDIT_OP_CHANGE_ARMADA_BULLETIN = 4;
  AUDIT_OP_CREATE_CHATGROUP = 5;
  AUDIT_OP_CHANGE_CHATGROUP = 6;
  AUDIT_OP_CHANGE_DORM = 7;
  AUDIT_OP_CHANGE_MASTER_PUPIL_CARD = 8;
}

enum BuffEffectUseType {
  BUFF_EFFECT_USE_TYPE_NONE = 0;
  BUFF_EFFECT_USE_STAGE = 1;
  BUFF_EFFECT_USE_MISSION = 2;
  BUFF_EFFECT_USE_VIRTUAL_EQUIPMENT = 3;
}

enum ChapterGroupSiteFinishWay {
  CHAPTER_GROUP_SITE_FINISH_WAY_INVALID = 0;
  CHAPTER_GROUP_SITE_FINISH_WAY_PASS_STAGE_AND = 1;
  CHAPTER_GROUP_SITE_FINISH_WAY_PASS_STAGE_OR = 2;
  CHAPTER_GROUP_SITE_FINISH_WAY_FINISH_MISSION_AND = 3;
  CHAPTER_GROUP_SITE_FINISH_WAY_FINISH_MISSION_OR = 4;
  CHAPTER_GROUP_SITE_FINISH_WAY_TIME_ARRIVED = 5;
  CHAPTER_GROUP_SITE_FINISH_WAY_FINISH_STORY_AND = 6;
  CHAPTER_GROUP_SITE_FINISH_WAY_FINISH_STORY_OR = 7;
}

enum InviteeActivityType {
  INVITEE_ACTIVITY_TYPE_NONE = 0;
  INVITEE_ACTIVITY_TYPE_NEWBIE = 1;
  INVITEE_ACTIVITY_TYPE_GOBACK = 2;
}

enum InviterActivityType {
  INVITER_ACTIVITY_TYPE_NONE = 0;
  INVITER_ACTIVITY_TYPE_NORMAL = 1;
  INVITER_ACTIVITY_TYPE_LIMIT_TIME = 2;
}

enum BulletinType {
  BULLETIN_TYPE_EVENT = 0;
  BULLETIN_TYPE_SYSTEM = 1;
  BULLETIN_TYPE_BANNER = 2;
  BULLETIN_TYPE_ACTIVITY_PAGE = 3;
  BULLETIN_TYPE_LOGIN_HINT = 5;
  BULLETIN_TYPE_VERSION = 6;
  BULLETIN_TYPE_MALL_BANNER = 7;
  BULLETIN_TYPE_BP_MALL_BANNER = 8;
  BULLETIN_TYPE_MAIN_PAGE_PHONE = 9;
  BULLETIN_TYPE_RETURNEE_MALL_BANNER = 10;
  BULLETIN_TYPE_ACTIVITY_GIFT = 11;
  BULLETIN_TYPE_MALL_RECHARGE_SUB_TAB_BANNER = 12;
  BULLETIN_TYPE_MALL_BUNDLE_COIN_SUB_TAB_BANNER = 13;
  BULLETIN_TYPE_RETURNEE_MALL_BANNER_V2 = 14;
  BULLETIN_TYPE_RETURNEE_MALL_BANNER_V3 = 15;
  BULLETIN_TYPE_PLACEHOLDER_01 = 16;
  BULLETIN_TYPE_PLACEHOLDER_02 = 17;
  BULLETIN_TYPE_PLACEHOLDER_03 = 18;
  BULLETIN_TYPE_PLACEHOLDER_04 = 19;
  BULLETIN_TYPE_PLACEHOLDER_05 = 20;
}

enum BulletinNotShownFlagType {
  BULLETIN_NOT_SHOWN_FLAG_TYPE_NONE = 0;
  BULLETIN_NOT_SHOWN_FLAG_TYPE_FINISH_MISSION_AND = 1;
  BULLETIN_NOT_SHOWN_FLAG_TYPE_FINISH_MISSION_OR = 2;
  BULLETIN_NOT_SHOWN_FLAG_TYPE_HAS_GOT_ITEM_AND = 3;
  BULLETIN_NOT_SHOWN_FLAG_TYPE_HAS_GOT_ITEM_OR = 4;
}

enum SnsShowType {
  SNS_NONE = 0;
  SNS_MAIN = 1;
  SNS_WAR_HISTORY = 2;
  SNS_WIKI = 3;
  SNS_MSG_CARD = 4;
}

enum SnsShowPriviledgeState {
  SNS_SHOW_NONE = 0;
  SNS_SHOW_OPEN_TO_PUBLIC = 1;
  SNS_SHOW_OPEN_TO_FRIENDS = 2;
  SNS_SHOW_OPEN_TO_SELF = 3;
}

enum AfterProcessFuncType {
  AFTER_PROCESS_FUNC_TYPE_NONE = 0;
  AFTER_PROCESS_FUNC_PJMS_RUN_DISPATCH_EVENT = 1;
  AFTER_PROCESS_FUNC_PJMS_CLEAR_WAIT_DELETE_STORY = 2;
  AFTER_PROCESS_FUNC_PJMS_SYNC_CUR_WORLD = 3;
  AFTER_PROCESS_FUNC_PJMS_SYNC_STORY_STATUS = 4;
  AFTER_PROCESS_FUNC_PJMS_SYNC_CHAPTER_DELAY_DATA = 5;
  AFTER_PROCESS_FUNC_PJMS_SYNC_CONDITION_DATA = 6;
}

enum PjmsAuxiliaryUnitLockStatus {
  PJMS_AUXILIARY_UNIT_LOCK_STATUS_UNLOCKED = 0;
  PJMS_AUXILIARY_UNIT_LOCK_STATUS_LOCKED = 1;
}

enum ResidentActivityType {
  RESIDENT_ACTIVITY_TYPE_NONE = 0;
  RESIDENT_ACTIVITY_TYPE_RPG = 1;
}

enum ResidentActivityInitialType {
  RESIDENT_ACTIVITY_INITIAL_TYPE_NONE = 0;
  RESIDENT_ACTIVITY_INITIAL_TYPE_STAGE = 1;
  RESIDENT_ACTIVITY_INITIAL_TYPE_MISSION = 2;
  RESIDENT_ACTIVITY_INITIAL_TYPE_STORY = 3;
}

message Mission {
  uint32 _mission_id = 1;
  MissionStatus _status = 2;
  uint32 _progress = 3;
  uint32 _begin_time = 4;
  uint32 _end_time = 5;
  uint32 _priority = 6;
  uint32 _finished_times = 7;
  uint32 _finished_times_limit = 8;
  uint32 _cycle_id = 9;
}

message WeekDayActivity {
  uint32 _activity_id = 1;
  repeated uint32 _stage_id_list = 2;
  uint32 _enter_times = 3;
  uint32 _begin_time = 4;
  uint32 _end_time = 5;
  uint32 _activity_end_time = 6;
  uint32 _exchange_times = 7;
  repeated uint32 _challenge_reward_granted_list = 11;
  uint32 _activity_begin_time = 12;
  uint32 _force_open_time = 13;
  uint32 _schedule_id = 17;
}

enum MissionStatus {
  MISSION_STATUS_NONE = 0;
  MISSION_NOT_BEGIN = 1;
  MISSION_DOING = 2;
  MISSION_FINISH = 3;
  MISSION_TIMEOUT = 4;
  MISSION_CLOSE = 5;
  MISSION_WAIT_DELETE = 6;
}

message ScratchTicketPoint {
  uint32 x_pos = 1;
  uint32 y_pos = 2;
  uint32 ticket_item_id = 3;
}

// CmdID: 4150
message GetScratchTicketReq {
  uint32 activity_id = 1;
}

// CmdID: 4151
message GetScratchTicketRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ACTIVITY_NOT_OPEN = 2;
  }

  GetScratchTicketRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 plate_id = 3;
  repeated ScratchTicketPoint point_list = 4;
  uint32 reset_times = 5;
  uint32 round = 6;
  uint32 core_plate_end_round = 7;
  bool has_got_core_plate = 8;
}

// CmdID: 4152
message ScratchReq {
  uint32 x_pos = 1;
  uint32 y_pos = 2;
  uint32 activity_id = 3;
}

// CmdID: 4153
message ScratchRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ACTIVITY_NOT_OPEN = 2;
    POS_ERROR = 3;
    POS_REPEAT = 4;
    MATERIAL_LACK = 5;
  }

  ScratchRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
}

// CmdID: 4154
message ResetScratchTicketPlateReq {
  uint32 activity_id = 1;
}

// CmdID: 4155
message ResetScratchTicketPlateRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ACTIVITY_NOT_OPEN = 2;
    TIMES_LIMIT = 3;
    MATERIAL_LACK = 4;
    CORE_PLATE = 5;
    ACTIVITY_LIMIT = 6;
  }

  ResetScratchTicketPlateRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
}

// CmdID: 4156
message AddOnActivityRewardNotify {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  uint32 mission_id = 1;
  RewardData reward_data = 2;
}

// CmdID: 4157
message GetBingoActivityDataReq {
  uint32 activity_id = 1;
}

message BingoCard {
  enum BingoCardStatus {
    CARD_STATUS_WRONG = 0;
    CARD_STATUS_CORRECT = 1;
  }

  uint32 card_id = 1;
  BingoCard.BingoCardStatus card_status = 2;
}

message BingoData {
  uint32 bingo_id = 1;
  repeated BingoCard card_list = 2;
  uint32 reset_times = 3;
}

// CmdID: 4158
message GetBingoActivityDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  GetBingoActivityDataRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  repeated BingoData bingo_data_list = 3;
}

// CmdID: 4159
message BingoActivityFlopCardReq {
  uint32 activity_id = 1;
  uint32 bingo_id = 2;
  uint32 card_id = 3;
}

// CmdID: 4160
message BingoActivityFlopCardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    ITEMS_LACK = 3;
    HAS_FINISED = 4;
    HAS_FLOPED = 5;
  }

  BingoActivityFlopCardRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 bingo_id = 3;
  uint32 card_id = 4;
  repeated RewardData reward_list = 5;
  repeated DropItem drop_item_list = 6;
  bool is_all_finished = 7;
}

// CmdID: 4161
message BingoActivityResetBingoReq {
  uint32 activity_id = 1;
  uint32 bingo_id = 2;
}

// CmdID: 4162
message BingoActivityResetBingoRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NO_TIMES = 2;
    NO_COMPLETE = 3;
    NOT_OPEN = 4;
    ITEMS_LACK = 5;
  }

  BingoActivityResetBingoRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
}

// CmdID: 4163
message GetBulletinScoreActivityReq {
  uint32 activity_id = 1;
}

message BulletinScoreActivity {
  uint32 activity_id = 1;
  uint32 score = 2;
  repeated uint32 has_take_reward_list = 3;
  repeated uint32 has_take_reward_progress_list = 4;
}

// CmdID: 4164
message GetBulletinScoreActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  GetBulletinScoreActivityRsp.Retcode retcode = 1;
  repeated BulletinScoreActivity activity_list = 2;
}

// CmdID: 4165
message TakeBulletinScoreActivityRewardReq {
  uint32 activity_id = 1;
}

// CmdID: 4166
message TakeBulletinScoreActivityRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    HAS_TAKE_ALL = 2;
  }

  TakeBulletinScoreActivityRewardRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  repeated RewardData reward_list = 3;
}

// CmdID: 4167
message GetContinuousRechargeActivityReq {
}

// CmdID: 4168
message GetContinuousRechargeActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetContinuousRechargeActivityRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 progress = 3;
  uint32 today_vip_point = 4;
  repeated uint32 has_take_reward_progress_list = 5;
  uint32 last_refresh_time = 6;
}

// CmdID: 4169
message TakeContinuousRechargeRewardReq {
  uint32 progress = 1;
}

// CmdID: 4170
message TakeContinuousRechargeRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    PROGRESS_LACK = 3;
    HAS_TAKE = 4;
  }

  TakeContinuousRechargeRewardRsp.Retcode retcode = 1;
  RewardData reward = 2;
}

message FlopActivityCardData {
  uint32 id = 1;
  uint32 state = 2;
  uint32 card_number = 3;
}

message FlopActivityRewardData {
  uint32 index = 1;
  uint32 state = 2;
}

message FlopActivityData {
  uint32 activity_id = 1;
  repeated FlopActivityCardData card_list = 2;
  repeated uint32 has_take_reward_list = 3;
  uint32 flop_times = 4;
  uint32 cur_front_card = 5;
  uint32 show_id = 6;
  uint32 total_flop_times = 7;
}

// CmdID: 4173
message GetFlopActivityDataReq {
  uint32 activity_id = 1;
}

// CmdID: 4174
message GetFlopActivityDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  GetFlopActivityDataRsp.Retcode retcode = 1;
  FlopActivityData activity_data = 2;
}

// CmdID: 4171
message TakeFlopRewardReq {
  uint32 activity_id = 1;
  uint32 reward_index = 2;
}

// CmdID: 4172
message TakeFlopRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    LOCK = 3;
    HAS_TAKE = 4;
  }

  TakeFlopRewardRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 reward_index = 3;
  repeated RewardData reward_list = 4;
}

// CmdID: 4175
message FlopActivityFlopCardReq {
  uint32 activity_id = 1;
  uint32 card_id = 2;
}

// CmdID: 4176
message FlopActivityFlopCardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    HAS_FLOP = 3;
    HAS_UNLOCK = 4;
    NO_TIMES = 5;
    ITEMS_LACK = 6;
  }

  FlopActivityFlopCardRsp.Retcode retcode = 1;
  FlopActivityData activity_data = 2;
  uint32 reward_index = 3;
  repeated RewardData reward_list = 4;
}

// CmdID: 4177
message GetLotteryActivityReq {
}

message LotteryData {
  uint32 lottery_id = 1;
  repeated uint32 lottery_number = 2;
  repeated uint32 reward_taken_lottery_number = 3;
  uint32 draw_number_begin_time = 4;
  uint32 draw_number_end_time = 5;
  uint32 take_reward_begin_time = 6;
  uint32 first_reward_id = 7;
  string first_reward_number_str = 8;
  uint32 second_reward_id = 9;
  string second_reward_number_str = 10;
  uint32 third_reward_id = 11;
  uint32 max_draw_times = 12;
  uint32 special_number = 13;
}

// CmdID: 4178
message GetLotteryActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  GetLotteryActivityRsp.Retcode retcode = 1;
  uint32 cur_group_id = 2;
  repeated LotteryData lottery_data_list = 3;
}

// CmdID: 4179
message LotteryUseBoxReq {
}

// CmdID: 4180
message LotteryUseBoxRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MATERIAL_NOT_ENOUGH = 2;
    NOT_OPEN = 3;
  }

  LotteryUseBoxRsp.Retcode retcode = 1;
  repeated Material get_material_list = 2;
}

// CmdID: 4181
message LotteryDrawNumberReq {
  uint32 lottery_id = 1;
}

// CmdID: 4182
message LotteryDrawNumberRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MATERIAL_NOT_ENOUGH = 2;
    NOT_OPEN = 3;
    TIMES_LIMIT = 4;
  }

  LotteryDrawNumberRsp.Retcode retcode = 1;
  uint32 lottery_id = 2;
  uint32 lottery_number = 3;
}

// CmdID: 4183
message LotteryTakeRewardReq {
  uint32 lottery_id = 1;
}

message LotteryReward {
  uint32 lottery_id = 1;
  uint32 lottery_number = 2;
  RewardData reward_data = 3;
  uint32 reward_type = 4;
}

// CmdID: 4184
message LotteryTakeRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NO_LOTTERY_NUMBER = 2;
    REWARD_TAKEN = 3;
    NO_REWARD = 4;
    NOT_OPEN = 5;
  }

  LotteryTakeRewardRsp.Retcode retcode = 1;
  repeated LotteryReward lottery_reward_list = 2;
}

// CmdID: 4185
message GetTowerRaidActivityReq {
}

message TowerRaidAvatar {
  uint32 avatar_id = 1;
  uint32 enter_times = 2;
  uint32 weapon_id = 3;
  repeated uint32 stigmata_id_list = 4;
}

message TowerRaidBossStage {
  uint32 stage_id = 1;
  uint32 boss_left_hp = 2;
}

// CmdID: 4186
message GetTowerRaidActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  GetTowerRaidActivityRsp.Retcode retcode = 1;
  uint32 schedule_id = 2;
  uint32 activity_id = 3;
  uint32 hard_level = 4;
  uint32 enter_times = 5;
  bool is_settled = 6;
  repeated TowerRaidAvatar avatar_list = 7;
  repeated TowerRaidBossStage boss_stage_list = 8;
}

// CmdID: 4187
message TakeTowerRaidRewardReq {
}

// CmdID: 4188
message TakeTowerRaidRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    HAVE_TAKE = 2;
    NOT_FINISH = 3;
  }

  TakeTowerRaidRewardRsp.Retcode retcode = 1;
  uint32 schedule_id = 2;
  uint32 activity_id = 3;
  uint32 hard_level = 4;
  repeated RewardData reward_list = 5;
  TowerRaidRating rating = 6;
  repeated DropItem drop_item_list = 7;
}

// CmdID: 4189
message UpdateTowerRaidBossReq {
  uint32 stage_id = 1;
  uint32 boss_left_hp = 2;
}

// CmdID: 4190
message UpdateTowerRaidBossRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_BEGIN = 2;
    STAGE_ERROR = 3;
  }

  UpdateTowerRaidBossRsp.Retcode retcode = 1;
  uint32 stage_id = 2;
  uint32 boss_left_hp = 3;
}

// CmdID: 4191
message TowerRaidLockAvatarNotify {
  repeated TowerRaidAvatar avatar_list = 1;
}

// CmdID: 4192
message GetLoginActivityReq {
}

message LoginActivityData {
  uint32 id = 1;
  uint32 login_days = 2;
  repeated uint32 has_take_days_reward_list = 3;
  repeated uint32 has_take_days_bonus_reward_list = 4;
  uint32 accept_time = 5;
  uint32 duration_end_time = 6;
}

// CmdID: 4193
message GetLoginActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_BEGIN = 2;
    LEVEL_LACK = 3;
  }

  GetLoginActivityRsp.Retcode retcode = 1;
  repeated LoginActivityData login_list = 2;
}

// CmdID: 4194
message TakeLoginActivityRewardReq {
  uint32 id = 1;
  uint32 take_days = 2;
  LoginActivityRewardType reward_type = 3;
}

// CmdID: 4195
message TakeLoginActivityRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    LEVEL_LACK = 2;
    HAS_TAKE = 3;
    LOGIN_DAYS_LACK = 4;
    NOT_NEWBIE = 5;
    DURATION_END = 6;
  }

  TakeLoginActivityRewardRsp.Retcode retcode = 1;
  uint32 id = 2;
  uint32 take_days = 3;
  repeated RewardData reward_list = 4;
  LoginActivityRewardType reward_type = 5;
}

message ChapterActivityBoss {
  uint32 boss_stage_id = 1;
  uint32 left_hp = 2;
  uint32 cur_section_id = 3;
}

message ChapterActivityExclusiveStage {
  uint32 group_id = 1;
  uint32 stage_id = 2;
}

message ChapterActivityStage {
  uint32 stage_id = 1;
  uint32 max_floor = 2;
  uint32 pass_times = 3;
  uint32 max_score = 4;
}

message ChapterActivity {
  uint32 chapter_id = 1;
  uint32 level = 2;
  uint32 level_exp = 3;
  repeated uint32 has_take_reward_level_list = 4;
  bool is_take_daily_reward = 5;
  repeated ChapterActivityBoss boss_list = 6;
  uint32 player_level = 7;
  uint32 daily_reward_id = 8;
  repeated ChapterActivityStage stage_list = 10;
}

// CmdID: 4200
message GetChapterActivityDataReq {
}

// CmdID: 4201
message GetChapterActivityDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetChapterActivityDataRsp.Retcode retcode = 1;
  repeated ChapterActivity chapter_activity_list = 3;
}

// CmdID: 4202
message TakeChapterActivityLevelRewardReq {
  uint32 chapter_id = 1;
  uint32 level = 2;
  bool is_take_all = 3;
}

// CmdID: 4203
message TakeChapterActivityLevelRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    LACK_LEVEL = 2;
    HAVE_TAKE = 3;
    NO_REWARD = 4;
  }

  TakeChapterActivityLevelRewardRsp.Retcode retcode = 1;
  uint32 chapter_id = 2;
  repeated uint32 level_list = 3;
  repeated RewardData reward_list = 4;
  bool is_take_all = 5;
}

// CmdID: 4204
message SyncChapterActivityDataNotify {
  uint32 chapter_id = 1;
  ChapterActivity chapter_activity = 2;
}

// CmdID: 4386
message ResetChapterActivityExclusiveStageReq {
  uint32 chapter_id = 1;
  uint32 group_id = 2;
  uint32 stage_id = 3;
}

// CmdID: 4387
message ResetChapterActivityExclusiveStageRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    GROUP_NOT_EXIST = 2;
    STAGE_NOT_EXIST = 3;
    ACTIVITY_NOT_OPEN = 4;
  }

  ResetChapterActivityExclusiveStageRsp.Retcode retcode = 1;
  uint32 chapter_id = 2;
  uint32 group_id = 3;
  uint32 stage_id = 4;
}

// CmdID: 4388
message ResetChapterActivityTalentReq {
  uint32 chapter_id = 1;
}

// CmdID: 4389
message ResetChapterActivityTalentRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ACTIVITY_NOT_OPEN = 2;
    NOT_ALLOWED = 3;
  }

  ResetChapterActivityTalentRsp.Retcode retcode = 1;
  uint32 chapter_id = 2;
}

// CmdID: 4390
message ReportChapterActivityStageReq {
  uint32 chapter_id = 1;
  uint32 stage_id = 2;
  uint32 floor = 3;
}

// CmdID: 4391
message ReportChapterActivityStageRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ACTIVITY_NOT_OPEN = 2;
    STAGE_NOT_EXIST = 3;
  }

  ReportChapterActivityStageRsp.Retcode retcode = 1;
  uint32 chapter_id = 2;
  uint32 stage_id = 3;
}

message MissionThemeData {
  uint32 theme_id = 1;
  bool is_theme_upgrade = 2;
  repeated uint32 has_take_extra_reward_mission_list = 3;
  bool is_has_take_all_extra_reward = 4;
}

// CmdID: 4205
message GetMissionThemeDataReq {
  uint32 theme_id = 1;
  bool is_get_all = 2;
}

// CmdID: 4206
message GetMissionThemeDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  GetMissionThemeDataRsp.Retcode retcode = 1;
  uint32 theme_id = 2;
  bool is_get_all = 3;
  repeated MissionThemeData mission_theme_list = 4;
}

// CmdID: 4207
message UpgradeMissionThemeReq {
  uint32 theme_id = 1;
}

// CmdID: 4208
message UpgradeMissionThemeRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    HCOIN_LACK = 3;
    MCOIN_LACK = 4;
    MATERIAL_LACK = 5;
  }

  UpgradeMissionThemeRsp.Retcode retcode = 1;
  uint32 theme_id = 2;
  RewardData reward_data = 3;
}

// CmdID: 4209
message TakeMissionThemeRewardReq {
  uint32 theme_id = 1;
  uint32 mission_id = 2;
}

// CmdID: 4210
message TakeMissionThemeRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MISSION_NOT_FINISH = 2;
    ALREADY_TAKEN = 3;
    EQUIPMENT_FULL = 4;
    EQUIPMENT_MATERIAL_LIMIT = 5;
    EQUIPMENT_FRAGMENT_LIMIT = 6;
  }

  TakeMissionThemeRewardRsp.Retcode retcode = 1;
  uint32 theme_id = 2;
  uint32 mission_id = 3;
  RewardData reward_data = 4;
}

message OfflineResource {
  uint32 resource_type = 1;
  uint32 has_take_box_num = 2;
  uint32 available_box_num = 3;
}

// CmdID: 4211
message GetOfflineResourceDataReq {
}

// CmdID: 4212
message GetOfflineResourceDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_SCHEDULE = 2;
  }

  GetOfflineResourceDataRsp.Retcode retcode = 1;
  uint32 cur_schedule_id = 2;
  repeated OfflineResource offline_resource_list = 3;
}

// CmdID: 4213
message TakeOfflineResourceBoxReq {
  uint32 resource_type = 1;
  uint32 box_id = 2;
  uint32 box_num = 3;
}

// CmdID: 4214
message TakeOfflineResourceBoxRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_SCHEDULE = 2;
    EQUIPMENT_FULL = 3;
    EQUIPMENT_MATERIAL_LIMIT = 4;
    STAMINA_LACK = 5;
    HCOIN_LACK = 6;
    MATERIAL_LACK = 7;
    BOX_LACK = 8;
  }

  TakeOfflineResourceBoxRsp.Retcode retcode = 1;
  repeated RewardData reward_data_list = 2;
  OfflineResource offline_resource_data = 3;
}

message OverlapGrid {
  uint32 id = 1;
  uint32 summon_id = 2;
}

message OverlapActivityData {
  uint32 activity_id = 1;
  repeated OverlapGrid grid_list = 2;
  repeated uint32 has_take_reward_id_list = 3;
  uint32 overlap_id = 4;
}

// CmdID: 4215
message GetOverlapActivityDataReq {
  uint32 activity_id = 1;
}

// CmdID: 4216
message GetOverlapActivityDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  GetOverlapActivityDataRsp.Retcode retcode = 1;
  OverlapActivityData activity_data = 2;
}

// CmdID: 4217
message TakeOverlapActivityRewardReq {
  uint32 activity_id = 1;
  uint32 id = 2;
}

// CmdID: 4218
message TakeOverlapActivityRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    HAS_TAKEN = 3;
    NOT_FINISH = 4;
  }

  TakeOverlapActivityRewardRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 id = 3;
  RewardData reward_data = 4;
}

// CmdID: 4219
message OverlapActivitySummonReq {
  uint32 activity_id = 1;
}

// CmdID: 4220
message OverlapActivitySummonRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MATERIAL_NOT_ENOUGH = 2;
    NOT_OPEN = 3;
    FULL = 4;
  }

  OverlapActivitySummonRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  OverlapGrid grid = 3;
  RewardData reward_data = 4;
}

// CmdID: 4221
message OverlapActivityMoveReq {
  uint32 activity_id = 1;
  uint32 from_grid_id = 2;
  uint32 to_grid_id = 3;
}

// CmdID: 4222
message OverlapActivityMoveRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  OverlapActivityMoveRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  OverlapGrid from_grid = 3;
  OverlapGrid to_grid = 4;
}

message WeeklyRoutineMission {
  uint32 mission_id = 1;
  uint32 cur_contribution = 2;
  uint32 weekly_contribution = 3;
  uint32 mission_finish_times = 4;
}

// CmdID: 4229
message GetWeeklyRoutineActivityReq {
}

// CmdID: 4230
message GetWeeklyRoutineActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_SCHEDULE = 2;
  }

  GetWeeklyRoutineActivityRsp.Retcode retcode = 1;
  uint32 cur_schedule_id = 2;
  repeated WeeklyRoutineMission weekly_routine_mission_list = 3;
  repeated uint32 has_take_routine_reward_id_list = 4;
  uint32 weekly_routine_contribution = 5;
}

// CmdID: 4231
message TakeWeeklyRoutineRewardReq {
  uint32 weekly_routine_reward_id = 1;
}

// CmdID: 4232
message TakeWeeklyRoutineRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ROUTINE_CONTRIBUTION_LACK = 2;
    HAS_TAKE = 3;
  }

  TakeWeeklyRoutineRewardRsp.Retcode retcode = 1;
  uint32 weekly_routine_reward_id = 2;
  RewardData reward_data = 3;
}

// CmdID: 4233
message GetRankScheduleDataReq {
}

message RankScheduleData {
  uint32 schedule_id = 1;
  uint32 type = 2;
  uint32 begin_time = 3;
  uint32 end_time = 4;
}

// CmdID: 4234
message GetRankScheduleDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetRankScheduleDataRsp.Retcode retcode = 1;
  repeated RankScheduleData rank_schedule_list = 2;
}

// CmdID: 4235
message GetRankScheduleRankReq {
  uint32 schedule_id = 1;
}

// CmdID: 4236
message GetRankScheduleRankRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  GetRankScheduleRankRsp.Retcode retcode = 1;
  RankShowData rank_data = 3;
}

// CmdID: 4241
message GetSurveyDataReq {
}

message SurveyData {
  uint32 id = 1;
  string url = 2;
}

// CmdID: 4242
message GetSurveyDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetSurveyDataRsp.Retcode retcode = 1;
  repeated SurveyData survey_data_list = 2;
}

// CmdID: 4243
message FinishSurveyNotify {
  uint32 survey_id = 1;
}

// CmdID: 4244
message GetThemeDataReq {
}

message ThemeData {
  uint32 theme_id = 1;
  uint32 begin_time = 2;
  uint32 end_time = 3;
  uint32 bonus_drop_times = 4;
  uint32 total_bonus_score = 5;
}

// CmdID: 4245
message GetThemeDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetThemeDataRsp.Retcode retcode = 1;
  repeated ThemeData theme_list = 2;
}

// CmdID: 4246
message SyncThemeDataNotify {
  ThemeData theme = 1;
}

// CmdID: 4247
message GrantOuterRewardNotify {
  uint32 event_type = 1;
  uint32 event_id = 2;
  RewardData reward_data = 3;
  string ticket = 4;
}

// CmdID: 4248
message GetNewbieActivityReq {
}

message NewbieLevelRush {
  bool is_purchased = 1;
  uint32 free_reward_max_take_level = 2;
  uint32 purchase_reward_max_take_level = 3;
}

// CmdID: 4249
message GetNewbieActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_NEWBIE = 2;
  }

  GetNewbieActivityRsp.Retcode retcode = 1;
  uint32 schedule_id = 2;
  uint32 end_time = 3;
  NewbieLevelRush level_rush = 7;
}

// CmdID: 4250
message GetBbqActivityDataReq {
  uint32 activity_id = 1;
}

// CmdID: 4251
message GetBbqActivityDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  GetBbqActivityDataRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 bbq_level = 3;
  uint32 bbq_exp = 4;
  uint32 max_reward_taken_level = 5;
  uint32 can_use_bbq_count = 6;
}

// CmdID: 4252
message BbqActivityCookReq {
  uint32 activity_id = 1;
  uint32 bonus_level = 2;
}

// CmdID: 4253
message BbqActivityCookRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    ITEMS_LACK = 3;
  }

  BbqActivityCookRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  RewardData reward_data = 3;
  uint32 bbq_level = 4;
  uint32 bbq_exp = 5;
  uint32 can_use_bbq_count = 6;
}

// CmdID: 4254
message BbqActivityTakeLevelUpRewardReq {
  uint32 activity_id = 1;
}

// CmdID: 4255
message BbqActivityTakeLevelUpRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    NO_REWARD = 3;
  }

  BbqActivityTakeLevelUpRewardRsp.Retcode retcode = 1;
  repeated RewardData reward_data_list = 2;
  uint32 max_reward_taken_level = 3;
}

// CmdID: 4262
message GetTradingCardActivityReq {
}

// CmdID: 4263
message GetTradingCardActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  GetTradingCardActivityRsp.Retcode retcode = 1;
  uint32 cur_schedule_id = 2;
  uint32 trade_num = 3;
}

// CmdID: 4264
message TakeTradingCardRewardReq {
}

// CmdID: 4265
message TakeTradingCardRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    NOT_JOIN_ARMADA = 3;
    TRADE_NUM_LIMIT = 4;
    LACK_MATERIAL = 5;
  }

  TakeTradingCardRewardRsp.Retcode retcode = 1;
  RewardData reward_data = 2;
  uint32 trade_num = 3;
}

message PictureStep {
  uint32 step_id = 1;
  uint32 choice_id = 2;
}

// CmdID: 4266
message GetPictureActivityReq {
  uint32 activity_id = 1;
}

// CmdID: 4267
message GetPictureActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  GetPictureActivityRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  repeated PictureStep step_list = 3;
  bool is_share = 4;
  bool is_take_share_reward = 5;
  uint32 score = 6;
}

// CmdID: 4268
message PictureActivityChooseReq {
  uint32 activity_id = 1;
  uint32 step_id = 2;
  uint32 choice_id = 3;
}

// CmdID: 4269
message PictureActivityChooseRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    HAS_CHOOSE = 3;
    SCORE_LACK = 4;
    PRE_NOT_CHOOSE = 5;
  }

  PictureActivityChooseRsp.Retcode retcode = 1;
  RewardData reward = 2;
  PictureStep step = 3;
}

// CmdID: 4270
message PictureActivityShareReq {
  uint32 activity_id = 1;
  bool is_take_reward = 2;
}

// CmdID: 4271
message PictureActivityShareRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    HAS_TAKE = 3;
    NOT_SHARE = 4;
    NOT_FINISH = 5;
  }

  PictureActivityShareRsp.Retcode retcode = 1;
  RewardData reward = 2;
}

// CmdID: 4272
message SyncPictureActivityScoreNotify {
  uint32 activity_id = 1;
  uint32 score = 2;
}

message JigsawBlockData {
  uint32 block_id = 1;
  uint32 piece_id = 2;
}

message JigsawData {
  uint32 jigsaw_id = 1;
  repeated JigsawBlockData block_list = 2;
  repeated uint32 waiting_piece_id_list = 3;
  repeated uint32 taken_reward_group_id_list = 4;
  bool is_finish_reward_taken = 5;
  bool is_finished = 6;
}

// CmdID: 4273
message GetJigsawActivityReq {
  uint32 activity_id = 1;
}

// CmdID: 4274
message GetJigsawActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  GetJigsawActivityRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  repeated JigsawData jigsaw_list = 3;
}

// CmdID: 4275
message JigsawExchangePieceReq {
  uint32 activity_id = 1;
  uint32 jigsaw_id = 2;
}

// CmdID: 4276
message JigsawExchangePieceRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    JIGSAW_NOT_BEGIN = 3;
    PRE_JIGSAW_NOT_FINISHED = 4;
    ITEMS_LACK = 5;
    NO_PIECE = 6;
  }

  JigsawExchangePieceRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 jigsaw_id = 3;
}

// CmdID: 4277
message JigsawMoveWaitingPieceReq {
  uint32 activity_id = 1;
  uint32 jigsaw_id = 2;
  uint32 target_x = 3;
  uint32 target_y = 4;
}

// CmdID: 4278
message JigsawMoveWaitingPieceRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    JIGSAW_NOT_BEGIN = 3;
    PRE_JIGSAW_NOT_FINISHED = 4;
    NO_WAITING_PIECE = 5;
    OUT_OF_RANGE = 6;
    BLOCK_LOCKED = 7;
  }

  JigsawMoveWaitingPieceRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 jigsaw_id = 3;
}

// CmdID: 4279
message JigsawMovePieceInJigsawAreaReq {
  uint32 activity_id = 1;
  uint32 jigsaw_id = 2;
  uint32 source_x = 3;
  uint32 source_y = 4;
  uint32 target_x = 5;
  uint32 target_y = 6;
}

// CmdID: 4280
message JigsawMovePieceInJigsawAreaRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    JIGSAW_NOT_BEGIN = 3;
    PRE_JIGSAW_NOT_FINISHED = 4;
    NO_SOURCE_PIECE = 5;
    OUT_OF_RANGE = 6;
    LOCKED = 7;
  }

  JigsawMovePieceInJigsawAreaRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 jigsaw_id = 3;
}

// CmdID: 4281
message JigsawTakeGroupRewardReq {
  uint32 activity_id = 1;
  uint32 jigsaw_id = 2;
  uint32 group_id = 3;
}

// CmdID: 4282
message JigsawTakeGroupRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    JIGSAW_NOT_BEGIN = 3;
    PRE_JIGSAW_NOT_FINISHED = 4;
    NOT_FINISHED = 5;
    HAS_TAKEN = 6;
  }

  JigsawTakeGroupRewardRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 jigsaw_id = 3;
  uint32 group_id = 4;
  RewardData reward = 5;
}

// CmdID: 4283
message JigsawTakeFinishRewardReq {
  uint32 activity_id = 1;
  uint32 jigsaw_id = 2;
}

// CmdID: 4284
message JigsawTakeFinishRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    JIGSAW_NOT_BEGIN = 3;
    PRE_JIGSAW_NOT_FINISHED = 4;
    NOT_FINISHED = 5;
    HAS_TAKEN = 6;
  }

  JigsawTakeFinishRewardRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 jigsaw_id = 3;
  RewardData reward = 4;
}

message GardenSite {
  uint32 site_id = 1;
  uint32 crop_id = 2;
  uint32 delay_begin_time = 3;
}

message GardenCrop {
  uint32 crop_id = 1;
  uint32 harvest_num = 2;
}

message GardenActivityData {
  uint32 garden_id = 1;
  repeated GardenSite site_list = 2;
  repeated GardenCrop crop_list = 3;
  uint32 daily_harvest_num = 4;
  uint32 last_grow_time = 5;
}

// CmdID: 4287
message GetGardenActivityReq {
}

// CmdID: 4288
message GetGardenActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  GetGardenActivityRsp.Retcode retcode = 1;
  GardenActivityData garden = 2;
}

// CmdID: 4289
message GardenHarvestReq {
  repeated uint32 site_list = 1;
}

// CmdID: 4290
message GardenHarvestRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    DAILY_HARVEST_LIMIT = 3;
  }

  GardenHarvestRsp.Retcode retcode = 1;
  GardenActivityData garden = 2;
}

// CmdID: 4291
message GardenSpeedUpWithMaterialReq {
}

// CmdID: 4292
message GardenSpeedUpWithMaterialRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    MATERIAL_NOT_ENOUGH = 3;
    SITE_FULL = 4;
  }

  GardenSpeedUpWithMaterialRsp.Retcode retcode = 1;
  GardenActivityData garden = 2;
}

// CmdID: 4293
message GardenRefreshSiteReq {
}

// CmdID: 4294
message GardenRefreshSiteRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GardenRefreshSiteRsp.Retcode retcode = 1;
  uint32 garden_id = 2;
  repeated GardenSite site_list = 3;
  uint32 last_grow_time = 4;
}

// CmdID: 4295
message GetGardenScheduleReq {
}

// CmdID: 4296
message GetGardenScheduleRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  GetGardenScheduleRsp.Retcode retcode = 1;
  uint32 garden_id = 2;
  uint32 begin_time = 3;
  uint32 end_time = 4;
  bool is_garden_opened = 5;
}

// CmdID: 4297
message GetDropLimitActivityReq {
}

message DropLimitItem {
  uint32 limit_id = 1;
  uint32 got_num = 2;
}

message DropLimitActivity {
  uint32 activity_id = 1;
  uint32 begin_time = 2;
  uint32 end_time = 3;
  repeated DropLimitItem drop_limit_got_num_list = 4;
}

// CmdID: 4298
message GetDropLimitActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetDropLimitActivityRsp.Retcode retcode = 1;
  repeated DropLimitActivity drop_limit_activity_list = 2;
}

// CmdID: 4299
message GetLoginMissionActivityReq {
}

message LoginMissionActivity {
  uint32 id = 1;
  repeated uint32 has_finished_mission_list = 2;
  uint32 unlock_days = 3;
  uint32 login_days = 4;
}

// CmdID: 4300
message GetLoginMissionActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetLoginMissionActivityRsp.Retcode retcode = 1;
  repeated uint32 has_finished_activity_list = 2;
  repeated LoginMissionActivity activity_list = 3;
}

// CmdID: 4301
message TakeLoginMissionRewardReq {
  uint32 activity_id = 1;
}

// CmdID: 4302
message TakeLoginMissionRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_FINISHED = 2;
    HAS_TAKE = 3;
  }

  TakeLoginMissionRewardRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  repeated RewardData reward_list = 3;
}

message SanctuaryActivityData {
  uint32 activity_id = 1;
  uint32 level = 2;
  uint32 exp = 3;
  uint32 has_take_reward_level = 4;
  uint32 product_counter_time = 5;
  uint32 product_storage_num = 6;
  bool is_init = 7;
  uint32 player_level_group_id = 8;
  repeated uint32 stage_id_list = 9;
  bool is_new_stage = 10;
}

// CmdID: 4305
message SanctuaryGetMainInfoReq {
}

// CmdID: 4306
message SanctuaryGetMainInfoRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  SanctuaryGetMainInfoRsp.Retcode retcode = 1;
  SanctuaryActivityData activity_data = 2;
  uint32 begin_time = 3;
  uint32 end_time = 4;
}

// CmdID: 4307
message SanctuaryTakeLevelRewardReq {
}

// CmdID: 4308
message SanctuaryTakeLevelRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  SanctuaryTakeLevelRewardRsp.Retcode retcode = 1;
  uint32 has_take_reward_level = 2;
  RewardData reward_data = 3;
}

// CmdID: 4309
message SanctuaryTakeProductReq {
}

// CmdID: 4310
message SanctuaryTakeProductRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  SanctuaryTakeProductRsp.Retcode retcode = 1;
  RewardData reward_data = 2;
}

// CmdID: 4311
message SanctuaryStartNotify {
}

message ActivityRewardStatisticItemData {
  uint32 show_id = 1;
  uint32 num = 2;
}

message ActivityRewardStatisticData {
  uint32 id = 1;
  repeated ActivityRewardStatisticItemData item_data_list = 2;
}

// CmdID: 4312
message GetActivityRewardStatisticDataReq {
  uint32 id = 1;
}

// CmdID: 4313
message GetActivityRewardStatisticDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  GetActivityRewardStatisticDataRsp.Retcode retcode = 1;
  uint32 id = 2;
  ActivityRewardStatisticData activity_reward_data = 3;
}

// CmdID: 4314
message SanctuaryStageEndNotify {
  uint32 total_add_exp = 1;
  uint32 bonus_add_exp = 2;
  uint32 old_level = 3;
  uint32 old_exp = 4;
}

// CmdID: 4315
message GetSlotMachineMainInfoReq {
  uint32 activity_id = 1;
}

// CmdID: 4316
message GetSlotMachineMainInfoRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ACTIVITY_NOT_OPEN = 2;
  }

  GetSlotMachineMainInfoRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 cur_gacha_id = 3;
  uint32 gacha_times = 4;
  uint32 has_take_reward_progress = 5;
  bool is_next_super_gacha = 6;
}

// CmdID: 4317
message StartSlotMachineReq {
  uint32 activity_id = 1;
}

// CmdID: 4318
message StartSlotMachineRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ACTIVITY_NOT_OPEN = 2;
    MATERIAL_LACK = 3;
  }

  StartSlotMachineRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 box_item_id = 3;
}

// CmdID: 4319
message TakeSlotMachineProgressRewardReq {
  uint32 activity_id = 1;
}

// CmdID: 4320
message TakeSlotMachineProgressRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ACTIVITY_NOT_OPEN = 2;
    NO_REWARD = 3;
  }

  TakeSlotMachineProgressRewardRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  repeated RewardData reward_list = 3;
}

// CmdID: 4321
message GetBulletinActivityMissionReq {
  repeated uint32 activity_id_list = 1;
}

message BulletinMissionGroup {
  uint32 activity_id = 1;
  repeated PanelMissionData mission_list = 2;
}

// CmdID: 4322
message GetBulletinActivityMissionRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ACTIVITY_NOT_OPEN = 2;
  }

  GetBulletinActivityMissionRsp.Retcode retcode = 1;
  repeated BulletinMissionGroup mission_group_list = 2;
}

// CmdID: 4323
message GetExaminationActivityReq {
}

message Examination {
  uint32 id = 1;
  uint32 last_answer = 2;
  bool is_finished = 3;
  repeated uint32 answer_list = 4;
  bool is_evaluated = 5;
}

// CmdID: 4324
message GetExaminationActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetExaminationActivityRsp.Retcode retcode = 1;
  uint32 schedule_id = 2;
  uint32 cur_examination_idx = 3;
  uint32 finished_round = 4;
  repeated Examination examination_list = 5;
  uint32 examination_stage_id = 6;
}

// CmdID: 4325
message FinishExaminationReq {
  uint32 examination_id = 1;
  uint32 answer_index = 2;
}

// CmdID: 4326
message FinishExaminationRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    HAS_FINISHED = 2;
    NOT_CUR_EXAMINATION = 3;
  }

  FinishExaminationRsp.Retcode retcode = 1;
  uint32 examination_id = 2;
  bool is_finished = 3;
  RewardData reward_data = 4;
}

// CmdID: 4327
message StartNextRoundExaminationReq {
}

// CmdID: 4328
message StartNextRoundExaminationRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_FINISHED = 2;
  }

  StartNextRoundExaminationRsp.Retcode retcode = 1;
}

// CmdID: 4329
message EvaluateExaminationReq {
  uint32 examination_id = 1;
  bool is_like = 2;
}

// CmdID: 4330
message EvaluateExaminationRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  EvaluateExaminationRsp.Retcode retcode = 1;
}

// CmdID: 4331
message ChapterActivityDailyRewardNotify {
  uint32 chapter_id = 1;
  RewardData daily_reward = 2;
}

// CmdID: 4332
message GetSupportActivityReq {
}

message SupportData {
  uint32 support_index = 1;
  bool is_take_share_reward = 2;
  uint32 support_end_time = 3;
  uint32 support_begin_time = 4;
  uint32 count_down_time = 5;
}

// CmdID: 4333
message GetSupportActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  GetSupportActivityRsp.Retcode retcode = 1;
  uint32 schedule_id = 2;
  SupportData support_data = 3;
  bool is_take_global_reward = 4;
}

// CmdID: 4334
message SupportActivitySupportReq {
}

// CmdID: 4335
message SupportActivitySupportRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    IN_CD_TIME = 3;
    HAS_SUPPORT = 4;
  }

  SupportActivitySupportRsp.Retcode retcode = 1;
  uint32 support_index = 2;
}

// CmdID: 4336
message SupportActivityTakeShareRewardReq {
}

// CmdID: 4337
message SupportActivityTakeShareRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    HAS_TAKE = 3;
    NOT_SUPPORT = 4;
  }

  SupportActivityTakeShareRewardRsp.Retcode retcode = 1;
  RewardData reward_data = 2;
}

// CmdID: 4338
message SupportActivityTakeGlobalRewardReq {
}

// CmdID: 4339
message SupportActivityTakeGlobalRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    HAS_TAKE = 3;
  }

  SupportActivityTakeGlobalRewardRsp.Retcode retcode = 1;
  RewardData reward_data = 2;
}

// CmdID: 4340
message GetMosaicActivityReq {
}

message MosaicActivity {
  uint32 activity_id = 1;
  uint32 progress = 2;
  bool is_take_reward = 3;
}

// CmdID: 4341
message GetMosaicActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetMosaicActivityRsp.Retcode retcode = 1;
  repeated MosaicActivity activity_list = 2;
}

// CmdID: 4342
message TakeMosaicActivityRewardReq {
  uint32 activity_id = 1;
}

// CmdID: 4343
message TakeMosaicActivityRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    HAS_TAKE = 2;
    NOT_FINISHED = 3;
    NOT_OPEN = 4;
  }

  TakeMosaicActivityRewardRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  RewardData reward_data = 3;
}

// CmdID: 4346
message GetMissionGroupMainInfoReq {
}

// CmdID: 4347
message GetMissionGroupMainInfoRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetMissionGroupMainInfoRsp.Retcode retcode = 1;
  repeated uint32 has_take_reward_mission_group_list = 2;
}

// CmdID: 4348
message TakeMissionGroupRewardReq {
  uint32 group_id = 1;
}

// CmdID: 4349
message TakeMissionGroupRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    HAS_TAKEN = 2;
    NO_REWARD = 3;
    NOT_FINISH = 4;
  }

  TakeMissionGroupRewardRsp.Retcode retcode = 1;
  RewardData reward_data = 2;
}

// CmdID: 4350
message ChapterActivityTakeDailyRewardReq {
  uint32 chapter_id = 1;
}

// CmdID: 4351
message ChapterActivityTakeDailyRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    HAS_TAKE = 2;
    ACTIVITY_NOT_OPEN = 3;
  }

  ChapterActivityTakeDailyRewardRsp.Retcode retcode = 1;
  uint32 chapter_id = 2;
  RewardData daily_reward = 3;
}

message ReunionCookHistory {
  uint32 book_id = 1;
  uint32 daily_num = 2;
  uint32 total_num = 3;
}

message ReunionCookActivity {
  uint32 cur_schedule_id = 1;
  uint32 start_time = 2;
  uint32 end_time = 3;
  uint32 cook_score = 4;
  uint32 last_settle_reward_score = 5;
  repeated ReunionCookHistory cook_history = 6;
  uint32 score_reward_group = 7;
  uint32 group_id = 8;
}

// CmdID: 4380
message ReunionCookGetActivityReq {
}

// CmdID: 4381
message ReunionCookGetActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  ReunionCookGetActivityRsp.Retcode retcode = 1;
  ReunionCookActivity reunion_cook_activity = 2;
}

message ReunionCookData {
  uint32 book_id = 1;
  uint32 cook_times = 2;
  repeated Material recycle_material_list = 3;
}

// CmdID: 4382
message ReunionCookMakeDinnerReq {
  uint32 book_id = 1;
  repeated Material recycle_material_list = 2;
  ReunionCookBookType book_type = 3;
  repeated ReunionCookData cook_data = 4;
}

// CmdID: 4383
message ReunionCookMakeDinnerRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    INVALID_BOOK_ID = 3;
    INVALID_MATERIAL = 4;
    MATERIAL_LACK = 5;
    TIMES_LIMIT = 6;
    DUPLICATE_BOOK_ID = 7;
  }

  ReunionCookMakeDinnerRsp.Retcode retcode = 1;
  uint32 book_id = 2;
  RewardData reward_data = 3;
}

// CmdID: 4384
message ReunionCookTakeScoreRewardReq {
}

// CmdID: 4385
message ReunionCookTakeScoreRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  ReunionCookTakeScoreRewardRsp.Retcode retcode = 1;
  RewardData reward_data = 2;
}

enum CmdTypeActivity {
  CMD_TYPE_ACTIVITY_NONE = 0;
  CMD_GET_SCRATCH_TICKET_REQ = 4150;
  CMD_GET_SCRATCH_TICKET_RSP = 4151;
  CMD_SCRATCH_REQ = 4152;
  CMD_SCRATCH_RSP = 4153;
  CMD_RESET_SCRATCH_TICKET_PLATE_REQ = 4154;
  CMD_RESET_SCRATCH_TICKET_PLATE_RSP = 4155;
  CMD_ADD_ON_ACTIVITY_REWARD_NOTIFY = 4156;
  CMD_GET_BINGO_ACTIVITY_DATA_REQ = 4157;
  CMD_GET_BINGO_ACTIVITY_DATA_RSP = 4158;
  CMD_BINGO_ACTIVITY_FLOP_CARD_REQ = 4159;
  CMD_BINGO_ACTIVITY_FLOP_CARD_RSP = 4160;
  CMD_BINGO_ACTIVITY_RESET_BINGO_REQ = 4161;
  CMD_BINGO_ACTIVITY_RESET_BINGO_RSP = 4162;
  CMD_GET_BULLETIN_SCORE_ACTIVITY_REQ = 4163;
  CMD_GET_BULLETIN_SCORE_ACTIVITY_RSP = 4164;
  CMD_TAKE_BULLETIN_SCORE_ACTIVITY_REWARD_REQ = 4165;
  CMD_TAKE_BULLETIN_SCORE_ACTIVITY_REWARD_RSP = 4166;
  CMD_GET_CONTINUOUS_RECHARGE_ACTIVITY_REQ = 4167;
  CMD_GET_CONTINUOUS_RECHARGE_ACTIVITY_RSP = 4168;
  CMD_TAKE_CONTINUOUS_RECHARGE_REWARD_REQ = 4169;
  CMD_TAKE_CONTINUOUS_RECHARGE_REWARD_RSP = 4170;
  CMD_TAKE_FLOP_ACTIVITY_REWARD_REQ = 4171;
  CMD_TAKE_FLOP_ACTIVITY_REWARD_RSP = 4172;
  CMD_GET_FLOP_ACTIVITY_DATA_REQ = 4173;
  CMD_GET_FLOP_ACTIVITY_DATA_RSP = 4174;
  CMD_FLOP_ACTIVITY_FLOP_CARD_REQ = 4175;
  CMD_FLOP_ACTIVITY_FLOP_CARD_RSP = 4176;
  CMD_GET_LOTTERY_ACTIVITY_REQ = 4177;
  CMD_GET_LOTTERY_ACTIVITY_RSP = 4178;
  CMD_LOTTERY_USE_BOX_REQ = 4179;
  CMD_LOTTERY_USE_BOX_RSP = 4180;
  CMD_LOTTERY_DRAW_NUMBER_REQ = 4181;
  CMD_LOTTERY_DRAW_NUMBER_RSP = 4182;
  CMD_LOTTERY_TAKE_REWARD_REQ = 4183;
  CMD_LOTTERY_TAKE_REWARD_RSP = 4184;
  CMD_GET_TOWER_RAID_ACTIVITY_REQ = 4185;
  CMD_GET_TOWER_RAID_ACTIVITY_RSP = 4186;
  CMD_TAKE_TOWER_RAID_REWARD_REQ = 4187;
  CMD_TAKE_TOWER_RAID_REWARD_RSP = 4188;
  CMD_UPDATE_TOWER_RAID_BOSS_REQ = 4189;
  CMD_UPDATE_TOWER_RAID_BOSS_RSP = 4190;
  CMD_TOWER_RAID_LOCK_AVATAR_NOTIFY = 4191;
  CMD_GET_LOGIN_ACTIVITY_REQ = 4192;
  CMD_GET_LOGIN_ACTIVITY_RSP = 4193;
  CMD_TAKE_LOGIN_ACTIVITY_REWARD_REQ = 4194;
  CMD_TAKE_LOGIN_ACTIVITY_REWARD_RSP = 4195;
  CMD_GET_CHAPTER_ACTIVITY_DATA_REQ = 4200;
  CMD_GET_CHAPTER_ACTIVITY_DATA_RSP = 4201;
  CMD_TAKE_CHAPTER_ACTIVITY_LEVEL_REWARD_REQ = 4202;
  CMD_TAKE_CHAPTER_ACTIVITY_LEVEL_REWARD_RSP = 4203;
  CMD_SYNC_CHAPTER_ACTIVITY_DATA_NOTIFY = 4204;
  CMD_GET_MISSION_THEME_DATA_REQ = 4205;
  CMD_GET_MISSION_THEME_DATA_RSP = 4206;
  CMD_UPGRADE_MISSION_THEME_REQ = 4207;
  CMD_UPGRADE_MISSION_THEME_RSP = 4208;
  CMD_TAKE_MISSION_THEME_REWARD_REQ = 4209;
  CMD_TAKE_MISSION_THEME_REWARD_RSP = 4210;
  CMD_GET_OFFLINE_RESOURCE_DATA_REQ = 4211;
  CMD_GET_OFFLINE_RESOURCE_DATA_RSP = 4212;
  CMD_TAKE_OFFLINE_RESOURCE_BOX_REQ = 4213;
  CMD_TAKE_OFFLINE_RESOURCE_BOX_RSP = 4214;
  CMD_GET_OVERLAP_ACTIVITY_DATA_REQ = 4215;
  CMD_GET_OVERLAP_ACTIVITY_DATA_RSP = 4216;
  CMD_TAKE_OVERLAP_ACTIVITY_REWARD_REQ = 4217;
  CMD_TAKE_OVERLAP_ACTIVITY_REWARD_RSP = 4218;
  CMD_OVERLAP_ACTIVITY_SUMMON_REQ = 4219;
  CMD_OVERLAP_ACTIVITY_SUMMON_RSP = 4220;
  CMD_OVERLAP_ACTIVITY_MOVE_REQ = 4221;
  CMD_OVERLAP_ACTIVITY_MOVE_RSP = 4222;
  CMD_GET_WEEKLY_ROUTINE_ACTIVITY_REQ = 4229;
  CMD_GET_WEEKLY_ROUTINE_ACTIVITY_RSP = 4230;
  CMD_TAKE_WEEKLY_ROUTINE_REWARD_REQ = 4231;
  CMD_TAKE_WEEKLY_ROUTINE_REWARD_RSP = 4232;
  CMD_GET_RANK_SCHEDULE_DATA_REQ = 4233;
  CMD_GET_RANK_SCHEDULE_DATA_RSP = 4234;
  CMD_GET_RANK_SCHEDULE_RANK_REQ = 4235;
  CMD_GET_RANK_SCHEDULE_RANK_RSP = 4236;
  CMD_GET_SURVEY_DATA_REQ = 4241;
  CMD_GET_SURVEY_DATA_RSP = 4242;
  CMD_FINISH_SURVEY_NOTIFY = 4243;
  CMD_GET_THEME_DATA_REQ = 4244;
  CMD_GET_THEME_DATA_RSP = 4245;
  CMD_SYNC_THEME_DATA_NOTIFY = 4246;
  CMD_GRANT_OUTER_REWARD_NOTIFY = 4247;
  CMD_GET_NEWBIE_ACTIVITY_REQ = 4248;
  CMD_GET_NEWBIE_ACTIVITY_RSP = 4249;
  CMD_GET_BBQ_ACTIVITY_DATA_REQ = 4250;
  CMD_GET_BBQ_ACTIVITY_DATA_RSP = 4251;
  CMD_BBQ_ACTIVITY_COOK_REQ = 4252;
  CMD_BBQ_ACTIVITY_COOK_RSP = 4253;
  CMD_BBQ_ACTIVITY_TAKE_LEVEL_UP_REWARD_REQ = 4254;
  CMD_BBQ_ACTIVITY_TAKE_LEVEL_UP_REWARD_RSP = 4255;
  CMD_TAKE_NEWBIE_ACTIVITY_LEVEL_REWARD_REQ = 4256;
  CMD_TAKE_NEWBIE_ACTIVITY_LEVEL_REWARD_RSP = 4257;
  CMD_GET_TRADING_CARD_ACTIVITY_REQ = 4262;
  CMD_GET_TRADING_CARD_ACTIVITY_RSP = 4263;
  CMD_TAKE_TRADING_CARD_REWARD_REQ = 4264;
  CMD_TAKE_TRADING_CARD_REWARD_RSP = 4265;
  CMD_GET_PICTURE_ACTIVITY_REQ = 4266;
  CMD_GET_PICTURE_ACTIVITY_RSP = 4267;
  CMD_PICTURE_ACTIVITY_CHOOSE_REQ = 4268;
  CMD_PICTURE_ACTIVITY_CHOOSE_RSP = 4269;
  CMD_PICTURE_ACTIVITY_SHARE_REQ = 4270;
  CMD_PICTURE_ACTIVITY_SHARE_RSP = 4271;
  CMD_SYNC_PICTURE_ACTIVITY_SCORE_NOTIFY = 4272;
  CMD_GET_JIGSAW_ACTIVITY_REQ = 4273;
  CMD_GET_JIGSAW_ACTIVITY_RSP = 4274;
  CMD_JIGSAW_EXCHANGE_PIECE_REQ = 4275;
  CMD_JIGSAW_EXCHANGE_PIECE_RSP = 4276;
  CMD_JIGSAW_MOVE_WAITING_PIECE_REQ = 4277;
  CMD_JIGSAW_MOVE_WAITING_PIECE_RSP = 4278;
  CMD_JIGSAW_MOVE_PIECE_IN_JIGSAW_AREA_REQ = 4279;
  CMD_JIGSAW_MOVE_PIECE_IN_JIGSAW_AREA_RSP = 4280;
  CMD_JIGSAW_TAKE_GROUP_REWARD_REQ = 4281;
  CMD_JIGSAW_TAKE_GROUP_REWARD_RSP = 4282;
  CMD_JIGSAW_TAKE_FINISH_REWARD_REQ = 4283;
  CMD_JIGSAW_TAKE_FINISH_REWARD_RSP = 4284;
  CMD_GET_GARDEN_ACTIVITY_REQ = 4287;
  CMD_GET_GARDEN_ACTIVITY_RSP = 4288;
  CMD_GARDEN_HARVEST_REQ = 4289;
  CMD_GARDEN_HARVEST_RSP = 4290;
  CMD_GARDEN_SPEED_UP_WITH_MATERIAL_REQ = 4291;
  CMD_GARDEN_SPEED_UP_WITH_MATERIAL_RSP = 4292;
  CMD_GARDEN_REFRESH_SITE_REQ = 4293;
  CMD_GARDEN_REFRESH_SITE_RSP = 4294;
  CMD_GET_GARDEN_SCHEDULE_REQ = 4295;
  CMD_GET_GARDEN_SCHEDULE_RSP = 4296;
  CMD_GET_DROP_LIMIT_ACTIVITY_REQ = 4297;
  CMD_GET_DROP_LIMIT_ACTIVITY_RSP = 4298;
  CMD_GET_LOGIN_MISSION_ACTIVITY_REQ = 4299;
  CMD_GET_LOGIN_MISSION_ACTIVITY_RSP = 4300;
  CMD_TAKE_LOGIN_MISSION_REWARD_REQ = 4301;
  CMD_TAKE_LOGIN_MISSION_REWARD_RSP = 4302;
  CMD_SANCTUARY_GET_MAIN_INFO_REQ = 4305;
  CMD_SANCTUARY_GET_MAIN_INFO_RSP = 4306;
  CMD_SANCTUARY_TAKE_LEVEL_REWARD_REQ = 4307;
  CMD_SANCTUARY_TAKE_LEVEL_REWARD_RSP = 4308;
  CMD_SANCTUARY_TAKE_PRODUCT_REQ = 4309;
  CMD_SANCTUARY_TAKE_PRODUCT_RSP = 4310;
  CMD_SANCTUARY_START_NOTIFY = 4311;
  CMD_GET_ACTIVITY_REWARD_STATISTIC_DATA_REQ = 4312;
  CMD_GET_ACTIVITY_REWARD_STATISTIC_DATA_RSP = 4313;
  CMD_SANCTUARY_STAGE_END_NOTIFY = 4314;
  CMD_GET_SLOT_MACHINE_MAIN_INFO_REQ = 4315;
  CMD_GET_SLOT_MACHINE_MAIN_INFO_RSP = 4316;
  CMD_START_SLOT_MACHINE_REQ = 4317;
  CMD_START_SLOT_MACHINE_RSP = 4318;
  CMD_TAKE_SLOT_MACHINE_PROGRESS_REWARD_REQ = 4319;
  CMD_TAKE_SLOT_MACHINE_PROGRESS_REWARD_RSP = 4320;
  CMD_GET_BULLETIN_ACTIVITY_MISSION_REQ = 4321;
  CMD_GET_BULLETIN_ACTIVITY_MISSION_RSP = 4322;
  CMD_GET_EXAMINATION_ACTIVITY_REQ = 4323;
  CMD_GET_EXAMINATION_ACTIVITY_RSP = 4324;
  CMD_FINISH_EXAMINATION_REQ = 4325;
  CMD_FINISH_EXAMINATION_RSP = 4326;
  CMD_START_NEXT_ROUND_EXAMINATION_REQ = 4327;
  CMD_START_NEXT_ROUND_EXAMINATION_RSP = 4328;
  CMD_EVALUATE_EXAMINATION_REQ = 4329;
  CMD_EVALUATE_EXAMINATION_RSP = 4330;
  CMD_CHAPTER_ACTIVITY_DAILY_REWARD_NOTIFY = 4331;
  CMD_GET_SUPPORT_ACTIVITY_REQ = 4332;
  CMD_GET_SUPPORT_ACTIVITY_RSP = 4333;
  CMD_SUPPORT_ACTIVITY_SUPPORT_REQ = 4334;
  CMD_SUPPORT_ACTIVITY_SUPPORT_RSP = 4335;
  CMD_SUPPORT_ACTIVITY_TAKE_SHARE_REWARD_REQ = 4336;
  CMD_SUPPORT_ACTIVITY_TAKE_SHARE_REWARD_RSP = 4337;
  CMD_SUPPORT_ACTIVITY_TAKE_GLOBAL_REWARD_REQ = 4338;
  CMD_SUPPORT_ACTIVITY_TAKE_GLOBAL_REWARD_RSP = 4339;
  CMD_GET_MOSAIC_ACTIVITY_REQ = 4340;
  CMD_GET_MOSAIC_ACTIVITY_RSP = 4341;
  CMD_TAKE_MOSAIC_ACTIVITY_REWARD_REQ = 4342;
  CMD_TAKE_MOSAIC_ACTIVITY_REWARD_RSP = 4343;
  CMD_GET_MISSION_GROUP_MAIN_INFO_REQ = 4346;
  CMD_GET_MISSION_GROUP_MAIN_INFO_RSP = 4347;
  CMD_TAKE_MISSION_GROUP_REWARD_REQ = 4348;
  CMD_TAKE_MISSION_GROUP_REWARD_RSP = 4349;
  CMD_CHAPTER_ACTIVITY_TAKE_DAILY_REWARD_REQ = 4350;
  CMD_CHAPTER_ACTIVITY_TAKE_DAILY_REWARD_RSP = 4351;
  CMD_REUNION_COOK_GET_ACTIVITY_REQ = 4380;
  CMD_REUNION_COOK_GET_ACTIVITY_RSP = 4381;
  CMD_REUNION_COOK_MAKE_DINNER_REQ = 4382;
  CMD_REUNION_COOK_MAKE_DINNER_RSP = 4383;
  CMD_REUNION_COOK_TAKE_SCORE_REWARD_REQ = 4384;
  CMD_REUNION_COOK_TAKE_SCORE_REWARD_RSP = 4385;
  CMD_RESET_CHAPTER_ACTIVITY_EXCLUSIVE_STAGE_REQ = 4386;
  CMD_RESET_CHAPTER_ACTIVITY_EXCLUSIVE_STAGE_RSP = 4387;
  CMD_RESET_CHAPTER_ACTIVITY_TALENT_REQ = 4388;
  CMD_RESET_CHAPTER_ACTIVITY_TALENT_RSP = 4389;
  CMD_REPORT_CHAPTER_ACTIVITY_STAGE_REQ = 4390;
  CMD_REPORT_CHAPTER_ACTIVITY_STAGE_RSP = 4391;
}

enum BingoCardType {
  BINGO_CARD_WRONG = 0;
  BINGO_CARD_CORRECT = 1;
}

enum FlopActivityRewardState {
  FLOP_ACTIVITY_REWARD_STATE_LOCK = 0;
  FLOP_ACTIVITY_REWARD_STATE_UNLOCK = 1;
  FLOP_ACTIVITY_REWARD_STATE_HAS_GOT = 2;
}

enum FlopActivityCardState {
  FLOP_ACTIVITY_CARD_STATE_NOT_FLOP = 0;
  FLOP_ACTIVITY_CARD_STATE_FLOP = 1;
  FLOP_ACTIVITY_CARD_STATE_REWARD_UNLOCK = 2;
}

enum LotteryRewardType {
  LOTTERY_REWARD_TYPE_INVALID = 0;
  LOTTERY_REWARD_TYPE_FIRST_REWARD = 1;
  LOTTERY_REWARD_TYPE_SECOND_REWARD = 2;
  LOTTERY_REWARD_TYPE_THIRD_REWARD = 3;
}

enum HybridSiteType {
  HYBRID_SITE_TYPE_STORE = 0;
  HYBRID_SITE_TYPE_CYCLE = 1;
  HYBRID_SITE_TYPE_EX = 2;
  HYBRID_SITE_TYPE_BOSS = 3;
  HYBRID_SITE_TYPE_COLLECTION = 4;
  HYBRID_SITE_TYPE_MP = 5;
  HYBRID_SITE_TYPE_CHALLENGE = 6;
  HYBRID_SITE_TYPE_ZONE_CYCLE = 7;
  HYBRID_SITE_TYPE_ZONE_CHALLENGE = 8;
  HYBRID_SITE_TYPE_EX_BOSS = 9;
  HYBRID_SITE_TYPE_TOWER = 10;
  HYBRID_SITE_TYPE_CG = 11;
  HYBRID_SITE_TYPE_GOD_WAR = 12;
  HYBRID_SITE_TYPE_BW_WORLD_BRANCH = 13;
  HYBRID_SITE_TYPE_BW_WORLD_THEME = 14;
  HYBRID_SITE_TYPE_BW_WORLD_TOWER = 15;
  HYBRID_SITE_TYPE_CHAPTER_ARK_TUTORIAL = 16;
  HYBRID_SITE_TYPE_CHAPTER_ARK_MID_TERM_DAILY = 17;
  HYBRID_SITE_TYPE_CHAPTER_ARK_ROGUE_TOWER = 18;
  HYBRID_SITE_TYPE_CHAPTER_ARK_SUPPORT_CHALLENGE = 19;
}

enum OfflineResourceType {
  OFFLINE_RESOURCE_TYPE_NONE = 0;
  OFFLINE_RESOURCE_TYPE_OW_QUEST = 1;
  OFFLINE_RESOURCE_TYPE_OW_MECHA = 2;
  OFFLINE_RESOURCE_TYPE_WEEK_DAY = 3;
  OFFLINE_RESOURCE_TYPE_ARMADA = 4;
  OFFLINE_RESOURCE_TYPE_ENDLESS = 5;
  OFFLINE_RESOURCE_TYPE_EX_BOSS = 6;
}

enum RankScheduleType {
  RANK_SCHEDULE_TYPE_NONE = 0;
  RANK_SCHEDULE_DORM = 1;
}

enum OuterRewardType {
  OUTER_REWARD_TYPE_NONE = 0;
  OUTER_REWARD_TYPE_REDEEM = 1;
}

enum AutoDeleteType {
  AUTO_DELETE_TYPE_NONE = 0;
  AUTO_DELETE_BINGO = 2;
  AUTO_DELETE_BULLETIN_SCORE = 3;
  AUTO_DELETE_CONTINUOUS_RECHARGE = 4;
  AUTO_DELETE_FARM = 5;
  AUTO_DELETE_FLOP = 6;
  AUTO_DELETE_LOTTERY = 8;
  AUTO_DELETE_ELF_EQUIP_TALENT_FREE = 9;
  AUTO_DELETE_THEME = 10;
  AUTO_DELETE_RELATION = 11;
  AUTO_DELETE_BBQ = 12;
  AUTO_DELETE_CITY = 13;
  AUTO_DELETE_MONOPOLY = 15;
  AUTO_DELETE_OVERLAP = 16;
  AUTO_DELETE_RECLAIM = 17;
  AUTO_DELETE_SCRATCH = 18;
  AUTO_DELETE_SEASON = 19;
  AUTO_DELETE_TOWER_RAID = 20;
  AUTO_DELETE_GLOBAL_WAR = 22;
  AUTO_DELETE_LOGIN = 23;
  AUTO_DELETE_GENERAL = 24;
  AUTO_DELETE_NINJA = 25;
  AUTO_DELETE_QUESTION = 26;
  AUTO_DELETE_TRADING_CARD = 27;
  AUTO_DELETE_ARMADA_STAGE_SCORE = 28;
  AUTO_DELETE_PICTURE = 29;
  AUTO_DELETE_JIGSAW = 30;
  AUTO_DELETE_ARMADA_REUNION = 31;
  AUTO_DELETE_GARDEN = 32;
  AUTO_DELETE_DROP_LIMIT = 33;
  AUTO_DELETE_RPG_TALE = 34;
  AUTO_DELETE_SANCTUARY = 35;
  AUTO_DELETE_ACTIVITY_REWARD = 36;
  AUTO_DELETE_SLOT_MACHINE = 37;
  AUTO_DELETE_EXAMINATION = 38;
  AUTO_DELETE_SUPPORT = 39;
  AUTO_DELETE_MOSAIC = 40;
  AUTO_DELETE_LOGIN_WISH = 41;
  AUTO_DELETE_BURDEN_ALLEVIATION = 44;
  AUTO_DELETE_CHATWORLD_BEAST = 45;
  AUTO_DELETE_CHATWORLD_BOX = 46;
  AUTO_DELETE_DREAM = 47;
  AUTO_DELETE_OPENWORLD_AVATAR = 48;
  AUTO_DELETE_GRANT_TICKET = 49;
  AUTO_DELETE_SLG = 50;
  AUTO_DELETE_GLOBAL_POLLING = 51;
  AUTO_DELETE_REWARD_LINE_SCHEDULE = 52;
  AUTO_DELETE_GOD_WAR_TALE = 53;
  AUTO_DELETE_OPENWORLD_HUNT = 54;
  AUTO_DELETE_BUFF_ASSIST = 55;
  AUTO_DELETE_WAVE_RUSH = 56;
  AUTO_DELETE_AI_CYBER = 57;
  AUTO_DELETE_MINI_MONOPOLY = 58;
  AUTO_DELETE_MIRAGE = 59;
  AUTO_DELETE_THEME_TOWER = 60;
  AUTO_DELETE_PON_MACHINE = 61;
  AUTO_DELETE_CARNIVAL_LOTTERY = 63;
  AUTO_DELETE_ARK_PLUS = 64;
  AUTO_DELETE_PJMS_ACTIVITY = 65;
  AUTO_DELETE_PJMS_SUB_MODULE = 66;
  AUTO_DELETE_SIMPLIFIED_GOD_WAR = 67;
  AUTO_DELETE_FUTARI_BATTLE = 68;
  AUTO_DELETE_CRYSTAL_LOTTERY = 69;
}

enum SupportActivityType {
  ACTIVITY_TYPE_GLOBAL_SUPPORT = 0;
  ACTIVITY_TYPE_NORMAL = 1;
}

enum ReunionCookBookType {
  REUNION_COOK_BOOK_TYPE_NONE = 0;
  REUNION_COOK_BOOK_NORMAL = 1;
  REUNION_COOK_BOOK_RECYCLE = 2;
}

enum LoginRewardActivityType {
  LOGIN_REWARD_ACTIVITY_NONE = 0;
  LOGIN_REWARD_ACTIVITY_NORMAL = 1;
  LOGIN_REWARD_ACTIVITY_NEWBIE = 2;
}

message Dream {
  uint32 dream_id = 1;
  uint32 unlock_id = 2;
  bool is_open = 3;
  uint32 selected_dream_reward_id = 4;
  uint32 score = 5;
  bool is_reward_taken = 6;
  uint32 exchange_score_times = 7;
}

message DreamActivity {
  uint32 activity_id = 1;
  repeated Dream dream_list = 2;
}

// CmdID: 5750
message DreamGetActivityReq {
  uint32 activity_id = 1;
}

// CmdID: 5751
message DreamGetActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  DreamGetActivityRsp.Retcode retcode = 1;
  DreamActivity activity = 2;
}

// CmdID: 5752
message DreamOpenDreamReq {
  uint32 activity_id = 1;
  uint32 dream_id = 2;
  uint32 select_dream_reward_id = 3;
}

// CmdID: 5753
message DreamOpenDreamRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ACTIVITY_NOT_EXIST = 2;
    DREAM_NOT_EXIST = 3;
    REWARD_NOT_EXIST = 4;
    HAS_OPEN_DREAM = 5;
    LOCKED = 6;
    REWARD_TAKEN = 7;
  }

  DreamOpenDreamRsp.Retcode retcode = 1;
  uint32 unlock_id = 2;
}

// CmdID: 5754
message DreamGiveUpDreamReq {
  uint32 activity_id = 1;
  uint32 dream_id = 2;
}

// CmdID: 5755
message DreamGiveUpDreamRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ACTIVITY_NOT_EXIST = 2;
    DREAM_NOT_EXIST = 3;
  }

  DreamGiveUpDreamRsp.Retcode retcode = 1;
}

// CmdID: 5756
message DreamExchangeScoreReq {
  uint32 activity_id = 1;
  uint32 dream_id = 2;
  uint32 num = 3;
}

// CmdID: 5757
message DreamExchangeScoreRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ACTIVITY_NOT_EXIST = 2;
    DREAM_NOT_EXIST = 3;
    TIMES_NOT_ENOUGH = 4;
    HCOIN_NOT_ENOUGH = 5;
    SCORE_FULL = 6;
  }

  DreamExchangeScoreRsp.Retcode retcode = 1;
}

// CmdID: 5758
message DreamTakeRewardReq {
  uint32 activity_id = 1;
  uint32 dream_id = 2;
}

// CmdID: 5759
message DreamTakeRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ACTIVITY_NOT_EXIST = 2;
    DREAM_NOT_EXIST = 3;
    SCORE_NOT_ENOUGH = 4;
    REWARD_TAKEN = 5;
  }

  DreamTakeRewardRsp.Retcode retcode = 1;
  RewardData reward_data = 2;
}

// CmdID: 5790
message GetThemeWantedReq {
}

message ThemeWantedStageGroupInfo {
  uint32 stage_group_id = 1;
  uint32 progress = 2;
  repeated uint32 not_pass_progress_list = 3;
}

message ThemeWantedActivity {
  uint32 schedule_id = 1;
  uint32 activity_id = 2;
  repeated uint32 open_stage_group_id_list = 3;
  repeated ThemeWantedStageGroupInfo stage_group_info_list = 4;
  uint32 end_time = 6;
}

// CmdID: 5791
message GetThemeWantedRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    FEATURE_CLOSED = 3;
  }

  GetThemeWantedRsp.Retcode retcode = 1;
  ThemeWantedActivity theme_wanted_activity = 2;
}

// CmdID: 5794
message ThemeWantedRefreshTicketReq {
}

// CmdID: 5795
message ThemeWantedRefreshTicketRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  ThemeWantedRefreshTicketRsp.Retcode retcode = 1;
}

message GlobalPollingTargetData {
  uint32 id = 1;
  uint64 score_u64 = 2;
  uint32 vote_num = 3;
}

// CmdID: 5811
message GlobalPollingGetDataReq {
}

// CmdID: 5812
message GlobalPollingGetDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 3;
    FEATURE_CLOSED = 4;
  }

  GlobalPollingGetDataRsp.Retcode retcode = 1;
  uint32 schedule_id = 2;
  uint32 last_support_time = 3;
  uint32 support_target_id = 4;
  uint32 vote_begin_time = 5;
  repeated GlobalPollingTargetData target_data_list = 6;
}

// CmdID: 5813
message GlobalPollingSupportReq {
  uint32 target_id = 1;
}

// CmdID: 5814
message GlobalPollingSupportRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ACTIVITY_NOT_OPEN = 2;
    TARGET_ID_INVALID = 3;
    IN_CD = 4;
  }

  GlobalPollingSupportRsp.Retcode retcode = 1;
}

// CmdID: 5815
message GlobalPollingVoteReq {
  uint32 target_id = 1;
  uint32 num = 2;
}

// CmdID: 5816
message GlobalPollingVoteRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ACTIVITY_NOT_OPEN = 3;
    VOTE_NOT_OPEN = 4;
    TARGET_ID_INVALID = 5;
    TOO_FREQUENT = 6;
    MATERIAL_LACK = 7;
    FEATURE_CLOSED = 8;
  }

  GlobalPollingVoteRsp.Retcode retcode = 1;
}

// CmdID: 5831
message GetCollaborationScheduleReq {
}

// CmdID: 5832
message GetCollaborationScheduleRsp {
  message Schedule {
    uint32 id = 1;
    uint32 begin_time = 2;
    uint32 end_time = 3;
  }

  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetCollaborationScheduleRsp.Retcode retcode = 1;
  repeated GetCollaborationScheduleRsp.Schedule schedule_list = 2;
}

// CmdID: 5833
message RanchGetActivityReq {
  uint32 activity_id = 1;
}

message RanchMonsterSkill {
  uint32 skill_id = 1;
  bool is_locked = 2;
}

message RanchMonster {
  uint32 unique_id = 1;
  uint32 monster_id = 2;
  repeated RanchMonsterSkill skill_list = 3;
  uint32 ranch_area_id = 4;
  uint32 ranch_last_settle_time = 5;
  uint32 monster_level = 6;
  uint32 monster_exp = 7;
}

message RanchArea {
  uint32 area_id = 1;
  uint32 cur_product_num = 2;
  repeated uint32 monster_unique_id_list = 3;
  uint32 production_efficiency = 4;
}

message RanchStage {
  uint32 stage_id = 1;
  uint32 take_challenge_reward_times = 2;
  uint32 max_challenge_score = 3;
  repeated RanchMonster drop_monster_list = 4;
  repeated uint32 unique_id_list = 5;
}

// CmdID: 5834
message RanchGetActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  RanchGetActivityRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  repeated RanchMonster monster_list = 3;
  repeated RanchArea area_list = 4;
  uint32 next_refresh_time = 5;
  repeated RanchStage stage_list = 6;
  repeated uint32 battle_unique_id_list = 7;
}

// CmdID: 5835
message RanchSynthesisMonsterReq {
  uint32 activity_id = 1;
  uint32 synthesis_id = 2;
  uint32 main_unique_id = 3;
  uint32 assist_unique_id = 4;
}

// CmdID: 5836
message RanchSynthesisMonsterRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MONSTER_NOT_EXIST = 2;
    UNIQUE_ID_REPEATED = 3;
    MONSTER_ALREADY_ASSIGNED = 4;
    MATERIAL_LACK = 5;
    MONSTER_NOT_MATCH = 6;
  }

  RanchSynthesisMonsterRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 synthesis_id = 3;
  uint32 main_unique_id = 4;
  uint32 assist_unique_id = 5;
  uint32 output_unique_id = 6;
}

// CmdID: 5837
message RanchFreeMonsterReq {
  uint32 activity_id = 1;
  repeated uint32 unique_id_list = 2;
}

// CmdID: 5838
message RanchFreeMonsterRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MONSTER_NOT_EXIST = 2;
    UNIQUE_ID_REPEATED = 3;
    MONSTER_ALREADY_ASSIGNED = 4;
  }

  RanchFreeMonsterRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  repeated uint32 unique_id_list = 3;
  uint32 return_material_num = 4;
}

// CmdID: 5839
message RanchAssignMonsterReq {
  uint32 activity_id = 1;
  repeated uint32 unique_id_list = 2;
  uint32 area_id = 3;
}

// CmdID: 5840
message RanchAssignMonsterRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MONSTER_NOT_EXIST = 2;
    UNIQUE_ID_REPEATED = 3;
    AREA_NOT_EXIST = 4;
    MONSTER_ALREADY_ASSIGNED = 5;
    SLOT_NOT_ENOUGH = 6;
  }

  RanchAssignMonsterRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  repeated uint32 unique_id_list = 3;
  uint32 area_id = 4;
}

// CmdID: 5841
message RanchFireMonsterReq {
  uint32 activity_id = 1;
  repeated uint32 unique_id_list = 2;
}

// CmdID: 5842
message RanchFireMonsterRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MONSTER_NOT_EXIST = 2;
    UNIQUE_ID_REPEATED = 3;
    AREA_NOT_EXIST = 4;
    MONSTER_NOT_ASSIGNED = 5;
  }

  RanchFireMonsterRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  repeated uint32 unique_id_list = 3;
}

// CmdID: 5843
message RanchTakeProductReq {
  uint32 activity_id = 1;
}

// CmdID: 5844
message RanchTakeProductRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MONSTER_NUM_OVERFLOW = 2;
  }

  RanchTakeProductRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  repeated uint32 unique_id_list = 3;
}

// CmdID: 5845
message RanchGetMonsterWikiReq {
  uint32 activity_id = 1;
}

message RanchMonsterWiki {
  uint32 monster_id = 1;
  uint32 unlock_time = 2;
  uint32 battle_times = 3;
  uint32 catch_times = 4;
  repeated uint32 skill_id_list = 5;
}

message RanchSkillWiki {
  uint32 skill_type = 1;
  uint32 skill_id = 2;
}

// CmdID: 5846
message RanchGetMonsterWikiRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  RanchGetMonsterWikiRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  repeated RanchMonsterWiki monster_wiki_list = 3;
  repeated RanchSkillWiki skill_wiki_list = 4;
  uint32 collection_point = 5;
}

// CmdID: 5847
message RanchSyncMonsterNotify {
  uint32 activity_id = 1;
  repeated RanchMonster monster_list = 2;
  repeated uint32 del_monster_unique_id_list = 3;
  RanchNotifyType notify_type = 4;
  uint32 stage_id = 5;
}

// CmdID: 5848
message RanchDelMonsterNotify {
  uint32 activity_id = 1;
  repeated uint32 del_monster_unique_id_list = 2;
}

// CmdID: 5849
message RanchLockMonsterSkillReq {
  uint32 activity_id = 1;
  uint32 unique_id = 2;
  repeated uint32 lock_skill_idx_list = 3;
}

// CmdID: 5850
message RanchLockMonsterSkillRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MONSTER_NOT_EXIST = 2;
    LOCK_NUM_LIMIT = 3;
  }

  RanchLockMonsterSkillRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 unique_id = 3;
  repeated uint32 lock_skill_idx_list = 4;
}

// CmdID: 5851
message RanchSetBattleMonsterReq {
  uint32 activity_id = 1;
  repeated uint32 unique_id_list = 2;
}

// CmdID: 5852
message RanchSetBattleMonsterRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MONSTER_NOT_EXIST = 2;
  }

  RanchSetBattleMonsterRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  repeated uint32 unique_id_list = 3;
}

message RestaurantRoom {
  uint32 room_id = 1;
  uint32 avatar_id = 2;
  uint32 material_id = 3;
  double speed = 4;
  double progress = 5;
  uint32 status = 6;
}

message RestaurantOrder {
  uint32 material_id = 1;
  uint32 price = 2;
}

// CmdID: 5860
message GetRestaurantActivityReq {
  uint32 activity_id = 1;
}

// CmdID: 5861
message GetRestaurantActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetRestaurantActivityRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 facility_level = 3;
  repeated RestaurantRoom room_list = 4;
  repeated RestaurantOrder order_list = 5;
  uint32 weather_id = 6;
}

// CmdID: 5862
message LevelUpRestaurantFacilityReq {
  uint32 activity_id = 1;
}

// CmdID: 5863
message LevelUpRestaurantFacilityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MATERIAL_LACK = 2;
    MISSION_UNFINISH = 3;
  }

  LevelUpRestaurantFacilityRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
}

// CmdID: 5864
message AssignRestaurantWorkReq {
  uint32 activity_id = 1;
  uint32 room_id = 2;
  uint32 avatar_id = 3;
  uint32 material_id = 4;
}

// CmdID: 5865
message AssignRestaurantWorkRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ROOM_NOT_EXIST = 2;
    ALREADY_ASSIGN = 3;
    AVATAR_WORK_LIMIT = 4;
  }

  AssignRestaurantWorkRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 room_id = 3;
  uint32 avatar_id = 4;
  uint32 material_id = 5;
}

// CmdID: 5866
message CancelRestaurantWorkReq {
  uint32 activity_id = 1;
  uint32 room_id = 2;
}

// CmdID: 5867
message CancelRestaurantWorkRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ROOM_NOT_EXIST = 2;
    WORK_NOT_BEGIN = 3;
  }

  CancelRestaurantWorkRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 room_id = 3;
}

// CmdID: 5868
message TakeRestaurantOrderReq {
  uint32 activity_id = 1;
}

// CmdID: 5869
message TakeRestaurantOrderRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ORDER_LIST_EMPTY = 2;
  }

  TakeRestaurantOrderRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
}

// CmdID: 5870
message DeliverRestaurantQuestReq {
  uint32 activity_id = 1;
  uint32 quest_id = 2;
}

// CmdID: 5871
message DeliverRestaurantQuestRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MATERIAL_LACK = 2;
  }

  DeliverRestaurantQuestRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 quest_id = 3;
}

// CmdID: 5872
message AccelerateRestaurantWorkReq {
  uint32 activity_id = 1;
  uint32 room_id = 2;
  uint32 num = 3;
}

// CmdID: 5873
message AccelerateRestaurantWorkRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MATERIAL_LACK = 2;
    ROOM_NOT_EXIST = 3;
    WORK_NOT_DOING = 4;
    TICKET_LACK = 5;
    STOCK_LIMIT = 6;
    AVATAR_INVALID = 7;
  }

  AccelerateRestaurantWorkRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 room_id = 3;
  uint32 num = 4;
}

// CmdID: 5881
message NewbieLevelRushPurchaseReq {
}

// CmdID: 5882
message NewbieLevelRushPurchaseRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    PURCHASED = 2;
    MCOIN_LACK = 3;
  }

  NewbieLevelRushPurchaseRsp.Retcode retcode = 1;
}

// CmdID: 5883
message NewbieLevelRushTakeRewardReq {
}

// CmdID: 5884
message NewbieLevelRushTakeRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  NewbieLevelRushTakeRewardRsp.Retcode retcode = 1;
  repeated RewardData reward_list = 2;
}

message RewardLineActivity {
  uint32 id = 1;
  uint32 schedule_id = 2;
  uint32 score = 3;
  uint32 last_taken_reward_score = 4;
  bool is_closed = 5;
}

// CmdID: 5890
message GetRewardLineActivityReq {
  uint32 id = 1;
  bool is_get_closed_activity = 2;
}

// CmdID: 5891
message GetRewardLineActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    CLOSED = 2;
    ACTIVITY_NOT_EXIST = 3;
  }

  GetRewardLineActivityRsp.Retcode retcode = 1;
  repeated RewardLineActivity reward_line_activity_list = 2;
  bool is_get_closed_activity = 3;
}

// CmdID: 5892
message TakeRewardLineActivityRewardReq {
  uint32 id = 1;
}

// CmdID: 5893
message TakeRewardLineActivityRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    CLOSED = 2;
    NO_REWARD = 3;
    ACTIVITY_NOT_EXIST = 4;
  }

  TakeRewardLineActivityRewardRsp.Retcode retcode = 1;
  repeated RewardData reward_data_list = 2;
}

// CmdID: 5920
message MonsterCardGetActivityReq {
  uint32 activity_id = 1;
}

message MonsterCard {
  uint32 unique_id = 1;
  uint32 level = 2;
  uint32 star = 3;
  uint32 fragment_num = 4;
  repeated uint32 talent_list = 5;
}

message MonsterCardRandomTalentConfirmData {
  uint32 unique_id = 1;
  uint32 cost_material_id = 2;
  uint32 talent_index = 3;
  uint32 old_talent_id = 4;
  uint32 new_talent_id = 5;
}

// CmdID: 5921
message MonsterCardGetActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  MonsterCardGetActivityRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  repeated MonsterCard card_list = 3;
  uint32 has_take_daily_reward_times = 4;
  MonsterCardRandomTalentConfirmData random_talent_confirm_data = 5;
}

// CmdID: 5922
message MonsterCardLevelUpReq {
  uint32 activity_id = 1;
  uint32 unique_id = 2;
  uint32 target_level = 3;
}

// CmdID: 5923
message MonsterCardLevelUpRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MATERIAL_LACK = 2;
    LEVEL_LIMIT = 3;
    TARGET_LEVEL_ERROR = 4;
  }

  MonsterCardLevelUpRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 unique_id = 3;
  uint32 target_level = 4;
}

// CmdID: 5924
message MonsterCardStarUpReq {
  uint32 activity_id = 1;
  uint32 unique_id = 2;
}

// CmdID: 5925
message MonsterCardStarUpRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    FRAGMENT_LACK = 2;
    LEVEL_LACK = 3;
    STAR_LIMIT = 4;
  }

  MonsterCardStarUpRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 unique_id = 3;
}

// CmdID: 5926
message MonsterCardLearnRandomTalentReq {
  uint32 activity_id = 1;
  uint32 unique_id = 2;
  uint32 cost_material_id = 3;
  uint32 talent_index = 4;
}

// CmdID: 5927
message MonsterCardLearnRandomTalentRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MATERIAL_LACK = 2;
    MATERIAL_ERROR = 3;
    INDEX_ERROR = 4;
    NEED_TO_CONFIRM = 5;
  }

  MonsterCardLearnRandomTalentRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 unique_id = 3;
  uint32 cost_material_id = 4;
  uint32 talent_index = 5;
  uint32 old_talent_id = 6;
  uint32 new_talent_id = 7;
}

// CmdID: 5933
message MonsterCardConfirmRandomTalentReq {
  uint32 activity_id = 1;
  MonsterCardRandomTalentConfirmType type = 2;
}

// CmdID: 5934
message MonsterCardConfirmRandomTalentRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  MonsterCardConfirmRandomTalentRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  MonsterCardRandomTalentConfirmType type = 3;
  MonsterCardRandomTalentConfirmData confirm_data = 4;
}

// CmdID: 5928
message MonsterCardSyncCardNotify {
  uint32 activity_id = 1;
  bool is_all = 2;
  repeated MonsterCard card_list = 3;
  MonsterCardSyncType type = 4;
}

// CmdID: 5929
message MonsterCardGetTowerRankReq {
  uint32 activity_id = 1;
}

// CmdID: 5930
message MonsterCardGetTowerRankRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  MonsterCardGetTowerRankRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 num = 3;
  RankShowData rank_data = 4;
  uint32 rank_percent = 5;
  MonsterCardActivityRankInfo self_rank_data = 6;
}

// CmdID: 5931
message MonsterCardGetBossRankReq {
  uint32 activity_id = 1;
  uint32 stage_id = 2;
}

// CmdID: 5932
message MonsterCardGetBossRankRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  MonsterCardGetBossRankRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 stage_id = 3;
  uint32 num = 4;
  RankShowData rank_data = 5;
  uint32 rank_percent = 6;
  MonsterCardActivityRankInfo self_rank_data = 7;
}

// CmdID: 5935
message MonsterCardFragmentOverflowNotify {
  uint32 activity_id = 1;
  Material overflow_cost_material = 2;
  repeated Material return_material_list = 3;
}

// CmdID: 5941
message BuffAssistGetActivityReq {
}

message BuffAssistBuffSlot {
  uint32 slot_id = 1;
  uint32 buff_id = 2;
  bool is_used = 3;
}

message BuffAssistBuffPool {
  uint32 pool_id = 1;
  uint32 unique_id = 2;
  uint32 producer_uid = 3;
  string producer_nickname = 4;
  repeated BuffAssistBuffSlot buff_slot_list = 5;
  uint32 expire_time = 6;
  repeated uint32 assist_word_id_list = 7;
  uint32 buff_schedule_id = 8;
  uint32 producer_type = 9;
  uint32 producer_head_id = 10;
  uint32 producer_assist_level = 11;
}

message BuffAssistPlayerBuffSlot {
  uint32 slot_id = 1;
  uint32 buff_id = 2;
  bool is_replace = 3;
}

message BuffAssistHistory {
  uint32 assist_type = 1;
  string peer_nickname = 2;
  uint32 peer_assist_level = 3;
  uint32 assist_stage_id = 4;
  repeated uint32 assist_word_id_list = 5;
}

message BuffAssistStageAssistInfo {
  uint32 producer_uid = 1;
  uint32 peer_uid = 2;
  uint32 peer_assist_level = 3;
  uint32 assist_stage_id = 4;
  repeated uint32 assist_word_id_list = 5;
  repeated BuffAssistBuffSlot buff_slot_list = 6;
  uint32 buff_pool_unique_id = 7;
}

message BuffAssistActivity {
  uint32 activity_id = 1;
  uint32 buff_schedule_id = 2;
  BuffAssistBuffPool wait_select_buff_pool = 3;
  repeated BuffAssistBuffPool produce_buff_pool_list = 4;
  repeated BuffAssistPlayerBuffSlot buff_slot_list = 5;
  uint32 refresh_buff_pool_times = 6;
  uint32 cur_stage_group_id = 7;
  uint32 left_select_buff_times = 8;
  repeated BuffAssistHistory history_list = 9;
  uint32 assist_level = 10;
  uint32 assist_num = 11;
  uint32 be_assisted_num = 12;
  uint32 publish_buff_pool_times = 13;
}

// CmdID: 5942
message BuffAssistGetActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  BuffAssistGetActivityRsp.Retcode retcode = 1;
  BuffAssistActivity activity = 2;
}

// CmdID: 5943
message BuffAssistRefreshWaitSelectBuffPoolReq {
}

// CmdID: 5944
message BuffAssistRefreshWaitSelectBuffPoolRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    NO_VALID_POOL = 3;
    REFRESH_TIMES_LACK = 4;
    SYSTEM_BUSY = 5;
  }

  BuffAssistRefreshWaitSelectBuffPoolRsp.Retcode retcode = 1;
  BuffAssistBuffPool buff_pool = 2;
}

// CmdID: 5945
message BuffAssistSelectBuffReq {
  uint32 buff_slot_id = 1;
  uint32 wait_select_buff_slot_id = 2;
}

// CmdID: 5946
message BuffAssistSelectBuffRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    NO_BUFF = 3;
    BUFF_SLOT_ERROR = 4;
    BUFF_SLOT_REPLACED = 5;
    WAIT_SELECT_BUFF_SLOT_ERROR = 6;
    SELECT_TIMES_LACK = 7;
    BUFF_SLOT_LOCKED = 8;
  }

  BuffAssistSelectBuffRsp.Retcode retcode = 1;
}

// CmdID: 5947
message BuffAssistPublishBuffPoolReq {
  uint32 pool_id = 1;
  repeated uint32 assist_word_id_list = 2;
  BuffAssistBuffPool buff_pool = 3;
  bool is_anonymous = 4;
}

// CmdID: 5948
message BuffAssistPublishBuffPoolRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    ASSIST_WORD_ERROR = 3;
    POOL_ERROR = 4;
    BUFF_SCHEDULE_ERROR = 5;
    BUFF_POOL_FULL = 6;
    LACK_TIMES = 7;
    REPEATED_PUBLISH = 8;
  }

  BuffAssistPublishBuffPoolRsp.Retcode retcode = 1;
  uint32 pool_id = 2;
}

// CmdID: 5949
message BuffAssistStageEndNotify {
  uint32 stage_id = 1;
  repeated BuffAssistBuffPool cur_stage_buff_pool_list = 2;
}

// CmdID: 5950
message BuffAssistRecvStageAssistInfoNotify {
  uint32 activity_id = 1;
  BuffAssistStageAssistInfo assist_info = 2;
}

// CmdID: 5961
message WaveRushGetActivityReq {
}

message WaveRushStageScore {
  uint32 stage_id = 1;
  uint32 score = 2;
}

message WaveRushBuff {
  uint32 buff_id = 1;
  uint32 buff_level = 2;
}

message WaveRushBuffSuite {
  uint32 suite_id = 1;
  string suite_name = 2;
  repeated uint32 buff_id_list = 3;
}

message WaveRushActivity {
  uint32 schedule_id = 1;
  repeated WaveRushStageScore stage_score_list = 2;
  repeated WaveRushBuff buff_list = 3;
  repeated WaveRushBuffSuite buff_suite_list = 4;
  uint32 active_buff_suite_id = 5;
  repeated uint32 cur_daily_stage_id_list = 6;
  uint32 daily_drop_material_num = 7;
  uint32 daily_drop_limit_num = 8;
}

// CmdID: 5962
message WaveRushGetActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  WaveRushGetActivityRsp.Retcode retcode = 1;
  WaveRushActivity activity = 2;
}

// CmdID: 5963
message WaveRushGetRankReq {
  uint32 stage_id = 1;
}

// CmdID: 5964
message WaveRushGetRankRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  WaveRushGetRankRsp.Retcode retcode = 1;
  uint32 stage_id = 2;
  uint32 rank = 3;
  uint32 rank_percent = 4;
  RankShowData rank_data = 5;
}

// CmdID: 5965
message WaveRushLevelUpBuffReq {
  uint32 buff_id = 1;
}

// CmdID: 5966
message WaveRushLevelUpBuffRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    CANNOT_UNLOCK_BY_LEVEL_UP = 3;
    BUFF_ERROR = 4;
    NOT_MEET_CONDITION = 5;
    MATERIAL_LACK = 6;
  }

  WaveRushLevelUpBuffRsp.Retcode retcode = 1;
}

// CmdID: 5967
message WaveRushUpdateBuffSuiteReq {
  uint32 suite_id = 1;
  string suite_name = 2;
  repeated uint32 buff_id_list = 3;
}

// CmdID: 5968
message WaveRushUpdateBuffSuiteRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    BUFF_ERROR = 2;
    SLOT_LACK = 3;
    SENSITIVE_WORDS = 4;
    NAME_FORMAT_ERROR = 5;
    SUITE_ID_ERROR = 6;
  }

  WaveRushUpdateBuffSuiteRsp.Retcode retcode = 1;
}

// CmdID: 5969
message WaveRushActiveBuffSuiteReq {
  uint32 suite_id = 1;
}

// CmdID: 5970
message WaveRushActiveBuffSuiteRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  WaveRushActiveBuffSuiteRsp.Retcode retcode = 1;
}

message MiniMonopolyMap {
  uint32 map_id = 1;
  repeated uint32 reward_taken_grid_list = 2;
  uint32 current_grid = 3;
  bool is_map_unlocked = 4;
}

message MiniMonopolyActivity {
  uint32 activity_id = 1;
  repeated MiniMonopolyMap mini_monopoly_map_list = 2;
  bool is_map_switchable = 3;
}

// CmdID: 5981
message MiniMonopolyGetDataReq {
  uint32 activity_id = 1;
}

// CmdID: 5982
message MiniMonopolyGetDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  MiniMonopolyGetDataRsp.Retcode retcode = 1;
  MiniMonopolyActivity mini_monopoly_activity = 2;
}

// CmdID: 5983
message MiniMonopolyThrowDiceReq {
  uint32 sector_id = 1;
  uint32 map_id = 2;
  uint32 activity_id = 3;
}

// CmdID: 5984
message MiniMonopolyThrowDiceRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NO_DICE = 2;
    NOT_OPEN = 3;
  }

  MiniMonopolyThrowDiceRsp.Retcode retcode = 1;
  uint32 map_id = 2;
  uint32 dice_number = 3;
  repeated RewardData reward_list = 4;
  bool is_finish_round = 5;
  uint32 activity_id = 6;
  uint32 finish_grid_id = 7;
  bool is_compensate_reward = 8;
}

// CmdID: 5985
message MiniMonopolyUseItemReq {
  uint32 item_id = 1;
  uint32 map_id = 2;
  uint32 param = 3;
  uint32 activity_id = 4;
}

// CmdID: 5986
message MiniMonopolyUseItemRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NO_ITEM = 2;
    NO_DICE = 3;
    NOT_OPEN = 4;
  }

  MiniMonopolyUseItemRsp.Retcode retcode = 1;
  uint32 map_id = 2;
  uint32 dice_number = 3;
  repeated RewardData reward_list = 4;
  bool is_finish_round = 5;
  uint32 activity_id = 6;
  uint32 finish_grid_id = 7;
  bool is_compensate_reward = 8;
}

// CmdID: 5991
message AvatarCultivateGetActivityReq {
}

message AvatarCultivateActivityAreaDropRecord {
  uint32 area_id = 1;
  uint32 cur_drop_num = 2;
}

message AvatarCultivateActivityRewardLineRecord {
  uint32 stage_id = 1;
  uint32 max_score = 2;
}

// CmdID: 5992
message AvatarCultivateGetActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  AvatarCultivateGetActivityRsp.Retcode retcode = 1;
  repeated AvatarCultivateActivityAreaDropRecord drop_record_list = 2;
  repeated AvatarCultivateActivityRewardLineRecord reward_line_record_list = 3;
}

enum CmdTypeActivity2 {
  CMD_TYPE_ACTIVITY_2_NONE = 0;
  CMD_DREAM_GET_ACTIVITY_REQ = 5750;
  CMD_DREAM_GET_ACTIVITY_RSP = 5751;
  CMD_DREAM_OPEN_DREAM_REQ = 5752;
  CMD_DREAM_OPEN_DREAM_RSP = 5753;
  CMD_DREAM_GIVE_UP_DREAM_REQ = 5754;
  CMD_DREAM_GIVE_UP_DREAM_RSP = 5755;
  CMD_DREAM_EXCHANGE_SCORE_REQ = 5756;
  CMD_DREAM_EXCHANGE_SCORE_RSP = 5757;
  CMD_DREAM_TAKE_REWARD_REQ = 5758;
  CMD_DREAM_TAKE_REWARD_RSP = 5759;
  CMD_GET_THEME_WANTED_REQ = 5790;
  CMD_GET_THEME_WANTED_RSP = 5791;
  CMD_THEME_WANTED_REFRESH_TICKET_REQ = 5794;
  CMD_THEME_WANTED_REFRESH_TICKET_RSP = 5795;
  CMD_GLOBAL_POLLING_GET_DATA_REQ = 5811;
  CMD_GLOBAL_POLLING_GET_DATA_RSP = 5812;
  CMD_GLOBAL_POLLING_SUPPORT_REQ = 5813;
  CMD_GLOBAL_POLLING_SUPPORT_RSP = 5814;
  CMD_GLOBAL_POLLING_VOTE_REQ = 5815;
  CMD_GLOBAL_POLLING_VOTE_RSP = 5816;
  CMD_GET_COLLABORATION_SCHEDULE_REQ = 5831;
  CMD_GET_COLLABORATION_SCHEDULE_RSP = 5832;
  CMD_RANCH_GET_ACTIVITY_REQ = 5833;
  CMD_RANCH_GET_ACTIVITY_RSP = 5834;
  CMD_RANCH_SYNTHESIS_MONSTER_REQ = 5835;
  CMD_RANCH_SYNTHESIS_MONSTER_RSP = 5836;
  CMD_RANCH_FREE_MONSTER_REQ = 5837;
  CMD_RANCH_FREE_MONSTER_RSP = 5838;
  CMD_RANCH_ASSIGN_MONSTER_REQ = 5839;
  CMD_RANCH_ASSIGN_MONSTER_RSP = 5840;
  CMD_RANCH_FIRE_MONSTER_REQ = 5841;
  CMD_RANCH_FIRE_MONSTER_RSP = 5842;
  CMD_RANCH_TAKE_PRODUCT_REQ = 5843;
  CMD_RANCH_TAKE_PRODUCT_RSP = 5844;
  CMD_RANCH_GET_MONSTER_WIKI_REQ = 5845;
  CMD_RANCH_GET_MONSTER_WIKI_RSP = 5846;
  CMD_RANCH_SYNC_MONSTER_NOTIFY = 5847;
  CMD_RANCH_DEL_MONSTER_NOTIFY = 5848;
  CMD_RANCH_LOCK_MONSTER_SKILL_REQ = 5849;
  CMD_RANCH_LOCK_MONSTER_SKILL_RSP = 5850;
  CMD_RANCH_SET_BATTLE_MONSTER_REQ = 5851;
  CMD_RANCH_SET_BATTLE_MONSTER_RSP = 5852;
  CMD_GET_RESTAURANT_ACTIVITY_REQ = 5860;
  CMD_GET_RESTAURANT_ACTIVITY_RSP = 5861;
  CMD_LEVELUP_RESTAURANT_FACILITY_REQ = 5862;
  CMD_LEVELUP_RESTAURANT_FACILITY_RSP = 5863;
  CMD_ASSIGN_RESTAURANT_WORK_REQ = 5864;
  CMD_ASSIGN_RESTAURANT_WORK_RSP = 5865;
  CMD_CANCEL_RESTAURANT_WORK_REQ = 5866;
  CMD_CANCEL_RESTAURANT_WORK_RSP = 5867;
  CMD_TAKE_RESTAURANT_ORDER_REQ = 5868;
  CMD_TAKE_RESTAURANT_ORDER_RSP = 5869;
  CMD_DELIVER_RESTAURANT_QUEST_REQ = 5870;
  CMD_DELIVER_RESTAURANT_QUEST_RSP = 5871;
  CMD_ACCELERATE_RESTAURANT_WORK_REQ = 5872;
  CMD_ACCELERATE_RESTAURANT_WORK_RSP = 5873;
  CMD_NEWBIE_LEVEL_RUSH_PURCHASE_REQ = 5881;
  CMD_NEWBIE_LEVEL_RUSH_PURCHASE_RSP = 5882;
  CMD_NEWBIE_LEVEL_RUSH_TAKE_REWARD_REQ = 5883;
  CMD_NEWBIE_LEVEL_RUSH_TAKE_REWARD_RSP = 5884;
  CMD_GET_REWARD_LINE_ACTIVITY_REQ = 5890;
  CMD_GET_REWARD_LINE_ACTIVITY_RSP = 5891;
  CMD_TAKE_REWARD_LINE_ACTIVITY_REWARD_REQ = 5892;
  CMD_TAKE_REWARD_LINE_ACTIVITY_REWARD_RSP = 5893;
  CMD_MONSTER_CARD_GET_ACTIVITY_REQ = 5920;
  CMD_MONSTER_CARD_GET_ACTIVITY_RSP = 5921;
  CMD_MONSTER_CARD_LEVEL_UP_REQ = 5922;
  CMD_MONSTER_CARD_LEVEL_UP_RSP = 5923;
  CMD_MONSTER_CARD_STAR_UP_REQ = 5924;
  CMD_MONSTER_CARD_STAR_UP_RSP = 5925;
  CMD_MONSTER_CARD_LEARN_RANDOM_TALENT_REQ = 5926;
  CMD_MONSTER_CARD_LEARN_RANDOM_TALENT_RSP = 5927;
  CMD_MONSTER_CARD_SYNC_CARD_NOTIFY = 5928;
  CMD_MONSTER_CARD_GET_TOWER_RANK_REQ = 5929;
  CMD_MONSTER_CARD_GET_TOWER_RANK_RSP = 5930;
  CMD_MONSTER_CARD_GET_BOSS_RANK_REQ = 5931;
  CMD_MONSTER_CARD_GET_BOSS_RANK_RSP = 5932;
  CMD_MONSTER_CARD_CONFIRM_RANDOM_TALENT_REQ = 5933;
  CMD_MONSTER_CARD_CONFIRM_RANDOM_TALENT_RSP = 5934;
  CMD_MONSTER_CARD_FRAGMENT_OVERFLOW_NOTIFY = 5935;
  CMD_BUFF_ASSIST_GET_ACTIVITY_REQ = 5941;
  CMD_BUFF_ASSIST_GET_ACTIVITY_RSP = 5942;
  CMD_BUFF_ASSIST_REFRESH_WAIT_SELECT_BUFF_POOL_REQ = 5943;
  CMD_BUFF_ASSIST_REFRESH_WAIT_SELECT_BUFF_POOL_RSP = 5944;
  CMD_BUFF_ASSIST_SELECT_BUFF_REQ = 5945;
  CMD_BUFF_ASSIST_SELECT_BUFF_RSP = 5946;
  CMD_BUFF_ASSIST_PUBLISH_BUFF_POOL_REQ = 5947;
  CMD_BUFF_ASSIST_PUBLISH_BUFF_POOL_RSP = 5948;
  CMD_BUFF_ASSIST_STAGE_END_NOTIFY = 5949;
  CMD_BUFF_ASSIST_RECV_STAGE_ASSIST_INFO_NOTIFY = 5950;
  CMD_WAVE_RUSH_GET_ACTIVITY_REQ = 5961;
  CMD_WAVE_RUSH_GET_ACTIVITY_RSP = 5962;
  CMD_WAVE_RUSH_GET_RANK_REQ = 5963;
  CMD_WAVE_RUSH_GET_RANK_RSP = 5964;
  CMD_WAVE_RUSH_LEVEL_UP_BUFF_REQ = 5965;
  CMD_WAVE_RUSH_LEVEL_UP_BUFF_RSP = 5966;
  CMD_WAVE_RUSH_UPDATE_BUFF_SUITE_REQ = 5967;
  CMD_WAVE_RUSH_UPDATE_BUFF_SUITE_RSP = 5968;
  CMD_WAVE_RUSH_ACTIVE_BUFF_SUITE_REQ = 5969;
  CMD_WAVE_RUSH_ACTIVE_BUFF_SUITE_RSP = 5970;
  CMD_MINI_MONOPOLY_GET_DATA_REQ = 5981;
  CMD_MINI_MONOPOLY_GET_DATA_RSP = 5982;
  CMD_MINI_MONOPOLY_THROW_DICE_REQ = 5983;
  CMD_MINI_MONOPOLY_THROW_DICE_RSP = 5984;
  CMD_MINI_MONOPOLY_USE_ITEM_REQ = 5985;
  CMD_MINI_MONOPOLY_USE_ITEM_RSP = 5986;
  CMD_AVATAR_CULTIVATE_GET_ACTIVITY_REQ = 5991;
  CMD_AVATAR_CULTIVATE_GET_ACTIVITY_RSP = 5992;
}

enum DreamUnlockType {
  DREAM_UNLOCK_TYPE_NONE = 0;
  DREAM_UNLOCK_TYPE_NO_NEWBIE_SCHEDULE = 1;
  DREAM_UNLOCK_TYPE_HAS_NOT_FINISHED_DREAM = 2;
  DREAM_UNLOCK_TYPE_GOBACK_LEVEL = 3;
  DREAM_UNLOCK_TYPE_AVATAR_LOCKED = 4;
  DREAM_UNLOCK_TYPE_HAS_NOT_GOT_ITEM = 5;
}

enum RanchMonsterSkillType {
  RANCH_MONSTER_SKILL_TYPE_NONE = 0;
  RANCH_MONSTER_SKILL_ACTIVE = 1;
  RANCH_MONSTER_SKILL_PASSIVE = 2;
  RANCH_MONSTER_SKILL_FAST_PRODUCTION = 3;
  RANCH_MONSTER_SKILL_RARITY_UP = 4;
}

enum RanchNotifyType {
  RANCH_NOTIFY_UNKNOWN = 0;
  RANCH_NOTIFY_SYNTHESIS = 1;
  RANCH_NOTIFY_STAGE_END = 2;
  RANCH_NOTIFY_LOCK = 3;
}

enum RanchRarityType {
  RANCH_RARITY_TYPE_NONE = 0;
  RANCH_LEGENDARY = 4;
}

enum RanchSynthesisType {
  RANCH_SYNTHESIS_TYPE_NONE = 0;
  RANCH_SYNSHESIS_WITHOUT_FORMULA = 1;
  RANCH_SYNSHESIS_WITH_FORMULA = 2;
}

enum RanchMonsterSourceType {
  RANCH_MONSTER_SOURCE_TYPE_NONE = 0;
  RANCH_MONSTER_SOURCE_STAGE = 1;
  RANCH_MONSTER_SOURCE_MATERIAL = 2;
  RANCH_MONSTER_SOURCE_SYNTHESIS_WITH_FOMULA = 3;
  RANCH_MONSTER_SOURCE_PRODUCT = 4;
  RANCH_MONSTER_SOURCE_SYNTHESIS_WITHOUT_FORMULA = 5;
  RANCH_MONSTER_SOURCE_GM = 6;
}

enum WeekDayActivityOpenType {
  WEEK_DAY_ACTIVITY_OPEN_DAILY = 0;
  WEEK_DAY_ACTIVITY_OPEN_WEEK_DAY = 1;
}

enum RestaurantWorkStatus {
  RESTAURANT_WORK_STATUS_NONE = 0;
  RESTAURANT_WORK_NOT_BEGIN = 1;
  RESTAURANT_WORK_DOING = 2;
  RESTAURANT_WORK_PAUSE = 3;
}

enum RestaurantRoomType {
  RESTAURANT_ROOM_TYPE_NONE = 0;
  RESTAURANT_ROOM_STORE = 1;
  RESTAURANT_ROOM_KITCHEN = 2;
  RESTAURANT_ROOM_CHECKOUT = 3;
}

enum RestaurantSkillType {
  RESTAURANT_SKILL_TYPE_NONE = 0;
  RESTAURANT_SKILL_COOK_ID_SPEED_UP = 1;
  RESTAURANT_SKILL_COOK_TAG_SPEED_UP = 2;
  RESTAURANT_SKILL_COOK_ALL_SPEED_UP = 3;
  RESTAURANT_SKILL_SELL_ID_SPEED_UP = 4;
  RESTAURANT_SKILL_SELL_TAG_SPEED_UP = 5;
  RESTAURANT_SKILL_SELL_ALL_SPEED_UP = 6;
  RESTAURANT_SKILL_SELL_ID_PRICE_UP = 7;
  RESTAURANT_SKILL_SELL_TAG_PRICE_UP = 8;
  RESTAURANT_SKILL_SELL_ALL_PRICE_UP = 9;
}

enum MonsterCardRandomTalentConfirmType {
  MONSTER_CARD_RANDOM_TALENT_CONFIRM_TYPE_NONE = 0;
  MONSTER_CARD_RANDOM_TALENT_CONFIRM_TYPE_CONFIRM = 1;
  MONSTER_CARD_RANDOM_TALENT_CONFIRM_TYPE_ABANDON = 2;
}

enum MonsterCardStageType {
  MONSTER_CARD_STAGE_TYPE_NONE = 0;
  MONSTER_CARD_STAGE_TYPE_NORMAL = 1;
  MONSTER_CARD_STAGE_TYPE_BOSS = 2;
  MONSTER_CARD_STAGE_TYPE_EXP = 3;
  MONSTER_CARD_STAGE_TYPE_TOWER = 4;
  MONSTER_CARD_STAGE_TYPE_PVP = 5;
  MONSTER_CARD_STAGE_TYPE_BOSS_NEW = 6;
  MONSTER_CARD_STAGE_TYPE_SPECIAL_DEFEND = 7;
  MONSTER_CARD_STAGE_TYPE_SPECIAL_HEALTH = 8;
  MONSTER_CARD_STAGE_TYPE_SPECIAL_SPEED = 9;
  MONSTER_CARD_STAGE_TYPE_SPECIAL_BOSS = 10;
  MONSTER_CARD_STAGE_TYPE_ELITE = 11;
}

enum MonsterCardSyncType {
  MONSTER_CARD_SYNC_TYPE_NONE = 0;
  MONSTER_CARD_SYNC_TYPE_LEVEL_UP = 1;
  MONSTER_CARD_SYNC_TYPE_STAR_UP = 2;
  MONSTER_CARD_SYNC_TYPE_LEARN_TALENT = 3;
  MONSTER_CARD_SYNC_TYPE_NEW_CARD = 4;
  MONSTER_CARD_SYNC_TYPE_REFRESH = 5;
  MONSTER_CARD_SYNC_TYPE_ADD_FRAGMENT = 6;
}

enum MonsterCardSkillType {
  MONSTER_CARD_SKILL_TYPE_NONE = 0;
  MONSTER_CARD_SKILL_TYPE_ATK = 1;
  MONSTER_CARD_SKILL_TYPE_LB = 2;
  MONSTER_CARD_SKILL_TYPE_AUTO = 3;
  MONSTER_CARD_SKILL_TYPE_PASSIVE = 4;
  MONSTER_CARD_SKILL_TYPE_WEATHER = 5;
  MONSTER_CARD_SKILL_TYPE_TALENT = 6;
  MONSTER_CARD_SKILL_TYPE_UNLOCK = 99;
}

enum MonsterCardLevelLimitType {
  MONSTER_CARD_LEVEL_LIMIT_TYPE_NONE = 0;
  MONSTER_CARD_LEVEL_LIMIT_TYPE_PASS_RPG_SITE = 1;
}

enum MonsterCardSelectCardCondition {
  MONSTER_CARD_SELECT_CARD_CONDITION_NONE = 0;
  MONSTER_CARD_SELECT_CARD_CONDITION_LEVEL_GREATER_EQUAL = 1;
}

enum BuffAssistBuffProducerType {
  BUFF_ASSIST_BUFF_PRODUCER_TYPE_NONE = 0;
  BUFF_ASSIST_BUFF_PRODUCER_PLAYER = 1;
  BUFF_ASSIST_BUFF_PRODUCER_NPC = 2;
  BUFF_ASSIST_BUFF_PRODUCER_ROBOT = 3;
}

enum BuffAssistType {
  BUFF_ASSIST_TYPE_NONE = 0;
  BUFF_ASSIST_PRODUCER = 1;
  BUFF_ASSIST_CONSUMER = 2;
}

enum WaveRushStageType {
  WAVE_RUSH_STAGE_TYPE_NONE = 0;
  WAVE_RUSH_STAGE_MAINLINE = 1;
  WAVE_RUSH_STAGE_DAILY = 2;
  WAVE_RUSH_STAGE_TOWER = 3;
}

enum WaveRushLimitConditionType {
  WAVE_RUSH_LIMIT_CONDITION_NONE = 0;
  WAVE_RUSH_LIMIT_CONDITION_PRE_SITE = 1;
}

enum WaveRushBuffType {
  WAVE_RUSH_BUFF_TYPE_NONE = 0;
  WAVE_RUSH_CORE_BUFF = 1;
  WAVE_RUSH_NORMAL_BUFF = 2;
  WAVE_RUSH_WEATHER_BUFF = 3;
  WAVE_RUSH_ATTR_BUFF = 4;
}

enum MiniMonopolyItemType {
  MINI_MONOPOLY_ITEM_TYPE_NONE = 0;
  MINI_MONOPOLY_ITEM_CONTROLLABLE_DICE = 1;
}

enum AvatarCultivateActivityStageType {
  AVATAR_CULTIVATE_ACTIVITY_STAGE_TYPE_NONE = 0;
  AVATAR_CULTIVATE_ACTIVITY_STAGE_TYPE_SWEEP = 1;
  AVATAR_CULTIVATE_ACTIVITY_STAGE_TYPE_CHALLENGE = 2;
  AVATAR_CULTIVATE_ACTIVITY_STAGE_TYPE_NORMAL = 3;
}

message ThemeTowerSection {
  uint32 section_id = 1;
  uint32 section_level = 2;
  uint32 drop_material_num = 3;
}

message ThemeTowerStageScore {
  uint32 stage_id = 1;
  uint32 score = 2;
}

message ThemeTowerActivity {
  uint32 schedule_id = 1;
  repeated ThemeTowerStageScore stage_score_list = 2;
  repeated ThemeTowerSection section_list = 3;
  repeated uint32 has_passed_stage_id_list = 4;
}

// CmdID: 7070
message ThemeTowerGetActivityReq {
}

// CmdID: 7071
message ThemeTowerGetActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  ThemeTowerGetActivityRsp.Retcode retcode = 1;
  ThemeTowerActivity activity = 2;
}

// CmdID: 7072
message ThemeTowerGetRankReq {
  uint32 schedule_id = 1;
}

// CmdID: 7073
message ThemeTowerGetRankRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  ThemeTowerGetRankRsp.Retcode retcode = 1;
  uint32 schedule_id = 2;
  uint32 rank = 3;
  uint32 rank_percent = 4;
  RankShowData rank_data = 5;
}

// CmdID: 7074
message ThemeTowerLevelUpSectionReq {
  uint32 section_id = 1;
}

// CmdID: 7075
message ThemeTowerLevelUpSectionRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    SECTION_ERROR = 3;
    SECTION_LEVEL_ERROR = 4;
    MATERIAL_LACK = 5;
  }

  ThemeTowerLevelUpSectionRsp.Retcode retcode = 1;
}

// CmdID: 7062
message ShigureKiraAddConcertProgressReq {
  uint32 activity_id = 1;
  uint32 target_progress = 2;
}

// CmdID: 7063
message ShigureKiraAddConcertProgressRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ACTIVITY_NOT_OPEN = 2;
    TARGET_PROGRESS_ERROR = 3;
    MATERIAL_LACK = 4;
  }

  ShigureKiraAddConcertProgressRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 target_progress = 3;
}

message ShigureKiraActivity {
  uint32 activity_id = 1;
  uint32 progress = 2;
}

// CmdID: 7060
message ShigureKiraGetActivityReq {
  uint32 activity_id = 1;
}

// CmdID: 7061
message ShigureKiraGetActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  ShigureKiraGetActivityRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  ShigureKiraActivity shigure_kira_activity = 3;
}

message SusannaTrialMentorProgress {
  uint32 area_id = 1;
  repeated uint32 has_taken_progress_config_id_list = 2;
  uint32 progress = 3;
  uint32 last_site_id = 4;
}

message SusannaTrialActivity {
  uint32 activity_id = 1;
  repeated SusannaTrialMentorProgress mentor_progress_list = 2;
}

// CmdID: 7050
message SusannaTrialGetActivityReq {
  uint32 activity_id = 1;
}

// CmdID: 7051
message SusannaTrialGetActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  SusannaTrialGetActivityRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  SusannaTrialActivity susanna_trial_activity = 3;
}

// CmdID: 7052
message SusannaTrialTakeMentorProgressRewardReq {
  uint32 activity_id = 1;
  uint32 area_id = 2;
}

// CmdID: 7053
message SusannaTrialTakeMentorProgressRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  SusannaTrialTakeMentorProgressRewardRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 area_id = 3;
  RewardData reward = 4;
}

// CmdID: 7054
message SusannaTrialTakePlotRewardReq {
  uint32 activity_id = 1;
  uint32 area_id = 2;
  uint32 config_id = 3;
}

// CmdID: 7055
message SusannaTrialTakePlotRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    LACK_PROGRESS = 2;
  }

  SusannaTrialTakePlotRewardRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 area_id = 3;
  uint32 config_id = 4;
  RewardData reward = 5;
}

message PonMachineItemData {
  uint32 id = 1;
  uint32 num = 2;
}

// CmdID: 7100
message GetPonMachineActivityReq {
  uint32 activity_id = 1;
}

// CmdID: 7101
message GetPonMachineActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ACTIVITY_NOT_OPEN = 2;
  }

  GetPonMachineActivityRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  repeated PonMachineItemData has_got_item_list = 3;
}

// CmdID: 7102
message StartPonMachineReq {
  uint32 activity_id = 1;
  uint32 gacha_num = 2;
}

// CmdID: 7103
message StartPonMachineRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ACTIVITY_NOT_OPEN = 2;
    MATERIAL_LACK = 3;
    GACHA_NUM_EXCEED_ITEM_NUM = 4;
    INVALID_GACHA_NUM = 5;
  }

  StartPonMachineRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 gacha_num = 3;
  repeated uint32 item_id_list = 4;
}

// CmdID: 7111
message CarnivalLotteryBetReq {
  uint32 activity_id = 1;
}

// CmdID: 7112
message CarnivalLotteryBetRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NO_MATERIAL = 2;
    NOT_OPEN = 3;
    CLOSED = 4;
  }

  CarnivalLotteryBetRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 bet_num = 3;
}

// CmdID: 7113
message CarnivalLotteryGetInfoReq {
  uint32 activity_id = 1;
}

message CarnivalLotteryParticipationReward {
  uint32 reward_id = 1;
  uint32 reward_num = 2;
}

// CmdID: 7114
message CarnivalLotteryGetInfoRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  CarnivalLotteryGetInfoRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 bet_num = 3;
  uint32 special_reward = 4;
  repeated CarnivalLotteryParticipationReward has_taken_reward_list = 5;
  bool is_special_reward_taken = 6;
  bool is_participation_reward_taken = 7;
}

// CmdID: 7115
message CarnivalLotteryTakeSpecialRewardReq {
  uint32 activity_id = 1;
}

// CmdID: 7116
message CarnivalLotteryTakeSpecialRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NO_REWARD = 2;
    HAS_TAKEN = 3;
  }

  CarnivalLotteryTakeSpecialRewardRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  RewardData special_reward = 3;
}

// CmdID: 7117
message CarnivalLotteryOpenRewardReq {
  uint32 activity_id = 1;
}

// CmdID: 7118
message CarnivalLotteryOpenRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  CarnivalLotteryOpenRewardRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  RewardData participation_reward = 3;
}

// CmdID: 7121
message TiledGameLunaTrapReq {
  uint32 activity_id = 1;
  uint32 trap_type = 2;
}

// CmdID: 7122
message TiledGameLunaTrapRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  TiledGameLunaTrapRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 trap_type = 3;
  uint32 player_health = 4;
  bool is_player_dead = 5;
}

// CmdID: 7123
message GetTiledGameLunaReq {
  uint32 activity_id = 1;
}

// CmdID: 7124
message GetTiledGameLunaRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetTiledGameLunaRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 player_health = 3;
}

// CmdID: 7125
message TiledGameLunaBattleReq {
  uint32 activity_id = 1;
  uint32 level = 2;
  uint32 monster_id = 3;
  uint32 monster_unique_id = 4;
  uint32 map_id = 5;
  bool is_only_check = 6;
}

// CmdID: 7126
message TiledGameLunaBattleRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    LEVEL_ERROR = 2;
  }

  TiledGameLunaBattleRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 player_health = 3;
  bool is_player_dead = 4;
}

// CmdID: 7129
message TiledGameLunaHealReq {
  uint32 activity_id = 1;
  uint32 heal_health = 2;
  bool is_heal_to_max_health = 3;
}

// CmdID: 7130
message TiledGameLunaHealRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  TiledGameLunaHealRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
}

// CmdID: 7141
message MinionClashGetActivityReq {
  uint32 activity_id = 1;
}

message MinionClashTalent {
  uint32 talent_id = 1;
  uint32 level = 2;
}

message MinionClashCard {
  uint32 card_id = 1;
  uint32 star = 2;
  uint32 fragment_num = 3;
}

message MinionClashBuild {
  uint32 branch = 1;
  repeated uint32 card_id_list = 2;
}

message MinionClashActivity {
  uint32 activity_id = 1;
  repeated Material daily_drop_record_list = 2;
  uint32 activity_level = 3;
  uint32 cur_exp = 4;
  repeated MinionClashTalent talent_list = 5;
  repeated MinionClashCard card_list = 6;
  repeated MinionClashBuild build_list = 7;
  uint32 remain_skill_point = 8;
}

// CmdID: 7142
message MinionClashGetActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  MinionClashGetActivityRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  MinionClashActivity activity = 3;
}

// CmdID: 7143
message MinionClashGetGachaInfoReq {
  uint32 activity_id = 1;
  bool is_all = 2;
  repeated uint32 pool_id_list = 3;
}

message MinionClashGachaRecord {
  uint32 card_id = 1;
  uint32 num = 2;
}

message MinionClashGachaPool {
  uint32 pool_id = 1;
  repeated MinionClashGachaRecord has_got_card_list = 2;
  uint32 no_baodi_times = 3;
}

// CmdID: 7144
message MinionClashGetGachaInfoRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    CONDITION_MISMATCH = 3;
  }

  MinionClashGetGachaInfoRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  repeated MinionClashGachaPool gacha_pool_list = 3;
  uint32 gacha_random = 4;
}

// CmdID: 7145
message MinionClashDoGachaReq {
  uint32 activity_id = 1;
  uint32 pool_id = 2;
  uint32 gacha_random = 3;
  MinionClashDoGachaType do_gacha_type = 4;
}

message MinionClashGachaResult {
  uint32 card_id = 1;
  repeated Material transformed_material_list = 2;
}

// CmdID: 7146
message MinionClashDoGachaRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    EMPTY_POOL = 3;
    GACHA_RANDOM_MISMATCH = 4;
    GACHA_COIN_LACK = 5;
    CONDITION_MISMATCH = 6;
  }

  MinionClashDoGachaRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 gacha_random = 3;
  repeated uint32 got_card_id_list = 4;
}

// CmdID: 7147
message MinionClashLevelUpTalentReq {
  uint32 activity_id = 1;
  uint32 talent_id = 2;
  uint32 target_level = 3;
}

// CmdID: 7148
message MinionClashLevelUpTalentRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    SKILL_POINT_LACK = 3;
    CONDITION_MISMATCH = 4;
    BRANCH_LOCKED = 5;
    TARGET_LEVEL_ERROR = 6;
  }

  MinionClashLevelUpTalentRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 talent_id = 3;
  uint32 target_level = 4;
}

// CmdID: 7149
message MinionClashReportStageBeginReq {
  uint32 activity_id = 1;
  MinionClashBuild build = 2;
  uint32 stage_id = 3;
}

// CmdID: 7150
message MinionClashReportStageBeginRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    BUILD_MISMATCH = 3;
    TOO_FEW_CARDS = 4;
    CARD_ERROR = 5;
  }

  MinionClashReportStageBeginRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 stage_id = 3;
}

// CmdID: 7151
message MinionClashUpdateBuildReq {
  uint32 activity_id = 1;
  MinionClashBuild build = 2;
}

// CmdID: 7152
message MinionClashUpdateBuildRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    BRANCH_LOCKED = 3;
    CARD_ERROR = 4;
    CARD_NUM_LIMIT = 5;
  }

  MinionClashUpdateBuildRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  MinionClashBuild build = 3;
}

// CmdID: 7153
message MinionClashStarUpCardReq {
  uint32 activity_id = 1;
  uint32 card_id = 2;
  uint32 target_star = 3;
}

// CmdID: 7154
message MinionClashStarUpCardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    FRAGMENT_LACK = 3;
    STAR_LIMIT = 4;
    CARD_NOT_EXIST = 5;
    TARGET_STAR_ERROR = 6;
  }

  MinionClashStarUpCardRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 card_id = 3;
  uint32 target_star = 4;
}

// CmdID: 7161
message ThelemaActivityGetActivityReq {
  uint32 activity_id = 1;
}

message ThelemaActivityNpcInfo {
  uint32 npc_id = 1;
  uint32 finished_phase_num = 2;
}

// CmdID: 7162
message ThelemaActivityGetActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  ThelemaActivityGetActivityRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  repeated ThelemaActivityNpcInfo npc_info_list = 3;
}

// CmdID: 7163
message ThelemaActivityFinishQuestionReq {
  uint32 activity_id = 1;
  uint32 npc_id = 2;
  uint32 phase = 3;
}

// CmdID: 7164
message ThelemaActivityFinishQuestionRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    PHASE_ERROR = 3;
    NPC_ERROR = 4;
    ORG_ERROR = 5;
  }

  ThelemaActivityFinishQuestionRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 npc_id = 3;
  uint32 phase = 4;
}

message MatchThreePlusRole {
  uint32 role_id = 1;
  uint32 level = 2;
}

message MatchThreePlusPiece {
  uint32 piece_id = 1;
  uint32 star = 2;
}

message MatchThreePlusCombination {
  uint32 role_id = 1;
  repeated uint32 piece_id_list = 2;
}

message MatchThreePlusActivity {
  uint32 activity_id = 1;
  repeated MatchThreePlusRole role_list = 2;
  repeated MatchThreePlusPiece piece_list = 3;
  repeated MatchThreePlusCombination combination_list = 4;
  uint32 has_got_daily_material_num = 5;
}

// CmdID: 7171
message MatchThreePlusGetActivityReq {
}

// CmdID: 7172
message MatchThreePlusGetActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  MatchThreePlusGetActivityRsp.Retcode retcode = 1;
  MatchThreePlusActivity activity = 2;
}

// CmdID: 7173
message MatchThreePlusRoleLevelUpReq {
  uint32 role_id = 1;
  uint32 target_level = 2;
}

// CmdID: 7174
message MatchThreePlusRoleLevelUpRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    INVALID_ROLE = 2;
    TARGET_LEVEL_ERROR = 3;
    MATERIAL_LACK = 4;
    CONDITION_NOT_MEET = 5;
    NOT_OPEN = 6;
  }

  MatchThreePlusRoleLevelUpRsp.Retcode retcode = 1;
  uint32 role_id = 2;
}

// CmdID: 7175
message MatchThreePlusGachaDisplayReq {
}

message MatchThreePlusGachaInfo {
  uint32 piece_id = 1;
  uint32 gacha_get_num = 2;
  uint32 total_gacha_num = 3;
}

message MatchThreePlusGachaPool {
  uint32 pool_id = 1;
  repeated MatchThreePlusGachaInfo gacha_info_list = 2;
}

// CmdID: 7176
message MatchThreePlusGachaDisplayRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  MatchThreePlusGachaDisplayRsp.Retcode retcode = 1;
  uint32 gacha_random = 2;
  repeated MatchThreePlusGachaPool pool_list = 3;
}

// CmdID: 7177
message MatchThreePlusGachaReq {
  uint32 gacha_random = 1;
}

// CmdID: 7178
message MatchThreePlusGachaRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    RANDOM_ERROR = 2;
    MATERIAL_LACK = 3;
    NOT_OPEN = 4;
    NO_POOL_ITEMS = 5;
    POOL_ITEM_NEED_ROLE = 6;
  }

  MatchThreePlusGachaRsp.Retcode retcode = 1;
  uint32 new_gacha_random = 2;
  MatchThreePlusPiece piece = 3;
  repeated MatchThreePlusGachaPool pool_list = 4;
  uint32 need_role_id = 5;
}

// CmdID: 7179
message MatchThreePlusRoomBeginReq {
  uint32 room_id = 1;
  MatchThreePlusCombination combination = 2;
}

// CmdID: 7180
message MatchThreePlusRoomBeginRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    ROLE_ERROR = 3;
    PIECE_ERROR = 4;
    INVALID_ROOM = 5;
    NOT_IN_SITE = 6;
    ROLE_RESTRICT = 7;
    PIECE_SLOT_LOCK = 8;
  }

  MatchThreePlusRoomBeginRsp.Retcode retcode = 1;
  uint32 room_id = 2;
  uint32 dynamic_level = 3;
  string transaction_str = 4;
}

// CmdID: 7181
message MatchThreePlusRoomEndReq {
  enum Status {
    WIN = 0;
    LOSE = 1;
    ABANDON = 2;
  }

  uint32 room_id = 1;
  MatchThreePlusRoomEndReq.Status status = 2;
  uint32 score = 3;
}

// CmdID: 7182
message MatchThreePlusRoomEndRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    ROOM_ERROR = 3;
  }

  MatchThreePlusRoomEndRsp.Retcode retcode = 1;
  uint32 room_id = 2;
  uint32 status = 3;
  uint32 score = 4;
  bool is_first_win = 5;
  RewardData reward_data = 6;
  repeated DropItem daily_drop_item_list = 7;
  bool is_daily_pass = 8;
}

// CmdID: 7183
message MatchThreePlusGetRankReq {
  uint32 room_id = 1;
}

// CmdID: 7184
message MatchThreePlusGetRankRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    INVALID_ROOM = 3;
  }

  MatchThreePlusGetRankRsp.Retcode retcode = 1;
  uint32 room_id = 2;
  RankShowData rank_data = 3;
  uint32 rank_percent = 4;
  uint32 rank = 5;
}

// CmdID: 7185
message MatchThreePlusUpdateCombinationReq {
  repeated MatchThreePlusCombination combination_list = 1;
}

// CmdID: 7186
message MatchThreePlusUpdateCombinationRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    INVALID_ROLE = 3;
    INVALID_PIECE = 4;
    PIECE_OWNER_RESTRICT = 5;
    PIECE_NUM_LIMIT = 6;
    REPEAT_ROLE = 7;
    PIECE_SLOT_LOCK = 8;
  }

  MatchThreePlusUpdateCombinationRsp.Retcode retcode = 1;
  repeated MatchThreePlusCombination combination_list = 2;
}

// CmdID: 7187
message MatchThreePlusSyncAutoUnlockNotify {
  repeated uint32 role_id_list = 1;
  repeated uint32 piece_id_list = 2;
}

// CmdID: 7191
message TiledGameSrpgGetActivityReq {
  uint32 activity_id = 1;
}

// CmdID: 7192
message TiledGameSrpgGetActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  TiledGameSrpgGetActivityRsp.Retcode retcode = 1;
  TiledGameSrpgActivity activity = 2;
}

message TiledGameSrpgAvatar {
  uint32 avatar_id = 1;
  uint32 level = 2;
  uint32 hp = 3;
  uint32 trial_id = 4;
  bool is_avatar_material_got = 5;
}

message TiledGameSrpgBattleInfo {
  uint32 battle_id = 1;
  repeated TiledGameSrpgAvatar avatar_list = 2;
  string transaction_str = 4;
}

message TiledGameSrpgFinishedBattleRecord {
  uint32 battle_id = 1;
  repeated uint32 finished_challenge_id_list = 2;
}

message TiledGameSrpgActivity {
  uint32 activity_id = 1;
  uint32 explore_level = 2;
  uint32 explore_exp = 3;
  uint32 daily_explore_exp = 4;
  repeated TiledGameSrpgFinishedBattleRecord finished_battle_record_list = 5;
  repeated TiledGameSrpgAvatar avatar_list = 6;
  TiledGameSrpgBattleInfo story_battle = 7;
  TiledGameSrpgBattleInfo challenge_battle = 8;
  repeated uint32 cur_daily_quest_mission_group_list = 9;
  repeated uint32 taken_reward_bp_list = 10;
  uint32 daily_explore_exp_limit = 11;
}

// CmdID: 7193
message TiledGameSrpgAvatarLevelUpReq {
  uint32 activity_id = 1;
  uint32 avatar_id = 2;
  uint32 target_level = 3;
}

// CmdID: 7194
message TiledGameSrpgAvatarLevelUpRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    TARGET_LEVEL_ERROR = 3;
    RPG_FLAG_LIMIT = 4;
    MATERIAL_LACK = 5;
  }

  TiledGameSrpgAvatarLevelUpRsp.Retcode retcode = 1;
  TiledGameSrpgAvatar avatar = 2;
}

// CmdID: 7195
message TiledGameSrpgBattleBeginReq {
  uint32 activity_id = 1;
  uint32 battle_id = 2;
  repeated uint32 avatar_list = 3;
  uint32 enter_battle_type = 4;
}

// CmdID: 7196
message TiledGameSrpgBattleBeginRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    IN_BATTLE = 3;
    AVATAR_ERROR = 4;
    MAP_ERROR = 5;
  }

  TiledGameSrpgBattleBeginRsp.Retcode retcode = 1;
  TiledGameSrpgBattleInfo battle = 2;
}

// CmdID: 7197
message TiledGameSrpgBattleEndReq {
  uint32 activity_id = 1;
  TiledGameSrpgBattleInfo battle = 2;
  StageEndStatus end_status = 3;
  repeated uint32 finished_challenge_id_list = 4;
  uint32 round_num = 5;
  uint32 total_time = 6;
}

// CmdID: 7198
message TiledGameSrpgBattleEndRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    NO_BATTLE = 3;
  }

  TiledGameSrpgBattleEndRsp.Retcode retcode = 1;
  RewardData reward = 2;
}

// CmdID: 7199
message TiledGameSrpgTakeBpRewardReq {
  uint32 activity_id = 1;
  uint32 bp_id = 2;
}

// CmdID: 7200
message TiledGameSrpgTakeBpRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    HAS_TAKEN = 3;
  }

  TiledGameSrpgTakeBpRewardRsp.Retcode retcode = 1;
  RewardData reward_data = 2;
  uint32 bp_id = 3;
}

message GameRoomStageScoreRecord {
  uint32 stage_id = 1;
  uint32 score = 2;
}

// CmdID: 7211
message GameRoomActivityGetActivityReq {
  uint32 activity_id = 1;
}

// CmdID: 7212
message GameRoomActivityGetActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  GameRoomActivityGetActivityRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  repeated uint32 passed_stage_id_list = 3;
  repeated GameRoomStageScoreRecord stage_score_record_list = 4;
}

// CmdID: 7213
message GameRoomActivityGetRankReq {
  uint32 activity_id = 1;
  uint32 stage_id = 2;
}

// CmdID: 7214
message GameRoomActivityGetRankRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  GameRoomActivityGetRankRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 stage_id = 3;
  uint32 rank = 4;
  uint32 rank_percent = 5;
  RankShowData rank_data = 6;
}

message QRtsTalent {
  uint32 index = 1;
  repeated uint32 talent_id_list = 2;
  uint32 source_type = 3;
  uint32 selected_talent_id = 4;
  uint32 talent_param = 5;
}

message QRtsBuilding {
  uint32 building_point_id = 1;
  uint32 building_id = 2;
  uint32 building_param = 3;
}

message QRtsGame {
  uint32 cur_stage_id = 1;
  uint32 role_id = 2;
  repeated QRtsBuilding building_list = 3;
  uint32 gold_num = 4;
  uint32 round = 5;
  uint32 total_get_gold_num = 6;
  repeated QRtsTalent selected_talent_list = 7;
  QRtsTalent wait_select_talent = 8;
  uint32 score = 9;
  uint32 total_time = 10;
  uint32 total_cost_gold_num = 11;
  uint32 night_total_cost_gold_num = 12;
  uint32 game_transaction_id = 13;
  uint32 round_transaction_id = 14;
  uint32 last_quit_score = 15;
}

// CmdID: 7221
message QRtsActivityGetActivityReq {
  uint32 activity_id = 1;
}

// CmdID: 7222
message QRtsActivityGetActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  QRtsActivityGetActivityRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  QRtsGame mainline_game = 3;
  QRtsGame challenge_game = 4;
  repeated uint32 buff_id_list = 5;
}

// CmdID: 7223
message QRtsActivityFinishRoundReq {
  uint32 activity_id = 1;
  uint32 round = 2;
  uint32 get_gold_num = 3;
  uint32 cost_gold_num = 4;
  repeated uint32 safe_building_point_id_list = 5;
  uint32 score = 6;
  uint32 total_time = 7;
  uint32 gold_num = 8;
  uint32 total_get_gold_num = 9;
  uint32 total_cost_gold_num = 10;
  uint32 night_total_cost_gold_num = 11;
}

// CmdID: 7224
message QRtsActivityFinishRoundRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    NOT_CUR_ROUND = 3;
    GOLD_NUM_ERROR = 4;
    OVER_MAX_ROUND = 5;
  }

  QRtsActivityFinishRoundRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 round = 3;
  uint32 total_gold_num = 4;
}

// CmdID: 7225
message QRtsActivityResetRoundReq {
  uint32 activity_id = 1;
  uint32 round = 2;
}

// CmdID: 7226
message QRtsActivityResetRoundRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    NOT_CUR_ROUND = 3;
  }

  QRtsActivityResetRoundRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 round = 3;
}

// CmdID: 7227
message QRtsActivityBuildReq {
  uint32 activity_id = 1;
  uint32 building_point_id = 2;
  uint32 building_id = 3;
}

// CmdID: 7228
message QRtsActivityBuildRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    LACK_GOLD = 3;
    LACK_BASE_LEVEL = 4;
    NO_PRE_BUILDING = 5;
    BUILDING_LOCKED = 6;
    BUILDING_POINT_ERROR = 7;
  }

  QRtsActivityBuildRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 building_point_id = 3;
  uint32 building_id = 4;
}

// CmdID: 7229
message QRtsActivitySelectTalentReq {
  uint32 activity_id = 1;
  QRtsTalent select_talent = 2;
}

// CmdID: 7230
message QRtsActivitySelectTalentRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    INDEX_ERROR = 3;
    TALENT_SELECTED = 4;
    NOT_IN_LIST = 5;
    TALENT_LOCKED = 6;
  }

  QRtsActivitySelectTalentRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
}

// CmdID: 7231
message QRtsActivitySyncGameNotify {
  QRtsGame game = 1;
}

// CmdID: 7232
message QRtsActivitySweepReq {
  uint32 activity_id = 1;
}

// CmdID: 7233
message QRtsActivitySweepRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    LACK_TICKET = 3;
  }

  QRtsActivitySweepRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
}

// CmdID: 7234
message QRtsActivityUpgradeBuffReq {
  uint32 activity_id = 1;
  uint32 buff_id = 2;
}

// CmdID: 7235
message QRtsActivityUpgradeBuffRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    BUFF_LOCKED = 3;
    LACK_MATERIAL = 4;
    PREV_FLOOR_UNCOMPLETED = 5;
    ALREADY_UPGRADED = 6;
  }

  QRtsActivityUpgradeBuffRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 buff_id = 3;
}

// CmdID: 7236
message QRtsActivityClearGameReq {
  uint32 activity_id = 1;
  uint32 stage_id = 2;
}

// CmdID: 7237
message QRtsActivityClearGameRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  QRtsActivityClearGameRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 stage_id = 3;
}

// CmdID: 7238
message QRtsActivityWishReq {
  uint32 activity_id = 1;
}

// CmdID: 7239
message QRtsActivityWishRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    LACK_GOLD = 3;
    WISH_NOT_SELECTED = 4;
    LACK_BASE_LEVEL = 5;
    WISH_EMPTY = 6;
  }

  QRtsActivityWishRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  QRtsTalent talent = 3;
}

// CmdID: 7241
message GetBurdenAlleviationV2Req {
}

// CmdID: 7242
message GetBurdenAlleviationV2Rsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  GetBurdenAlleviationV2Rsp.Retcode retcode = 1;
  uint32 schedule_id = 2;
}

message BurdenAlleviationV2ParamOwQuest {
  uint32 map_id = 1;
  uint32 quest_id = 2;
  repeated uint32 challenge_list = 3;
}

message BurdenAlleviationV2ParamThemeWanted {
  uint32 stage_id = 1;
  uint32 sweep_times = 2;
  bool is_extra_drop = 3;
}

message BurdenAlleviationV2ParamExamination {
}

message BurdenAlleviationV2ParamArmadaStageScoreActivity {
  uint32 stage_id = 1;
}

message BurdenAlleviationV2ParamRaidReplace {
  uint32 activity_id = 1;
}

// CmdID: 7243
message TriggerBurdenAlleviationV2Req {
  uint32 schedule_id = 1;
  uint32 alleviation_id = 2;
  repeated BurdenAlleviationV2ParamOwQuest ow_param_list = 3;
  BurdenAlleviationV2ParamThemeWanted theme_wanted_param = 4;
  BurdenAlleviationV2ParamExamination examination_param = 5;
  repeated BurdenAlleviationV2ParamArmadaStageScoreActivity armada_stage_param_list = 6;
  BurdenAlleviationV2ParamRaidReplace raid_replace_param = 7;
}

// CmdID: 7244
message TriggerBurdenAlleviationV2Rsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    MATERIAL_LACK = 3;
    ALLEVIATION_ID_ERROR = 4;
    FINISHED_ALL_EXAMINATION = 5;
    SCHEDULE_MISMATCH = 6;
    OW_MAP_ERROR = 7;
    OW_QUEST_ERROR = 8;
    REPEATED_OW_QUEST = 9;
    FEATURE_CLOSED = 10;
    STAGE_ERROR = 11;
    THEME_WANTED_TICKET_LACK = 12;
    NOT_IN_ARMADA = 13;
    ARMADA_ACTIVITY_NOT_OPEN = 14;
    ARMADA_STAGE_HIGH_SCORE = 15;
    REPEATED_ARMADA_STAGE = 16;
    OW_FAST_PASS_INVALID = 17;
    RAID_REPLACE_NOT_OPEN = 18;
    RAID_REPLACE_COMPLETE = 19;
  }

  TriggerBurdenAlleviationV2Rsp.Retcode retcode = 1;
  uint32 schedule_id = 2;
  uint32 alleviation_id = 3;
  RewardData reward = 4;
  repeated DropItem drop_list = 5;
  repeated DropItem extra_drop_list = 6;
}

message FutariBattleStage {
  uint32 stage_id = 1;
  uint32 pass_floor = 2;
  uint32 score = 3;
}

message FutariBattleGroup {
  uint32 group_id = 1;
  repeated FutariBattleStage stage_list = 2;
}

// CmdID: 7245
message FutariBattleActivityGetActivityReq {
}

// CmdID: 7246
message FutariBattleActivityGetActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    FEATURE_CLOSED = 3;
  }

  FutariBattleActivityGetActivityRsp.Retcode retcode = 1;
  uint32 schedule_id = 2;
  repeated FutariBattleGroup group_list = 3;
}

// CmdID: 7247
message FutariBattleActivityGetRankReq {
  uint32 schedule_id = 1;
  uint32 group_id = 2;
}

// CmdID: 7248
message FutariBattleActivityGetRankRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    FEATURE_CLOSED = 3;
  }

  FutariBattleActivityGetRankRsp.Retcode retcode = 1;
  uint32 schedule_id = 2;
  uint32 group_id = 3;
  uint32 rank = 4;
  uint32 rank_percent = 5;
  RankShowData rank_data = 6;
}

// CmdID: 7249
message FutariBattleActivityPassStageFloorReq {
  uint32 stage_id = 1;
  uint32 floor_id = 2;
}

// CmdID: 7250
message FutariBattleActivityPassStageFloorRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_STAGE = 2;
    STAGE_INVALID = 3;
    FLOOR_INVALID = 4;
    FEATURE_CLOSED = 5;
  }

  FutariBattleActivityPassStageFloorRsp.Retcode retcode = 1;
}

message ReActivityTile {
  uint32 tower_id = 1;
  uint32 floor_id = 2;
}

// CmdID: 7251
message ReActivityGetDataReq {
  uint32 activity_id = 1;
}

message ReActivity {
  uint32 activity_id = 1;
  repeated ReActivityTile finished_tile_list = 2;
  repeated uint32 unlocked_area_list = 3;
}

// CmdID: 7252
message ReActivityGetDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  ReActivityGetDataRsp.Retcode retcode = 1;
  ReActivity activity = 2;
}

// CmdID: 7253
message ReActivityTileBeginReq {
  uint32 activity_id = 1;
  ReActivityTile tile = 2;
  uint32 last_max_save_point_id = 3;
  uint32 last_skill_use_times = 4;
  uint32 last_collection_num = 5;
}

// CmdID: 7254
message ReActivityTileBeginRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    AREA_LOCKED = 3;
  }

  ReActivityTileBeginRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  ReActivityTile tile = 3;
}

// CmdID: 7255
message ReActivityTileEndReq {
  uint32 activity_id = 1;
  ReActivityTile tile = 2;
  StageEndStatus end_status = 3;
  uint32 max_save_point_id = 4;
  uint32 skill_use_times = 5;
  uint32 collection_num = 6;
}

// CmdID: 7256
message ReActivityTileEndRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  ReActivityTileEndRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  ReActivityTile tile = 3;
  RewardData reward = 4;
}

// CmdID: 7260
message ResidentActivityGetDataReq {
}

// CmdID: 7261
message ResidentActivityGetDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    LEVEL_LACK = 2;
  }

  ResidentActivityGetDataRsp.Retcode retcode = 1;
  repeated uint32 unlocked_resident_activity_id = 2;
}

// CmdID: 7262
message ResidentActivityUnlockActivityReq {
  uint32 id = 1;
}

// CmdID: 7263
message ResidentActivityUnlockActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    HAS_UNLOCKED = 2;
    NOT_OPEN = 3;
    LEVEL_LACK = 4;
    MATERIAL_LACK = 5;
  }

  ResidentActivityUnlockActivityRsp.Retcode retcode = 1;
  uint32 id = 2;
}

// CmdID: 7270
message QRtsActivityGetRankReq {
  uint32 activity_id = 1;
  uint32 stage_id = 2;
}

// CmdID: 7271
message QRtsActivityGetRankRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    NO_RANK = 3;
  }

  QRtsActivityGetRankRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 stage_id = 3;
  uint32 rank = 4;
  uint32 rank_percent = 5;
  RankShowData rank_data = 6;
}

message MonsterPvpCard {
  uint32 unique_id = 1;
  uint32 star = 2;
  uint32 fragment_num = 3;
  repeated uint32 skill_list = 4;
}

message WaitSelectSkillData {
  uint32 unique_id = 1;
  uint32 skill_idx = 2;
  uint32 old_skill_id = 3;
  uint32 new_skill_id = 4;
  uint32 cost_material_id = 5;
}

message MonsterCardPvpProductivty {
  uint32 last_calc_time = 1;
  uint32 total_minute = 2;
  uint32 exp_per_minute = 3;
  uint32 book_1_per_minute = 4;
  uint32 book_2_per_minute = 5;
  uint32 book_3_per_minute = 6;
  uint32 total_exp = 7;
  uint32 total_book_1 = 8;
  uint32 total_book_2 = 9;
  uint32 total_book_3 = 10;
}

// CmdID: 7275
message MonsterCardPvpGetActivityReq {
  uint32 activity_id = 1;
  uint32 schedule_id = 2;
}

message MonsterCardPvpCustomTeam {
  uint32 team_idx = 1;
  repeated uint32 card_id_list = 2;
  repeated uint32 support_card_id_list = 3;
}

message MonsterCardPvpActivity {
  uint32 activity_id = 1;
  uint32 level = 2;
  uint32 exp = 3;
  repeated MonsterPvpCard monster_card_list = 4;
  WaitSelectSkillData wait_select_skill_data = 5;
  uint32 elo_score = 6;
  repeated MonsterCardPvpPlayerData opponent_list = 7;
  repeated uint32 defend_card_unique_id_list = 8;
  uint32 opponent_refresh_times = 9;
  uint32 pvp_combat_day_times = 10;
  repeated uint32 robot_id_list = 11;
  MonsterCardPvpProductivty productivity_data = 12;
  uint32 daily_combat_reward_num = 13;
  repeated MonsterCardPvpCustomTeam custom_team_list = 14;
  uint32 cur_combat_random = 15;
  repeated uint32 defend_support_card_unique_id_list = 16;
  bool is_skip_progress = 17;
  repeated uint32 has_got_card_material_list = 18;
}

// CmdID: 7276
message MonsterCardPvpGetActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 3;
  }

  MonsterCardPvpGetActivityRsp.Retcode retcode = 1;
  MonsterCardPvpActivity monster_card_pvp_activity = 2;
}

// CmdID: 7277
message MonsterCardPvpSelectInitCardVecReq {
  uint32 activity_id = 1;
  uint32 select_idx = 2;
}

// CmdID: 7278
message MonsterCardPvpSelectInitCardVecRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 3;
    ERROR_INDEX = 4;
  }

  MonsterCardPvpSelectInitCardVecRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
}

// CmdID: 7279
message MonsterCardPvpStarUpCardReq {
  uint32 activity_id = 1;
  uint32 unique_id = 2;
}

// CmdID: 7280
message MonsterCardPvpStarUpCardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    FRAGMENT_LACK = 3;
    LEVEL_LACK = 4;
  }

  MonsterCardPvpStarUpCardRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 unique_id = 3;
}

// CmdID: 7281
message MonsterCardPvpOpenSkillPackReq {
  uint32 activity_id = 1;
  uint32 unique_id = 2;
  uint32 cost_material_id = 3;
  uint32 skill_idx = 4;
  bool is_skip_prev = 5;
}

// CmdID: 7282
message MonsterCardPvpOpenSkillPackRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    MATERIAL_LACK = 3;
    INDEX_ERROR = 4;
    NEED_TO_CONFIRM = 5;
    NO_SKILL = 6;
  }

  MonsterCardPvpOpenSkillPackRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 unique_id = 3;
  uint32 skill_idx = 4;
  uint32 old_skill_id = 5;
  uint32 new_skill_id = 6;
  uint32 cost_material_id = 7;
  bool is_skip_prev = 8;
}

// CmdID: 7283
message MonsterCardPvpSelectNewSkillReq {
  uint32 activity_id = 1;
  bool is_select = 2;
}

// CmdID: 7284
message MonsterCardPvpSelectNewSkillRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    NO_NEED_SELECT = 3;
  }

  MonsterCardPvpSelectNewSkillRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  bool is_select = 3;
  WaitSelectSkillData wait_select_skill_data = 4;
}

// CmdID: 7285
message MonsterCardPvpGetPvpOpponentReq {
  uint32 activity_id = 1;
  uint32 schedule_id = 2;
  bool is_need_refresh = 3;
}

// CmdID: 7286
message MonsterCardPvpGetPvpOpponentRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    MATCH_ROBOT_SUCC = 3;
    MATCH_ROBOT_FAIL = 4;
    REDIS_ERROR = 5;
    GET_DATA = 6;
    PVP_NOT_OPEN = 7;
    TIMES_LACK = 8;
  }

  MonsterCardPvpGetPvpOpponentRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  repeated MonsterCardPvpPlayerData opponent_list = 3;
  repeated uint32 robot_id_list = 4;
  uint32 rank = 5;
  uint32 elo_score = 6;
  uint32 combat_random = 7;
}

// CmdID: 7287
message MonsterCardPvpFinishCombatReq {
  uint32 activity_id = 1;
  bool is_win = 2;
  uint32 combat_random = 3;
  MonsterCardPvpFinishCombatType finish_type = 4;
  uint32 combat_time = 5;
}

// CmdID: 7288
message MonsterCardPvpFinishCombatRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    PVP_NOT_OPEN = 3;
    ROBOT_ERROR = 4;
    OPPONENT_ERROR = 5;
    REDIS_ERROR = 6;
    DATA_ERROR = 7;
    TIMES_LACK = 8;
    RANDOM_MISMATCH = 9;
  }

  MonsterCardPvpFinishCombatRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  RewardData reward_data = 3;
  uint32 elo_score = 4;
  uint32 max_elo_score = 5;
  bool is_win = 6;
  uint32 combat_random = 7;
  MonsterCardPvpFinishCombatType finish_type = 8;
  uint32 old_elo_score = 9;
}

// CmdID: 7289
message MonsterCardPvpUpdatePlayerInfoReq {
  uint32 activity_id = 1;
  repeated uint32 monster_card_list = 2;
  uint32 schedule_id = 3;
  string nickname = 4;
  uint32 level = 5;
  repeated MonsterPvpCardBriefData card_data_list = 6;
  repeated uint32 support_card_list = 7;
  repeated MonsterPvpCardBriefData support_card_data_list = 8;
}

// CmdID: 7290
message MonsterCardPvpUpdatePlayerInfoRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    PVP_NOT_OPEN = 3;
    UPDATE_ERROR = 4;
  }

  MonsterCardPvpUpdatePlayerInfoRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  repeated uint32 monster_card_list = 3;
  repeated uint32 support_card_list = 4;
}

// CmdID: 7291
message MonsterCardPvpGetDefendDataReq {
  uint32 activity_id = 1;
  uint32 schedule_id = 2;
}

// CmdID: 7292
message MonsterCardPvpGetDefendDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    PVP_NOT_OPEN = 3;
    REDIS_ERROR = 4;
  }

  MonsterCardPvpGetDefendDataRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  MonsterCardPvpCombatHistoryData combat_history = 3;
}

// CmdID: 7293
message MonsterCardPvpGetPvpRankReq {
  uint32 activity_id = 1;
  uint32 schedule_id = 2;
}

// CmdID: 7294
message MonsterCardPvpGetPvpRankRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    PVP_NOT_OPEN = 3;
    REDIS_ERROR = 4;
  }

  MonsterCardPvpGetPvpRankRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  RankShowData rank_data = 3;
  uint32 rank_percent = 4;
  uint32 rank = 5;
}

// CmdID: 7295
message MonsterCardPvpTakeProductRewardReq {
  uint32 activity_id = 1;
}

// CmdID: 7296
message MonsterCardPvpTakeProductRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    PRODUCTIVITY_NOT_BEGIN = 3;
  }

  MonsterCardPvpTakeProductRewardRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 add_exp_num = 3;
  uint32 add_book_1_num = 4;
  uint32 add_book_2_num = 5;
  uint32 add_book_3_num = 6;
  uint32 convert_material_num = 7;
}

// CmdID: 7297
message MonsterCardPvpGetGachaDisplayReq {
  uint32 activity_id = 1;
}

// CmdID: 7298
message MonsterCardPvpGetGachaDisplayRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  MonsterCardPvpGetGachaDisplayRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 gacha_random = 3;
  repeated uint32 valid_pool_id_list = 4;
}

// CmdID: 7299
message MonsterCardPvpGachaReq {
  uint32 activity_id = 1;
  uint32 gacha_random = 2;
  uint32 pool_id = 3;
  uint32 times = 4;
}

// CmdID: 7300
message MonsterCardPvpGachaRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    POOL_ERROR = 3;
    GACHA_RANDOM_MISMATCH = 4;
    TIMES_ERROR = 5;
    TIMES_LACK = 6;
    MATERIAL_LACK = 7;
  }

  MonsterCardPvpGachaRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 gacha_random = 3;
  repeated uint32 material_id_list = 4;
}

// CmdID: 7301
message MonsterCardPvpStartCombatReq {
  uint32 activity_id = 1;
  MonsterCardPvpCombatData combat_data = 2;
  uint32 combat_random = 3;
}

// CmdID: 7302
message MonsterCardPvpStartCombatRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    PVP_NOT_OPEN = 3;
    ROBOT_ERROR = 4;
    OPPONENT_ERROR = 5;
    REDIS_ERROR = 6;
    DATA_ERROR = 7;
    TIMES_LACK = 8;
    RANDOM_MISMATCH = 9;
  }

  MonsterCardPvpStartCombatRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 combat_random = 3;
}

// CmdID: 7303
message MonsterCardPvpCustomTeamReq {
  uint32 activity_id = 1;
  MonsterCardPvpCustomTeam custom_team = 2;
  uint32 site_id = 3;
}

// CmdID: 7304
message MonsterCardPvpCustomTeamRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    CARD_NOT_EXIST = 3;
    TEAM_LEN_ERROR = 4;
    IDX_ERROR = 5;
    COST_OVERFLOW = 6;
    CARD_REPEATED = 7;
    SUPPORT_CARD_NOT_EXIST = 8;
    SUPPORT_CARD_REPEATED = 9;
    SUPPORT_CARD_NUM_ERROR = 10;
    SITE_LOCKED = 11;
  }

  MonsterCardPvpCustomTeamRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 site_id = 3;
}

// CmdID: 7305
message MonsterCardPvpSkipReq {
  uint32 activity_id = 1;
  bool is_abandon = 2;
}

// CmdID: 7306
message MonsterCardPvpSkipRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    NOT_SUPPORT = 3;
    MISSION_NOT_FINISH = 4;
    ALREADY_USED = 5;
    TALE_NOT_FOUND = 6;
    MEDAL_NOT_OWNED = 7;
  }

  MonsterCardPvpSkipRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  bool is_abandon = 3;
  RewardData reward_data = 4;
}

// CmdID: 7311
message MonsterMorphGetActivityReq {
  uint32 activity_id = 1;
}

message MonsterMorphMonster {
  uint32 monster_id = 1;
  uint32 level = 2;
  uint32 star = 3;
}

message MonsterMorphMinionAffix {
  uint32 affix_id = 1;
}

message MonsterMorphMinionAffixGroup {
  uint32 unique_id = 1;
  repeated MonsterMorphMinionAffix affix_list = 2;
}

message MonsterMorphMinion {
  uint32 minion_id = 1;
  uint32 star = 2;
  repeated MonsterMorphMinionAffix affix_list = 3;
  repeated MonsterMorphMinionAffixGroup wait_select_affix_group_list = 4;
}

message MonsterMorphActivity {
  uint32 activity_id = 1;
  repeated MonsterMorphMonster monster_list = 2;
  repeated MonsterMorphMinion minion_list = 3;
  repeated uint32 unlocked_skill_list = 4;
}

// CmdID: 7312
message MonsterMorphGetActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  MonsterMorphGetActivityRsp.Retcode retcode = 1;
  MonsterMorphActivity activity = 2;
}

// CmdID: 7313
message MonsterMorphLevelUpMonsterReq {
  uint32 activity_id = 1;
  uint32 monster_id = 2;
  uint32 target_level = 3;
}

// CmdID: 7314
message MonsterMorphLevelUpMonsterRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    MONSTER_NOT_EXIST = 3;
    TARGET_LEVEL_ERROR = 4;
    MATERIAL_LACK = 5;
  }

  MonsterMorphLevelUpMonsterRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 monster_id = 3;
  uint32 target_level = 4;
}

// CmdID: 7315
message MonsterMorphStarUpMonsterReq {
  uint32 activity_id = 1;
  uint32 monster_id = 2;
  uint32 target_star = 3;
}

// CmdID: 7316
message MonsterMorphStarUpMonsterRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    MONSTER_NOT_EXIST = 3;
    TARGET_STAR_ERROR = 4;
    MATERIAL_LACK = 5;
    MINION_LOCKED = 6;
  }

  MonsterMorphStarUpMonsterRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 monster_id = 3;
  uint32 target_star = 4;
}

// CmdID: 7317
message MonsterMorphRefineMinionAffixReq {
  MonsterMorphMinionRefineType type = 1;
  uint32 activity_id = 2;
  uint32 minion_id = 3;
  repeated uint32 lock_affix_index_list = 4;
  bool is_retry = 5;
}

// CmdID: 7318
message MonsterMorphRefineMinionAffixRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    MATERIAL_LACK = 3;
    LOCK_INDEX_ERROR = 4;
    MINION_NOT_EXIST = 5;
    MINION_WAIT_AFFIX_EXIST = 6;
  }

  MonsterMorphRefineMinionAffixRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 minion_id = 3;
  repeated MonsterMorphMinionAffixGroup affix_group_list = 4;
}

// CmdID: 7319
message MonsterMorphSelectNewMinionAffixReq {
  uint32 activity_id = 1;
  uint32 minion_id = 2;
  bool is_select = 3;
  uint32 select_unique_id = 4;
}

// CmdID: 7320
message MonsterMorphSelectNewMinionAffixRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    MINION_NOT_EXIST = 3;
    SELECT_EMPTY = 4;
    TOO_FAST = 5;
    WAIT_AFFIX_EMPTY = 6;
    WAIT_AFFIX_NOT_EXIST = 7;
  }

  MonsterMorphSelectNewMinionAffixRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 minion_id = 3;
  bool is_select = 4;
  uint32 select_unique_id = 5;
}

// CmdID: 7321
message MonsterMorphGetRankReq {
  uint32 activity_id = 1;
  uint32 stage_id = 2;
}

// CmdID: 7322
message MonsterMorphGetRankRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    NO_RANK = 3;
  }

  MonsterMorphGetRankRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 stage_id = 3;
  uint32 rank = 4;
  uint32 rank_percent = 5;
  RankShowData rank_data = 6;
}

// CmdID: 7323
message MonsterMorphSweepReq {
  uint32 activity_id = 1;
  uint32 stage_id = 2;
}

// CmdID: 7324
message MonsterMorphSweepRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    STAGE_TYPE_ERROR = 3;
    STAGE_NOT_EXIST = 4;
    STAGE_NOT_PASS = 5;
    CHALLENGE_NUM_LACK = 6;
    TICIKET_LACK = 7;
    DROP_ITEM_ERROR = 8;
  }

  MonsterMorphSweepRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 stage_id = 3;
  repeated DropItem drop_item_list = 4;
}

// CmdID: 7331
message CrystalLotteryGetMainDataReq {
  uint32 activity_id = 1;
}

// CmdID: 7332
message CrystalLotteryGetMainDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ACTIVITY_NOT_OPEN = 2;
    FEATURE_CLOSED = 3;
    TOO_FREQUENT = 4;
  }

  CrystalLotteryGetMainDataRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  bool is_enroll = 3;
  bool is_reward_taken = 4;
  uint32 reward_hcoin_num = 5;
}

// CmdID: 7333
message CrystalLotteryEnrollReq {
  uint32 activity_id = 1;
}

// CmdID: 7334
message CrystalLotteryEnrollRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ACTIVITY_NOT_OPEN = 2;
    HAS_ENROLL = 3;
    ENROLL_NOT_OPEN = 4;
    MISSION_NOT_FINISH = 5;
    FEATURE_CLOSED = 6;
  }

  CrystalLotteryEnrollRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
}

// CmdID: 7335
message CrystalLotteryTakeRewardReq {
  uint32 activity_id = 1;
}

// CmdID: 7336
message CrystalLotteryTakeRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ACTIVITY_NOT_OPEN = 2;
    NOT_ENROLL = 3;
    HAS_TAKEN = 4;
    FEATURE_CLOSED = 5;
    ACTIVITY_NOT_EXIST = 6;
    REWARD_NOT_OPEN = 7;
    SETTLE_REWARD_FAIL = 8;
  }

  CrystalLotteryTakeRewardRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 hcoin = 3;
}

message TiledGameInspiration {
  uint32 inspiration_id = 1;
  uint32 level = 2;
  uint32 fail_count = 3;
}

message TiledGameFurnitureInfo {
  uint32 id = 1;
  uint32 pos_x = 2;
  uint32 pos_y = 3;
  uint32 direction = 4;
  uint32 location = 5;
}

message TiledGameInnStaffScheduleInfo {
  TiledGameInnRole role = 1;
  repeated uint32 staff_id_list = 2;
}

message TiledGameInnManagementMenu {
  uint32 dish_id = 1;
  uint32 num = 2;
  bool is_up = 3;
}

message TiledGameInnSiteInfo {
  uint32 site_id = 1;
  uint32 pass_times = 2;
}

// CmdID: 7341
message TiledGameInnGetActivityReq {
  uint32 activity_id = 1;
}

message TiledGameInnCustomerTendency {
  uint32 taste = 1;
  uint32 cook_techniques = 2;
}

message TiledGameInnBuyRecord {
  uint32 goods_id = 1;
  uint32 num = 2;
}

message TiledGameInnStaff {
  uint32 staff_id = 1;
  uint32 status = 2;
}

// CmdID: 7342
message TiledGameInnGetActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  TiledGameInnGetActivityRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 level = 3;
  uint32 today_get_food_num = 4;
  repeated TiledGameInnSiteInfo site_info_list = 5;
  repeated uint32 dish_list = 7;
  repeated GenericItemNum furniture_list = 8;
  repeated TiledGameInspiration inspiration_list = 9;
  repeated TiledGameFurnitureInfo furniture_info_list = 10;
  uint32 inn_level = 11;
  TiledGameInnCustomerTendency today_customer_tendency = 12;
  repeated GenericItemNum unlocked_food_list = 14;
  repeated TiledGameInnBuyRecord buy_record_list = 15;
  repeated TiledGameInnStaff staff_list = 16;
  uint32 left_travel_times = 17;
  uint32 cur_daily_mission = 18;
  uint32 left_drop_food_num = 19;
  uint32 left_purchase_budget = 20;
  uint32 accumulate_earn_gold = 21;
}

// CmdID: 7343
message TiledGameInnBuyFurnitureReq {
  uint32 activity_id = 1;
  uint32 shop_goods_id = 2;
  uint32 num = 3;
}

// CmdID: 7344
message TiledGameInnBuyFurnitureRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    NUM_LIMIT = 3;
    MATERIAL_LACK = 4;
    GOODS_NOT_EXIST = 5;
    LEVEL_LIMIT = 6;
  }

  TiledGameInnBuyFurnitureRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
}

// CmdID: 7345
message TiledGameInnEditInnReq {
  uint32 activity_id = 1;
  repeated TiledGameFurnitureInfo furniture_info_list = 2;
}

// CmdID: 7346
message TiledGameInnEditInnRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    FURNITURE_LACK = 3;
    FURNITURE_ERROR = 4;
    FURNITURE_NUM_LIMIT = 5;
    TOO_OFTEN = 6;
  }

  TiledGameInnEditInnRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
}

// CmdID: 7347
message TiledGameInnStartManagementReq {
  uint32 activity_id = 1;
  repeated TiledGameInnStaffScheduleInfo staff_schedule_info_list = 2;
  repeated TiledGameInnManagementMenu menu_list = 3;
}

// CmdID: 7348
message TiledGameInnStartManagementRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    ROLE_INVALID = 3;
    ROLE_REPEATED = 4;
    STAFF_REPEATED = 5;
    STAFF_NUM_LIMITED = 6;
    STAFF_LOCKED = 7;
    DISH_LOCKED = 8;
    FOOD_LACK = 9;
    DISH_NUM_LIMIT = 10;
    DISH_REPEATED = 11;
  }

  TiledGameInnStartManagementRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  string management_transaction_str = 3;
}

// CmdID: 7349
message TiledGameInnStopManagementReq {
  uint32 activity_id = 1;
  uint32 gold_earned = 2;
  repeated TiledGameInnManagementMenu sold_dish_list = 3;
  string management_transaction_str = 4;
  uint32 fee = 5;
  uint32 sold_dishes_revenue = 6;
  uint32 other_revenue = 7;
  uint32 sold_exquisite_dish_num = 8;
  repeated uint32 customer_mood_list = 9;
}

// CmdID: 7350
message TiledGameInnStopManagementRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    NOT_IN_MANAGEMENT = 3;
    DISH_LOCKED = 4;
    DISH_REPEATED = 5;
    DISH_NUM_LIMIT = 6;
    FOOD_LACK = 7;
  }

  TiledGameInnStopManagementRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 total_purchase_cost = 3;
  uint32 real_purchase_cost = 4;
}

// CmdID: 7351
message TiledGameInnStartTravelReq {
  uint32 activity_id = 1;
  uint32 site_id = 2;
  repeated uint32 staff_id_list = 3;
  repeated uint32 up_food_list = 4;
  repeated uint32 trigger_event_list = 5;
}

// CmdID: 7352
message TiledGameInnStartTravelRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    SITE_LOCKED = 3;
    IN_TRAVEL = 4;
    STAFF_MISMATCH = 5;
    STAFF_LOCKED = 6;
    UP_FOOD_INVALID = 7;
    FOOD_DROP_NUM_LIMIT = 8;
    NO_OBTAINED_FOOD = 9;
    STAFF_NUM_LIMIT = 10;
    TRAVEL_TIMES_LIMIT = 11;
    NO_STAFF = 12;
    STAFF_REPEATED = 13;
  }

  TiledGameInnStartTravelRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  repeated GenericItemNum up_food_extra_num_list = 3;
}

// CmdID: 7353
message TiledGameInnEndTravelReq {
  uint32 activity_id = 1;
}

// CmdID: 7354
message TiledGameInnEndTravelRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  TiledGameInnEndTravelRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  RewardData reward = 3;
}

// CmdID: 7355
message TiledGameInnLevelUpReq {
  uint32 activity_id = 1;
}

// CmdID: 7356
message TiledGameInnLevelUpRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    PRE_MISSION_NOT_FINISH = 3;
  }

  TiledGameInnLevelUpRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 level = 3;
}

// CmdID: 7357
message TiledGameInnDevelopDishReq {
  uint32 activity_id = 1;
  uint32 inspiration_id = 2;
  repeated uint32 food_list = 3;
}

// CmdID: 7358
message TiledGameInnDevelopDishRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    INSPIRATION_NOT_EXIST = 3;
    FOOD_LACK = 4;
    DISH_UNLOCKED = 5;
  }

  TiledGameInnDevelopDishRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 succ_developed_dish_id = 3;
  TiledGameInspiration inspiration_info = 4;
}

// CmdID: 7359
message TiledGameInnLevelUpInnReq {
  uint32 activity_id = 1;
  uint32 inn_level = 2;
}

// CmdID: 7360
message TiledGameInnLevelUpInnRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    INN_LEVEL_MISMATCH = 3;
    MANAGE_LEVEL_LIMIT = 4;
    MATERIAL_LACK = 5;
  }

  TiledGameInnLevelUpInnRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 inn_level = 3;
}

message TiledGameInnRedisBriefData {
  repeated TiledGameFurnitureInfo furniture_info_list = 1;
}

// CmdID: 7361
message TiledGameInnSyncInnDataNotify {
  uint32 schedule_id = 1;
  TiledGameInnRedisBriefData inn_brief_data = 2;
}

// CmdID: 7362
message TiledGameInnGetOtherInnDataReq {
  uint32 activity_id = 1;
  uint32 target_uid = 2;
  uint32 schedule_id = 3;
}

// CmdID: 7363
message TiledGameInnGetOtherInnDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    TARGET_NOT_FRIEND = 3;
  }

  TiledGameInnGetOtherInnDataRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 target_uid = 3;
  repeated TiledGameFurnitureInfo furniture_info_list = 4;
}

// CmdID: 7364
message TiledGameInnAddLeftDropNumNotify {
  uint32 activity_id = 1;
  uint32 add_left_drop_num = 2;
}

// CmdID: 7375
message TowerDefenseGetActivityReq {
  uint32 activity_id = 1;
}

message TowerDefenseActivity {
  uint32 activity_id = 1;
  repeated TowerDefenseAvatar avatar_list = 2;
  repeated TowerDefenseBattle cur_battle_list = 3;
  repeated TowerDefenseFinishedBattleRecord finished_battle_record_list = 4;
}

message TowerDefenseAvatar {
  uint32 avatar_id = 1;
}

message TowerDefenseBattle {
  uint32 battle_id = 1;
  repeated TowerDefenseBattleTurn saved_turn_list = 2;
  string transaction_str = 3;
}

message TowerDefenseBattleTurn {
  uint32 turn = 1;
  bytes client_ext = 2;
}

message TowerDefenseFinishedBattleRecord {
  uint32 battle_id = 1;
  uint32 floor = 2;
  uint32 score = 3;
}

// CmdID: 7376
message TowerDefenseGetActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  TowerDefenseGetActivityRsp.Retcode retcode = 1;
  TowerDefenseActivity activity = 2;
  uint32 activity_id = 3;
}

// CmdID: 7377
message TowerDefenseSaveTurnReq {
  uint32 activity_id = 1;
  uint32 battle_id = 2;
  uint32 turn = 3;
  bytes client_ext = 4;
}

// CmdID: 7378
message TowerDefenseSaveTurnRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    SIZE_LIMIT = 3;
  }

  TowerDefenseSaveTurnRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
}

// CmdID: 7379
message TowerDefenseBattleBeginReq {
  uint32 activity_id = 1;
  uint32 battle_id = 2;
  repeated uint32 avatar_list = 3;
}

// CmdID: 7380
message TowerDefenseBattleBeginRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    IN_BATTLE = 3;
    AVATAR_ERROR = 4;
  }

  TowerDefenseBattleBeginRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 battle_id = 3;
  uint32 tower_id = 4;
  uint32 floor_id = 5;
}

// CmdID: 7381
message TowerDefenseBattleEndReq {
  enum BattleEndStatus {
    BATTLE_END_STATUS_NONE = 0;
    BATTLE_WIN = 1;
    BATTLE_EXIT = 2;
    BATTLE_NOT_MEET_CONDITION = 3;
  }

  uint32 activity_id = 1;
  uint32 battle_id = 2;
  TowerDefenseBattleEndReq.BattleEndStatus end_status = 3;
  uint32 floor = 4;
  uint32 score = 5;
}

// CmdID: 7382
message TowerDefenseBattleEndRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    NO_BATTLE = 3;
    NO_TOWER = 4;
  }

  TowerDefenseBattleEndRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 battle_id = 3;
  RewardData first_reward_data = 4;
  uint32 tower_id = 5;
  uint32 floor_id = 6;
}

enum CmdTypeActivity3 {
  CMD_TYPE_ACTIVITY_3_NONE = 0;
  CMD_SUSANNA_TRIAL_GET_ACTIVITY_REQ = 7050;
  CMD_SUSANNA_TRIAL_GET_ACTIVITY_RSP = 7051;
  CMD_SUSANNA_TRIAL_TAKE_MENTOR_PROGRESS_REWARD_REQ = 7052;
  CMD_SUSANNA_TRIAL_TAKE_MENTOR_PROGRESS_REWARD_RSP = 7053;
  CMD_SUSANNA_TRIAL_TAKE_PLOT_REWARD_REQ = 7054;
  CMD_SUSANNA_TRIAL_TAKE_PLOT_REWARD_RSP = 7055;
  CMD_SHIGURE_KIRA_GET_ACTIVITY_REQ = 7060;
  CMD_SHIGURE_KIRA_GET_ACTIVITY_RSP = 7061;
  CMD_SHIGURE_KIRA_ADD_CONCERT_PROGRESS_REQ = 7062;
  CMD_SHIGURE_KIRA_ADD_CONCERT_PROGRESS_RSP = 7063;
  CMD_THEME_TOWER_GET_ACTIVITY_REQ = 7070;
  CMD_THEME_TOWER_GET_ACTIVITY_RSP = 7071;
  CMD_THEME_TOWER_GET_RANK_REQ = 7072;
  CMD_THEME_TOWER_GET_RANK_RSP = 7073;
  CMD_THEME_TOWER_LEVEL_UP_SECTION_REQ = 7074;
  CMD_THEME_TOWER_LEVEL_UP_SECTION_RSP = 7075;
  CMD_GET_PON_MACHINE_ACTIVITY_REQ = 7100;
  CMD_GET_PON_MACHINE_ACTIVITY_RSP = 7101;
  CMD_START_PON_MACHINE_REQ = 7102;
  CMD_START_PON_MACHINE_RSP = 7103;
  CMD_CARNIVAL_LOTTERY_BET_REQ = 7111;
  CMD_CARNIVAL_LOTTERY_BET_RSP = 7112;
  CMD_CARNIVAL_LOTTERY_GET_INFO_REQ = 7113;
  CMD_CARNIVAL_LOTTERY_GET_INFO_RSP = 7114;
  CMD_CARNIVAL_LOTTERY_TAKE_SPECIAL_REWARD_REQ = 7115;
  CMD_CARNIVAL_LOTTERY_TAKE_SPECIAL_REWARD_RSP = 7116;
  CMD_CARNIVAL_LOTTERY_OPEN_REWARD_REQ = 7117;
  CMD_CARNIVAL_LOTTERY_OPEN_REWARD_RSP = 7118;
  CMD_TILED_GAME_LUNA_TRAP_REQ = 7121;
  CMD_TILED_GAME_LUNA_TRAP_RSP = 7122;
  CMD_GET_TILED_GAME_LUNA_REQ = 7123;
  CMD_GET_TILED_GAME_LUNA_RSP = 7124;
  CMD_TILED_GAME_LUNA_BATTLE_REQ = 7125;
  CMD_TILED_GAME_LUNA_BATTLE_RSP = 7126;
  CMD_TILED_GAME_LUNA_HEAL_REQ = 7129;
  CMD_TILED_GAME_LUNA_HEAL_RSP = 7130;
  CMD_MINION_CLASH_GET_ACTIVITY_REQ = 7141;
  CMD_MINION_CLASH_GET_ACTIVITY_RSP = 7142;
  CMD_MINION_CLASH_GET_GACHA_INFO_REQ = 7143;
  CMD_MINION_CLASH_GET_GACHA_INFO_RSP = 7144;
  CMD_MINION_CLASH_DO_GACHA_REQ = 7145;
  CMD_MINION_CLASH_DO_GACHA_RSP = 7146;
  CMD_MINION_CLASH_LEVEL_UP_TALENT_REQ = 7147;
  CMD_MINION_CLASH_LEVEL_UP_TALENT_RSP = 7148;
  CMD_MINION_CLASH_REPORT_STAGE_BEGIN_REQ = 7149;
  CMD_MINION_CLASH_REPORT_STAGE_BEGIN_RSP = 7150;
  CMD_MINION_CLASH_UPDATE_BUILD_REQ = 7151;
  CMD_MINION_CLASH_UPDATE_BUILD_RSP = 7152;
  CMD_MINION_CLASH_STAR_UP_CARD_REQ = 7153;
  CMD_MINION_CLASH_STAR_UP_CARD_RSP = 7154;
  CMD_THELEMA_ACTIVITY_GET_ACTIVITY_REQ = 7161;
  CMD_THELEMA_ACTIVITY_GET_ACTIVITY_RSP = 7162;
  CMD_THELEMA_ACTIVITY_FINISH_QUESTION_REQ = 7163;
  CMD_THELEMA_ACTIVITY_FINISH_QUESTION_RSP = 7164;
  CMD_MATCH_THREE_PLUS_GET_ACTIVITY_REQ = 7171;
  CMD_MATCH_THREE_PLUS_GET_ACTIVITY_RSP = 7172;
  CMD_MATCH_THREE_PLUS_ROLE_LEVEL_UP_REQ = 7173;
  CMD_MATCH_THREE_PLUS_ROLE_LEVEL_UP_RSP = 7174;
  CMD_MATCH_THREE_PLUS_GACHA_DISPLAY_REQ = 7175;
  CMD_MATCH_THREE_PLUS_GACHA_DISPLAY_RSP = 7176;
  CMD_MATCH_THREE_PLUS_GACHA_REQ = 7177;
  CMD_MATCH_THREE_PLUS_GACHA_RSP = 7178;
  CMD_MATCH_THREE_PLUS_ROOM_BEGIN_REQ = 7179;
  CMD_MATCH_THREE_PLUS_ROOM_BEGIN_RSP = 7180;
  CMD_MATCH_THREE_PLUS_ROOM_END_REQ = 7181;
  CMD_MATCH_THREE_PLUS_ROOM_END_RSP = 7182;
  CMD_MATCH_THREE_PLUS_GET_RANK_REQ = 7183;
  CMD_MATCH_THREE_PLUS_GET_RANK_RSP = 7184;
  CMD_MATCH_THREE_PLUS_UPDATE_COMBINATION_REQ = 7185;
  CMD_MATCH_THREE_PLUS_UPDATE_COMBINATION_RSP = 7186;
  CMD_MATCH_THREE_PLUS_SYNC_AUTO_UNLOCK_NOTIFY = 7187;
  CMD_TILED_GAME_SRPG_GET_ACTIVITY_REQ = 7191;
  CMD_TILED_GAME_SRPG_GET_ACTIVITY_RSP = 7192;
  CMD_TILED_GAME_SRPG_AVATAR_LEVEL_UP_REQ = 7193;
  CMD_TILED_GAME_SRPG_AVATAR_LEVEL_UP_RSP = 7194;
  CMD_TILED_GAME_SRPG_BATTLE_BEGIN_REQ = 7195;
  CMD_TILED_GAME_SRPG_BATTLE_BEGIN_RSP = 7196;
  CMD_TILED_GAME_SRPG_BATTLE_END_REQ = 7197;
  CMD_TILED_GAME_SRPG_BATTLE_END_RSP = 7198;
  CMD_TILED_GAME_SRPG_TAKE_BP_REWARD_REQ = 7199;
  CMD_TILED_GAME_SRPG_TAKE_BP_REWARD_RSP = 7200;
  CMD_GAME_ROOM_ACTIVITY_GET_ACTIVITY_REQ = 7211;
  CMD_GAME_ROOM_ACTIVITY_GET_ACTIVITY_RSP = 7212;
  CMD_GAME_ROOM_ACTIVITY_GET_RANK_REQ = 7213;
  CMD_GAME_ROOM_ACTIVITY_GET_RANK_RSP = 7214;
  CMD_QRTS_ACTIVITY_GET_ACTIVITY_REQ = 7221;
  CMD_QRTS_ACTIVITY_GET_ACTIVITY_RSP = 7222;
  CMD_QRTS_ACTIVITY_FINISH_ROUND_REQ = 7223;
  CMD_QRTS_ACTIVITY_FINISH_ROUND_RSP = 7224;
  CMD_QRTS_ACTIVITY_RESET_ROUND_REQ = 7225;
  CMD_QRTS_ACTIVITY_RESET_ROUND_RSP = 7226;
  CMD_QRTS_ACTIVITY_BUILD_REQ = 7227;
  CMD_QRTS_ACTIVITY_BUILD_RSP = 7228;
  CMD_QRTS_ACTIVITY_SELECT_TALENT_REQ = 7229;
  CMD_QRTS_ACTIVITY_SELECT_TALENT_RSP = 7230;
  CMD_QRTS_ACTIVITY_SYNC_GAME_NOTIFY = 7231;
  CMD_QRTS_ACTIVITY_SWEEP_REQ = 7232;
  CMD_QRTS_ACTIVITY_SWEEP_RSP = 7233;
  CMD_QRTS_ACTIVITY_UPGRADE_BUFF_REQ = 7234;
  CMD_QRTS_ACTIVITY_UPGRADE_BUFF_RSP = 7235;
  CMD_QRTS_ACTIVITY_CLEAR_GAME_REQ = 7236;
  CMD_QRTS_ACTIVITY_CLEAR_GAME_RSP = 7237;
  CMD_QRTS_ACTIVITY_WISH_REQ = 7238;
  CMD_QRTS_ACTIVITY_WISH_RSP = 7239;
  CMD_GET_BURDEN_ALLEVIATION_V2_REQ = 7241;
  CMD_GET_BURDEN_ALLEVIATION_V2_RSP = 7242;
  CMD_TRIGGER_BURDEN_ALLEVIATION_V2_REQ = 7243;
  CMD_TRIGGER_BURDEN_ALLEVIATION_V2_RSP = 7244;
  CMD_FUTARI_BATTLE_ACTIVITY_GET_ACTIVITY_REQ = 7245;
  CMD_FUTARI_BATTLE_ACTIVITY_GET_ACTIVITY_RSP = 7246;
  CMD_FUTARI_BATTLE_ACTIVITY_GET_RANK_REQ = 7247;
  CMD_FUTARI_BATTLE_ACTIVITY_GET_RANK_RSP = 7248;
  CMD_FUTARI_BATTLE_ACTIVITY_PASS_STAGE_FLOOR_REQ = 7249;
  CMD_FUTARI_BATTLE_ACTIVITY_PASS_STAGE_FLOOR_RSP = 7250;
  CMD_RE_ACTIVITY_GET_DATA_REQ = 7251;
  CMD_RE_ACTIVITY_GET_DATA_RSP = 7252;
  CMD_RE_ACTIVITY_TILE_BEGIN_REQ = 7253;
  CMD_RE_ACTIVITY_TILE_BEGIN_RSP = 7254;
  CMD_RE_ACTIVITY_TILE_END_REQ = 7255;
  CMD_RE_ACTIVITY_TILE_END_RSP = 7256;
  CMD_RESIDENT_ACTIVITY_GET_DATA_REQ = 7260;
  CMD_RESIDENT_ACTIVITY_GET_DATA_RSP = 7261;
  CMD_RESIDENT_ACTIVITY_UNLOCK_ACTIVITY_REQ = 7262;
  CMD_RESIDENT_ACTIVITY_UNLOCK_ACTIVITY_RSP = 7263;
  CMD_QRTS_ACTIVITY_GET_RANK_REQ = 7270;
  CMD_QRTS_ACTIVITY_GET_RANK_RSP = 7271;
  CMD_MONSTER_CARD_PVP_GET_ACTIVITY_REQ = 7275;
  CMD_MONSTER_CARD_PVP_GET_ACTIVITY_RSP = 7276;
  CMD_MONSTER_CARD_PVP_SELECT_INIT_CARD_VEC_REQ = 7277;
  CMD_MONSTER_CARD_PVP_SELECT_INIT_CARD_VEC_RSP = 7278;
  CMD_MONSTER_CARD_PVP_STAR_UP_CARD_REQ = 7279;
  CMD_MONSTER_CARD_PVP_STAR_UP_CARD_RSP = 7280;
  CMD_MONSTER_CARD_PVP_OPEN_SKILL_PACK_REQ = 7281;
  CMD_MONSTER_CARD_PVP_OPEN_SKILL_PACK_RSP = 7282;
  CMD_MONSTER_CARD_PVP_SELECT_NEW_SKILL_REQ = 7283;
  CMD_MONSTER_CARD_PVP_SELECT_NEW_SKILL_RSP = 7284;
  CMD_MONSTER_CARD_PVP_GET_PVP_OPPONENT_REQ = 7285;
  CMD_MONSTER_CARD_PVP_GET_PVP_OPPONENT_RSP = 7286;
  CMD_MONSTER_CARD_PVP_FINISH_COMBAT_REQ = 7287;
  CMD_MONSTER_CARD_PVP_FINISH_COMBAT_RSP = 7288;
  CMD_MONSTER_CARD_PVP_UPDATE_PLAYER_INFO_REQ = 7289;
  CMD_MONSTER_CARD_PVP_UPDATE_PLAYER_INFO_RSP = 7290;
  CMD_MONSTER_CARD_PVP_GET_DEFEND_DATA_REQ = 7291;
  CMD_MONSTER_CARD_PVP_GET_DEFEND_DATA_RSP = 7292;
  CMD_MONSTER_CARD_PVP_GET_PVP_RANK_REQ = 7293;
  CMD_MONSTER_CARD_PVP_GET_PVP_RANK_RSP = 7294;
  CMD_MONSTER_CARD_PVP_TAKE_PRODUCT_REWARD_REQ = 7295;
  CMD_MONSTER_CARD_PVP_TAKE_PRODUCT_REWARD_RSP = 7296;
  CMD_MONSTER_CARD_PVP_GET_GACHA_DISPLAY_REQ = 7297;
  CMD_MONSTER_CARD_PVP_GET_GACHA_DISPLAY_RSP = 7298;
  CMD_MONSTER_CARD_PVP_GACHA_REQ = 7299;
  CMD_MONSTER_CARD_PVP_GACHA_RSP = 7300;
  CMD_MONSTER_CARD_PVP_START_COMBAT_REQ = 7301;
  CMD_MONSTER_CARD_PVP_START_COMBAT_RSP = 7302;
  CMD_MONSTER_CARD_PVP_CUSTOM_TEAM_REQ = 7303;
  CMD_MONSTER_CARD_PVP_CUSTOM_TEAM_RSP = 7304;
  CMD_MONSTER_CARD_PVP_SKIP_REQ = 7305;
  CMD_MONSTER_CARD_PVP_SKIP_RSP = 7306;
  CMD_MONSTER_MORPH_GET_ACTIVITY_REQ = 7311;
  CMD_MONSTER_MORPH_GET_ACTIVITY_RSP = 7312;
  CMD_MONSTER_MORPH_LEVEL_UP_MONSTER_REQ = 7313;
  CMD_MONSTER_MORPH_LEVEL_UP_MONSTER_RSP = 7314;
  CMD_MONSTER_MORPH_STAR_UP_MONSTER_REQ = 7315;
  CMD_MONSTER_MORPH_STAR_UP_MONSTER_RSP = 7316;
  CMD_MONSTER_MORPH_REFINE_MINION_AFFIX_REQ = 7317;
  CMD_MONSTER_MORPH_REFINE_MINION_AFFIX_RSP = 7318;
  CMD_MONSTER_MORPH_SELECT_NEW_MINION_AFFIX_REQ = 7319;
  CMD_MONSTER_MORPH_SELECT_NEW_MINION_AFFIX_RSP = 7320;
  CMD_MONSTER_MORPH_GET_RANK_REQ = 7321;
  CMD_MONSTER_MORPH_GET_RANK_RSP = 7322;
  CMD_MONSTER_MORPH_SWEEP_REQ = 7323;
  CMD_MONSTER_MORPH_SWEEP_RSP = 7324;
  CMD_CRYSTAL_LOTTERY_GET_MAIN_DATA_REQ = 7331;
  CMD_CRYSTAL_LOTTERY_GET_MAIN_DATA_RSP = 7332;
  CMD_CRYSTAL_LOTTERY_ENROLL_REQ = 7333;
  CMD_CRYSTAL_LOTTERY_ENROLL_RSP = 7334;
  CMD_CRYSTAL_LOTTERY_TAKE_REWARD_REQ = 7335;
  CMD_CRYSTAL_LOTTERY_TAKE_REWARD_RSP = 7336;
  CMD_TILED_GAME_INN_GET_ACTIVITY_REQ = 7341;
  CMD_TILED_GAME_INN_GET_ACTIVITY_RSP = 7342;
  CMD_TILED_GAME_INN_BUY_FURNITURE_REQ = 7343;
  CMD_TILED_GAME_INN_BUY_FURNITURE_RSP = 7344;
  CMD_TILED_GAME_INN_EDIT_INN_REQ = 7345;
  CMD_TILED_GAME_INN_EDIT_INN_RSP = 7346;
  CMD_TILED_GAME_INN_START_MANAGEMENT_REQ = 7347;
  CMD_TILED_GAME_INN_START_MANAGEMENT_RSP = 7348;
  CMD_TILED_GAME_INN_STOP_MANAGEMENT_REQ = 7349;
  CMD_TILED_GAME_INN_STOP_MANAGEMENT_RSP = 7350;
  CMD_TILED_GAME_INN_START_TRAVEL_REQ = 7351;
  CMD_TILED_GAME_INN_START_TRAVEL_RSP = 7352;
  CMD_TILED_GAME_INN_END_TRAVEL_REQ = 7353;
  CMD_TILED_GAME_INN_END_TRAVEL_RSP = 7354;
  CMD_TILED_GAME_INN_LEVEL_UP_REQ = 7355;
  CMD_TILED_GAME_INN_LEVEL_UP_RSP = 7356;
  CMD_TILED_GAME_INN_DEVELOP_DISH_REQ = 7357;
  CMD_TILED_GAME_INN_DEVELOP_DISH_RSP = 7358;
  CMD_TILED_GAME_INN_LEVEL_UP_INN_REQ = 7359;
  CMD_TILED_GAME_INN_LEVEL_UP_INN_RSP = 7360;
  CMD_TILED_GAME_INN_SYNC_INN_DATA_NOTIFY = 7361;
  CMD_TILED_GAME_INN_GET_OTHER_INN_DATA_REQ = 7362;
  CMD_TILED_GAME_INN_GET_OTHER_INN_DATA_RSP = 7363;
  CMD_TILED_GAME_INN_ADD_LEFT_DROP_NUM_NOTIFY = 7364;
  CMD_TOWER_DEFENSE_GET_ACTIVITY_REQ = 7375;
  CMD_TOWER_DEFENSE_GET_ACTIVITY_RSP = 7376;
  CMD_TOWER_DEFENSE_SAVE_TURN_REQ = 7377;
  CMD_TOWER_DEFENSE_SAVE_TURN_RSP = 7378;
  CMD_TOWER_DEFENSE_BATTLE_BEGIN_REQ = 7379;
  CMD_TOWER_DEFENSE_BATTLE_BEGIN_RSP = 7380;
  CMD_TOWER_DEFENSE_BATTLE_END_REQ = 7381;
  CMD_TOWER_DEFENSE_BATTLE_END_RSP = 7382;
}

enum ThemeTowerBuffType {
  THEME_TOWER_BUFF_TYPE_NONE = 0;
  THEME_TOWER_WEATHER_BUFF = 1;
  THEME_TOWER_SPECIAL_BUFF = 2;
  THEME_TOWER_COMMON_BUFF = 3;
  THEME_TOWER_ACTIVE_BUFF = 4;
}

enum TiledGameLunaTrapDamageType {
  TILED_GAME_LUNA_TRAP_DAMAGE_TYPE_NONE = 0;
  TILED_GAME_LUNA_TRAP_DAMAGE_TYPE_FIXED_DAMAGE = 1;
  TILED_GAME_LUNA_TRAP_DAMAGE_TYPE_PERCENTAGE_DAMAGE = 2;
}

enum QRtsBuildingType {
  Q_RTS_BUILDING_TYPE_NONE = 0;
  QRTS_BUILDING_TYPE_BASE = 1;
  QRTS_BUILDING_TYPE_DEFENSE_TOWER = 2;
  QRTS_BUILDING_TYPE_RANGE_BARRACK = 3;
  QRTS_BUILDING_TYPE_MELEE_BARRACK = 4;
  QRTS_BUILDING_TYPE_FIXED_GAIN_MINER = 5;
  QRTS_BUILDING_TYPE_INCREASING_GAIN_MINER = 6;
  QRTS_BUILDING_TYPE_WALL = 7;
  QRTS_BUILDING_TYPE_BARRICADE = 8;
}

enum QRtsTalentSourceType {
  QRTS_TALENT_SOURCE_TYPE_NONE = 0;
  QRTS_TALENT_SOURCE_TYPE_ROUND = 1;
  QRTS_TALENT_SOURCE_TYPE_WISH = 2;
  QRTS_TALENT_SOURCE_TYPE_BASE_LEVEL = 3;
}

enum QRtsTalentType {
  Q_RTS_TALENT_TYPE_NONE = 0;
  QRTS_TALENT_TYPE_NORMAL = 1;
  QRTS_TALENT_TYPE_ULTRA = 2;
  QRTS_TALENT_TYPE_RANDOM = 3;
  QRTS_TALENT_TYPE_BASE = 4;
  QRTS_TALENT_TYPE_ATTRIBUTE = 5;
}

enum QRtsStageType {
  Q_RTS_STAGE_TYPE_NONE = 0;
  QRTS_STAGE_TYPE_MAINLINE = 1;
  QRTS_STAGE_TYPE_CHALLENGE = 2;
  QRTS_STAGE_TYPE_RANK_CHALLENGE = 3;
}

enum QRtsServerEffect {
  Q_RTS_SERVER_EFFECT_NONE = 0;
  QRTS_SERVER_EFFECT_MINER_GAIN_UP = 1;
  QRTS_SERVER_EFFECT_FIXED_GAIN_MINER_PROTECT = 2;
  QRTS_SERVER_EFFECT_INCREASING_GAIN_MINER_ENFORCE = 3;
  QRTS_SERVER_EFFECT_MINER_EXTRA_GOLD = 4;
  QRTS_SERVER_EFFECT_BASE_PRODUCE_GOLD = 5;
  QRTS_SERVER_EFFECT_BUILDING_CASHBACK = 6;
}

enum BurdenAlleviationV2Type {
  BURDEN_ALLEVIATION_V_2_TYPE_NONE = 0;
  BURDEN_ALLEVIATION_V2_OW_QUEST = 1;
  BURDEN_ALLEVIATION_V2_THEME_WANTED = 2;
  BURDEN_ALLEVIATION_V2_EXAMINATION = 3;
  BURDEN_ALLEVIATION_V2_ARMADA_STAGE_SCORE_ACTIVITY = 4;
  BURDEN_ALLEVIATION_V2_RAID_REPLACE = 5;
}

enum ShigureKiraProgressSlotType {
  SHIGURE_KIRA_PROGRESS_SLOT_NONE = 0;
  SHIGURE_KIRA_PROGRESS_SLOT_FANCHANT = 1;
  SHIGURE_KIRA_PROGRESS_SLOT_CONCERT = 2;
}

enum MonsterCardPvpFinishCombatType {
  MONSTER_CARD_PVP_FINISH_COMBAT_TYPE_NONE = 0;
  MONSTER_CARD_PVP_FINISH_COMBAT_TYPE_NORMAL = 1;
  MONSTER_CARD_PVP_FINISH_COMBAT_TYPE_GIVE_UP = 2;
  MONSTER_CARD_PVP_FINISH_COMBAT_TYPE_ABANDON = 3;
}

enum MonsterCardPvpCardHiddenConditionType {
  MONSTER_CARD_PVP_CARD_HIDDEN_CONDITION_TYPE_NONE = 0;
  MONSTER_CARD_PVP_CARD_HIDDEN_CONDITION_OPPONENT_RANK = 1;
  MONSTER_CARD_PVP_CARD_HIDDEN_CONDITION_COMBAT_TIMES = 2;
  MONSTER_CARD_PVP_CARD_HIDDEN_CONDITION_ELO_SCORE = 3;
}

enum MinionClashConditionType {
  MINION_CLASH_CONDITION_TYPE_NONE = 0;
  MINION_CLASH_CONDITION_TYPE_ACTIVITY_LEVEL_GE = 1;
  MINION_CLASH_CONDITION_TYPE_BRANCH_TALENT_LEVEL_GE = 2;
  MINION_CLASH_CONDITION_TYPE_PASS_STAGE_LIST = 3;
  MINION_CLASH_CONDITION_TYPE_PASS_RPG_SITE_LIST = 4;
}

enum MinionClashStageType {
  MINION_CLASH_STAGE_TYPE_NONE = 0;
  MINION_CLASH_STAGE_TYPE_NORMAL_AVATAR = 1;
  MINION_CLASH_STAGE_TYPE_NORMAL_CARD = 2;
  MINION_CLASH_STAGE_TYPE_DAILY = 3;
  MINION_CLASH_STAGE_TYPE_TOWER = 4;
  MINION_CLASH_STAGE_TYPE_TUTORIAL = 5;
}

enum MinionClashDoGachaType {
  MINION_CLASH_DO_GACHA_TYPE_NONE = 0;
  MINION_CLASH_DO_GACHA_TYPE_ONCE = 1;
  MINION_CLASH_DO_GACHA_TYPE_UP_TO_10 = 2;
}

enum MatchThreePlusRoomType {
  MATCH_THREE_PLUS_ROOM_TYPE_NONE = 0;
  MATCH_THREE_PLUS_ROOM_MAIN = 1;
  MATCH_THREE_PLUS_ROOM_SIDE = 2;
  MATCH_THREE_PLUS_ROOM_DAILY = 3;
  MATCH_THREE_PLUS_ROOM_TOWER = 4;
  MATCH_THREE_PLUS_ROOM_TUTORIAL = 5;
}

enum TiledGameSrpgBattleType {
  TILED_GAME_SRPG_BATTLE_TYPE_NONE = 0;
  TILED_GAME_SRPG_BATTLE_STORY = 1;
  TILED_GAME_SRPG_BATTLE_CHALLENGE = 2;
}

enum TiledGameSrpgWinType {
  TILED_GAME_SRPG_WIN_TYPE_NONE = 0;
  TILED_GAME_SRPG_WIN_ELIMINATE = 1;
  TILED_GAME_SRPG_WIN_CHASE = 2;
  TILED_GAME_SRPG_WIN_SURVIVE = 3;
  TILED_GAME_SRPG_WIN_CAPTURE = 4;
}

enum GameRoomActivityGameType {
  GAME_ROOM_ACTIVITY_GAME_TYPE_NONE = 0;
  GAME_ROOM_ACTIVITY_GAME_TYPE_BRICK_BREAKER = 1;
  GAME_ROOM_ACTIVITY_GAME_TYPE_NS_SHAFT = 2;
}

enum GameRoomActivityGameStageType {
  GAME_ROOM_ACTIVITY_GAME_STAGE_TYPE_NONE = 0;
  GAME_ROOM_ACTIVITY_GAME_STAGE_TYPE_NORMAL = 1;
  GAME_ROOM_ACTIVITY_GAME_STAGE_TYPE_RANK = 2;
}

enum FutariBattleStageGroupType {
  FUTARI_BATTLE_STAGE_GROUP_TYPE_NONE = 0;
  FUTARI_BATTLE_STAGE_GROUP_NORMAL = 1;
  FUTARI_BATTLE_STAGE_GROUP_BOSS = 2;
}

enum FutariBattleStageType {
  FUTARI_BATTLE_STAGE_TYPE_NONE = 0;
  FUTARI_BATTLE_STAGE_NORMAL = 1;
  FUTARI_BATTLE_STAGE_BOSS = 2;
}

enum ReActivitySiteContentType {
  RE_ACTIVITY_SITE_CONTENT_NONE = 0;
  RE_ACTIVITY_SITE_CONTENT_PLOT = 1;
  RE_ACTIVITY_SITE_CONTENT_PROP_STAGE = 2;
  RE_ACTIVITY_SITE_CONTENT_JUMP_STAGE = 3;
  RE_ACTIVITY_SITE_CONTENT_TILE = 4;
}

enum MonsterCardPvpCardCheckResult {
  SUCC = 0;
  CARD_NOT_EXIST = 1;
  CARD_REPEATED = 2;
  CARD_CONFIG_NOT_FOUND = 3;
  CARD_EMPTY = 4;
  CARD_SUPPORT_NOT_EXIST = 5;
  CARD_SUPPORT_REPEATED = 6;
  CARD_COST_LIMIT = 7;
}

enum MonsterMorphStageType {
  MONSTER_MORPH_STAGE_TYPE_NONE = 0;
  MONSTER_MORPH_STAGE_TYPE_MAINLINE = 1;
  MONSTER_MORPH_STAGE_TYPE_BRANCH = 2;
  MONSTER_MORPH_STAGE_TYPE_CYCLE = 3;
  MONSTER_MORPH_STAGE_TYPE_CHALLENGE = 4;
  MONSTER_MORPH_STAGE_TYPE_RANK_CHALLENGE = 5;
  MONSTER_MORPH_STAGE_TYPE_MAINLINE_AVATAR = 6;
}

enum MonsterMorphMinionRefineType {
  MONSTER_MORPH_MINION_REFINE_TYPE_NONE = 0;
  MONSTER_MORPH_MINION_REFINE_NORMAL = 1;
  MONSTER_MORPH_MINION_REFINE_LOCK = 2;
}

enum TiledGameInnFurnitureDirection {
  TILED_GAME_INN_FURNITURE_DIRECTION_DOWN = 0;
  TILED_GAME_INN_FURNITURE_DIRECTION_UP = 1;
  TILED_GAME_INN_FURNITURE_DIRECTION_LEFT = 2;
  TILED_GAME_INN_FURNITURE_DIRECTION_RIGHT = 3;
}

enum TiledGameInnFurnitureType {
  TILED_GAME_INN_FURNITURE_TYPE_NONE = 0;
  TILED_GAME_INN_FURNITURE_TYPE_TABLE = 1;
  TILED_GAME_INN_FURNITURE_TYPE_FLOOR_DECORATION = 2;
  TILED_GAME_INN_FURNITURE_TYPE_WALL_DECORATION = 3;
}

enum TiledGameInnRole {
  TILED_GAME_INN_ROLE_NONE = 0;
  TILED_GAME_INN_ROLE_CHEF = 1;
  TILED_GAME_INN_ROLE_WAITER = 2;
  TILED_GAME_INN_ROLE_MANAGEMENT = 3;
  TILED_GAME_INN_ROLE_CLEANER = 4;
  TILED_GAME_INN_ROLE_PURCHASER = 5;
}

enum TiledGameInnTasteTag {
  TILED_GAME_INN_TASTE_TAG_NONE = 0;
  TILED_GAME_INN_TASTE_TAG_SOUR = 1;
  TILED_GAME_INN_TASTE_TAG_SWEET = 2;
  TILED_GAME_INN_TASTE_TAG_SALINE = 3;
  TILED_GAME_INN_TASTE_TAG_SPICY = 4;
  TILED_GAME_INN_TASTE_TAG_ORIGINAL = 5;
}

enum TiledGameInnTechniquesTag {
  TILED_GAME_INN_TECHNIQUES_TAG_NONE = 0;
  TILED_GAME_INN_TECHNIQUES_TAG_STIR_FRY = 1;
  TILED_GAME_INN_TECHNIQUES_TAG_FRY = 2;
  TILED_GAME_INN_TECHNIQUES_TAG_STEAM = 3;
  TILED_GAME_INN_TECHNIQUES_TAG_BOIL = 4;
  TILED_GAME_INN_TECHNIQUES_TAG_BAKE = 5;
}

enum TiledGameInnStaffStatus {
  TILED_GAME_INN_STAFF_STATUS_NONE = 0;
  TILED_GAME_INN_STAFF_STATUS_LOCK = 1;
  TILED_GAME_INN_STAFF_STATUS_UNLOCK = 2;
}

enum TiledGameInnSkillType {
  TILED_GAME_INN_SKILL_TYPE_NONE = 0;
  TILED_GAME_INN_SKILL_TYPE_MORE_PURCHASE_NUM = 9;
  TILED_GAME_INN_SKILL_TYPE_PURCHASE_WITH_PROBABILITY_FREE = 14;
}

enum TowerDefenseBattleType {
  TOWER_DEFENSE_BATTLE_TYPE_NONE = 0;
  TOWER_DEFENSE_BATTLE_MAINLINE = 1;
  TOWER_DEFENSE_BATTLE_STORY = 2;
  TOWER_DEFENSE_BATTLE_CHALLENGE = 3;
  TOWER_DEFENSE_BATTLE_ENDLESS = 4;
}

message AdventureDecorationSlot {
  uint32 slot_id = 1;
  uint32 furniture_id = 2;
  uint32 direction = 3;
}

message AdventureGroupAvatar {
  uint32 avatar_id = 1;
  repeated uint32 old_finished_record_list = 2;
  repeated uint32 finished_record_list = 3;
}

message AdventureGroupQuest {
  uint32 pool_id = 1;
  uint32 quest_id = 2;
  uint32 accept_time = 3;
  repeated uint32 avatar_list = 4;
  uint32 status = 5;
  uint32 elf_id = 6;
}

message AdventureGroupAvailableQuest {
  uint32 pool_id = 1;
  uint32 quest_id = 2;
}

// CmdID: 3900
message GetAdventureGroupReq {
}

message CabinLevel {
  uint32 cabin_type = 1;
  uint32 level = 2;
  uint32 extend_grade = 3;
}

message FacilityLevel {
  uint32 facility_type = 1;
  uint32 level = 2;
}

// CmdID: 3901
message GetAdventureGroupRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetAdventureGroupRsp.Retcode retcode = 1;
  uint32 old_level = 2;
  uint32 old_badge = 3;
  repeated AdventureGroupAvatar avatar_list = 5;
  repeated AdventureGroupQuest quest_list = 6;
  repeated AdventureGroupAvailableQuest available_quest_list = 7;
  uint32 grain = 8;
  uint32 has_take_reward_level = 9;
  uint32 next_scoin_add_time = 10;
  uint32 storage_scoin = 11;
  uint32 storage_stamina = 12;
  repeated uint32 has_take_compensation_list = 13;
  repeated AdventureDecorationSlot decoration_slot_list = 15;
  uint32 today_reset_quest_num = 17;
  uint32 level = 18;
  uint32 badge = 19;
  uint32 extra_badge_cost_num = 20;
}

message SelectAdventureQuestReqData {
  uint32 pool_id = 1;
  repeated uint32 avatar_list = 2;
  uint32 elf_id = 3;
  uint32 quest_id = 4;
}

// CmdID: 3902
message SelectAdventureQuestReq {
  repeated SelectAdventureQuestReqData select_adeventure_quest_list = 4;
  bool is_quick_select = 5;
}

// CmdID: 3903
message SelectAdventureQuestRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_FINISHED = 2;
    HAS_TAKE = 3;
    LACK_GRAIN = 4;
    LACK_STAMINA = 5;
    AVATAR_LOCK = 6;
    AVATAR_IN_QUEST = 7;
    AVATAR_NUM_ERROR = 8;
    ELF_LOCK = 9;
    ELF_IN_QUEST = 10;
    SKILL_LACK = 11;
    POOL_REPEATED = 12;
    AVATAR_REPEATED = 13;
    ELF_REPEATED = 14;
  }

  SelectAdventureQuestRsp.Retcode retcode = 1;
}

// CmdID: 3904
message TakeAdventureQuestRewardReq {
  uint32 pool_id = 1;
  bool is_take_all = 3;
}

// CmdID: 3905
message TakeAdventureQuestRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NO_QUEST = 2;
    HAS_TAKE = 3;
    NOT_END = 4;
  }

  TakeAdventureQuestRewardRsp.Retcode retcode = 1;
  repeated DropItem drop_item_list = 3;
  repeated AdventureGroupAvailableQuest quest_list = 5;
}

// CmdID: 3910
message ClaimScoinReq {
}

// CmdID: 3911
message ClaimScoinRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    SCOIN_FULL = 2;
  }

  ClaimScoinRsp.Retcode retcode = 1;
  uint32 add_scoin = 2;
  bool is_extra = 3;
}

message IslandStorySweepAvatar {
  uint32 sweep_id = 1;
  repeated uint32 avatar_id_list = 2;
}

// CmdID: 3912
message AdventureStorySweepReq {
  repeated IslandStorySweepAvatar adventure_story_sweep_list = 3;
  bool is_quick_sweep = 4;
}

message IslandStorySweepData {
  uint32 sweep_id = 1;
  uint32 over_time = 2;
  bool is_finished = 3;
  bool is_sieged = 4;
  repeated uint32 avatar_id_list = 5;
}

// CmdID: 3913
message AdventureStorySweepRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_MEET_RESTRICT = 2;
    HAS_TAKEN = 3;
    LACK_MATERIAL = 4;
    STAMINA_LACK = 5;
    EQUIPMENT_FULL = 6;
    EQUIPMENT_MATERIAL_LIMIT = 7;
    EQUIPMENT_FRAGMENT_LIMIT = 8;
    ENTER_TIMES_LACK = 9;
    NOT_MEET_FAST = 10;
    EXCEED_STAMINA = 11;
    NOT_FINISH_CHALLENGE = 12;
    AVATAR_SWEEPING = 13;
    TEAM_LIMIT = 14;
    AVATAR_ERROR = 15;
    STAGE_NOT_EXIST = 16;
    ACTIVITY_ENTER_TIMES_LACK = 17;
    LEVEL_LACK = 18;
  }

  AdventureStorySweepRsp.Retcode retcode = 1;
  uint32 used_stamina = 3;
  repeated IslandStorySweepData sweep_data_list = 4;
}

// CmdID: 3914
message GetAdventureStorySweepInfoReq {
}

// CmdID: 3915
message GetAdventureStorySweepInfoRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetAdventureStorySweepInfoRsp.Retcode retcode = 1;
  repeated IslandStorySweepData story_sweep_list = 2;
  uint32 used_stamina = 3;
  repeated IslandStorySweepAvatar last_story_sweep_avatar_list = 4;
}

// CmdID: 3916
message TakeAdventureStorySweepRewardReq {
  uint32 sweep_id = 1;
  bool is_take_all = 2;
  repeated uint32 sweep_group_type_list = 3;
}

// CmdID: 3917
message TakeAdventureStorySweepRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_EXIST = 2;
    NOT_FINISHED = 3;
  }

  TakeAdventureStorySweepRewardRsp.Retcode retcode = 1;
  uint32 sweep_id = 2;
  uint32 siege_stage_id = 3;
  repeated DropItem drop_item_list = 4;
  uint32 player_exp_reward = 5;
  uint32 exp_convert_scoin = 6;
  uint32 scoin_reward = 7;
  uint32 rank_scoin = 8;
  bool is_take_all = 9;
  repeated uint32 sweep_group_type_list = 10;
}

// CmdID: 3918
message TakeAdventureCompensationReq {
  repeated CompensationType type_list = 1;
}

// CmdID: 3919
message TakeAdventureCompensationRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    HAS_TAKE = 2;
  }

  TakeAdventureCompensationRsp.Retcode retcode = 1;
  repeated CompensationType type_list = 2;
  RewardData reward_data = 3;
}

// CmdID: 3920
message EditAdventureRoomReq {
  AdventureDecorationSlot decoration_slot = 1;
}

// CmdID: 3921
message EditAdventureRoomRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    SLOT_UNLOCK = 2;
    FURNITURE_LACK = 3;
    FURNITURE_TYPE_ERROR = 4;
    COLLECTION_TYPE_ERROR = 5;
  }

  EditAdventureRoomRsp.Retcode retcode = 1;
  uint32 slot_id = 2;
}

// CmdID: 3922
message CancelAdventureQuestReq {
  uint32 pool_id = 1;
}

// CmdID: 3923
message CancelAdventureQuestRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_SELECTED = 2;
    OVER_TIME = 3;
  }

  CancelAdventureQuestRsp.Retcode retcode = 1;
  uint32 pool_id = 2;
}

// CmdID: 3924
message ResetAdventureQuestReq {
  uint32 pool_id = 1;
}

// CmdID: 3925
message ResetAdventureQuestRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NO_QUEST = 2;
    NO_TIMES = 3;
    HAS_FINISHED = 4;
    HAS_SELECTED = 5;
  }

  ResetAdventureQuestRsp.Retcode retcode = 1;
  uint32 pool_id = 2;
}

enum CmdTypeAdventure {
  CMD_TYPE_ADVENTURE_NONE = 0;
  CMD_GET_ADVENTURE_GROUP_REQ = 3900;
  CMD_GET_ADVENTURE_GROUP_RSP = 3901;
  CMD_SELECT_ADVENTURE_QUEST_REQ = 3902;
  CMD_SELECT_ADVENTURE_QUEST_RSP = 3903;
  CMD_TAKE_ADVENTURE_QUEST_REWARD_REQ = 3904;
  CMD_TAKE_ADVENTURE_QUEST_REWARD_RSP = 3905;
  CMD_CLAIM_SCOIN_REQ = 3910;
  CMD_CLAIM_SCOIN_RSP = 3911;
  CMD_ADVENTURE_STORY_SWEEP_REQ = 3912;
  CMD_ADVENTURE_STORY_SWEEP_RSP = 3913;
  CMD_GET_ADVENTURE_STORY_SWEEP_INFO_REQ = 3914;
  CMD_GET_ADVENTURE_STORY_SWEEP_INFO_RSP = 3915;
  CMD_TAKE_ADVENTURE_STORY_SWEEP_REWARD_REQ = 3916;
  CMD_TAKE_ADVENTURE_STORY_SWEEP_REWARD_RSP = 3917;
  CMD_TAKE_ADVENTURE_COMPENSATION_REQ = 3918;
  CMD_TAKE_ADVENTURE_COMPENSATION_RSP = 3919;
  CMD_EDIT_ADVENTURE_ROOM_REQ = 3920;
  CMD_EDIT_ADVENTURE_ROOM_RSP = 3921;
  CMD_CANCEL_ADVENTURE_QUEST_REQ = 3922;
  CMD_CANCEL_ADVENTURE_QUEST_RSP = 3923;
  CMD_RESET_ADVENTURE_QUEST_REQ = 3924;
  CMD_RESET_ADVENTURE_QUEST_RSP = 3925;
}

enum AdventureQuestStatus {
  ADVENTURE_QUEST_STATUS_NONE = 0;
  ADVENTURE_QUEST_STATUS_DOING = 1;
  ADVENTURE_QUEST_STATUS_FINISHED = 2;
}

enum AdventureAvatarType {
  ADVENTURE_AVATAR_TYPE_NONE = 0;
  ADVENTURE_AVATAR_S = 1;
  ADVENTURE_AVATAR_A = 2;
  ADVENTURE_AVATAR_NORMAL = 3;
}

enum AdventureQuestResult {
  ADVENTURE_QUEST_RESULT_NONE = 0;
  ADVENTURE_QUEST_RESULT_FAIL = 1;
  ADVENTURE_QUEST_RESULT_SUCC = 2;
  ADVENTURE_QUEST_RESULT_BIG_SUCC = 3;
}

enum CompensationType {
  COMPENSATION_NONE = 0;
  COMPENSATION_ISLAND = 1;
  COMPENSATION_DORM = 2;
  COMPENSATION_ADVENTURE_GROUP = 3;
}

// CmdID: 6650
message AiCyberGetActivityReq {
}

message AiCyberArea {
  uint32 area_id = 1;
  bool is_puzzle_reward_taken = 2;
  uint32 cur_daily_stage_id = 3;
}

message AiCyberDailyStageDrop {
  uint32 material_id = 1;
  uint32 material_num = 2;
}

message AiCyberActivity {
  uint32 schedule_id = 1;
  uint32 repair_progress = 2;
  repeated AiCyberArea area_list = 3;
  repeated AiCyberDailyStageDrop daily_stage_drop_list = 4;
  uint32 hyperion_id = 5;
  uint32 main_ui_id = 6;
}

// CmdID: 6651
message AiCyberGetActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  AiCyberGetActivityRsp.Retcode retcode = 1;
  AiCyberActivity ai_cyber_activity = 2;
  string bless = 3;
}

// CmdID: 6652
message AiCyberTakePuzzleRewardReq {
  uint32 area_id = 1;
}

// CmdID: 6653
message AiCyberTakePuzzleRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NO_REWARD = 2;
    ACTIVITY_NOT_OPEN = 3;
    AREA_ERROR = 4;
    HAS_TAKE = 5;
  }

  AiCyberTakePuzzleRewardRsp.Retcode retcode = 1;
  uint32 area_id = 2;
  RewardData reward_data = 3;
}

// CmdID: 6654
message AiCyberAddRepairProgressReq {
  uint32 target_progress = 1;
}

// CmdID: 6655
message AiCyberAddRepairProgressRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ACTIVITY_NOT_OPEN = 2;
    TARGET_PROGRESS_ERROR = 3;
    CONDITION_NOT_MEET = 4;
    MATERIAL_LACK = 5;
  }

  AiCyberAddRepairProgressRsp.Retcode retcode = 1;
  uint32 target_progress = 2;
}

// CmdID: 6656
message AiCyberSetBlessReq {
  string bless = 1;
}

// CmdID: 6657
message AiCyberSetBlessRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ACTIVITY_NOT_OPEN = 2;
    HAS_SET = 3;
    SENSITIVE_WORDS = 4;
    FORMAT_ERROR = 5;
  }

  AiCyberSetBlessRsp.Retcode retcode = 1;
  string bless = 2;
}

// CmdID: 6658
message AiCyberRefreshTicketReq {
}

// CmdID: 6659
message AiCyberRefreshTicketRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ACTIVITY_NOT_OPEN = 2;
  }

  AiCyberRefreshTicketRsp.Retcode retcode = 1;
  uint32 ticket_material_id = 2;
  uint32 add_num = 3;
}

// CmdID: 6660
message AiCyberUpdateClientSettingReq {
  uint32 hyperion_id = 1;
  uint32 main_ui_id = 2;
}

// CmdID: 6661
message AiCyberUpdateClientSettingRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ACTIVITY_NOT_OPEN = 2;
  }

  AiCyberUpdateClientSettingRsp.Retcode retcode = 1;
}

enum CmdTypeAicyber {
  CMD_TYPE_AICYBER_NONE = 0;
  CMD_AI_CYBER_GET_ACTIVITY_REQ = 6650;
  CMD_AI_CYBER_GET_ACTIVITY_RSP = 6651;
  CMD_AI_CYBER_TAKE_PUZZLE_REWARD_REQ = 6652;
  CMD_AI_CYBER_TAKE_PUZZLE_REWARD_RSP = 6653;
  CMD_AI_CYBER_ADD_REPAIR_PROGRESS_REQ = 6654;
  CMD_AI_CYBER_ADD_REPAIR_PROGRESS_RSP = 6655;
  CMD_AI_CYBER_SET_BLESS_REQ = 6656;
  CMD_AI_CYBER_SET_BLESS_RSP = 6657;
  CMD_AI_CYBER_REFRESH_TICKET_REQ = 6658;
  CMD_AI_CYBER_REFRESH_TICKET_RSP = 6659;
  CMD_AI_CYBER_UPDATE_CLIENT_SETTING_REQ = 6660;
  CMD_AI_CYBER_UPDATE_CLIENT_SETTING_RSP = 6661;
}

enum AiCyberUnlockConditionType {
  AI_CYBER_UNLOCK_CONDITION_TYPE_NONE = 0;
  AI_CYBER_UNLOCK_DATE_TIME = 1;
  AI_CYBER_UNLOCK_PRE_STAGE = 2;
  AI_CYBER_UNLOCK_REPAIR_PROGRESS = 3;
  AI_CYBER_UNLOCK_PRE_EVENT = 4;
}

enum AiCyberStageType {
  AI_CYBER_STAGE_INVALID = 0;
  AI_CYBER_STAGE_MAIN = 1;
  AI_CYBER_STAGE_DAILY = 2;
  AI_CYBER_STAGE_CHALLENGE = 3;
}

// CmdID: 2601
message GetArmadaDataReq {
  uint32 level = 1;
}

// CmdID: 2602
message GetArmadaDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    LEVEL_LACK = 2;
  }

  GetArmadaDataRsp.Retcode retcode = 1;
  ArmadaPlayerStatus status = 2;
  ArmadaData armada = 3;
  repeated ArmadaBriefData apply_list = 4;
  uint32 join_cd_finish_time = 5;
  bool is_need_recommend = 6;
  uint32 last_mail_time = 7;
  ArmadaBriefData recommend_armada = 8;
  bool is_new = 9;
}

// CmdID: 2603
message CreateArmadaReq {
  string name = 1;
  ArmadaLabel label = 2;
}

// CmdID: 2604
message CreateArmadaRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    LEVEL_LACK = 2;
    SCOIN_LACK = 3;
    HCOIN_LACK = 4;
    IN_ARMADA = 5;
    IN_APPLYING = 6;
    NAME_REPEAT = 7;
    NAME_FORMAT_ERROR = 8;
    NAME_SENSITIVE_WORDS = 9;
    IN_CD_TIME = 10;
    ACCOUNT_NONE = 11;
    IN_LOW_POPL_CD_TIME = 12;
    LABEL_ERROR = 13;
    IN_AUDIT = 14;
  }

  CreateArmadaRsp.Retcode retcode = 1;
  uint32 armada_id = 2;
  string armada_name = 3;
  string audit_armada_name = 4;
}

// CmdID: 2605
message SearchArmadaReq {
  string name = 1;
  repeated uint32 label_id_list = 2;
}

// CmdID: 2606
message SearchArmadaRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  SearchArmadaRsp.Retcode retcode = 1;
  repeated ArmadaBriefData armada_list = 2;
}

// CmdID: 2607
message ApplyJoinArmadaReq {
  uint32 armada_id = 1;
  uint32 level = 2;
}

// CmdID: 2608
message ApplyJoinArmadaRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    STATUS_ERROR = 2;
    ARMADA_NOT_EXIST = 3;
    LEVEL_LACK = 4;
    MEMBER_FULL = 5;
    APPLY_FULL = 6;
    IN_CD_TIME = 7;
    APPLY_LIMIT = 8;
    HAS_APPLYED = 9;
    IN_LOW_POPL_CD_TIME = 10;
    FEATURE_CLOSED = 11;
  }

  ApplyJoinArmadaRsp.Retcode retcode = 1;
}

// CmdID: 2609
message DealArmadaApplyReq {
  uint32 target_uid = 1;
  bool agree = 2;
}

// CmdID: 2610
message DealArmadaApplyRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_ARMADA = 2;
    NOT_GRANTED = 3;
    NOT_TARGET = 4;
    ARMADA_FULL = 5;
  }

  DealArmadaApplyRsp.Retcode retcode = 1;
  uint32 target_uid = 2;
  bool agree = 3;
}

// CmdID: 2611
message GetArmadaManageDataReq {
}

// CmdID: 2612
message GetArmadaManageDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_GRANTED = 2;
    NOT_IN_ARMADA = 3;
  }

  GetArmadaManageDataRsp.Retcode retcode = 1;
  repeated ArmadaApply apply_list = 2;
  repeated ArmadaApplyResult apply_result_list = 3;
  uint32 apply_level = 4;
  bool auto_pass = 5;
  uint32 auto_pass_level = 6;
  uint32 build_owner = 7;
  uint32 build_ownership_time = 8;
}

// CmdID: 2613
message SetArmadaApplyReq {
  uint32 apply_level = 1;
  bool auto_pass = 2;
  uint32 auto_pass_level = 3;
}

// CmdID: 2614
message SetArmadaApplyRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_GRANTED = 2;
    NOT_IN_ARMADA = 3;
    LEVEL_ERROR = 4;
  }

  SetArmadaApplyRsp.Retcode retcode = 1;
}

// CmdID: 2615
message SetArmadaBulletinReq {
  string bulletin = 1;
  string contact = 2;
}

// CmdID: 2616
message SetArmadaBulletinRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_GRANTED = 2;
    FORMAT_ERROR = 3;
    SENSITIVE_WORDS = 4;
    NOT_IN_ARMADA = 5;
    IN_CD = 6;
    IN_AUDIT = 7;
  }

  SetArmadaBulletinRsp.Retcode retcode = 1;
  string bulletin = 2;
  string old_bulletin = 3;
  string audit_bulletin = 4;
  uint32 cd_end_time = 5;
}

// CmdID: 2617
message GetRecommendArmadaReq {
  uint32 level = 1;
  repeated uint32 friend_uid_list = 2;
}

// CmdID: 2618
message GetRecommendArmadaRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    LEVEL_LACK = 2;
  }

  GetRecommendArmadaRsp.Retcode retcode = 1;
  repeated ArmadaBriefData armada_list = 2;
}

// CmdID: 2619
message TransferArmadaLeaderReq {
  uint32 target_uid = 1;
}

// CmdID: 2620
message TransferArmadaLeaderRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_GRANTED = 2;
    NOT_IN_ARMADA = 3;
    TARGET_NOT_IN_ARMADA = 4;
    LEVEL_LACK = 5;
  }

  TransferArmadaLeaderRsp.Retcode retcode = 1;
}

// CmdID: 2621
message SetArmadaPositionReq {
  uint32 target_uid = 1;
  ArmadaPosition position = 2;
}

// CmdID: 2622
message SetArmadaPositionRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_GRANTED = 2;
    NOT_IN_ARMADA = 3;
    TARGET_NOT_IN_ARMADA = 4;
    OFFICER_FULL = 5;
  }

  SetArmadaPositionRsp.Retcode retcode = 1;
}

// CmdID: 2623
message KickArmadaMemberReq {
  uint32 target_uid = 1;
}

// CmdID: 2624
message KickArmadaMemberRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_GRANTED = 2;
    NOT_IN_ARMADA = 3;
    TARGET_NOT_IN_ARMADA = 4;
    IN_PROTECT = 5;
  }

  KickArmadaMemberRsp.Retcode retcode = 1;
}

// CmdID: 2625
message DissolveArmadaReq {
}

// CmdID: 2626
message DissolveArmadaRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_GRANTED = 2;
    NOT_IN_ARMADA = 3;
    IN_DISSOLVE = 4;
    IN_ARMADA_WAR = 5;
  }

  DissolveArmadaRsp.Retcode retcode = 1;
}

// CmdID: 2627
message QuitArmadaReq {
}

// CmdID: 2628
message QuitArmadaRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_ARMADA = 3;
    IS_LEADER = 4;
  }

  QuitArmadaRsp.Retcode retcode = 1;
}

// CmdID: 2629
message CancelApplyArmadaReq {
  uint32 armada_id = 1;
}

// CmdID: 2630
message CancelApplyArmadaRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  CancelApplyArmadaRsp.Retcode retcode = 1;
}

// CmdID: 2631
message LevelUpArmadaCabinReq {
  ArmadaCabinType type = 1;
  uint32 cabin_id = 2;
  uint32 grid_id = 3;
}

// CmdID: 2632
message LevelUpArmadaCabinRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ARMADA_LEVEL_LACK = 2;
    FUND_LACK = 3;
    POPL_LACK = 4;
    BUSY = 5;
    LEVEL_LACK = 6;
    CABIN_NOT_EXIST = 7;
    CABIN_FULL = 8;
    GRID_ERROR = 9;
    NOT_GRANTED = 10;
    NOT_IN_ARMADA = 11;
    NO_OWNERSHIP = 12;
  }

  LevelUpArmadaCabinRsp.Retcode retcode = 1;
  ArmadaCabinType type = 2;
  uint32 cabin_id = 3;
  uint32 grid_id = 4;
  uint32 level_up_end_time = 5;
}

// CmdID: 2633
message CancelLevelUpArmadaCabinReq {
  ArmadaCabinType type = 1;
  uint32 cabin_id = 2;
}

// CmdID: 2634
message CancelLevelUpArmadaCabinRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    CABIN_NOT_IN_LEVELUP = 2;
    NOT_GRANTED = 3;
    NOT_IN_ARMADA = 4;
    NO_OWNERSHIP = 5;
  }

  CancelLevelUpArmadaCabinRsp.Retcode retcode = 1;
}

// CmdID: 2635
message MoveArmadaCabinReq {
  repeated ArmadaGrid grid_list = 1;
}

// CmdID: 2636
message MoveArmadaCabinRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_ARMADA = 2;
    NOT_GRANTED = 3;
    DATA_ERROR = 4;
    NO_OWNERSHIP = 5;
  }

  MoveArmadaCabinRsp.Retcode retcode = 1;
}

// CmdID: 2639
message GetConsignedOrderDataReq {
}

// CmdID: 2640
message GetConsignedOrderDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_ARMADA = 2;
  }

  GetConsignedOrderDataRsp.Retcode retcode = 1;
  uint32 progress = 2;
  repeated ConsignedOrder order_list = 3;
  uint32 cd_finish_time = 4;
  uint32 finish_order_times = 5;
  uint32 total_order_times = 6;
  uint32 armada_finish_times = 7;
  uint32 apply_order_times = 8;
  uint32 total_apply_times = 9;
  uint32 my_credit = 10;
  bool is_reward_taken = 11;
}

// CmdID: 2641
message ChooseConsignedOrderReq {
  uint32 index = 1;
  bool is_choose_all = 3;
  repeated ConsignedOrder choosen_order_list = 4;
}

// CmdID: 2642
message ChooseConsignedOrderRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_ARMADA = 2;
    STATUS_ERROR = 3;
    INDEX_ERROR = 4;
    TIMES_LIMIT = 5;
  }

  ChooseConsignedOrderRsp.Retcode retcode = 1;
  repeated ConsignedOrder choosen_order_list = 3;
  bool is_choose_all = 4;
}

// CmdID: 2643
message FinishConsignedOrderReq {
  EquipmentItem item = 1;
  uint32 unique_id = 2;
  uint32 consign_id = 3;
  uint32 progress = 4;
  uint32 order_level = 5;
  ConsignedOrder order = 6;
  ConsignedOrder next_order = 7;
  uint32 reliable_id = 8;
}

// CmdID: 2644
message FinishConsignedOrderRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_ARMADA = 2;
    IN_CD_TIME = 3;
    TIMES_LACK = 4;
    CONSUME_ITEM_NOT_EXIST = 5;
    CONSUME_ITEM_IN_USE = 6;
    CONSUME_ITEM_REPEAT = 7;
    CONSUME_ITEM_PROTECTED = 8;
    COST_GACHA_TICKET = 9;
    COST_SENIOR_EQUIP_FROM_NEW_DEVICE = 10;
    COST_SENIOR_EQUIP_CANCEL_PROTECT_TOO_SOON = 11;
    ITEM_LACK = 12;
    STATUS_ERROR = 13;
    ORDER_FINISHED = 14;
    ORDER_PROGRESS_CHANGE = 15;
    CONSUME_ITEM_IN_FACILITY = 16;
    CONSUME_ITEM_GRAND_KEY = 17;
    CONSUME_ITEM_PROTECTED_BY_SECURITY_PASSWORD = 18;
  }

  FinishConsignedOrderRsp.Retcode retcode = 1;
  repeated RewardData reward_list = 2;
  repeated DropItem drop_item_list = 3;
  EquipmentItem item = 4;
  uint32 consign_id = 5;
  uint32 reliable_id = 8;
  uint32 progress = 9;
  uint32 finish_order_times = 10;
}

// CmdID: 2645
message ResetConsignedOrderReq {
}

// CmdID: 2646
message ResetConsignedOrderRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_ARMADA = 2;
    IN_CD_TIME = 3;
  }

  ResetConsignedOrderRsp.Retcode retcode = 1;
}

// CmdID: 2647
message GetWareHouseDataReq {
}

// CmdID: 2648
message GetWareHouseDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_ARMADA = 2;
    STATUS_ERROR = 3;
  }

  GetWareHouseDataRsp.Retcode retcode = 1;
  repeated WareHouseDemand demand_list = 2;
  WareHouseStatus status = 3;
  WareHouseDemand my_demand = 4;
  uint32 donate_uid = 5;
  uint32 cd_finish_time = 6;
  uint32 day_donate_times = 7;
  uint32 max_donate_times = 8;
}

// CmdID: 2649
message PostWareHouseDemandReq {
  uint32 demand_id = 1;
}

// CmdID: 2650
message PostWareHouseDemandRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_ARMADA = 2;
    STATUS_ERROR = 3;
    SCOIN_LACK = 4;
    ITEM_LACK = 5;
    LEVEL_LACK = 6;
    NOT_VALID = 7;
  }

  PostWareHouseDemandRsp.Retcode retcode = 1;
  uint32 demand_id = 2;
}

// CmdID: 2651
message CancelWareHouseDemandReq {
}

// CmdID: 2652
message CancelWareHouseDemandRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_ARMADA = 2;
    STATUS_ERROR = 3;
  }

  CancelWareHouseDemandRsp.Retcode retcode = 1;
  uint32 demand_id = 2;
  bool is_auto_cancel = 3;
}

// CmdID: 2653
message DonateWareHouseItemReq {
  EquipmentItem item = 1;
  uint32 target_uid = 2;
  uint32 demand_id = 3;
}

// CmdID: 2654
message DonateWareHouseItemRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_ARMADA = 2;
    TARGET_NOT_IN_ARMADA = 3;
    STATUS_ERROR = 4;
    CONSUME_ITEM_NOT_EXIST = 5;
    CONSUME_ITEM_IN_USE = 6;
    CONSUME_ITEM_REPEAT = 7;
    CONSUME_ITEM_PROTECTED = 8;
    COST_GACHA_TICKET = 9;
    COST_SENIOR_EQUIP_FROM_NEW_DEVICE = 10;
    COST_SENIOR_EQUIP_CANCEL_PROTECT_TOO_SOON = 11;
    DONATE_ITEM_LACK = 12;
    DONATE_TIMES_LACK = 13;
    CONSUME_ITEM_IN_FACILITY = 14;
    CONSUME_ITEM_GRAND_KEY = 15;
    CONSUME_ITEM_PROTECTED_BY_SECURITY_PASSWORD = 16;
  }

  DonateWareHouseItemRsp.Retcode retcode = 1;
  EquipmentItem item = 2;
  uint32 demand_id = 3;
  repeated RewardData reward_list = 4;
}

// CmdID: 2655
message GetWareHouseItemReq {
}

// CmdID: 2656
message GetWareHouseItemRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_ARMADA = 2;
    STATUS_ERROR = 3;
  }

  GetWareHouseItemRsp.Retcode retcode = 1;
  uint32 demand_id = 2;
  WareHouseStatus status = 3;
  uint32 cd_finish_time = 4;
}

// CmdID: 2657
message EnterArmadaChatroomReq {
}

// CmdID: 2658
message EnterArmadaChatroomRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_ARMADA = 2;
  }

  EnterArmadaChatroomRsp.Retcode retcode = 1;
  repeated ChatMsg his_chat_msg_list = 2;
  repeated ArmadaSystemChatMsg his_system_chat_msg_list = 3;
}

// CmdID: 2661
message SendArmadaSystemChatMsgNotify {
  ArmadaSystemChatMsg chat_msg = 1;
}

// CmdID: 2662
message RecvArmadaSystemChatMsgNotify {
  ArmadaSystemChatMsg chat_msg = 1;
}

// CmdID: 2677
message DonateWareHouseNotify {
}

// CmdID: 2678
message ArmadaBuildNotify {
  ArmadaBuildNotifyType type = 1;
  ArmadaData armada_data = 2;
  repeated ArmadaGrid grid_list = 3;
}

// CmdID: 2679
message ArmadaBulletinNotify {
  string bulletin = 1;
  string contact = 2;
}

// CmdID: 2680
message ArmadaManageNotify {
  ArmadaManageNotifyType type = 1;
  uint32 target_uid = 2;
}

// CmdID: 2681
message ArmadaPlayerNotify {
  ArmadaPlayerNotifyType type = 1;
  uint32 target_uid = 2;
  ArmadaMember member = 3;
  repeated uint32 member_list = 5;
  string new_name = 6;
}

// CmdID: 2682
message ArmadaApplyNotify {
  ArmadaApplyNotifyType type = 1;
  uint32 target_uid = 2;
}

// CmdID: 2683
message CancelDissolveArmadaReq {
}

// CmdID: 2684
message CancelDissolveArmadaRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_GRANTED = 2;
    NOT_IN_ARMADA = 3;
  }

  CancelDissolveArmadaRsp.Retcode retcode = 1;
}

// CmdID: 2685
message GetArmadaBuildOwnershipReq {
}

// CmdID: 2686
message GetArmadaBuildOwnershipRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_GRANTED = 2;
    NOT_IN_ARMADA = 3;
  }

  GetArmadaBuildOwnershipRsp.Retcode retcode = 1;
  uint32 build_owner = 2;
  uint32 build_ownership_time = 3;
}

// CmdID: 2687
message ReleaseArmadaBuildOwnershipReq {
}

// CmdID: 2688
message ReleaseArmadaBuildOwnershipRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_GRANTED = 2;
    NOT_IN_ARMADA = 3;
  }

  ReleaseArmadaBuildOwnershipRsp.Retcode retcode = 1;
}

// CmdID: 2689
message ArmadaSendMailReq {
  string content = 1;
  string sender = 2;
}

// CmdID: 2690
message ArmadaSendMailRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_GRANTED = 2;
    NOT_IN_ARMADA = 3;
    FORMAT_ERROR = 4;
    SENSITIVE_WORDS = 5;
    SEND_CD = 6;
  }

  ArmadaSendMailRsp.Retcode retcode = 1;
}

// CmdID: 2691
message ChangeArmadaNameReq {
  string name = 1;
  bool is_scoin_lack = 2;
  bool is_hcoin_lack = 3;
}

// CmdID: 2692
message ChangeArmadaNameRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    SCOIN_LACK = 2;
    HCOIN_LACK = 3;
    NAME_REPEAT = 4;
    NAME_FORMAT_ERROR = 5;
    NAME_SENSITIVE_WORDS = 6;
    NOT_IN_ARMADA = 7;
    POSITION_LIMIT = 8;
    IN_CD = 9;
    IN_AUDIT = 10;
  }

  ChangeArmadaNameRsp.Retcode retcode = 1;
  string name = 2;
  string old_name = 3;
  string audit_name = 4;
  bool is_change_name_free = 5;
  uint32 cd_end_time = 6;
}

// CmdID: 2693
message JoinArmadaElectionReq {
}

// CmdID: 2694
message JoinArmadaElectionRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_ARMADA = 2;
    IMPEACH_NOT_START = 3;
    IN_OPTIONAL_LIST = 4;
    LEVEL_LACK = 5;
    ACCOUNT_NONE = 6;
  }

  JoinArmadaElectionRsp.Retcode retcode = 1;
  ArmadaImpeachData impeach_data = 2;
}

// CmdID: 2731
message ArmadaLogoutNotify {
}

// CmdID: 2732
message QuickApplyJoinArmadaReq {
  uint32 level = 1;
}

// CmdID: 2733
message QuickApplyJoinArmadaRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    LEVEL_LACK = 2;
    ALREADY_IN_ARMADA = 3;
    NO_QUICK_APPLY_ARMADA = 4;
    IN_CD_TIME = 5;
    IN_LOW_POPL_CD_TIME = 6;
    FEATURE_CLOSED = 7;
  }

  QuickApplyJoinArmadaRsp.Retcode retcode = 1;
}

// CmdID: 2799
message OpenArmadaStageReq {
  uint32 hard_level = 1;
}

// CmdID: 2800
message OpenArmadaStageRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_ARMADA = 2;
    NOT_LEADER = 3;
    TIME_LIMIT = 4;
    BOSS_NOT_FOUND = 5;
    LEVEL_LOCK = 6;
    POPL_LACK = 7;
    HAS_OPEN = 8;
    NOT_FINISH = 9;
  }

  OpenArmadaStageRsp.Retcode retcode = 1;
  uint32 hard_level = 2;
}

// CmdID: 2801
message TakeArmadaAchievementReq {
  uint32 id = 1;
  bool is_take_all = 2;
}

// CmdID: 2802
message TakeArmadaAchievementRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_ARMADA = 2;
    NOT_REACH = 3;
    HAS_TAKE = 4;
    ALREADY_DISSOLVE = 5;
  }

  TakeArmadaAchievementRsp.Retcode retcode = 1;
  uint32 id = 2;
  RewardData reward_data = 3;
  repeated uint32 take_achievement_id_list = 4;
  repeated uint32 id_list = 5;
  repeated RewardData reward_list = 6;
}

// CmdID: 2803
message GetRecommendArmadaMemberListReq {
  repeated uint32 uid_list = 1;
}

// CmdID: 2804
message GetRecommendArmadaMemberListRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_ARMADA = 2;
    TOO_FREQUENT = 3;
    NOT_LEADER = 4;
    ZERO = 5;
  }

  GetRecommendArmadaMemberListRsp.Retcode retcode = 1;
  repeated PlayerFriendBriefData recommend_list = 2;
}

// CmdID: 2805
message JoinQuitArmadaNotify {
  uint32 uid = 1;
  uint32 armada_id = 2;
}

// CmdID: 2806
message ArmadaPlayerContributionSyncNotify {
  uint32 armada_contribution = 1;
  uint32 uid = 2;
  uint32 week_contribution = 3;
  uint32 total_contribution = 4;
}

message ArmadaMember {
  uint32 uid = 1;
  ArmadaPosition position = 2;
  PlayerFriendBriefData brief_data = 3;
  uint32 week_popl = 4;
  uint32 total_popl = 5;
  uint32 week_fund = 6;
  uint32 total_fund = 7;
  uint32 week_contribution = 8;
  uint32 total_contribution = 9;
}

message ArmadaGrid {
  uint32 id = 1;
  ArmadaCabinType type = 2;
  uint32 cabin_id = 3;
}

message ArmadaContact {
  uint32 id = 1;
  uint32 level = 2;
  repeated uint32 member_list = 3;
}

message ArmadaHangar {
  uint32 id = 1;
  uint32 level = 2;
}

message ArmadaWorkshop {
  uint32 id = 1;
  uint32 level = 2;
}

message ArmadaExchequer {
  uint32 id = 1;
  uint32 level = 2;
}

message ArmadaBossroom {
  uint32 id = 1;
  uint32 level = 2;
}

message ArmadaOptionalLeader {
  uint32 id = 1;
  uint32 contribution = 2;
}

message ArmadaImpeachData {
  uint32 impeach_status = 1;
  repeated ArmadaOptionalLeader optional_leader_list = 2;
  uint32 election_end_time = 3;
}

message ArmadaData {
  ArmadaBriefData brief = 1;
  repeated ArmadaMember member_list = 2;
  ArmadaPosition position = 3;
  repeated ArmadaGrid grid_list = 4;
  repeated ArmadaContact contact_list = 5;
  repeated ArmadaHangar hangar_list = 6;
  repeated ArmadaWorkshop workshop_list = 7;
  repeated ArmadaExchequer exchequer_list = 8;
  repeated ArmadaBossroom bossroom_list = 9;
  ArmadaCabinType level_up_cabin_type = 10;
  uint32 level_up_cabin_id = 11;
  uint32 level_up_end_time = 12;
  uint32 dissolve_time = 13;
  ArmadaPlayerData armada_player_data = 14;
  ArmadaImpeachData impeach_data = 15;
  bool is_armada_change_name_free = 16;
}

message ArmadaPlayerData {
  uint32 uid = 1;
  repeated uint32 take_achievement_id_list = 2;
}

message ArmadaBriefData {
  uint32 id = 1;
  string name = 2;
  uint32 level = 3;
  string bulletin = 4;
  uint32 apply_level = 5;
  bool auto_pass = 6;
  uint32 auto_pass_level = 7;
  uint32 fund = 8;
  uint32 fund_cap = 9;
  uint32 ap = 10;
  uint32 ap_cap = 11;
  uint32 popl = 12;
  uint32 popl_cap = 13;
  uint32 member_num = 14;
  uint32 member_cap = 15;
  uint32 leader_id = 16;
  string leader_name = 17;
  string contact = 18;
  uint32 contribution = 19;
  bool is_low_popl = 20;
  uint32 recent_contribution = 21;
  uint32 active_level = 23;
  uint32 active_member_num = 24;
  repeated uint32 friend_uid_list = 25;
  PlayerFriendBriefData leader_brief_data = 26;
  ArmadaLabel label = 27;
}

message ArmadaApply {
  uint32 uid = 1;
  PlayerFriendBriefData brief_data = 2;
}

message ArmadaApplyResult {
  uint32 uid = 1;
  PlayerFriendBriefData brief_data = 2;
  bool agree = 3;
}

message WareHouseDemand {
  uint32 id = 1;
  uint32 uid = 2;
}

message ArmadaSystemChatMsg {
  ArmadaSystemChatMsgType type = 1;
  uint32 uid = 2;
  string nickname = 3;
  uint32 avatar_id = 4;
  uint32 dress_id = 5;
  uint32 time = 6;
  GachaType gacha_type = 7;
  uint32 item_id = 8;
  uint32 target_avatar_id = 9;
  uint32 mission_id = 10;
  uint32 armada_level = 11;
  ArmadaCabinType cabin_type = 12;
  uint32 cabin_level = 13;
  ArmadaPosition position = 14;
  uint32 target_uid = 15;
  uint32 popl_cost = 16;
  string old_name = 17;
  string new_name = 18;
  string text_map = 19;
}

// CmdID: 2821
message GetArmadaStageScoreActivityReq {
}

message ArmadaStageScorePlayerScore {
  uint32 uid = 1;
  uint32 score = 2;
  repeated uint32 avatar_list = 3;
}

message ArmadaStageScore {
  uint32 stage_id = 1;
  uint32 score = 2;
}

// CmdID: 2822
message GetArmadaStageScoreActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_ARMADA = 2;
    NOT_OPEN = 3;
  }

  GetArmadaStageScoreActivityRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 has_take_self_score = 3;
  uint32 has_take_armada_score = 4;
  repeated ArmadaStageScore stage_score_list = 5;
  repeated ArmadaStageScorePlayerScore armada_score_list = 6;
}

// CmdID: 2823
message TakeArmadaStageScoreActivityRewardReq {
  ArmadaStageScoreActivityRewardType type = 1;
}

// CmdID: 2824
message TakeArmadaStageScoreActivityRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    HAS_TAKE = 3;
    NOT_FINISH_STAGE = 4;
  }

  TakeArmadaStageScoreActivityRewardRsp.Retcode retcode = 1;
  ArmadaStageScoreActivityRewardType type = 2;
  repeated RewardData reward_list = 3;
  repeated ArmadaStageScorePlayerScore score_list = 4;
}

// CmdID: 2825
message GetArmadaActivityListReq {
}

message ArmadaActivity {
  ArmadaActivityType type = 1;
  uint32 schedule_id = 2;
  uint32 begin_time = 3;
  uint32 end_time = 4;
  uint32 open_day_time = 5;
  uint32 close_day_time = 6;
}

// CmdID: 2826
message GetArmadaActivityListRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetArmadaActivityListRsp.Retcode retcode = 1;
  repeated ArmadaActivity activity_list = 2;
}

message ArmadaReunionMission {
  uint32 mission_id = 1;
  uint32 finish_times = 2;
}

// CmdID: 2834
message GetArmadaReunionActivityReq {
}

message ArmadaReunionPlayer {
  uint32 uid = 1;
  repeated Material material_list = 2;
}

// CmdID: 2835
message GetArmadaReunionActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    NOT_IN_ARMADA = 3;
  }

  GetArmadaReunionActivityRsp.Retcode retcode = 1;
  uint32 cur_schedule_id = 2;
  repeated ArmadaReunionMission mission_list = 3;
  repeated ArmadaReunionPlayer player_list = 4;
  repeated ChatworldDishReward reward_list = 5;
}

// CmdID: 2836
message ArmadaReunionRewardNotify {
  ArmadaReunionMission mission = 1;
  RewardData reward_data = 2;
}

// CmdID: 2837
message TakeArmadaReunionRewardReq {
  uint32 reward_id = 1;
}

// CmdID: 2838
message TakeArmadaReunionRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    NOT_IN_ARMADA = 3;
    HAVE_TAKEN = 4;
    QUIT_SHORT = 5;
    IN_CD_TIME = 6;
  }

  TakeArmadaReunionRewardRsp.Retcode retcode = 1;
  uint32 reward_id = 2;
  RewardData reward_data = 3;
  repeated ChatworldDishReward reward_list = 4;
}

message ArmadaLabel {
  uint32 prefix_id = 1;
  repeated uint32 label_id_list = 2;
  string recruit = 3;
}

// CmdID: 2840
message SetArmadaLabelReq {
  ArmadaLabel label = 1;
}

// CmdID: 2841
message SetArmadaLabelRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_ARMADA = 2;
    NOT_LEADER = 3;
    LABEL_ERROR = 4;
    PREFIX_ERROR = 5;
    FORMAT_ERROR = 6;
    HEXIE_OPEN = 7;
    SENSITIVE_WORDS = 8;
  }

  SetArmadaLabelRsp.Retcode retcode = 1;
  ArmadaLabel label = 2;
}

// CmdID: 2842
message GetArmadaStageScoreRankReq {
  uint32 stage_id = 1;
}

// CmdID: 2843
message GetArmadaStageScoreRankRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    STAGE_ERROR = 3;
  }

  GetArmadaStageScoreRankRsp.Retcode retcode = 1;
  uint32 stage_id = 2;
  RankShowData rank_data = 3;
}

enum CmdTypeArmada {
  CMD_TYPE_ARMADA_NONE = 0;
  CMD_GET_ARMADA_DATA_REQ = 2601;
  CMD_GET_ARMADA_DATA_RSP = 2602;
  CMD_CREATE_ARMADA_REQ = 2603;
  CMD_CREATE_ARMADA_RSP = 2604;
  CMD_SEARCH_ARMADA_REQ = 2605;
  CMD_SEARCH_ARMADA_RSP = 2606;
  CMD_APPLY_JOIN_ARMADA_REQ = 2607;
  CMD_APPLY_JOIN_ARMADA_RSP = 2608;
  CMD_DEAL_ARMADA_APPLY_REQ = 2609;
  CMD_DEAL_ARMADA_APPLY_RSP = 2610;
  CMD_GET_ARMADA_MANAGE_DATA_REQ = 2611;
  CMD_GET_ARMADA_MANAGE_DATA_RSP = 2612;
  CMD_SET_ARMADA_APPLY_REQ = 2613;
  CMD_SET_ARMADA_APPLY_RSP = 2614;
  CMD_SET_ARMADA_BULLETIN_REQ = 2615;
  CMD_SET_ARMADA_BULLETIN_RSP = 2616;
  CMD_GET_RECOMMEND_ARMADA_REQ = 2617;
  CMD_GET_RECOMMEND_ARMADA_RSP = 2618;
  CMD_TRANSFER_ARMADA_LEADER_REQ = 2619;
  CMD_TRANSFER_ARMADA_LEADER_RSP = 2620;
  CMD_SET_ARMADA_POSITION_REQ = 2621;
  CMD_SET_ARMADA_POSITION_RSP = 2622;
  CMD_KICK_ARMADA_MEMBER_REQ = 2623;
  CMD_KICK_ARMADA_MEMBER_RSP = 2624;
  CMD_DISSOLVE_ARMADA_REQ = 2625;
  CMD_DISSOLVE_ARMADA_RSP = 2626;
  CMD_QUIT_ARMADA_REQ = 2627;
  CMD_QUIT_ARMADA_RSP = 2628;
  CMD_CANCEL_APPLY_ARMADA_REQ = 2629;
  CMD_CANCEL_APPLY_ARMADA_RSP = 2630;
  CMD_LEVEL_UP_ARMADA_CABIN_REQ = 2631;
  CMD_LEVEL_UP_ARMADA_CABIN_RSP = 2632;
  CMD_CANCEL_LEVEL_UP_ARMADA_CABIN_REQ = 2633;
  CMD_CANCEL_LEVEL_UP_ARMADA_CABIN_RSP = 2634;
  CMD_MOVE_ARMADA_CABIN_REQ = 2635;
  CMD_MOVE_ARMADA_CABIN_RSP = 2636;
  CMD_GET_CONSIGNED_ORDER_DATA_REQ = 2639;
  CMD_GET_CONSIGNED_ORDER_DATA_RSP = 2640;
  CMD_CHOOSE_CONSIGNED_ORDER_REQ = 2641;
  CMD_CHOOSE_CONSIGNED_ORDER_RSP = 2642;
  CMD_FINISH_CONSIGNED_ORDER_REQ = 2643;
  CMD_FINISH_CONSIGNED_ORDER_RSP = 2644;
  CMD_RESET_CONSIGNED_ORDER_REQ = 2645;
  CMD_RESET_CONSIGNED_ORDER_RSP = 2646;
  CMD_GET_WAREHOUSE_DATA_REQ = 2647;
  CMD_GET_WAREHOUSE_DATA_RSP = 2648;
  CMD_POST_WAREHOUSE_DEMAND_REQ = 2649;
  CMD_POST_WAREHOUSE_DEMAND_RSP = 2650;
  CMD_CANCEL_WAREHOUSE_DEMAND_REQ = 2651;
  CMD_CANCEL_WAREHOUSE_DEMAND_RSP = 2652;
  CMD_DONATE_WAREHOUSE_ITEM_REQ = 2653;
  CMD_DONATE_WAREHOUSE_ITEM_RSP = 2654;
  CMD_GET_WAREHOUSE_ITEM_REQ = 2655;
  CMD_GET_WAREHOUSE_ITEM_RSP = 2656;
  CMD_ENTER_ARMADA_CHATROOM_REQ = 2657;
  CMD_ENTER_ARMADA_CHATROOM_RSP = 2658;
  CMD_SEND_ARMADA_SYSTEM_CHAT_MSG_NOTIFY = 2661;
  CMD_RECV_ARMADA_SYSTEM_CHAT_MSG_NOTIFY = 2662;
  CMD_DONATE_WAREHOSUE_NOTIFY = 2677;
  CMD_ARMADA_BUILD_NOTIFY = 2678;
  CMD_ARMADA_BULLETIN_NOTIFY = 2679;
  CMD_ARMADA_MANAGE_NOTIFY = 2680;
  CMD_ARMADA_PLAYER_NOTIFY = 2681;
  CMD_ARMADA_APPLY_NOTIFY = 2682;
  CMD_CANCEL_DISSOLVE_ARMADA_REQ = 2683;
  CMD_CANCEL_DISSOLVE_ARMADA_RSP = 2684;
  CMD_GET_ARMADA_BUILD_OWNERSHIP_REQ = 2685;
  CMD_GET_ARMADA_BUILD_OWNERSHIP_RSP = 2686;
  CMD_RELEASE_ARMADA_BUILD_OWNERSHIP_REQ = 2687;
  CMD_RELEASE_ARMADA_BUILD_OWNERSHIP_RSP = 2688;
  CMD_ARMADA_SEND_MAIL_REQ = 2689;
  CMD_ARMADA_SEND_MAIL_RSP = 2690;
  CMD_CHANGE_ARMADA_NAME_REQ = 2691;
  CMD_CHANGE_ARMADA_NAME_RSP = 2692;
  CMD_JOIN_ARMADA_ELECTION_REQ = 2693;
  CMD_JOIN_ARMADA_ELECTION_RSP = 2694;
  CMD_ARMADA_LOGOUT_NOTIFY = 2731;
  CMD_QUICK_APPLY_JOIN_ARMADA_REQ = 2732;
  CMD_QUICK_APPLY_JOIN_ARMADA_RSP = 2733;
  CMD_OPEN_ARMADA_STAGE_REQ = 2799;
  CMD_OPEN_ARMADA_STAGE_RSP = 2800;
  CMD_TAKE_ARMADA_ACHIEVEMENT_REQ = 2801;
  CMD_TAKE_ARMADA_ACHIEVEMENT_RSP = 2802;
  CMD_GET_RECOMMEND_ARMADA_MEMBER_LIST_REQ = 2803;
  CMD_GET_RECOMMEND_ARMADA_MEMBER_LIST_RSP = 2804;
  CMD_JOIN_QUIT_ARMADA_NOTIFY = 2805;
  CMD_ARMADA_PLAYER_CONTRIBUTION_SYNC_NOTIFY = 2806;
  CMD_GET_ARMADA_STAGE_SCORE_ACTIVITY_REQ = 2821;
  CMD_GET_ARMADA_STAGE_SCORE_ACTIVITY_RSP = 2822;
  CMD_TAKE_ARMADA_STAGE_SCORE_ACTIVITY_REWARD_REQ = 2823;
  CMD_TAKE_ARMADA_STAGE_SCORE_ACTIVITY_REWARD_RSP = 2824;
  CMD_GET_ARMADA_ACTIVITY_LIST_REQ = 2825;
  CMD_GET_ARMADA_ACTIVITY_LIST_RSP = 2826;
  CMD_GET_ARMADA_REUNION_ACTIVITY_REQ = 2834;
  CMD_GET_ARMADA_REUNION_ACTIVITY_RSP = 2835;
  CMD_ARMADA_REUNION_REWARD_NOTIFY = 2836;
  CMD_TAKE_ARMADA_REUNION_REWARD_REQ = 2837;
  CMD_TAKE_ARMADA_REUNION_REWARD_RSP = 2838;
  CMD_SET_ARMADA_LABEL_REQ = 2840;
  CMD_SET_ARMADA_LABEL_RSP = 2841;
  CMD_GET_ARMADA_STAGE_SCORE_RANK_REQ = 2842;
  CMD_GET_ARMADA_STAGE_SCORE_RANK_RSP = 2843;
}

enum ArmadaPlayerStatus {
  ARMADA_PLAYER_STATUS_NONE = 0;
  ARMADA_PLAYER_NOT_JOIN = 1;
  ARMADA_PLAYER_APPLY = 2;
  ARMADA_PLAYER_CHOOSE_CONTACT = 3;
  ARMADA_PLAYER_JOINED = 4;
}

enum ArmadaPosition {
  ARMADA_POSITION_NONE = 0;
  ARMADA_POSITION_LEADER = 1;
  ARMADA_POSITION_VICELEADER = 2;
  ARMADA_POSITION_MEMBER = 3;
}

enum ArmadaCabinType {
  ARMADA_CABIN_NONE = 0;
  ARMADA_CABIN_MAIN = 1;
  ARMADA_CABIN_CONTACT = 2;
  ARMADA_CABIN_HANGAR = 3;
  ARMADA_CABIN_WORKSHOP = 4;
  ARMADA_CABIN_EXCHEQUER = 5;
  ARMADA_CABIN_BOSS = 6;
}

enum WareHouseStatus {
  WAREHOUSE_STATUS_NONE = 0;
  WAREHOUSE_STATUS_NORMAL = 1;
  WAREHOUSE_STATUS_DEMANDING = 2;
  WAREHOUSE_STATUS_FINISH = 3;
  WAREHOUSE_STATUS_CD = 4;
}

enum ArmadaSystemChatMsgType {
  ARMADA_SYSTEM_CHAT_MSG_TYPE_NONE = 0;
  ARMADA_CHAT_MSG_GACHA = 1;
  ARMADA_CHAT_MSG_AVATAR_STAR_UP = 2;
  ARMADA_CHAT_MSG_AVATAR_UNLOCK = 3;
  ARMADA_CHAT_MSG_JOIN_ARMADA = 4;
  ARMADA_CHAT_MSG_MISSION_FINISH = 5;
  ARMADA_CHAT_MSG_LEVEL_UP = 6;
  ARMADA_CHAT_MSG_CABIN_BUILD_FINISH = 7;
  ARMADA_CHAT_MSG_CABIN_LEVEL_UP = 8;
  ARMADA_CHAT_MSG_POSITION = 9;
  ARMADA_CHAT_MSG_KICK = 10;
  ARMADA_CHAT_MSG_KEEPUP = 11;
  ARMADA_CHAT_MSG_CANCEL_DISSOLVE = 12;
  ARMADA_CHAT_MSG_CHANGE_NAME = 13;
  ARMADA_CHAT_MSG_TEXT_MAP = 14;
}

enum ArmadaBuildNotifyType {
  ARMADA_BUILD_NOTIFY_TYPE_NONE = 0;
  ARMADA_BUILD_NOTIFY_START = 1;
  ARMADA_BUILD_NOTIFY_CANCEL = 2;
  ARMADA_BUILD_NOTIFY_FINISH = 3;
  ARMADA_BUILD_NOTIFY_MOVE = 4;
}

enum ArmadaManageNotifyType {
  ARMADA_MANAGE_NOTIFY_TYPE_NONE = 0;
  ARMADA_MANAGE_NOTIFY_LEADER = 1;
  ARMADA_MANAGE_NOTIFY_VICE_LEADER_SET = 2;
  ARMADA_MANAGE_NOTIFY_VICE_LEADER_CANCEL = 3;
}

enum ArmadaPlayerNotifyType {
  ARMADA_PLAYER_NOTIFY_TYPE_NONE = 0;
  ARMADA_PLAYER_NOTIFY_JOIN = 1;
  ARMADA_PLAYER_NOTIFY_QUIT = 2;
  ARMADA_PLAYER_NOTIFY_KICK = 3;
  ARMADA_PLAYER_NOTIFY_DISSOLVE = 4;
  ARMADA_PLAYER_NOTIFY_CHANGE_NAME = 5;
}

enum ArmadaApplyNotifyType {
  ARMADA_APPLY_NOTIFY_TYPE_NONE = 0;
  ARMADA_APPLY_NOTIFY_NEW = 1;
  ARMADA_APPLY_NOTIFY_APPROVE = 2;
  ARMADA_APPLY_NOTIFY_REJECT = 3;
}

enum ArmadaStageScoreActivityRewardType {
  ARMADA_STAGE_SCORE_ACTIVITY_REWARD_TYPE_NONE = 0;
  ARMADA_STAGE_SCORE_ACTIVITY_REWARD_TYPE_SELF = 1;
  ARMADA_STAGE_SCORE_ACTIVITY_REWARD_TYPE_ARMADA = 2;
}

enum ArmadaActivityType {
  ARMADA_ACTIVITY_TYPE_NONE = 0;
  ARMADA_ACTIVITY_ARMADA_BOSS = 1;
  ARMADA_ACTIVITY_MATRIX = 2;
  ARMADA_ACTIVITY_QUESTION = 3;
  ARMADA_ACTIVITY_TRADING_CARD = 4;
  ARMADA_ACTIVITY_ARMADA_STAGE_SCORE_ACTIVITY = 5;
  ARMADA_ACTIVITY_REUNION = 6;
}

enum ArmadaLabelType {
  ARMADA_LABEL_TYPE_NONE = 0;
  ARMADA_LABEL_PREFIX = 1;
  ARMADA_LABEL = 2;
}

// CmdID: 3000
message GetAvatarMissionActivityReq {
}

// CmdID: 3001
message GetAvatarMissionActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  GetAvatarMissionActivityRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 avatar_sample_id = 3;
  uint32 choose_avatar_time = 4;
  uint32 reset_choose_times = 5;
  uint32 last_refresh_time = 6;
  uint32 daily_contract_point = 7;
  bool is_daily_reward_taken = 8;
  uint32 activity_finish_days = 9;
  repeated uint32 taken_reward_days_list = 10;
  uint32 daily_reward_num = 11;
}

// CmdID: 3002
message ChooseAvatarMissionAvatarReq {
  uint32 sample_id = 1;
}

// CmdID: 3003
message ChooseAvatarMissionAvatarRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    HAVE_CHOOSEN = 3;
  }

  ChooseAvatarMissionAvatarRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 sample_id = 3;
}

// CmdID: 3004
message TakeAvatarMissionDailyRewardReq {
}

// CmdID: 3005
message TakeAvatarMissionDailyRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    HAVE_TAKEN = 3;
    LACK_CONTRACT_POINT = 4;
  }

  TakeAvatarMissionDailyRewardRsp.Retcode retcode = 1;
  RewardData reward = 2;
}

// CmdID: 3006
message TakeAvatarMissionPhaseRewardReq {
  uint32 days = 1;
}

// CmdID: 3007
message TakeAvatarMissionPhaseRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    HAVE_TAKEN = 3;
    LACK_DAYS = 4;
    NO_REWARD = 5;
  }

  TakeAvatarMissionPhaseRewardRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 days = 3;
  RewardData reward = 4;
}

// CmdID: 3008
message ResetAvatarMissionAvatarReq {
}

// CmdID: 3009
message ResetAvatarMissionAvatarRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    CAN_NOT_RESET = 3;
    NOT_CHOOSE = 4;
  }

  ResetAvatarMissionAvatarRsp.Retcode retcode = 1;
}

enum CmdTypeAvatarmission {
  CMD_TYPE_AVATARMISSION_NONE = 0;
  CMD_GET_AVATAR_MISSION_ACTIVITY_REQ = 3000;
  CMD_GET_AVATAR_MISSION_ACTIVITY_RSP = 3001;
  CMD_CHOOSE_AVATAR_MISSION_AVATAR_REQ = 3002;
  CMD_CHOOSE_AVATAR_MISSION_AVATAR_RSP = 3003;
  CMD_TAKE_AVATAR_MISSION_DAILY_REWARD_REQ = 3004;
  CMD_TAKE_AVATAR_MISSION_DAILY_REWARD_RSP = 3005;
  CMD_TAKE_AVATAR_MISSION_PHASE_REWARD_REQ = 3006;
  CMD_TAKE_AVATAR_MISSION_PHASE_REWARD_RSP = 3007;
  CMD_RESET_AVATAR_MISSION_AVATAR_REQ = 3008;
  CMD_RESET_AVATAR_MISSION_AVATAR_RSP = 3009;
}

// CmdID: 3750
message GetBattlePassReq {
}

// CmdID: 3751
message GetBattlePassRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  GetBattlePassRsp.Retcode retcode = 1;
  uint32 schedule_id = 2;
  uint32 level = 3;
  uint32 exp = 4;
  uint32 has_take_reward_level = 5;
  repeated uint32 has_got_ticket_list = 6;
  uint32 phase_max_exp = 7;
  uint32 phase_exp = 8;
  bool is_take_phase_free_exp = 9;
  uint32 next_schedule_inherit_exp = 12;
  uint32 cur_schedule_inherit_exp = 13;
}

// CmdID: 3752
message BuyBattlePassTicketReq {
  BattlePassTicketType type = 1;
}

// CmdID: 3753
message BuyBattlePassTicketRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    TYPE_ERROR = 3;
    HAS_GOT = 4;
    LACK_MCOIN = 5;
    FEATURE_CLOSED = 6;
    UPGRADE_FEATURE_CLOSED = 7;
  }

  BuyBattlePassTicketRsp.Retcode retcode = 1;
  repeated RewardData advanced_reward_list = 2;
  repeated RewardData luxury_reward_list = 3;
  repeated uint32 prev_has_got_ticket_list = 4;
}

// CmdID: 3754
message TakeBattlePassLevelRewardReq {
}

// CmdID: 3755
message TakeBattlePassLevelRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    HAS_TAKE = 3;
    FEATURE_CLOSED = 4;
  }

  TakeBattlePassLevelRewardRsp.Retcode retcode = 1;
  repeated RewardData basic_reward_list = 2;
  repeated RewardData advanced_reward_list = 3;
  repeated RewardData luxury_reward_list = 4;
}

// CmdID: 3756
message BuyBattlePassLevelReq {
  uint32 target_level = 1;
  uint32 hcoin_cost = 2;
  uint32 mcoin_cost = 3;
}

// CmdID: 3757
message BuyBattlePassLevelRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    HCOIN_LACK = 3;
    LEVEL_ERROR = 4;
    HCOIN_ERROR = 5;
    FEATURE_CLOSED = 6;
    MCOIN_LACK = 7;
    MCOIN_ERROR = 8;
  }

  BuyBattlePassLevelRsp.Retcode retcode = 1;
}

// CmdID: 3758
message TakeBattlePassPhaseExpReq {
}

// CmdID: 3759
message TakeBattlePassPhaseExpRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    HAS_TAKE = 3;
  }

  TakeBattlePassPhaseExpRsp.Retcode retcode = 1;
  uint32 add_exp = 2;
}

// CmdID: 3767
message GetBattlePassMissionPanelReq {
  uint32 panel_id = 1;
}

// CmdID: 3768
message GetBattlePassMissionPanelRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  GetBattlePassMissionPanelRsp.Retcode retcode = 1;
  repeated PanelMissionData mission_list = 2;
}

enum CmdTypeBattlepass {
  CMD_TYPE_BATTLEPASS_NONE = 0;
  CMD_GET_BATTLE_PASS_REQ = 3750;
  CMD_GET_BATTLE_PASS_RSP = 3751;
  CMD_BUY_BATTLE_PASS_TICKET_REQ = 3752;
  CMD_BUY_BATTLE_PASS_TICKET_RSP = 3753;
  CMD_TAKE_BATTLE_PASS_LEVEL_REWARD_REQ = 3754;
  CMD_TAKE_BATTLE_PASS_LEVEL_REWARD_RSP = 3755;
  CMD_BUY_BATTLE_PASS_LEVEL_REQ = 3756;
  CMD_BUY_BATTLE_PASS_LEVEL_RSP = 3757;
  CMD_TAKE_BATTLE_PASS_PHASE_EXP_REQ = 3758;
  CMD_TAKE_BATTLE_PASS_PHASE_EXP_RSP = 3759;
  CMD_GET_BATTLE_PASS_MISSION_PANEL_REQ = 3767;
  CMD_GET_BATTLE_PASS_MISSION_PANEL_RSP = 3768;
}

enum BattlePassTicketType {
  BATTLE_PASS_TICKET_NONE = 0;
  BATTLE_PASS_TICKET_NORMAL = 1;
  BATTLE_PASS_TICKET_ADVANCED = 2;
  BATTLE_PASS_TICKET_LUXURY = 3;
}

enum BuyBattlePassType {
  BUY_BATTLE_PASS_TYPE_NONE = 0;
  BUY_BATTLE_PASS_USE_HCOIN = 1;
  BUY_BATTLE_PASS_USE_MCOIN = 2;
}

// CmdID: 7950
message ChapterArkGetDataReq {
  uint32 chapter_id = 1;
}

message ChapterArkRoleInfo {
  uint32 id = 1;
  uint32 level = 2;
}

message ChapterArkSkillInfo {
  uint32 id = 1;
  uint32 level = 2;
}

message ChapterArkSupSkillInfo {
  uint32 id = 1;
  uint32 level = 2;
}

message ChapterArkTowerChallengeInfo {
  uint32 tower_id = 1;
  uint32 cur_floor_id = 2;
  uint32 avatar_id = 3;
  uint32 avatar_hp = 4;
  repeated uint32 buff_list = 5;
  uint32 total_score = 6;
  uint32 total_cost_time = 7;
}

message ChapterArkTowerSettledInfo {
  uint32 tower_id = 1;
  uint32 max_floor = 2;
  uint32 max_score = 3;
}

message ChapterArk {
  uint32 chapter_id = 1;
  repeated ChapterArkRoleInfo role_list = 2;
  repeated uint32 avatar_list = 3;
  repeated ChapterArkSkillInfo skill_list = 4;
  repeated uint32 daily_stage_list = 5;
  repeated uint32 cur_day_finished_daily_stage_iist = 6;
  uint32 reward_line_taken_progress = 7;
  bool is_finish_opening = 8;
  repeated uint32 branch_stage_chosen_site_list = 9;
  repeated uint32 passed_daily_stage_list = 10;
  uint32 cur_phase_id = 11;
  repeated uint32 mid_term_daily_stage_list = 12;
  uint32 mid_term_daily_drop_material_num = 13;
  repeated ChapterArkSupSkillInfo sup_skill_list = 14;
  repeated ChapterArkTowerChallengeInfo tower_challenge_info_list = 15;
  repeated ChapterArkTowerSettledInfo tower_settled_info_list = 16;
}

// CmdID: 7951
message ChapterArkGetDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    FEATURE_CLOSED = 2;
  }

  ChapterArkGetDataRsp.Retcode retcode = 1;
  ChapterArk chapter_ark = 2;
}

// CmdID: 7952
message ChapterArkRoleLevelUpReq {
  uint32 chapter_id = 1;
  uint32 role_id = 2;
  uint32 target_level = 3;
}

// CmdID: 7953
message ChapterArkRoleLevelUpRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ROLE_ERROR = 2;
    NO_UNLOCK_AVATAR = 3;
    TARGET_LEVEL_ERROR = 4;
    LEVEL_LIMIT = 5;
    MATERIAL_LACK = 6;
    FEATURE_CLOSED = 7;
  }

  ChapterArkRoleLevelUpRsp.Retcode retcode = 1;
  uint32 chapter_id = 2;
  uint32 role_id = 3;
}

// CmdID: 7954
message ChapterArkSkillUnlockReq {
  uint32 chapter_id = 1;
  uint32 skill_id = 2;
}

// CmdID: 7955
message ChapterArkSkillUnlockRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    SKILL_ERROR = 2;
    NOT_MEET_CONDITION = 3;
    RELATED_AVATAR_LOCKED = 4;
    FEATURE_CLOSED = 5;
    MATERIAL_LACK = 6;
  }

  ChapterArkSkillUnlockRsp.Retcode retcode = 1;
  uint32 chapter_id = 2;
  uint32 skill_id = 3;
}

// CmdID: 7956
message ChapterArkSkillLevelUpReq {
  uint32 chapter_id = 1;
  uint32 skill_id = 2;
  uint32 target_level = 3;
}

// CmdID: 7957
message ChapterArkSkillLevelUpRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    SKILL_ERROR = 2;
    IS_LOCK = 3;
    TARGET_LEVEL_ERROR = 4;
    MATERIAL_LACK = 5;
    FEATURE_CLOSED = 6;
  }

  ChapterArkSkillLevelUpRsp.Retcode retcode = 1;
  uint32 chapter_id = 2;
  uint32 skill_id = 3;
}

// CmdID: 7958
message ChapterArkTakeRewardLineRewardReq {
  uint32 chapter_id = 1;
}

// CmdID: 7959
message ChapterArkTakeRewardLineRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NO_REWARD = 2;
    FEATURE_CLOSED = 3;
  }

  ChapterArkTakeRewardLineRewardRsp.Retcode retcode = 1;
  uint32 chapter_id = 2;
  RewardData reward_data = 3;
  uint32 reward_line_taken_progress = 4;
}

// CmdID: 7960
message ChapterArkGetRankReq {
  uint32 chapter_id = 1;
  uint32 stage_id = 2;
}

// CmdID: 7961
message ChapterArkGetRankRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NO_RANK = 2;
    STAGE_ERROR = 3;
    FEATURE_CLOSED = 4;
  }

  ChapterArkGetRankRsp.Retcode retcode = 1;
  uint32 chapter_id = 2;
  uint32 stage_id = 3;
  RankShowData rank_data = 4;
  uint32 rank_percent = 5;
  uint32 rank = 6;
}

// CmdID: 7962
message ChapterArkFinishOpeningReq {
  uint32 chapter_id = 1;
}

// CmdID: 7963
message ChapterArkFinishOpeningRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    FEATURE_CLOSED = 2;
  }

  ChapterArkFinishOpeningRsp.Retcode retcode = 1;
  uint32 chapter_id = 2;
}

// CmdID: 7964
message ChapterArkSyncAutoUnlockNotify {
  uint32 chapter_id = 1;
  repeated uint32 avatar_id_list = 2;
  repeated uint32 skill_id_list = 3;
}

// CmdID: 7965
message ChapterArkSupSkillLevelUpReq {
  uint32 chapter_id = 1;
  uint32 sup_skill_id = 2;
  uint32 target_level = 3;
}

// CmdID: 7966
message ChapterArkSupSkillLevelUpRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    FEATURE_CLOSED = 2;
    SUP_SKILL_ERROR = 3;
    TARGET_LEVEL_ERROR = 4;
    MATERIAL_LACK = 5;
    RELATED_AVATAR_LOCKED = 6;
    SUP_SKILL_LOCKED = 7;
    AVATAR_LEVEL_LACKED = 8;
  }

  ChapterArkSupSkillLevelUpRsp.Retcode retcode = 1;
  uint32 chapter_id = 2;
  uint32 sup_skill_id = 3;
}

// CmdID: 7967
message ChapterArkSettleTowerReq {
  uint32 tower_id = 1;
}

// CmdID: 7968
message ChapterArkSettleTowerRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    INVALID_TOWER = 2;
    FEATURE_CLOSED = 3;
  }

  ChapterArkSettleTowerRsp.Retcode retcode = 1;
  uint32 tower_id = 2;
  ChapterArkTowerChallengeInfo tower_challenge_info = 3;
  RewardData reward_data = 4;
  bool is_abandon = 5;
}

// CmdID: 7969
message ChapterArkReportTowerFloorReq {
  uint32 tower_id = 1;
  uint32 floor_id = 2;
  uint32 avatar_hp = 3;
  repeated uint32 select_buff_list = 4;
  uint32 score = 5;
  uint32 cost_time = 6;
}

// CmdID: 7970
message ChapterArkReportTowerFloorRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    INVALID_TOWER = 2;
    NOT_BEGIN = 3;
    FLOOR_ERROR = 4;
    FEATURE_CLOSED = 5;
    INVALID_BUFF = 6;
  }

  ChapterArkReportTowerFloorRsp.Retcode retcode = 1;
  uint32 tower_id = 2;
  uint32 floor_id = 3;
}

// CmdID: 7971
message ArkPlusActivityGetDataReq {
}

message ArkPlusBuffInfo {
  uint32 buff_id = 1;
  uint32 num = 2;
}

message ArkPlusChallengeInfo {
  uint32 stage_id = 1;
  uint32 cur_room_id = 2;
  uint32 room_event_id = 3;
  uint32 last_room_id = 4;
  uint32 settled_progress = 5;
  repeated uint32 avatar_id_list = 6;
  repeated uint32 avatar_trial_list = 7;
  repeated ArkPlusBuffInfo buff_list = 8;
  string transaction_str = 9;
  uint32 total_time = 10;
  int32 temperature = 11;
  uint32 ice_coffin_add_lift_material_num = 12;
}

message ArkPlusSettledChallengeInfo {
  uint32 stage_id = 1;
  uint32 max_lift_score = 2;
}

message ArkPlusActivity {
  uint32 schedule_id = 1;
  ArkPlusChallengeInfo cur_challenge_info = 2;
  repeated ArkPlusSettledChallengeInfo settled_challenge_info_list = 3;
}

// CmdID: 7972
message ArkPlusActivityGetDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  ArkPlusActivityGetDataRsp.Retcode retcode = 1;
  ArkPlusActivity ark_plus_activity = 2;
}

// CmdID: 7973
message ArkPlusActivityFinishRoomReq {
  uint32 stage_id = 1;
  uint32 cur_room_id = 2;
  uint32 next_room_id = 3;
  uint32 lift_material_num = 4;
  uint32 coin_material_num = 5;
  uint32 room_time = 6;
  uint32 battle_time = 7;
  int32 temperature = 8;
}

// CmdID: 7974
message ArkPlusActivityFinishRoomRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    STAGE_NOT_BEGIN = 3;
    CUR_ROOM_MISMATCH = 4;
    INVALID_NEXT_ROOM = 5;
    INVALID_MATERIAL = 6;
    AVATAR_ERROR = 7;
  }

  ArkPlusActivityFinishRoomRsp.Retcode retcode = 1;
  uint32 stage_id = 2;
  uint32 cur_room_id = 3;
  uint32 next_room_id = 4;
  uint32 next_room_event = 5;
  uint32 get_buff_id = 6;
  uint32 coin_material_num = 7;
  uint32 settled_progress = 8;
  uint32 lift_material_num = 9;
}

// CmdID: 7975
message ArkPlusActivityResetChallengeReq {
  uint32 stage_id = 1;
}

// CmdID: 7976
message ArkPlusActivityResetChallengeRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    NOT_IN_CHALLENGE = 3;
  }

  ArkPlusActivityResetChallengeRsp.Retcode retcode = 1;
  uint32 stage_id = 2;
  ArkPlusChallengeInfo challenge_info = 3;
}

// CmdID: 7977
message ArkPlusActivityGetRankReq {
  uint32 stage_id = 1;
}

// CmdID: 7978
message ArkPlusActivityGetRankRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    NO_RANK = 3;
  }

  ArkPlusActivityGetRankRsp.Retcode retcode = 1;
  uint32 stage_id = 2;
  uint32 schedule_id = 3;
  RankShowData rank_data = 4;
  uint32 rank_percent = 5;
  uint32 rank = 6;
}

// CmdID: 7979
message ArkPlusActivityAddLiftMaterialReq {
  uint32 stage_id = 1;
  uint32 room_id = 2;
  uint32 material_num = 3;
  int32 ice_coffin_add_material_num = 4;
}

// CmdID: 7980
message ArkPlusActivityAddLiftMaterialRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    STAGE_NOT_BEGIN = 3;
    ROOM_MISMATCH = 4;
    MATERIAL_NUM_MISMATCH = 5;
    INVALID_ADD_MATERIAL_NUM = 6;
  }

  ArkPlusActivityAddLiftMaterialRsp.Retcode retcode = 1;
  uint32 material_num = 2;
  uint32 ice_coffin_total_add_material_num = 3;
}

enum CmdTypeChapterark {
  CMD_TYPE_CHAPTERARK_NONE = 0;
  CMD_CHAPTER_ARK_GET_DATA_REQ = 7950;
  CMD_CHAPTER_ARK_GET_DATA_RSP = 7951;
  CMD_CHAPTER_ARK_ROLE_LEVEL_UP_REQ = 7952;
  CMD_CHAPTER_ARK_ROLE_LEVEL_UP_RSP = 7953;
  CMD_CHAPTER_ARK_SKILL_UNLOCK_REQ = 7954;
  CMD_CHAPTER_ARK_SKILL_UNLOCK_RSP = 7955;
  CMD_CHAPTER_ARK_SKILL_LEVEL_UP_REQ = 7956;
  CMD_CHAPTER_ARK_SKILL_LEVEL_UP_RSP = 7957;
  CMD_CHAPTER_ARK_TAKE_REWARD_LINE_REWARD_REQ = 7958;
  CMD_CHAPTER_ARK_TAKE_REWARD_LINE_REWARD_RSP = 7959;
  CMD_CHAPTER_ARK_GET_RANK_REQ = 7960;
  CMD_CHAPTER_ARK_GET_RANK_RSP = 7961;
  CMD_CHAPTER_ARK_FINISH_OPENING_REQ = 7962;
  CMD_CHAPTER_ARK_FINISH_OPENING_RSP = 7963;
  CMD_CHAPTER_ARK_SYNC_AUTO_UNLOCK_NOTIFY = 7964;
  CMD_CHAPTER_ARK_SUP_SKILL_LEVEL_UP_REQ = 7965;
  CMD_CHAPTER_ARK_SUP_SKILL_LEVEL_UP_RSP = 7966;
  CMD_CHAPTER_ARK_SETTLE_TOWER_REQ = 7967;
  CMD_CHAPTER_ARK_SETTLE_TOWER_RSP = 7968;
  CMD_CHAPTER_ARK_REPORT_TOWER_FLOOR_REQ = 7969;
  CMD_CHAPTER_ARK_REPORT_TOWER_FLOOR_RSP = 7970;
  CMD_ARK_PLUS_ACTIVITY_GET_DATA_REQ = 7971;
  CMD_ARK_PLUS_ACTIVITY_GET_DATA_RSP = 7972;
  CMD_ARK_PLUS_ACTIVITY_FINISH_ROOM_REQ = 7973;
  CMD_ARK_PLUS_ACTIVITY_FINISH_ROOM_RSP = 7974;
  CMD_ARK_PLUS_ACTIVITY_RESET_CHALLENGE_REQ = 7975;
  CMD_ARK_PLUS_ACTIVITY_RESET_CHALLENGE_RSP = 7976;
  CMD_ARK_PLUS_ACTIVITY_GET_RANK_REQ = 7977;
  CMD_ARK_PLUS_ACTIVITY_GET_RANK_RSP = 7978;
  CMD_ARK_PLUS_ACTIVITY_ADD_LIFT_MATERIAL_REQ = 7979;
  CMD_ARK_PLUS_ACTIVITY_ADD_LIFT_MATERIAL_RSP = 7980;
}

enum ChapterArkStageType {
  CHAPTER_ARK_STAGE_TYPE_NONE = 0;
  CHAPTER_ARK_STAGE_MAIN = 1;
  CHAPTER_ARK_STAGE_BRANCH = 2;
  CHAPTER_ARK_STAGE_DAILY = 3;
  CHAPTER_ARK_STAGE_LINEAR = 4;
  CHAPTER_ARK_STAGE_CHALLENGE = 5;
  CHAPTER_ARK_STAGE_TUTORIAL = 6;
  CHAPTER_ARK_STAGE_MID_TERM_DAILY = 7;
  CHAPTER_ARK_STAGE_TOWER = 8;
  CHAPTER_ARK_STAGE_SUPPORT_CHALLENGE = 9;
}

enum ChapterArkStageAvatarChoiceType {
  CHAPTER_ARK_STAGE_AVATAR_CHOICE_NO_CHARACTER = 0;
  CHAPTER_ARK_STAGE_AVATAR_CHOICE_TRIAL = 1;
  CHAPTER_ARK_STAGE_AVATAR_CHOICE_VIRTUAL = 2;
  CHAPTER_ARK_STAGE_AVATAR_CHOICE_NORMAL = 3;
}

enum ChapterArkSkillType {
  CHAPTER_ARK_SKILL_TYPE_NONE = 0;
  CHAPTER_ARK_SKILL_MAIN = 1;
  CHAPTER_ARK_SKILL_SUB = 2;
  CHAPTER_ARK_SKILL_ASSIST = 3;
  CHAPTER_ARK_SKILL_PROPERTY = 4;
}

enum ChapterArkAttribute {
  CHAPTER_ARK_ATTRIBUTE_NONE = 0;
  CHAPTER_ARK_ATTRIBUTE_PHYSICS = 1;
  CHAPTER_ARK_ATTRIBUTE_FIRE = 2;
  CHAPTER_ARK_ATTRIBUTE_LIGHTNING = 3;
}

enum ChapterArkSupSkillType {
  CHAPTER_ARK_SUP_SKILL_TYPE_NONE = 0;
  CHAPTER_ARK_SUP_SKILL_MAIN = 1;
  CHAPTER_ARK_SUP_SKILL_GENRE = 2;
  CHAPTER_ARK_SUP_SKILL_GENRE_SUB = 3;
  CHAPTER_ARK_SUP_SKILL_AWAKEN = 4;
}

// CmdID: 7650
message ChapterBwWorldGetDataReq {
  uint32 chapter_id = 1;
}

message ChapterBwWorldRune {
  uint32 unique_id = 1;
  uint32 rune_id = 2;
  uint32 level = 3;
  uint32 exp = 4;
  repeated uint32 affix_id_list = 5;
}

message ChapterBwWorldTowerStage {
  uint32 stage_id = 1;
  uint32 max_score = 2;
  uint32 save_point_floor = 3;
}

message ChapterBwWorld {
  uint32 chapter_id = 1;
  repeated uint32 equip_rune_unique_id_list = 2;
  repeated ChapterBwWorldRune rune_list = 3;
  uint32 reward_line_taken_progress = 4;
  repeated ChapterBwWorldTowerStage tower_stage_list = 5;
}

// CmdID: 7651
message ChapterBwWorldGetDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    FEATURE_CLOSED = 2;
  }

  ChapterBwWorldGetDataRsp.Retcode retcode = 1;
  ChapterBwWorld chapter_bw_world = 2;
}

// CmdID: 7652
message ChapterBwWorldUpdateEquipRuneReq {
  uint32 chapter_id = 1;
  repeated uint32 rune_unique_id_list = 2;
}

// CmdID: 7653
message ChapterBwWorldUpdateEquipRuneRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    RUNE_ERROR = 2;
    FEATURE_CLOSED = 3;
  }

  ChapterBwWorldUpdateEquipRuneRsp.Retcode retcode = 1;
  uint32 chapter_id = 2;
  repeated uint32 rune_unique_id_list = 3;
}

// CmdID: 7654
message ChapterBwWorldRuneLevelUpReq {
  uint32 chapter_id = 1;
  uint32 main_rune_unique_id = 2;
  uint32 target_level = 3;
  uint32 target_exp = 4;
  repeated Material exp_material_list = 5;
  repeated uint32 assist_rune_unique_id_list = 6;
}

// CmdID: 7655
message ChapterBwWorldRuneLevelUpRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    TARGET_LEVEL_ERROR = 2;
    RUNE_ERROR = 3;
    MATERIAL_LACK = 4;
    GEN_AFFIX_ERROR = 5;
    FEATURE_CLOSED = 6;
  }

  ChapterBwWorldRuneLevelUpRsp.Retcode retcode = 1;
  uint32 chapter_id = 2;
  ChapterBwWorldRune main_rune = 3;
  repeated Material return_material_list = 4;
  ChapterBwWorldRune old_main_rune = 5;
}

// CmdID: 7656
message ChapterBwWorldRuneSynthesisReq {
  uint32 chapter_id = 1;
  uint32 main_rune_unique_id = 2;
  uint32 assist_rune_unique_id = 3;
  uint32 main_rune_affix_index = 4;
  uint32 assist_rune_affix_index = 5;
}

// CmdID: 7657
message ChapterBwWorldRuneSynthesisRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    RUNE_ERROR = 2;
    AFFIX_ERROR = 3;
    FEATURE_CLOSED = 4;
  }

  ChapterBwWorldRuneSynthesisRsp.Retcode retcode = 1;
  uint32 chapter_id = 2;
  ChapterBwWorldRune main_rune = 3;
  repeated Material return_material_list = 4;
}

// CmdID: 7658
message ChapterBwWorldGetRankReq {
  uint32 chapter_id = 1;
  uint32 stage_id = 2;
}

// CmdID: 7659
message ChapterBwWorldGetRankRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NO_RANK = 2;
    FEATURE_CLOSED = 3;
  }

  ChapterBwWorldGetRankRsp.Retcode retcode = 1;
  uint32 chapter_id = 2;
  uint32 stage_id = 3;
  RankShowData rank_data = 4;
  uint32 rank_percent = 5;
  uint32 rank = 6;
}

// CmdID: 7660
message ChapterBwWorldTakeRewardLineRewardReq {
  uint32 chapter_id = 1;
}

// CmdID: 7661
message ChapterBwWorldTakeRewardLineRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NO_REWARD = 2;
    FEATURE_CLOSED = 3;
  }

  ChapterBwWorldTakeRewardLineRewardRsp.Retcode retcode = 1;
  uint32 chapter_id = 2;
  RewardData reward_data = 3;
  uint32 reward_line_taken_progress = 4;
}

// CmdID: 7662
message ChapterBwWorldSyncRuneNotify {
  uint32 chapter_id = 1;
  uint32 stage_id = 2;
  repeated ChapterBwWorldRune new_rune_list = 3;
}

// CmdID: 7663
message ChapterBwWorldTowerStageReportFloorReq {
  uint32 chapter_id = 1;
  uint32 stage_id = 2;
  uint32 floor = 3;
  uint32 score = 4;
  uint32 cost_time = 5;
  StageEndStatus end_status = 6;
}

// CmdID: 7664
message ChapterBwWorldTowerStageReportFloorRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    SCORE_ERROR = 2;
    FEATURE_CLOSED = 3;
    FLOOR_ERROR = 4;
    STAGE_ERROR = 5;
  }

  ChapterBwWorldTowerStageReportFloorRsp.Retcode retcode = 1;
  uint32 chapter_id = 2;
  uint32 stage_id = 3;
  uint32 floor = 4;
  uint32 score = 5;
  uint32 cost_time = 6;
  StageEndStatus end_status = 7;
}

// CmdID: 7665
message ChapterBwWorldRefreshTicketReq {
  uint32 chapter_id = 1;
}

// CmdID: 7666
message ChapterBwWorldRefreshTicketRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    FEATURE_CLOSED = 2;
    HAS_TAKE = 3;
  }

  ChapterBwWorldRefreshTicketRsp.Retcode retcode = 1;
  uint32 chapter_id = 2;
  RewardData add_ticket = 3;
}

enum CmdTypeChapterbwworld {
  CMD_TYPE_CHAPTERBWWORLD_NONE = 0;
  CMD_CHAPTER_BW_WORLD_GET_DATA_REQ = 7650;
  CMD_CHAPTER_BW_WORLD_GET_DATA_RSP = 7651;
  CMD_CHAPTER_BW_WORLD_UPDATE_EQUIP_RUNE_REQ = 7652;
  CMD_CHAPTER_BW_WORLD_UPDATE_EQUIP_RUNE_RSP = 7653;
  CMD_CHAPTER_BW_WORLD_RUNE_LEVEL_UP_REQ = 7654;
  CMD_CHAPTER_BW_WORLD_RUNE_LEVEL_UP_RSP = 7655;
  CMD_CHAPTER_BW_WORLD_RUNE_SYNTHESIS_REQ = 7656;
  CMD_CHAPTER_BW_WORLD_RUNE_SYNTHESIS_RSP = 7657;
  CMD_CHAPTER_BW_WORLD_GET_RANK_REQ = 7658;
  CMD_CHAPTER_BW_WORLD_GET_RANK_RSP = 7659;
  CMD_CHAPTER_BW_WORLD_TAKE_REWARD_LINE_REWARD_REQ = 7660;
  CMD_CHAPTER_BW_WORLD_TAKE_REWARD_LINE_REWARD_RSP = 7661;
  CMD_CHAPTER_BW_WORLD_SYNC_RUNE_NOTIFY = 7662;
  CMD_CHAPTER_BW_WORLD_TOWER_STAGE_REPORT_FLOOR_REQ = 7663;
  CMD_CHAPTER_BW_WORLD_TOWER_STAGE_REPORT_FLOOR_RSP = 7664;
  CMD_CHAPTER_BW_WORLD_REFRESH_TICKET_REQ = 7665;
  CMD_CHAPTER_BW_WORLD_REFRESH_TICKET_RSP = 7666;
}

enum ChapterBwWorldStageType {
  CHAPTER_BW_WORLD_STAGE_TYPE_NONE = 0;
  CHAPTER_BW_WORLD_STAGE_MAIN = 1;
  CHAPTER_BW_WORLD_STAGE_BRANCH = 2;
  CHAPTER_BW_WORLD_STAGE_DAILY = 3;
  CHAPTER_BW_WORLD_STAGE_PRE_CHALLENGE = 4;
  CHAPTER_BW_WORLD_STAGE_CHALLENGE = 5;
  CHAPTER_BW_WORLD_STAGE_THEME = 6;
  CHAPTER_BW_WORLD_STAGE_TOWER = 7;
}

enum ChapterBwWorldRuneMainType {
  CHAPTER_BW_WORLD_RUNE_MAIN_TYPE_NONE = 0;
  CHAPTER_BW_WORLD_RUNE_MAIN_TYPE_WHITE = 1;
  CHAPTER_BW_WORLD_RUNE_MAIN_TYPE_BLACK = 2;
  CHAPTER_BW_WORLD_RUNE_MAIN_TYPE_CHAOS = 3;
}

// CmdID: 8350
message ChapterKnightRichManGetDataReq {
  uint32 rich_man_id = 1;
}

message ChapterKnightRichManMapRecord {
  uint32 map_id = 1;
  uint32 max_score = 2;
  uint32 total_score = 3;
  uint32 pass_times = 4;
  uint32 floor = 5;
}

message ChapterKnightRichManEffect {
  uint32 effect_id = 1;
  uint32 left_times = 2;
  uint32 card_id = 3;
  uint32 event_id = 4;
  uint32 map_id = 5;
  uint32 weather_id = 6;
}

message ChapterKnightRichManCard {
  uint32 card_id = 1;
  uint32 num = 2;
}

message ChapterKnightRichManBuff {
  uint32 buff_id = 1;
  uint32 level = 2;
}

message ChapterKnightRichManItem {
  uint32 card_id = 1;
  ChapterKnightRichManBuff buff = 2;
  bool is_selected = 3;
  uint32 cost_coin = 4;
  uint32 flower_id = 5;
}

message ChapterKnightRichManShop {
  uint32 shop_refresh_times = 1;
  repeated ChapterKnightRichManItem shop_item_list = 2;
}

message ChapterKnightRichManEventGroup {
  uint32 event_group_id = 1;
  uint32 left_times = 2;
}

message PjmsChapterKnightRichManGambleResult {
  uint32 p1_point = 1;
  uint32 p2_point = 2;
  uint32 gamble_id = 3;
}

message PjmsChapterKnightRichManHouseOpRecord {
  uint32 house_operate_num = 1;
  uint32 rent = 2;
}

message ChapterKnightRichManCurSite {
  uint32 site_id = 1;
  ChapterKnightRichManSiteStatus status = 2;
  repeated ChapterKnightRichManItem wait_select_item_list = 4;
  ChapterKnightRichManEventGroup event_group = 5;
  PjmsChapterKnightRichManGambleResult gamble_result = 6;
  PjmsChapterKnightRichManHouseOpRecord house_op_record = 8;
}

message ChapterKnightRichManFlower {
  uint32 flower_id = 1;
  uint32 add_coin_num = 2;
}

message PjmsChapterKnightRichManHouse {
  uint32 house_level = 1;
  uint32 num = 2;
}

message ChapterKnightRichManReplacedSite {
  uint32 site_id = 1;
  ChapterKnightRichManSiteType site_type = 2;
}

message ChapterKnightRichManCurFloor {
  uint32 floor = 1;
  uint32 weather_id = 2;
  uint32 next_weather_id = 3;
  uint32 next_weather_id_after_refresh = 4;
  uint32 refresh_weather_times = 5;
  uint32 left_move_times = 6;
  repeated uint32 finish_floor_wait_select_flower_list = 7;
  uint32 finish_floor_select_flower_times = 8;
  repeated uint32 roadblock_site_id_list = 9;
  uint32 last_dice_num = 11;
  ChapterKnightRichManFloorStatus status = 12;
  uint32 left_cheat_times = 13;
  repeated ChapterKnightRichManReplacedSite replaced_site_list = 14;
}

message ChapterKnightRichManMap {
  uint32 map_id = 1;
  ChapterKnightRichManCurSite cur_site = 2;
  uint32 control_dice_count = 3;
  uint32 score = 4;
  uint32 coin_num = 5;
  uint32 total_coin_num = 6;
  uint32 stage_times = 7;
  repeated ChapterKnightRichManEffect effect_list = 8;
  repeated ChapterKnightRichManCard card_list = 9;
  repeated ChapterKnightRichManBuff buff_list = 10;
  uint32 refresh_wait_select_item_times = 12;
  uint32 move_times = 13;
  ChapterKnightRichManCurFloor cur_floor = 14;
  repeated uint32 flower_id_list = 15;
  repeated uint32 equip_flower_list = 16;
  uint32 used_card_num = 18;
  uint32 max_dice_num_times = 19;
  repeated PjmsChapterKnightRichManHouse house_list = 20;
  repeated uint32 finish_site_dice_num_list = 21;
}

message ChapterKnightRichMan {
  uint32 rich_man_id = 1;
  repeated ChapterKnightRichManMapRecord map_record_list = 2;
  ChapterKnightRichManMap cur_map = 3;
  ChapterKnightRichManMap cur_map_at_floor_end = 4;
}

// CmdID: 8351
message ChapterKnightRichManGetDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  ChapterKnightRichManGetDataRsp.Retcode retcode = 1;
  ChapterKnightRichMan rich_man = 2;
  uint32 rich_man_id = 3;
}

// CmdID: 8352
message ChapterKnightRichManGetRankReq {
  uint32 rich_man_id = 1;
  uint32 map_id = 2;
}

// CmdID: 8353
message ChapterKnightRichManGetRankRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    NO_RANK = 3;
  }

  ChapterKnightRichManGetRankRsp.Retcode retcode = 1;
  uint32 rich_man_id = 2;
  uint32 map_id = 3;
  RankShowData rank_data = 4;
  uint32 rank_percent = 5;
  uint32 rank = 6;
}

// CmdID: 8354
message ChapterKnightRichManGetMapReq {
  uint32 rich_man_id = 1;
}

// CmdID: 8355
message ChapterKnightRichManGetMapRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    MAP_ERROR = 3;
  }

  ChapterKnightRichManGetMapRsp.Retcode retcode = 1;
  ChapterKnightRichManMap map = 2;
  uint32 rich_man_id = 3;
}

// CmdID: 8356
message ChapterKnightRichManBeginMapReq {
  uint32 rich_man_id = 1;
  uint32 map_id = 2;
}

// CmdID: 8357
message ChapterKnightRichManBeginMapRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    IN_MAP = 3;
    NO_MEET_CONDITION = 4;
  }

  ChapterKnightRichManBeginMapRsp.Retcode retcode = 1;
  ChapterKnightRichManMap map = 2;
  uint32 rich_man_id = 3;
}

// CmdID: 8358
message ChapterKnightRichManEndMapReq {
  uint32 rich_man_id = 1;
  uint32 map_id = 2;
}

// CmdID: 8359
message ChapterKnightRichManEndMapRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  ChapterKnightRichManEndMapRsp.Retcode retcode = 1;
  uint32 rich_man_id = 2;
  ChapterKnightRichManMap map = 3;
}

// CmdID: 8360
message ChapterKnightRichManThrowDiceReq {
  uint32 rich_man_id = 1;
  uint32 map_id = 2;
  uint32 end_site = 3;
  bool is_use_control_dice = 4;
  uint32 dice_num = 5;
}

// CmdID: 8361
message ChapterKnightRichManThrowDiceRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    STATUS_ERROR = 3;
    SITE_ERROR = 4;
  }

  ChapterKnightRichManThrowDiceRsp.Retcode retcode = 1;
  uint32 rich_man_id = 2;
}

// CmdID: 8362
message ChapterKnightRichManFinishGameReq {
  uint32 rich_man_id = 1;
  uint32 map_id = 2;
  uint32 try_times = 3;
  uint32 reset_times = 5;
}

// CmdID: 8363
message ChapterKnightRichManFinishGameRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    STATUS_ERROR = 3;
  }

  ChapterKnightRichManFinishGameRsp.Retcode retcode = 1;
  uint32 rich_man_id = 2;
}

// CmdID: 8364
message ChapterKnightRichManRefreshShopReq {
  uint32 rich_man_id = 1;
  uint32 map_id = 2;
  uint32 shop_refresh_times = 3;
}

// CmdID: 8365
message ChapterKnightRichManRefreshShopRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    STATUS_ERROR = 3;
    LACK_COIN = 4;
  }

  ChapterKnightRichManRefreshShopRsp.Retcode retcode = 1;
  uint32 rich_man_id = 2;
  ChapterKnightRichManShop shop = 3;
}

// CmdID: 8366
message ChapterKnightRichManBuyShopGoodsReq {
  uint32 rich_man_id = 1;
  uint32 map_id = 2;
  uint32 shop_goods_idx = 3;
}

// CmdID: 8367
message ChapterKnightRichManBuyShopGoodsRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    STATUS_ERROR = 3;
    LACK_COIN = 4;
  }

  ChapterKnightRichManBuyShopGoodsRsp.Retcode retcode = 1;
  uint32 rich_man_id = 2;
  ChapterKnightRichManShop shop = 3;
}

// CmdID: 8368
message ChapterKnightRichManFinishSiteReq {
  uint32 rich_man_id = 1;
  uint32 map_id = 2;
}

// CmdID: 8369
message ChapterKnightRichManFinishSiteRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    STATUS_ERROR = 3;
  }

  ChapterKnightRichManFinishSiteRsp.Retcode retcode = 1;
  uint32 rich_man_id = 2;
}

// CmdID: 8370
message ChapterKnightRichManUseCardReq {
  uint32 rich_man_id = 1;
  uint32 map_id = 2;
  uint32 card_id = 3;
  repeated uint32 use_param_list = 4;
  bool is_abandon = 5;
}

// CmdID: 8371
message ChapterKnightRichManUseCardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    STATUS_ERROR = 3;
    CARD_ERROR = 4;
  }

  ChapterKnightRichManUseCardRsp.Retcode retcode = 1;
  uint32 rich_man_id = 2;
}

// CmdID: 8372
message ChapterKnightRichManLevelUpBuffReq {
  uint32 rich_man_id = 1;
  uint32 map_id = 2;
  uint32 buff_id = 3;
  uint32 target_level = 4;
}

// CmdID: 8373
message ChapterKnightRichManLevelUpBuffRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    STATUS_ERROR = 3;
    TARGET_LEVEL_ERROR = 4;
    LACK_COIN = 5;
  }

  ChapterKnightRichManLevelUpBuffRsp.Retcode retcode = 1;
  uint32 rich_man_id = 2;
}

// CmdID: 8374
message ChapterKnightRichManSelectItemReq {
  uint32 rich_man_id = 1;
  uint32 map_id = 2;
  uint32 item_idx = 3;
}

// CmdID: 8375
message ChapterKnightRichManSelectItemRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    STATUS_ERROR = 3;
  }

  ChapterKnightRichManSelectItemRsp.Retcode retcode = 1;
  uint32 rich_man_id = 2;
}

// CmdID: 8376
message ChapterKnightRichManTriggerEventReq {
  uint32 rich_man_id = 1;
  uint32 map_id = 2;
  uint32 event_id = 3;
}

// CmdID: 8377
message ChapterKnightRichManTriggerEventRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    STATUS_ERROR = 3;
  }

  ChapterKnightRichManTriggerEventRsp.Retcode retcode = 1;
  uint32 rich_man_id = 2;
}

// CmdID: 8378
message ChapterKnightRichManGetItemNotify {
  uint32 coin_num = 1;
  uint32 score = 2;
  repeated ChapterKnightRichManCard card_list = 3;
  repeated ChapterKnightRichManBuff buff_list = 4;
  uint32 control_dice_count = 5;
  bool is_once_sub_coin = 6;
  bool is_once_sub_card = 7;
  bool is_once_sub_buff = 8;
  repeated uint32 flower_id_list = 9;
  repeated ChapterKnightRichManFlower flower_effect_list = 10;
  uint32 move_times = 11;
}

// CmdID: 8379
message ChapterKnightRichManRefreshWaitSelectItemReq {
  uint32 rich_man_id = 1;
  uint32 map_id = 2;
  uint32 left_refresh_times = 3;
}

// CmdID: 8380
message ChapterKnightRichManRefreshWaitSelectItemRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    STATUS_ERROR = 3;
    LACK_TIMES = 4;
  }

  ChapterKnightRichManRefreshWaitSelectItemRsp.Retcode retcode = 1;
  uint32 rich_man_id = 2;
}

// CmdID: 8381
message ChapterKnightRichManGetShopReq {
  uint32 rich_man_id = 1;
  uint32 map_id = 2;
}

// CmdID: 8382
message ChapterKnightRichManGetShopRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    STATUS_ERROR = 3;
  }

  ChapterKnightRichManGetShopRsp.Retcode retcode = 1;
  uint32 rich_man_id = 2;
  ChapterKnightRichManShop shop = 3;
}

// CmdID: 8383
message ChapterKnightRichManSelectInitReq {
  uint32 rich_man_id = 1;
  uint32 map_id = 2;
  uint32 buff_id = 3;
  uint32 flower_id = 4;
}

// CmdID: 8384
message ChapterKnightRichManSelectInitRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    STATUS_ERROR = 3;
  }

  ChapterKnightRichManSelectInitRsp.Retcode retcode = 1;
  uint32 rich_man_id = 2;
}

// CmdID: 8385
message ChapterKnightRichManReloadFloorReq {
  uint32 rich_man_id = 1;
  uint32 map_id = 2;
}

// CmdID: 8386
message ChapterKnightRichManReloadFloorRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  ChapterKnightRichManReloadFloorRsp.Retcode retcode = 1;
  uint32 rich_man_id = 2;
}

// CmdID: 8387
message ChapterKnightRichManEnterFloorReq {
  uint32 rich_man_id = 1;
  uint32 map_id = 2;
}

// CmdID: 8388
message ChapterKnightRichManEnterFloorRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    STATUS_ERROR = 3;
  }

  ChapterKnightRichManEnterFloorRsp.Retcode retcode = 1;
  uint32 rich_man_id = 2;
}

// CmdID: 8389
message ChapterKnightRichManEquipFlowerReq {
  uint32 rich_man_id = 1;
  uint32 map_id = 2;
  repeated uint32 flower_id_list = 3;
}

// CmdID: 8390
message ChapterKnightRichManEquipFlowerRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    STATUS_ERROR = 3;
    FLOWER_ERROR = 4;
  }

  ChapterKnightRichManEquipFlowerRsp.Retcode retcode = 1;
  uint32 rich_man_id = 2;
}

// CmdID: 8391
message ChapterKnightRichManRefreshWeatherReq {
  uint32 rich_man_id = 1;
  uint32 map_id = 2;
}

// CmdID: 8392
message ChapterKnightRichManRefreshWeatherRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    STATUS_ERROR = 3;
    LACK_TIMES = 4;
  }

  ChapterKnightRichManRefreshWeatherRsp.Retcode retcode = 1;
  uint32 rich_man_id = 2;
}

// CmdID: 8393
message ChapterKnightRichManSelectWeatherReq {
  uint32 rich_man_id = 1;
  uint32 map_id = 2;
  uint32 weather_id = 3;
}

// CmdID: 8394
message ChapterKnightRichManSelectWeatherRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    STATUS_ERROR = 3;
  }

  ChapterKnightRichManSelectWeatherRsp.Retcode retcode = 1;
  uint32 rich_man_id = 2;
}

// CmdID: 8395
message ChapterKnightRichManFinishGambleReq {
  enum GambleEndStatus {
    GAMBLE_END_STATUS_NONE = 0;
    GAMBLE_END_WIN = 1;
    GAMBLE_END_LOSE = 2;
    GAMBLE_END_NONE = 3;
  }

  enum GambleChoice {
    GAMBLE_CHOICE_NONE = 0;
    GAMBLE_CHOICE_P1 = 1;
    GAMBLE_CHOICE_P2 = 2;
    GAMBLE_CHOICE_TIE = 3;
  }

  uint32 rich_man_id = 1;
  uint32 map_id = 2;
  uint32 use_coin_num = 3;
  uint32 get_coin_num = 4;
  ChapterKnightRichManFinishGambleReq.GambleEndStatus end_status = 5;
  bool is_cheat = 6;
  ChapterKnightRichManFinishGambleReq.GambleChoice choice = 7;
}

// CmdID: 8396
message ChapterKnightRichManFinishGambleRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    STATUS_ERROR = 3;
    LACK_COIN = 4;
    USE_COIN_EXCEED_LIMIT = 5;
    CHEAT_TIMES_LIMIT = 6;
  }

  ChapterKnightRichManFinishGambleRsp.Retcode retcode = 1;
  uint32 rich_man_id = 2;
}

// CmdID: 8397
message ChapterKnightRichManBeginGambleReq {
  uint32 rich_man_id = 1;
  uint32 map_id = 2;
}

// CmdID: 8398
message ChapterKnightRichManBeginGambleRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    STATUS_ERROR = 3;
  }

  ChapterKnightRichManBeginGambleRsp.Retcode retcode = 1;
  uint32 rich_man_id = 2;
  PjmsChapterKnightRichManGambleResult gamble_result = 3;
}

// CmdID: 8399
message ChapterKnightRichManFloorEndSelectFlowerReq {
  uint32 rich_man_id = 1;
  uint32 map_id = 2;
  uint32 flower_id = 3;
}

// CmdID: 8400
message ChapterKnightRichManFloorEndSelectFlowerRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    STATUS_ERROR = 3;
  }

  ChapterKnightRichManFloorEndSelectFlowerRsp.Retcode retcode = 1;
  uint32 rich_man_id = 2;
}

// CmdID: 8401
message ChapterKnightRichManBuyHouseReq {
  uint32 rich_man_id = 1;
  uint32 map_id = 2;
  uint32 house_level = 3;
  uint32 op_times = 4;
  bool is_upgrade = 5;
}

// CmdID: 8402
message ChapterKnightRichManBuyHouseRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    STATUS_ERROR = 3;
    LACK_COIN = 4;
    TIMES_LIMIT = 5;
    HOUSE_UNOWNED = 6;
    REPEATE_REQUEST = 7;
  }

  ChapterKnightRichManBuyHouseRsp.Retcode retcode = 1;
  uint32 rich_man_id = 2;
}

message PjmsChapterKnightDurandalCubeTileInfo {
  uint32 tower_id = 1;
  uint32 floor_id = 2;
}

// CmdID: 8411
message PjmsChapterKnightDurandalCubeGetDataReq {
  uint32 activity_id = 1;
}

// CmdID: 8412
message PjmsChapterKnightDurandalCubeGetDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  PjmsChapterKnightDurandalCubeGetDataRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  repeated PjmsChapterKnightDurandalCubeTileInfo finished_tile_list = 3;
}

// CmdID: 8413
message PjmsChapterKnightDurandalCubeTileBeginReq {
  uint32 activity_id = 1;
  PjmsChapterKnightDurandalCubeTileInfo tile = 2;
  uint32 last_max_save_point_id = 3;
  string last_button_click_times_str = 4;
}

// CmdID: 8414
message PjmsChapterKnightDurandalCubeTileBeginRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    AREA_LOCKED = 3;
  }

  PjmsChapterKnightDurandalCubeTileBeginRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  PjmsChapterKnightDurandalCubeTileInfo tile = 3;
}

// CmdID: 8415
message PjmsChapterKnightDurandalCubeTileEndReq {
  uint32 activity_id = 1;
  PjmsChapterKnightDurandalCubeTileInfo tile = 2;
  StageEndStatus end_status = 3;
  uint32 max_save_point_id = 4;
  string button_click_times_str = 5;
}

// CmdID: 8416
message PjmsChapterKnightDurandalCubeTileEndRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  PjmsChapterKnightDurandalCubeTileEndRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  PjmsChapterKnightDurandalCubeTileInfo tile = 3;
  RewardData reward = 4;
}

// CmdID: 8421
message PjmsChapterKnightSpaceAdventureGetMainDataReq {
  uint32 activity_id = 1;
}

message PjmsChapterKnightSpaceAdventureShopGoods {
  PjmsChapterKnightSpaceAdventureShopGoodsType type = 1;
  uint32 goods_param = 2;
  uint32 cost = 3;
  uint32 left_buy_times = 4;
}

message PjmsChapterKnightSpaceAdventureShop {
  uint32 shop_id = 1;
  PjmsChapterKnightSpaceAdventureShopGoods goods_energy_limit = 2;
  PjmsChapterKnightSpaceAdventureShopGoods goods_repair = 3;
  PjmsChapterKnightSpaceAdventureShopGoods goods_missile = 4;
  PjmsChapterKnightSpaceAdventureShopGoods goods_emp = 5;
  repeated PjmsChapterKnightSpaceAdventureShopGoods goods_card_list = 6;
}

message PjmsChapterKnightSpaceAdventureArea {
  uint32 area_id = 1;
  uint32 cur_site_id = 2;
  bool is_passed_cur_site = 3;
  repeated uint32 passed_site_list = 4;
  repeated uint32 card_list = 11;
  repeated uint32 battle_card_list = 12;
  uint32 cur_hp = 13;
  uint32 max_hp = 14;
  uint32 missile_num = 15;
  uint32 emp_num = 16;
  uint32 max_energy = 17;
  uint32 slot_num = 18;
  uint32 coin = 31;
  PjmsChapterKnightSpaceAdventureShop cur_shop = 32;
  uint32 cur_event_id = 41;
  string transaction_str = 51;
}

message PjmsChapterKnightSpaceAdventure {
  uint32 activity_id = 1;
  repeated PjmsChapterKnightSpaceAdventureArea area_list = 2;
  repeated uint32 passed_area_list = 3;
}

// CmdID: 8422
message PjmsChapterKnightSpaceAdventureGetMainDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    FEATURE_CLOSED = 3;
  }

  PjmsChapterKnightSpaceAdventureGetMainDataRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  PjmsChapterKnightSpaceAdventure activity = 3;
}

// CmdID: 8423
message PjmsChapterKnightSpaceAdventureSiteBeginReq {
  uint32 activity_id = 1;
  uint32 area_id = 2;
  uint32 site_id = 3;
}

// CmdID: 8424
message PjmsChapterKnightSpaceAdventureSiteBeginRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    CUR_SITE_NOT_PASSED = 3;
    NOT_REACHABLE = 4;
    FEATURE_CLOSED = 5;
  }

  PjmsChapterKnightSpaceAdventureSiteBeginRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 area_id = 3;
  uint32 site_id = 4;
  uint32 event_id = 5;
  string site_transaction_str = 6;
  uint32 site_fail_times = 7;
}

// CmdID: 8425
message PjmsChapterKnightSpaceAdventureSiteEndReq {
  enum EndReason {
    END_REASON_NONE = 0;
    PASS = 1;
    FAIL = 2;
    QUIT = 4;
  }

  uint32 activity_id = 1;
  uint32 area_id = 2;
  uint32 site_id = 3;
  uint32 cur_hp = 4;
  uint32 cur_missile_num = 5;
  uint32 cur_emp_num = 6;
  PjmsChapterKnightSpaceAdventureSiteEndReq.EndReason end_reason = 7;
  string client_report = 8;
}

// CmdID: 8426
message PjmsChapterKnightSpaceAdventureSiteEndRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    CUR_SITE_MISMATCH = 3;
    FEATURE_CLOSED = 4;
  }

  PjmsChapterKnightSpaceAdventureSiteEndRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 area_id = 3;
  uint32 site_id = 4;
}

// CmdID: 8427
message PjmsChapterKnightSpaceAdventureChooseSiteEventReq {
  uint32 activity_id = 1;
  uint32 area_id = 2;
  uint32 site_id = 3;
  uint32 event_id = 4;
  uint32 action_id = 5;
}

// CmdID: 8428
message PjmsChapterKnightSpaceAdventureChooseSiteEventRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    CUR_SITE_MISMATCH = 3;
    EVENT_ID_MISMATCH = 4;
    ACTION_ID_MISMATCH = 5;
    FEATURE_CLOSED = 6;
  }

  PjmsChapterKnightSpaceAdventureChooseSiteEventRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 area_id = 3;
  uint32 site_id = 4;
  uint32 event_id = 5;
  uint32 action_id = 6;
}

// CmdID: 8429
message PjmsChapterKnightSpaceAdventureUpdateBattleCardReq {
  uint32 activity_id = 1;
  uint32 area_id = 2;
  repeated uint32 new_battle_card_list = 3;
}

// CmdID: 8430
message PjmsChapterKnightSpaceAdventureUpdateBattleCardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    CARD_ID_ERROR = 3;
    CARD_LACK = 4;
    SLOT_LIMIT = 5;
    FEATURE_CLOSED = 6;
  }

  PjmsChapterKnightSpaceAdventureUpdateBattleCardRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 area_id = 3;
}

// CmdID: 8431
message PjmsChapterKnightSpaceAdventureGetShopDataReq {
  uint32 activity_id = 1;
  uint32 area_id = 2;
}

// CmdID: 8432
message PjmsChapterKnightSpaceAdventureGetShopDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    NO_VALID_SHOP_NOW = 3;
    FEATURE_CLOSED = 4;
  }

  PjmsChapterKnightSpaceAdventureGetShopDataRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 area_id = 3;
  PjmsChapterKnightSpaceAdventureShop shop = 4;
  uint32 coin = 5;
}

// CmdID: 8433
message PjmsChapterKnightSpaceAdventureRefreshShopReq {
  uint32 activity_id = 1;
  uint32 area_id = 2;
}

// CmdID: 8434
message PjmsChapterKnightSpaceAdventureRefreshShopRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    COIN_LACK = 3;
    FEATURE_CLOSED = 4;
  }

  PjmsChapterKnightSpaceAdventureRefreshShopRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 area_id = 3;
  PjmsChapterKnightSpaceAdventureShop shop = 4;
  uint32 coin = 5;
}

// CmdID: 8435
message PjmsChapterKnightSpaceAdventureBuyShopGoodsReq {
  uint32 activity_id = 1;
  uint32 area_id = 2;
  PjmsChapterKnightSpaceAdventureShopGoodsType goods_type = 3;
  uint32 goods_idx = 4;
}

// CmdID: 8436
message PjmsChapterKnightSpaceAdventureBuyShopGoodsRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    COIN_LACK = 3;
    SOLD_OUT = 4;
    ENERGY_LIMIT = 5;
    FULL_HP = 6;
    FEATURE_CLOSED = 7;
  }

  PjmsChapterKnightSpaceAdventureBuyShopGoodsRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 area_id = 3;
}

// CmdID: 8437
message PjmsChapterKnightSpaceAdventureStatusNotify {
  uint32 activity_id = 1;
  uint32 area_id = 2;
  uint32 cur_site = 3;
  repeated uint32 new_card_list = 11;
  int32 hp_delta = 12;
  int32 max_hp_delta = 13;
  int32 missile_num_delta = 14;
  int32 emp_num_delta = 15;
  int32 max_energy_delta = 16;
  int32 slot_num_delta = 17;
  int32 coin_delta = 18;
}

// CmdID: 8438
message PjmsChapterKnightSpaceAdventureResetAreaReq {
  uint32 activity_id = 1;
  uint32 area_id = 2;
}

// CmdID: 8439
message PjmsChapterKnightSpaceAdventureResetAreaRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    AREA_LOCKED = 3;
    FEATURE_CLOSED = 4;
  }

  PjmsChapterKnightSpaceAdventureResetAreaRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 area_id = 3;
}

enum CmdTypeChapterknight {
  CMD_TYPE_CHAPTERKNIGHT_NONE = 0;
  CMD_CHAPTER_KNIGHT_RICH_MAN_GET_DATA_REQ = 8350;
  CMD_CHAPTER_KNIGHT_RICH_MAN_GET_DATA_RSP = 8351;
  CMD_CHAPTER_KNIGHT_RICH_MAN_GET_RANK_REQ = 8352;
  CMD_CHAPTER_KNIGHT_RICH_MAN_GET_RANK_RSP = 8353;
  CMD_CHAPTER_KNIGHT_RICH_MAN_GET_MAP_REQ = 8354;
  CMD_CHAPTER_KNIGHT_RICH_MAN_GET_MAP_RSP = 8355;
  CMD_CHAPTER_KNIGHT_RICH_MAN_BEGIN_MAP_REQ = 8356;
  CMD_CHAPTER_KNIGHT_RICH_MAN_BEGIN_MAP_RSP = 8357;
  CMD_CHAPTER_KNIGHT_RICH_MAN_END_MAP_REQ = 8358;
  CMD_CHAPTER_KNIGHT_RICH_MAN_END_MAP_RSP = 8359;
  CMD_CHAPTER_KNIGHT_RICH_MAN_THROW_DICE_REQ = 8360;
  CMD_CHAPTER_KNIGHT_RICH_MAN_THROW_DICE_RSP = 8361;
  CMD_CHAPTER_KNIGHT_RICH_MAN_FINISH_GAME_REQ = 8362;
  CMD_CHAPTER_KNIGHT_RICH_MAN_FINISH_GAME_RSP = 8363;
  CMD_CHAPTER_KNIGHT_RICH_MAN_REFRESH_SHOP_REQ = 8364;
  CMD_CHAPTER_KNIGHT_RICH_MAN_REFRESH_SHOP_RSP = 8365;
  CMD_CHAPTER_KNIGHT_RICH_MAN_BUY_SHOP_GOODS_REQ = 8366;
  CMD_CHAPTER_KNIGHT_RICH_MAN_BUY_SHOP_GOODS_RSP = 8367;
  CMD_CHAPTER_KNIGHT_RICH_MAN_FINISH_SITE_REQ = 8368;
  CMD_CHAPTER_KNIGHT_RICH_MAN_FINISH_SITE_RSP = 8369;
  CMD_CHAPTER_KNIGHT_RICH_MAN_USE_CARD_REQ = 8370;
  CMD_CHAPTER_KNIGHT_RICH_MAN_USE_CARD_RSP = 8371;
  CMD_CHAPTER_KNIGHT_RICH_MAN_LEVEL_UP_BUFF_REQ = 8372;
  CMD_CHAPTER_KNIGHT_RICH_MAN_LEVEL_UP_BUFF_RSP = 8373;
  CMD_CHAPTER_KNIGHT_RICH_MAN_SELECT_ITEM_REQ = 8374;
  CMD_CHAPTER_KNIGHT_RICH_MAN_SELECT_ITEM_RSP = 8375;
  CMD_CHAPTER_KNIGHT_RICH_MAN_TRIGGER_EVENT_REQ = 8376;
  CMD_CHAPTER_KNIGHT_RICH_MAN_TRIGGER_EVENT_RSP = 8377;
  CMD_CHAPTER_KNIGHT_RICH_MAN_GET_ITEM_NOTIFY = 8378;
  CMD_CHAPTER_KNIGHT_RICH_MAN_REFRESH_WAIT_SELECT_ITEM_REQ = 8379;
  CMD_CHAPTER_KNIGHT_RICH_MAN_REFRESH_WAIT_SELECT_ITEM_RSP = 8380;
  CMD_CHAPTER_KNIGHT_RICH_MAN_GET_SHOP_REQ = 8381;
  CMD_CHAPTER_KNIGHT_RICH_MAN_GET_SHOP_RSP = 8382;
  CMD_CHAPTER_KNIGHT_RICH_MAN_SELECT_INIT_REQ = 8383;
  CMD_CHAPTER_KNIGHT_RICH_MAN_SELECT_INIT_RSP = 8384;
  CMD_CHAPTER_KNIGHT_RICH_MAN_RELOAD_FLOOR_REQ = 8385;
  CMD_CHAPTER_KNIGHT_RICH_MAN_RELOAD_FLOOR_RSP = 8386;
  CMD_CHAPTER_KNIGHT_RICH_MAN_ENTER_FLOOR_REQ = 8387;
  CMD_CHAPTER_KNIGHT_RICH_MAN_ENTER_FLOOR_RSP = 8388;
  CMD_CHAPTER_KNIGHT_RICH_MAN_EQUIP_FLOWER_REQ = 8389;
  CMD_CHAPTER_KNIGHT_RICH_MAN_EQUIP_FLOWER_RSP = 8390;
  CMD_CHAPTER_KNIGHT_RICH_MAN_REFRESH_WEATHER_REQ = 8391;
  CMD_CHAPTER_KNIGHT_RICH_MAN_REFRESH_WEATHER_RSP = 8392;
  CMD_CHAPTER_KNIGHT_RICH_MAN_SELECT_WEATHER_REQ = 8393;
  CMD_CHAPTER_KNIGHT_RICH_MAN_SELECT_WEATHER_RSP = 8394;
  CMD_CHAPTER_KNIGHT_RICH_MAN_FINISH_GAMBLE_REQ = 8395;
  CMD_CHAPTER_KNIGHT_RICH_MAN_FINISH_GAMBLE_RSP = 8396;
  CMD_CHAPTER_KNIGHT_RICH_MAN_BEGIN_GAMBLE_REQ = 8397;
  CMD_CHAPTER_KNIGHT_RICH_MAN_BEGIN_GAMBLE_RSP = 8398;
  CMD_CHAPTER_KNIGHT_RICH_MAN_FLOOR_END_SELECT_FLOWER_REQ = 8399;
  CMD_CHAPTER_KNIGHT_RICH_MAN_FLOOR_END_SELECT_FLOWER_RSP = 8400;
  CMD_CHAPTER_KNIGHT_RICH_MAN_BUY_HOUSE_REQ = 8401;
  CMD_CHAPTER_KNIGHT_RICH_MAN_BUY_HOUSE_RSP = 8402;
  CMD_PJMS_CHAPTER_KNIGHT_DURANDAL_CUBE_GET_DATA_REQ = 8411;
  CMD_PJMS_CHAPTER_KNIGHT_DURANDAL_CUBE_GET_DATA_RSP = 8412;
  CMD_PJMS_CHAPTER_KNIGHT_DURANDAL_CUBE_TILE_BEGIN_REQ = 8413;
  CMD_PJMS_CHAPTER_KNIGHT_DURANDAL_CUBE_TILE_BEGIN_RSP = 8414;
  CMD_PJMS_CHAPTER_KNIGHT_DURANDAL_CUBE_TILE_END_REQ = 8415;
  CMD_PJMS_CHAPTER_KNIGHT_DURANDAL_CUBE_TILE_END_RSP = 8416;
  CMD_PJMS_CHAPTER_KNIGHT_SPACE_ADVENTURE_GET_MAIN_DATA_REQ = 8421;
  CMD_PJMS_CHAPTER_KNIGHT_SPACE_ADVENTURE_GET_MAIN_DATA_RSP = 8422;
  CMD_PJMS_CHAPTER_KNIGHT_SPACE_ADVENTURE_SITE_BEGIN_REQ = 8423;
  CMD_PJMS_CHAPTER_KNIGHT_SPACE_ADVENTURE_SITE_BEGIN_RSP = 8424;
  CMD_PJMS_CHAPTER_KNIGHT_SPACE_ADVENTURE_SITE_END_REQ = 8425;
  CMD_PJMS_CHAPTER_KNIGHT_SPACE_ADVENTURE_SITE_END_RSP = 8426;
  CMD_PJMS_CHAPTER_KNIGHT_SPACE_ADVENTURE_CHOOSE_SITE_EVENT_REQ = 8427;
  CMD_PJMS_CHAPTER_KNIGHT_SPACE_ADVENTURE_CHOOSE_SITE_EVENT_RSP = 8428;
  CMD_PJMS_CHAPTER_KNIGHT_SPACE_ADVENTURE_UPDATE_BATTLE_CARD_REQ = 8429;
  CMD_PJMS_CHAPTER_KNIGHT_SPACE_ADVENTURE_UPDATE_BATTLE_CARD_RSP = 8430;
  CMD_PJMS_CHAPTER_KNIGHT_SPACE_ADVENTURE_GET_SHOP_DATA_REQ = 8431;
  CMD_PJMS_CHAPTER_KNIGHT_SPACE_ADVENTURE_GET_SHOP_DATA_RSP = 8432;
  CMD_PJMS_CHAPTER_KNIGHT_SPACE_ADVENTURE_REFRESH_SHOP_REQ = 8433;
  CMD_PJMS_CHAPTER_KNIGHT_SPACE_ADVENTURE_REFRESH_SHOP_RSP = 8434;
  CMD_PJMS_CHAPTER_KNIGHT_SPACE_ADVENTURE_BUY_SHOP_GOODS_REQ = 8435;
  CMD_PJMS_CHAPTER_KNIGHT_SPACE_ADVENTURE_BUY_SHOP_GOODS_RSP = 8436;
  CMD_PJMS_CHAPTER_KNIGHT_SPACE_ADVENTURE_STATUS_NOTIFY = 8437;
  CMD_PJMS_CHAPTER_KNIGHT_SPACE_ADVENTURE_RESET_AREA_REQ = 8438;
  CMD_PJMS_CHAPTER_KNIGHT_SPACE_ADVENTURE_RESET_AREA_RSP = 8439;
}

enum ChapterKnightRichManSiteStatus {
  CHAPTER_KNIGHT_RICH_MAN_SITE_STATUS_NONE = 0;
  CHAPTER_KNIGHT_RICH_MAN_SITE_STATUS_FINISH = 1;
  CHAPTER_KNIGHT_RICH_MAN_SITE_STATUS_IN_GAME = 2;
  CHAPTER_KNIGHT_RICH_MAN_SITE_STATUS_IN_STAGE = 3;
  CHAPTER_KNIGHT_RICH_MAN_SITE_STATUS_IN_SHOP = 4;
  CHAPTER_KNIGHT_RICH_MAN_SITE_STATUS_WAIT_LEVEL_UP_BUFF = 5;
  CHAPTER_KNIGHT_RICH_MAN_SITE_STATUS_WAIT_TRIGGER_EVENT = 6;
  CHAPTER_KNIGHT_RICH_MAN_SITE_STATUS_WAIT_SELECT_ITEM = 7;
  CHAPTER_KNIGHT_RICH_MAN_SITE_STATUS_WAIT_SELECT_INIT = 8;
  CHAPTER_KNIGHT_RICH_MAN_SITE_STATUS_WAIT_GAMBLE = 9;
  CHAPTER_KNIGHT_RICH_MAN_SITE_STATUS_WAIT_BUY_HOUSE = 10;
}

enum ChapterKnightRichManFloorStatus {
  CHAPTER_KNIGHT_RICH_MAN_FLOOR_STATUS_NONE = 0;
  CHAPTER_KNIGHT_RICH_MAN_FLOOR_STATUS_DOING = 1;
  CHAPTER_KNIGHT_RICH_MAN_FLOOR_STATUS_NOT_MEET_GOAL = 2;
  CHAPTER_KNIGHT_RICH_MAN_FLOOR_STATUS_SELECT_FLOWER = 3;
  CHAPTER_KNIGHT_RICH_MAN_FLOOR_STATUS_FINISH_FLOOR = 4;
}

enum ChapterKnightRichManSiteType {
  CHAPTER_KNIGHT_RICH_MAN_SITE_TYPE_NONE = 0;
  CHAPTER_KNIGHT_RICH_MAN_SITE_TYPE_START = 1;
  CHAPTER_KNIGHT_RICH_MAN_SITE_TYPE_SHOP = 2;
  CHAPTER_KNIGHT_RICH_MAN_SITE_TYPE_LEVEL_UP = 3;
  CHAPTER_KNIGHT_RICH_MAN_SITE_TYPE_STAGE = 4;
  CHAPTER_KNIGHT_RICH_MAN_SITE_TYPE_ELITE_STAGE = 5;
  CHAPTER_KNIGHT_RICH_MAN_SITE_TYPE_BOSS_STAGE = 6;
  CHAPTER_KNIGHT_RICH_MAN_SITE_TYPE_ROLL_EVENT = 7;
  CHAPTER_KNIGHT_RICH_MAN_SITE_TYPE_CHOICE_EVENT = 8;
  CHAPTER_KNIGHT_RICH_MAN_SITE_TYPE_RANDOM_EVENT = 9;
  CHAPTER_KNIGHT_RICH_MAN_SITE_TYPE_GAME = 10;
  CHAPTER_KNIGHT_RICH_MAN_SITE_TYPE_SCORE = 11;
  CHAPTER_KNIGHT_RICH_MAN_SITE_TYPE_COIN = 12;
  CHAPTER_KNIGHT_RICH_MAN_SITE_TYPE_CARD = 13;
  CHAPTER_KNIGHT_RICH_MAN_SITE_TYPE_FLOWER = 14;
  CHAPTER_KNIGHT_RICH_MAN_SITE_TYPE_GAMBLE = 15;
  CHAPTER_KNIGHT_RICH_MAN_SITE_TYPE_HOUSE_PROPERTY = 16;
  CHAPTER_KNIGHT_RICH_MAN_SITE_TYPE_START_V2 = 17;
}

enum ChapterKnightRichManEventType {
  CHAPTER_KNIGHT_RICH_MAN_EVENT_EMPTY = 0;
  CHAPTER_KNIGHT_RICH_MAN_EVENT_ALL = 1;
  CHAPTER_KNIGHT_RICH_MAN_EVENT_ADD_EFFECT = 2;
  CHAPTER_KNIGHT_RICH_MAN_EVENT_RANDOM_ADD_BUFF_WITH_LEVEL = 3;
  CHAPTER_KNIGHT_RICH_MAN_EVENT_RANDOM_LEVEL_UP_BUFF = 4;
  CHAPTER_KNIGHT_RICH_MAN_EVENT_ADD_COIN = 5;
  CHAPTER_KNIGHT_RICH_MAN_EVENT_ADD_COIN_BY_PERCENT = 6;
  CHAPTER_KNIGHT_RICH_MAN_EVENT_LOSE_ALL_COIN = 7;
  CHAPTER_KNIGHT_RICH_MAN_EVENT_ADD_SCORE = 8;
  CHAPTER_KNIGHT_RICH_MAN_EVENT_ADD_SCORE_BY_PERCENT = 9;
  CHAPTER_KNIGHT_RICH_MAN_EVENT_RANDOM_ADD_CARD = 10;
  CHAPTER_KNIGHT_RICH_MAN_EVENT_ADD_CARD = 11;
  CHAPTER_KNIGHT_RICH_MAN_EVENT_LOSE_ALL_CARD = 12;
  CHAPTER_KNIGHT_RICH_MAN_EVENT_ADD_COIN_WITH_GAMBLING = 13;
  CHAPTER_KNIGHT_RICH_MAN_EVENT_ADD_SCORE_WITH_GAMBLING = 14;
  CHAPTER_KNIGHT_RICH_MAN_EVENT_ADD_CARD_WITH_GAMBLING = 15;
  CHAPTER_KNIGHT_RICH_MAN_EVENT_ADD_COIN_BY_NEXT_FLOOR_MIN_COIN_PERCENT = 16;
  CHAPTER_KNIGHT_RICH_MAN_EVENT_RANDOM_ADD_FLOWER = 17;
  CHAPTER_KNIGHT_RICH_MAN_EVENT_ADD_FLOWER_WITH_GAMBLING = 18;
}

enum ChapterKnightRichManCardType {
  CHAPTER_KNIGHT_RICH_MAN_CARD_TYPE_NONE = 0;
  CHAPTER_KNIGHT_RICH_MAN_CARD_ADD_EFFECT = 1;
  CHAPTER_KNIGHT_RICH_MAN_CARD_ADD_CONTROL_DICE = 2;
  CHAPTER_KNIGHT_RICH_MAN_CARD_TRIGGER_RANDOM_EVENT_GROUP = 3;
  CHAPTER_KNIGHT_RICH_MAN_CARD_RANDOM_LEVEL_UP_BUFF = 4;
  CHAPTER_KNIGHT_RICH_MAN_CARD_RANDOM_ADD_BUFF = 5;
  CHAPTER_KNIGHT_RICH_MAN_CARD_ADD_SCORE = 6;
  CHAPTER_KNIGHT_RICH_MAN_CARD_ADD_REFRESH_TIMES_AFTER_STAGE = 7;
  CHAPTER_KNIGHT_RICH_MAN_CARD_GAMBLE = 8;
  CHAPTER_KNIGHT_RICH_MAN_CARD_ADD_NEXT_FLOOR_MIN_COIN_PRECENT_COIN = 9;
  CHAPTER_KNIGHT_RICH_MAN_CARD_REENTER_SITE = 10;
  CHAPTER_KNIGHT_RICH_MAN_CARD_PUT_ROADBLOCK = 11;
  CHAPTER_KNIGHT_RICH_MAN_CARD_TRADE_HOUSE = 12;
}

enum ChapterKnightRichManEffectType {
  CHAPTER_KNIGHT_RICH_MAN_EFFECT_EMPTY = 0;
  CHAPTER_KNIGHT_RICH_MAN_EFFECT_MORE_COIN_PERCENT_SETTLE_SITE = 1;
  CHAPTER_KNIGHT_RICH_MAN_EFFECT_MORE_SCORE_PERCENT_SETTLE_SITE = 2;
  CHAPTER_KNIGHT_RICH_MAN_EFFECT_MORE_CARD_PERCENT_SETTLE_SITE = 3;
  CHAPTER_KNIGHT_RICH_MAN_EFFECT_NO_COIN_SETTLE_SITE = 4;
  CHAPTER_KNIGHT_RICH_MAN_EFFECT_NO_BUFF_SETTLE_SITE = 5;
  CHAPTER_KNIGHT_RICH_MAN_EFFECT_NO_CARD_SETTLE_SITE = 6;
  CHAPTER_KNIGHT_RICH_MAN_EFFECT_ADD_CONTROL_DICE_MOVE_TIMES = 11;
  CHAPTER_KNIGHT_RICH_MAN_EFFECT_ADD_SELF_PERCENT_COIN_NUM_MOVE_TIMES = 12;
  CHAPTER_KNIGHT_RICH_MAN_EFFECT_DEL_SELF_PERCENT_COIN_NUM_MOVE_TIMES = 13;
  CHAPTER_KNIGHT_RICH_MAN_EFFECT_ADD_RANDOM_CARD_MOVE_TIMES = 14;
  CHAPTER_KNIGHT_RICH_MAN_EFFECT_MORE_EVENT_TIMES_EVENT_SITE = 16;
  CHAPTER_KNIGHT_RICH_MAN_EFFECT_ADD_SELF_PERCENT_COIN_LOSE_EFFECT = 17;
  CHAPTER_KNIGHT_RICH_MAN_EFFECT_SKIP_STAGE = 18;
  CHAPTER_KNIGHT_RICH_MAN_EFFECT_HIGHER_BUFF_LEVEL_AFTER_STAGE = 19;
  CHAPTER_KNIGHT_RICH_MAN_EFFECT_ADD_SCORE_USE_COIN = 20;
  CHAPTER_KNIGHT_RICH_MAN_EFFECT_MORE_COIN_PERCENT_OVERALL = 21;
  CHAPTER_KNIGHT_RICH_MAN_EFFECT_SHOP_BUY_PRICE_LOWER_PERCENT = 22;
  CHAPTER_KNIGHT_RICH_MAN_EFFECT_CANNOT_USE_CARD = 23;
  CHAPTER_KNIGHT_RICH_MAN_EFFECT_HIGHER_NEXT_FLOOR_MIN_COIN_BY_PERCENT = 24;
  CHAPTER_KNIGHT_RICH_MAN_EFFECT_MORE_PERCENT_BET_AMOUNT = 25;
  CHAPTER_KNIGHT_RICH_MAN_EFFECT_THROW_MIN_DICE_NUM = 26;
  CHAPTER_KNIGHT_RICH_MAN_EFFECT_MORE_PERCENT_HOUSE_RENT = 27;
  CHAPTER_KNIGHT_RICH_MAN_EFFECT_REPLACE_GAMBLE_SITE_WITH_COIN_SITE = 28;
  CHAPTER_KNIGHT_RICH_MAN_EFFECT_REPLACE_HOUSE_PROPERTY_SITE_WITH_COIN_SITE = 29;
}

enum ChapterKnightRichManFlowerId {
  CHAPTER_KNIGHT_RICH_MAN_FLOWER_ID_NONE = 0;
  CHAPTER_KNIGHT_RICH_MAN_FLOWER_ID_ENTER_SITE_ADD_COIN = 1;
  CHAPTER_KNIGHT_RICH_MAN_FLOWER_ID_ENTER_SITE_ADD_COIN_BY_EQUIP_FLOWER_NUM = 7;
  CHAPTER_KNIGHT_RICH_MAN_FLOWER_ID_ENTER_SITE_ADD_COIN_BY_NEXT_FLOOR_MIN_COIN_PERCENT = 19;
  CHAPTER_KNIGHT_RICH_MAN_FLOWER_ID_SETTLE_COIN_SITE_MORE_COIN_PERCENT_BY_EQUIP_FLOWER_NUM = 8;
  CHAPTER_KNIGHT_RICH_MAN_FLOWER_ID_SETTLE_COIN_SITE_MORE_COIN_PERCENT = 17;
  CHAPTER_KNIGHT_RICH_MAN_FLOWER_ID_SETTLE_CARD_SITE_ADD_COIN_BY_USE_CARD_NUM = 12;
  CHAPTER_KNIGHT_RICH_MAN_FLOWER_ID_ENTER_FLOOR_EXTRA_MOVE_TIMES = 6;
  CHAPTER_KNIGHT_RICH_MAN_FLOWER_ID_ENTER_FLOOR_MORE_CONTROL_DICE = 2;
  CHAPTER_KNIGHT_RICH_MAN_FLOWER_ID_ENTER_FLOOR_MORE_CARD_SITE = 10;
  CHAPTER_KNIGHT_RICH_MAN_FLOWER_ID_ENTER_FLOOR_ADD_GAMBLE_CHEAT_TIMES = 28;
  CHAPTER_KNIGHT_RICH_MAN_FLOWER_ID_ENTER_FLOOR_MORE_GAMBLE_SITE = 29;
  CHAPTER_KNIGHT_RICH_MAN_FLOWER_ID_ENTER_FLOOR_MORE_HOUSE_SITE = 30;
  CHAPTER_KNIGHT_RICH_MAN_FLOWER_ID_THROW_DICE_ADD_COIN_IF_CONTROL_DICE = 3;
  CHAPTER_KNIGHT_RICH_MAN_FLOWER_ID_THROW_DICE_MULTI_DICE_WITH_ONE = 4;
  CHAPTER_KNIGHT_RICH_MAN_FLOWER_ID_THROW_DICE_MULTI_DICE_WITH_SUM = 5;
  CHAPTER_KNIGHT_RICH_MAN_FLOWER_ID_THROW_DICE_ADD_COIN_IF_SAME_DICE_NUM = 13;
  CHAPTER_KNIGHT_RICH_MAN_FLOWER_ID_THROW_DICE_ADD_COIN_IF_SAME_ODD_OR_EVEN_DICE_NUM = 14;
  CHAPTER_KNIGHT_RICH_MAN_FLOWER_ID_THROW_DICE_ADD_COIN_IF_MAX_DICE_NUM = 15;
  CHAPTER_KNIGHT_RICH_MAN_FLOWER_ID_THROW_DICE_ADD_COIN_BY_DICE_NUM = 16;
  CHAPTER_KNIGHT_RICH_MAN_FLOWER_ID_THROW_DICE_ADD_EXTRA_MOVE_TIMES_BY_CHANCE = 21;
  CHAPTER_KNIGHT_RICH_MAN_FLOWER_ID_USE_CARD_ADD_COIN = 11;
  CHAPTER_KNIGHT_RICH_MAN_FLOWER_ID_USE_CARD_ADD_RANDOM_CARD_BY_CHANCE = 9;
  CHAPTER_KNIGHT_RICH_MAN_FLOWER_ID_TRIGGER_EVENT_MORE_COIN_PERCENT = 18;
  CHAPTER_KNIGHT_RICH_MAN_FLOWER_ID_FINISH_SITE_ADD_COIN_BY_PERCENT = 20;
  CHAPTER_KNIGHT_RICH_MAN_FLOWER_ID_HOUSE_MORE_PERCENT_RENT = 22;
  CHAPTER_KNIGHT_RICH_MAN_FLOWER_ID_HOUSE_MORE_OPERATE_TIME = 23;
  CHAPTER_KNIGHT_RICH_MAN_FLOWER_ID_HOUSE_LOWER_PRICE = 24;
  CHAPTER_KNIGHT_RICH_MAN_FLOWER_ID_GAMBLE_BET_COIN_NUM_BY_COIN_PERCENT = 25;
  CHAPTER_KNIGHT_RICH_MAN_FLOWER_ID_GAMBLE_MORE_ODDS = 26;
  CHAPTER_KNIGHT_RICH_MAN_FLOWER_ID_GAMBLE_RETURN_PERCENT_COIN_WHEN_LOSE = 27;
  CHAPTER_KNIGHT_RICH_MAN_FLOWER_ID_CONVERT_TO_COIN = 31;
}

enum ChapterKnightRichManBuffGradeType {
  CHAPTER_KNIGHT_RICH_MAN_BUFF_GRADE_TYPE_NONE = 0;
  CHAPTER_KNIGHT_RICH_MAN_BUFF_GRADE_CORE = 1;
  CHAPTER_KNIGHT_RICH_MAN_BUFF_GRADE_NORMAL = 2;
  CHAPTER_KNIGHT_RICH_MAN_BUFF_GRADE_SPECIAL = 3;
  CHAPTER_KNIGHT_RICH_MAN_BUFF_GRADE_CONVERT_TO_SCORE = 4;
}

enum ChapterKnightRichManEndFloorType {
  CHAPTER_KNIGHT_RICH_MAN_END_FLOOR_TYPE_NONE = 0;
  CHAPTER_KNIGHT_RICH_MAN_END_FLOOR_REACH_SITE = 1;
  CHAPTER_KNIGHT_RICH_MAN_END_FLOOR_USE_ALL_DICE = 2;
}

enum PjmsChapterKnightDurandalCubeSiteType {
  PJMS_CHAPTER_KNIGHT_DURANDAL_CUBE_SITE_TYPE_NONE = 0;
  PJMS_CHAPTER_DURANDAL_CUBE_SITE_PLOT = 1;
  PJMS_CHAPTER_DURANDAL_CUBE_SITE_STAGE = 2;
  PJMS_CHAPTER_DURANDAL_CUBE_SITE_TILE = 3;
}

enum PjmsChapterKnightSpaceAdventureConditionType {
  PJMS_CHAPTER_KNIGHT_SPACE_ADVENTURE_CONDITION_NONE = 0;
  PJMS_CHAPTER_KNIGHT_SPACE_ADVENTURE_CONDITION_HP_PERCENT_IN_RANGE = 1;
  PJMS_CHAPTER_KNIGHT_SPACE_ADVENTURE_CONDITION_OWN_ALL_CARD = 2;
  PJMS_CHAPTER_KNIGHT_SPACE_ADVENTURE_CONDITION_NOT_OWN_ANY_CARD = 3;
  PJMS_CHAPTER_KNIGHT_SPACE_ADVENTURE_CONDITION_CUR_TIME_GE = 4;
}

enum PjmsChapterKnightSpaceAdventureSiteType {
  PJMS_CHAPTER_KNIGHT_SPACE_ADVENTURE_SITE_TYPE_BEGIN = 0;
  PJMS_CHAPTER_KNIGHT_SPACE_ADVENTURE_SITE_TYPE_SHIP_FIGHT = 1;
  PJMS_CHAPTER_KNIGHT_SPACE_ADVENTURE_SITE_TYPE_AVATAR = 2;
  PJMS_CHAPTER_KNIGHT_SPACE_ADVENTURE_SITE_TYPE_EVENT = 3;
  PJMS_CHAPTER_KNIGHT_SPACE_ADVENTURE_SITE_TYPE_SHOP = 4;
  PJMS_CHAPTER_KNIGHT_SPACE_ADVENTURE_SITE_TYPE_PLOT = 5;
}

enum PjmsChapterKnightSpaceAdventureActionType {
  PJMS_CHAPTER_KNIGHT_SPACE_ADVENTURE_ACTION_TYPE_NONE = 0;
  PJMS_CHAPTER_KNIGHT_SPACE_ADVENTURE_ACTION_TYPE_APPLY_STATUS = 1;
  PJMS_CHAPTER_KNIGHT_SPACE_ADVENTURE_ACTION_TYPE_ADD_CARDS = 2;
  PJMS_CHAPTER_KNIGHT_SPACE_ADVENTURE_ACTION_TYPE_TRIGGER_ACTION_LIST = 3;
  PJMS_CHAPTER_KNIGHT_SPACE_ADVENTURE_ACTION_TYPE_TRIGGER_RANDOM_ACTION = 4;
  PJMS_CHAPTER_KNIGHT_SPACE_ADVENTURE_ACTION_TYPE_ADD_RANDOM_CARD = 5;
  PJMS_CHAPTER_KNIGHT_SPACE_ADVENTURE_ACTION_TYPE_NO_MORE_HP_HEAL = 6;
}

enum PjmsChapterKnightSpaceAdventureShopGoodsType {
  PJMS_CHAPTER_KNIGHT_SPACE_ADVENTURE_SHOP_GOODS_INVALID = 0;
  PJMS_CHAPTER_KNIGHT_SPACE_ADVENTURE_SHOP_GOODS_ENERGY_LIMIT = 1;
  PJMS_CHAPTER_KNIGHT_SPACE_ADVENTURE_SHOP_GOODS_REPAIR = 2;
  PJMS_CHAPTER_KNIGHT_SPACE_ADVENTURE_SHOP_GOODS_MISSILE = 3;
  PJMS_CHAPTER_KNIGHT_SPACE_ADVENTURE_SHOP_GOODS_EMP = 4;
  PJMS_CHAPTER_KNIGHT_SPACE_ADVENTURE_SHOP_GOODS_CARD = 5;
}

message ChatgroupMember {
  uint32 uid = 1;
  ChatgroupPosition position = 2;
  PlayerFriendBriefData brief_data = 3;
}

message Chatgroup {
  uint32 chatgroup_id = 1;
  string name = 2;
  string notice = 3;
  uint32 icon_id = 4;
  repeated ChatgroupMember member_list = 5;
  repeated uint32 label_id_list = 6;
}

// CmdID: 2200
message CreateChatgroupReq {
  string name = 1;
  string notice = 2;
  uint32 icon_id = 3;
  repeated uint32 label_id_list = 4;
}

// CmdID: 2201
message CreateChatgroupRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    CREATE_MAX = 2;
    JOIN_MAX = 3;
    SENSITIVE_WORD = 4;
    LEVEL_LACK = 5;
    LABEL_ERROR = 6;
    NAME_FORMAT_ERROR = 7;
    NOTICE_FORMAT_ERROR = 8;
    FEATURE_LIMIT = 9;
    IN_AUDIT = 10;
  }

  CreateChatgroupRsp.Retcode retcode = 1;
  Chatgroup chatgroup = 2;
  string audit_name = 3;
  string audit_notice = 4;
}

// CmdID: 2202
message InviteChatgroupReq {
  uint32 chatgroup_id = 1;
  repeated uint32 friend_list = 2;
  repeated uint32 master_pupil_list = 3;
  repeated uint32 stranger_uid_list = 4;
}

// CmdID: 2203
message InviteChatgroupRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_CREATER = 2;
    EXCEED_MAX_MEMBER_NUM = 3;
    GROUP_NOT_FOUND = 4;
    NOT_IN_GROUP = 5;
    UID_NOT_EXIST = 6;
    FRIEND_ERROR = 7;
    MASTER_PUPIL_ERROR = 8;
    FEATURE_LIMIT = 9;
    FEATURE_CLOSED = 10;
  }

  InviteChatgroupRsp.Retcode retcode = 1;
  repeated uint32 succ_uid_list = 2;
  repeated uint32 succ_stranger_uid_list = 3;
}

message ChatgroupInvite {
  uint32 chatgroup_id = 1;
  string name = 2;
  string notice = 3;
  uint32 icon_id = 4;
  uint32 inviter_uid = 5;
  PlayerFriendBriefData inviter_info = 6;
  uint32 invite_time = 7;
  uint32 chatgroup_member_num = 8;
}

// CmdID: 2204
message GetChatgroupListReq {
  bool is_all = 1;
  repeated uint32 chatgroup_id_list = 2;
}

// CmdID: 2205
message GetChatgroupListRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetChatgroupListRsp.Retcode retcode = 1;
  bool is_all = 2;
  repeated Chatgroup chatgroup_list = 3;
  repeated ChatgroupInvite invite_list = 4;
}

// CmdID: 2206
message SetChatgroupReq {
  uint32 chatgroup_id = 1;
  string name = 2;
  string notice = 3;
  uint32 icon_id = 4;
  repeated uint32 label_id_list = 5;
}

// CmdID: 2207
message SetChatgroupRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_CREATER = 2;
    SENSITIVE_WORD = 3;
    LABEL_ERROR = 4;
    NAME_FORMAT_ERROR = 5;
    NOTICE_FORMAT_ERROR = 6;
    FORBIDDEN = 7;
    IN_CD = 8;
    IN_AUDIT = 9;
  }

  SetChatgroupRsp.Retcode retcode = 1;
  uint32 chatgroup_id = 2;
  string name = 3;
  string notice = 4;
  uint32 icon_id = 5;
  repeated uint32 label_id_list = 6;
  string old_name = 7;
  string old_notice = 8;
  string audit_name = 9;
  string audit_notice = 10;
  uint32 cd_end_time = 11;
}

// CmdID: 2208
message LeaveChatgroupReq {
  uint32 chatgroup_id = 1;
}

// CmdID: 2209
message LeaveChatgroupRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_MEMBER = 2;
  }

  LeaveChatgroupRsp.Retcode retcode = 1;
  uint32 chatgroup_id = 2;
}

message ChatgroupJoinMsg {
  uint32 inviter_uid = 1;
  repeated ChatgroupMember member_list = 2;
}

message ChatgroupSettingMsg {
  uint32 operator_uid = 1;
  string name = 2;
  string notice = 3;
  uint32 icon_id = 4;
  repeated uint32 label_id_list = 5;
}

message ChatgroupLeaveMsg {
  uint32 operator_uid = 1;
  uint32 leave_uid = 2;
}

// CmdID: 2211
message ChatgroupSystemNotify {
  ChatgroupSystemNotifyType type = 1;
  uint32 chatgroup_id = 2;
  Chatgroup chatgroup = 3;
  ChatgroupJoinMsg join_msg = 4;
  ChatgroupLeaveMsg leave_msg = 5;
  ChatgroupSettingMsg setting_msg = 6;
  ChatgroupInvite invite = 7;
  repeated uint32 target_uid_list = 8;
  string chatgroup_name = 9;
  uint32 time = 10;
}

// CmdID: 2212
message KickChatgroupMemberReq {
  uint32 chatgroup_id = 1;
  uint32 target_uid = 2;
}

// CmdID: 2213
message KickChatgroupMemberRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_CREATER = 2;
    KICK_SELF = 3;
    NOT_MEMBER = 4;
  }

  KickChatgroupMemberRsp.Retcode retcode = 1;
  uint32 chatgroup_id = 2;
  uint32 target_uid = 3;
}

// CmdID: 2214
message DealChatgroupInviteReq {
  enum InviteAction {
    INVITE_NONE = 0;
    INVITE_AGREE = 1;
    INVITE_REJECT = 2;
  }

  uint32 chatgroup_id = 1;
  DealChatgroupInviteReq.InviteAction action = 2;
}

// CmdID: 2215
message DealChatgroupInviteRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    INVITE_NOT_EXIST = 2;
    ALREADY_IN = 3;
    JOIN_MAX = 4;
    CHATGROUP_FULL = 5;
  }

  DealChatgroupInviteRsp.Retcode retcode = 1;
  uint32 chatgroup_id = 2;
}

// CmdID: 2216
message InviteToMultiChatgroupReq {
  uint32 target_uid = 1;
  repeated uint32 chatgroup_id_list = 2;
  bool is_has_relation = 3;
}

// CmdID: 2217
message InviteToMultiChatgroupRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    JOIN_MAX_NUM = 2;
    FEATURE_CLOSED = 3;
  }

  InviteToMultiChatgroupRsp.Retcode retcode = 1;
  uint32 target_uid = 2;
  repeated uint32 chatgroup_id_list = 3;
  bool is_stranger = 4;
}

// CmdID: 2218
message GetChatgroupHistoryChatMsgReq {
  uint32 chatgroup_id = 1;
}

// CmdID: 2219
message GetChatgroupHistoryChatMsgRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetChatgroupHistoryChatMsgRsp.Retcode retcode = 1;
  uint32 chatgroup_id = 2;
  repeated ChatMsg chat_msg_list = 3;
}

// CmdID: 2231
message EnterWorldChatroomReq {
  uint32 chatroom_id = 1;
  ActivityWorldChatroomType activity_type = 2;
  uint32 para = 3;
  uint32 player_level = 4;
  string player_region = 5;
}

// CmdID: 2232
message EnterWorldChatroomRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    LEVEL_LACK = 2;
    CHATROOM_ID_ERROR = 3;
    CHATROOM_FULL = 4;
    NO_KINGDOM = 5;
    TOO_OFTEN = 6;
    FEATURE_CLOSED = 7;
    NO_GLOBAL_EXPLORE_KINGDOM = 8;
  }

  EnterWorldChatroomRsp.Retcode retcode = 1;
  uint32 chatroom_id = 2;
  repeated ChatMsg his_chat_msg_list = 3;
  ActivityWorldChatroomType activity_type = 4;
  uint32 player_num = 5;
}

// CmdID: 2233
message LeaveChatroomNotify {
  uint32 new_chatroom_id = 1;
}

message BattleChatParam {
  BattleMode battle_mode = 1;
  uint32 battle_para = 2;
}

message RoomChatParam {
  bool is_broadcast_msg = 1;
}

message PrivateChatParam {
  ChatRelationType relation_type = 1;
}

message GroupChatParam {
  uint32 chatgroup_id = 1;
}

message ExtraChatParam {
  RoomChatParam room_chat_param = 1;
  PrivateChatParam private_chat_param = 2;
  GroupChatParam group_chat_param = 3;
  BattleChatParam battle_chat_param = 4;
}

// CmdID: 2234
message SendChatMsgNotify {
  ChatMsg chat_msg = 1;
  repeated uint32 target_uid_list = 2;
  ExtraChatParam extra_chat_param = 3;
}

// CmdID: 2235
message RecvChatMsgNotify {
  repeated ChatMsg chat_msg_list = 1;
}

// CmdID: 2236
message RecvOfflinePrivateChatMsgNotify {
  repeated ChatMsg chat_msg_list = 1;
}

// CmdID: 2237
message GetPrivateHistoryChatMsgReq {
  repeated uint32 uid_list = 1;
}

message HistoryPrivateChatMsg {
  uint32 uid = 1;
  repeated ChatMsg chat_msg_list = 2;
}

// CmdID: 2238
message GetPrivateHistoryChatMsgRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetPrivateHistoryChatMsgRsp.Retcode retcode = 1;
  repeated HistoryPrivateChatMsg chat_list = 2;
}

// CmdID: 2239
message ChatCloseNotify {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    FEATURE_CLOSE = 2;
    LEVEL_LIMIT = 3;
  }

  ChatCloseNotify.Retcode retcode = 1;
}

enum CmdTypeChat {
  CMD_TYPE_CHAT_NONE = 0;
  CMD_CREATE_CHATGROUP_REQ = 2200;
  CMD_CREATE_CHATGROUP_RSP = 2201;
  CMD_INVITE_CHATGROUP_REQ = 2202;
  CMD_INVITE_CHATGROUP_RSP = 2203;
  CMD_GET_CHATGROUP_LIST_REQ = 2204;
  CMD_GET_CHATGROUP_LIST_RSP = 2205;
  CMD_SET_CHATGROUP_REQ = 2206;
  CMD_SET_CHATGROUP_RSP = 2207;
  CMD_LEAVE_CHATGROUP_REQ = 2208;
  CMD_LEAVE_CHATGROUP_RSP = 2209;
  CMD_CHATGROUP_SYSTEM_NOTIFY = 2211;
  CMD_KICK_CHATGROUP_MEMBER_REQ = 2212;
  CMD_KICK_CHATGROUP_MEMBER_RSP = 2213;
  CMD_DEAL_CHATGROUP_INVITE_REQ = 2214;
  CMD_DEAL_CHATGROUP_INVITE_RSP = 2215;
  CMD_INVITE_TO_MULTI_CHATGROUP_REQ = 2216;
  CMD_INVITE_TO_MULTI_CHATGROUP_RSP = 2217;
  CMD_GET_CHATGROUP_HISTORY_CHAT_MSG_REQ = 2218;
  CMD_GET_CHATGROUP_HISTORY_CHAT_MSG_RSP = 2219;
  CMD_ENTER_WORLD_CHATROOM_REQ = 2231;
  CMD_ENTER_WORLD_CHATROOM_RSP = 2232;
  CMD_LEAVE_CHATROOM_NOTIFY = 2233;
  CMD_SEND_CHAT_MSG_NOTIFY = 2234;
  CMD_RECV_CHAT_MSG_NOTIFY = 2235;
  CMD_RECV_OFFLINE_PRIVATE_CHAT_MSG_NOTIFY = 2236;
  CMD_GET_HISTORY_PRIVATE_CHAT_MSG_REQ = 2237;
  CMD_GET_HISTORY_PRIVATE_CHAT_MSG_RSP = 2238;
  CMD_CHAT_CLOSED_NOTIFY = 2239;
}

enum ChatgroupSystemNotifyType {
  CHATGROUP_NOTIFY_NONE = 0;
  CHATGROUP_NOTIFY_NEW = 1;
  CHATGROUP_NOTIFY_JOIN = 2;
  CHATGROUP_NOTIFY_LEAVE = 3;
  CHATGROUP_NOTIFY_DISSOLVE = 4;
  CHATGROUP_NOTIFY_SETTING = 5;
  CHATGROUP_NOTIFY_INVITE = 6;
}

enum ChatRelationType {
  CHAT_RELATION_TYPE_NONE = 0;
  CHAT_RELATION_TYPE_FRIEND = 1;
  CHAT_RELATION_TYPE_MASTER_PUPIL = 2;
}

message ChatworldEntity {
  uint32 unique_id = 1;
  uint32 entity_type = 2;
  uint32 camp_tag = 3;
  ChatworldPosition position = 4;
  ChatworldPlayerInfo player_info = 16;
  ChatworldItem chatworld_item = 17;
  ChatworldStance chatworld_stance = 18;
  ChatworldFishSpot chatworld_fish_spot = 19;
  ChatworldQuestion chatworld_question = 20;
  ChatworldBeast chatworld_beast = 21;
  ChatworldBox chatworld_box = 22;
  ChatworldWoodenBoy chatworld_wooden_boy = 23;
}

message ChatworldQuestion {
  uint32 activity_id = 1;
  uint32 question_id = 2;
  ChatworldQuestionStatus status = 3;
  uint32 end_time = 4;
  uint32 right_answer_id = 5;
}

message ChatworldEntityMsg {
  repeated ChatworldEntity update_entity_list = 1;
  repeated uint32 delete_entity_list = 2;
}

message ChatworldPosition {
  float x = 1;
  float y = 2;
  float z = 3;
  float rotation = 4;
  float speed = 5;
  uint64 time_ms_u64 = 6;
  float aim_rotation = 7;
  bool is_teleport = 8;
}

message CommonChatworldRedEnvelope {
  uint32 red_envelope_id = 1;
  uint32 expire_time = 2;
  uint32 sender_uid = 3;
  uint32 item_id = 4;
}

message ChatworldBuff {
  uint32 buff_id = 1;
  uint64 expire_time_ms_u64 = 2;
}

message ChatworldStance {
  uint32 stance_id = 1;
  ChatworldPosition position = 2;
  uint32 holding_stance_camp_tag = 3;
  uint32 camp_1_stance_progress = 4;
  uint32 camp_2_stance_progress = 5;
}

message ChatworldStanceMsg {
  repeated ChatworldStance stance_list = 1;
}

message ChatworldCollectBattleItem {
  uint32 item_id = 1;
  uint32 item_num = 2;
}

message ChatworldBattle {
  uint32 score = 1;
  uint32 kill_num = 2;
  uint32 kill_streak = 3;
  uint32 legendary_times = 4;
  repeated ChatworldCollectBattleItem collect_battle_item_list = 5;
}

message ChatworldPlayerInfo {
  uint32 uid = 1;
  string nickname = 2;
  uint32 avatar_id = 3;
  uint32 chat_dress_id = 4;
  ChatworldPosition position = 5;
  uint32 chat_avatar_id = 6;
  uint32 chat_frame_id = 7;
  repeated uint32 holding_list = 8;
  uint32 level = 9;
  string armada_name = 10;
  uint32 mp_level = 11;
  uint32 on_medal_id = 12;
  uint32 action_id = 13;
  repeated CommonChatworldRedEnvelope chatworld_red_envelope_list = 14;
  bool is_all_info = 15;
  uint32 left_hp = 16;
  uint32 next_reborn_time = 17;
  repeated ChatworldBuff buff_list = 18;
  uint32 runtime_tag = 20;
  uint32 custom_head_id = 22;
  uint32 on_medal = 23;
  ChatworldBattle battle_info = 32;
}

message ChatworldFishInfo {
  uint32 daily_get_currency_num = 1;
}

message ChatworldFisher {
  uint32 uid = 1;
  uint32 seat_idx = 2;
  ChatworldFisherStatus fisher_status = 3;
  uint64 status_start_time_ms_u64 = 4;
  uint32 wait_assist_fish_hard_level = 5;
  repeated uint32 assist_uid_list = 6;
  repeated uint32 like_uid_list = 7;
  uint32 last_get_fish_id = 8;
  uint64 last_get_fish_time_ms_u64 = 9;
  ChatworldFishInfo fish_info = 10;
}

message ChatworldFishSpot {
  uint32 fish_spot_id = 1;
  repeated ChatworldFisher fisher_list = 2;
}

message ChatworldBeast {
  enum Status {
    STATUS_NONE = 0;
    CHALLENGE = 1;
    TREASURE = 2;
  }

  uint64 beast_unique_id_u64 = 1;
  uint32 beast_id = 2;
  uint32 stage_id = 4;
  uint32 left_hp = 5;
  ChatworldBeast.Status status = 6;
  repeated uint32 wait_take_treasure_uid_list = 7;
  uint32 expire_time = 8;
  uint32 challenger_num = 9;
  uint32 treasure_rank_id = 10;
}

message ChatworldBox {
  uint32 box_series_id = 1;
  uint32 schedule_id = 3;
  uint32 expire_time = 4;
}

message ChatworldBoxActivity {
  uint32 schedule_id = 1;
  repeated uint64 open_box_unique_id_u64_list = 2;
}

message ChatworldPlayerScene {
  uint32 left_hp = 1;
  uint32 score = 2;
  uint32 last_login_time = 3;
}

// CmdID: 2400
message EnterCommonChatworldReq {
  uint32 chatworld_id = 1;
  ChatworldPlayerInfo player_info = 2;
  uint32 scene_id = 3;
  ChatworldPlayerScene scene_data = 4;
  uint32 last_chatworld_id = 5;
  uint32 camp_tag = 6;
  uint32 last_scene_id = 7;
}

// CmdID: 2401
message EnterCommonChatworldRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    CHATWORLD_ID_ERROR = 2;
    ENTER_ERROR = 3;
    CHATWORLD_FULL = 4;
    LACK_LEVEL = 5;
    NO_QAVATAR = 6;
    NOT_JOIN_ACTIVITY = 7;
    SCENE_NOT_EXIST = 8;
    NOT_OPEN = 9;
    IS_ENTERING = 10;
    NOT_IN_ARMADA = 11;
  }

  EnterCommonChatworldRsp.Retcode retcode = 1;
  uint32 chatworld_id = 2;
  repeated ChatworldEntity player_info_list = 3;
  ChatworldEntity self_info = 4;
  repeated CommonChatworldRedEnvelope npc_red_envelope_list = 5;
  uint32 time = 6;
  uint32 scene_id = 7;
}

// CmdID: 2402
message LeaveCommonChatworldReq {
}

// CmdID: 2403
message LeaveCommonChatworldRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  LeaveCommonChatworldRsp.Retcode retcode = 1;
  bool is_kicked = 2;
}

message ChatworldMsgMove {
  ChatworldPosition target_position = 1;
}

message ChatworldMsgUseItem {
  uint32 material_id = 1;
  uint32 num = 2;
  repeated uint32 target_uid_list = 3;
  string msg = 4;
  bytes extra_data = 5;
}

message ChatworldMsgInteract {
  ChatworldInteractType interact_type = 1;
  uint32 target_npc_id = 2;
}

message ChatworldMsgAction {
  uint32 action_id = 1;
  uint32 target_uid = 2;
}

message CommonChatworldRedEnvelopeMsg {
  uint32 sender_uid = 1;
  uint32 channel = 2;
  bool is_sender_npc = 3;
  CommonChatworldRedEnvelope chatworld_red_envelope = 4;
  string msg = 5;
}

message ChatworldTreasureMsg {
  uint32 cur_treasure_schedule_id = 1;
  repeated ChatworldTreasure new_treasure_list = 2;
  repeated ChatworldTreasure update_treasure_list = 3;
  repeated ChatworldTreasure delete_treasure_list = 4;
}

message ChatworldSkillAttackMsg {
  repeated uint32 skill_unique_id_list = 1;
  uint32 skill_id = 2;
  ChatworldPosition attack_pos = 3;
}

message ChatworldEntityHp {
  uint32 hit_unique_id = 1;
  uint32 old_hp = 2;
  uint32 left_hp = 3;
}

message ChatworldSkillDamageMsg {
  uint32 skill_unique_id = 1;
  uint32 skill_id = 2;
  ChatworldPosition damage_pos = 3;
  repeated ChatworldEntityHp entity_hp_list = 4;
}

message ChatworldItem {
  uint32 item_id = 1;
  uint32 item_hp = 2;
}

message ChatworldSkillCancelMsg {
  uint32 skill_unique_id = 1;
}

message ChatworldItemMsg {
  repeated ChatworldItem update_item_list = 1;
  repeated uint32 delete_item_list = 2;
}

message ChatworldBanquetLanternInfo {
  uint32 lantern_uid = 1;
  uint32 expire_time = 2;
  uint32 sender_uid = 3;
  bool is_npc_sender = 4;
}

message ChatworldBanquetMsg {
  uint32 sender_uid = 1;
  bool is_npc_sender = 2;
  uint32 greeting_id = 3;
  ChatworldBanquetLanternInfo send_lantern_info = 4;
  ChatworldBanquetLanternInfo taken_lantern_info = 5;
}

message ChatworldMsgItem {
  enum ChatworldMsgType {
    CHATWORLD_MSG_TYPE_NONE = 0;
    STR_MSG = 1;
    ENTER_CHATWORLD = 2;
    MOVE_IN_CHATWORLD = 3;
    LEAVE_CHATWORLD = 4;
    INT_MSG = 5;
    CLIENT_MSG = 6;
    NORMAL_MSG = 7;
    USE_ITEM = 8;
    CHANGE_AVATAR = 9;
    INTERACT_MSG = 10;
    ACTION_MSG = 11;
    SEND_RED_ENVELOPE = 12;
    RED_ENVELOPE_TAKEN_OVER = 13;
    TREASURE_MSG = 14;
    SKILL_ATTACK_MSG = 15;
    SKILL_DAMAGE_MSG = 16;
    PLAYER_REBORN_MSG = 17;
    BUFF_MSG = 18;
    SKILL_CANCEL_MSG = 20;
    PLAYER_BATTLE_MSG = 21;
    ENTITY_MSG = 23;
    ENTITY_HP_MSG = 24;
    CHANGE_ENTER_EFFECT = 25;
    BANQUET_MSG = 26;
  }

  ChatworldMsgItem.ChatworldMsgType type = 1;
  ChatworldEntity player_info = 2;
  int32 msg_int = 5;
  bytes client_msg = 6;
  ChatMsgItem normal_msg = 7;
  ChatworldMsgUseItem use_item_msg = 8;
  ChatworldMsgInteract interact_msg = 10;
  ChatworldMsgAction action_msg = 11;
  CommonChatworldRedEnvelopeMsg red_envelope_msg = 12;
  ChatworldTreasureMsg chatworld_treasure_msg = 13;
  ChatworldSkillAttackMsg skill_attack_msg = 14;
  ChatworldSkillDamageMsg skill_damage_msg = 15;
  ChatworldSkillCancelMsg skill_cancel_msg = 17;
  ChatworldEntityMsg entity_msg = 20;
  ChatworldEntityHp entity_hp_msg = 21;
  ChatworldBanquetMsg banquet_msg = 22;
}

message ChatworldMsg {
  repeated ChatworldMsgItem item_list = 1;
  uint32 uid = 2;
  uint64 time_ms_u64 = 3;
  float client_time = 4;
  bool is_system_msg = 5;
  ChatMsgSensitiveCheckResult check_result = 6;
}

// CmdID: 2404
message SendCommonChatworldMsgNotify {
  ChatworldMsg msg = 1;
}

// CmdID: 2405
message RecvCommonChatworldMsgNotify {
  repeated ChatworldMsg chat_msg_list = 1;
}

// CmdID: 2407
message ChatworldUseItemReq {
  ChatworldMsgUseItem use_item_msg = 1;
}

// CmdID: 2408
message ChatworldUseItemRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ITEM_LACK = 2;
    SENSITIVE_WORD = 3;
    NOT_IN_CHATWORLD = 4;
  }

  ChatworldUseItemRsp.Retcode retcode = 1;
  uint32 material_id = 2;
  uint32 num = 3;
  repeated uint32 target_uid_list = 4;
}

// CmdID: 2409
message ChatworldChangeAvatarReq {
  uint32 avatar_id = 1;
  uint32 scene_id = 2;
}

// CmdID: 2410
message ChatworldChangeAvatarRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_CHATWORLD = 2;
    AVATAR_LOCK = 3;
    SCENE_NOT_EXIST = 4;
    IN_MATCH_STATUS = 5;
    IN_READY_STATUS = 6;
  }

  ChatworldChangeAvatarRsp.Retcode retcode = 1;
  uint32 avatar_id = 2;
  uint32 scene_id = 3;
}

// CmdID: 2411
message GetChatworldListReq {
  uint32 start_id = 1;
  uint32 end_id = 2;
  uint32 scene_id = 3;
}

message ChatworldBrief {
  uint32 chatworld_id = 1;
  uint32 player_num = 2;
  bool is_has_untaken_treasure = 3;
  uint32 beast_num = 4;
}

// CmdID: 2412
message GetChatworldListRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetChatworldListRsp.Retcode retcode = 1;
  repeated ChatworldBrief chatworld_list = 2;
  uint32 show_max_id = 3;
  uint32 scene_id = 4;
  repeated uint32 redis_chatworld_list = 5;
}

// CmdID: 2413
message ChatworldInteractReq {
  ChatworldMsgInteract interact_msg = 1;
}

// CmdID: 2414
message ChatworldInteractRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_CHATWORLD = 3;
    HELD_BY_OTHER = 4;
    NOT_HOLD = 5;
  }

  ChatworldInteractRsp.Retcode retcode = 1;
  ChatworldMsgInteract interact_msg = 2;
}

message ChatworldTreasure {
  uint32 chatworld_id = 1;
  uint32 treasure_id = 2;
  ChatworldPosition position = 3;
  bool is_reward_taken = 4;
  repeated uint32 open_uid_list = 5;
}

// CmdID: 2415
message GetChatworldTreasureDataReq {
  uint32 chatworld_id = 1;
  uint32 cur_treasure_schedule_id = 2;
}

// CmdID: 2416
message GetChatworldTreasureDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_CHATWORLD = 2;
  }

  GetChatworldTreasureDataRsp.Retcode retcode = 1;
  uint32 chatworld_id = 2;
  repeated ChatworldTreasure chatworld_treasure_list = 3;
}

// CmdID: 2417
message OpenChatworldTreasureReq {
  uint32 chatworld_id = 1;
  uint32 treasure_id = 2;
  uint32 cur_treasure_schedule_id = 3;
  bool is_gs_check = 4;
}

// CmdID: 2418
message OpenChatworldTreasureRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    OPEN_NUM_LIMIT = 2;
    MATERIAL_LACK = 3;
    HAS_OPEN = 4;
    HAS_TAKEN = 5;
    TREASURE_EXPIRE = 6;
    NOT_IN_CHATWORLD = 7;
  }

  OpenChatworldTreasureRsp.Retcode retcode = 1;
  uint32 chatworld_id = 2;
  uint32 treasure_id = 3;
  repeated DropItem drop_item_list = 4;
  bool is_take_reward = 5;
  uint32 cur_treasure_schedule_id = 6;
  repeated uint32 open_uid_list = 7;
}

// CmdID: 2419
message ChatworldTreasureRewardNotify {
  uint32 chatworld_id = 1;
  uint32 treasure_id = 2;
  repeated DropItem drop_item_list = 3;
}

// CmdID: 2420
message ChatworldSkillDamageJudgeReq {
  uint32 skill_unique_id = 1;
  repeated uint32 hit_unique_id_list = 2;
  ChatworldPosition damage_pos = 3;
}

// CmdID: 2421
message ChatworldSkillDamageJudgeRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_CHATWORLD = 2;
    HIT_NOT_IN_CHATWORLD = 3;
    NO_ATTACK = 4;
    EXCEED_RANGE = 5;
    CAN_NOT_HIT = 6;
    INVALID_PATH = 7;
    DAMAGE_FREE = 8;
    NOT_ENEMY = 9;
    IS_DEAD = 10;
  }

  ChatworldSkillDamageJudgeRsp.Retcode retcode = 1;
  ChatworldSkillDamageMsg damage_msg = 2;
  uint32 score = 3;
}

// CmdID: 2422
message ChatworldBattleUseItemReq {
  uint32 item_id = 1;
}

// CmdID: 2423
message ChatworldBattleUseItemRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_CHATWORLD = 2;
    NOT_EXIST = 3;
  }

  ChatworldBattleUseItemRsp.Retcode retcode = 1;
}

// CmdID: 2424
message ChatworldPosResetNotify {
  ChatworldPosition reset_pos = 1;
}

// CmdID: 2425
message ChatworldBattleCollectItemReq {
  uint32 item_id = 1;
  uint32 item_unique_id = 2;
}

// CmdID: 2426
message ChatworldBattleCollectItemRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_CHATWORLD = 2;
    NOT_EXIST = 3;
    CAMP_INVALID = 4;
    LACK_TIMES = 5;
    ITEM_NOT_USED = 6;
    ITEM_LIMIT = 7;
  }

  ChatworldBattleCollectItemRsp.Retcode retcode = 1;
  uint32 item_id = 2;
  uint32 item_unique_id = 3;
  RewardData reward_data = 4;
}

message ChatworldActivitySchedule {
  uint32 schedule_id = 1;
  uint32 activity_id = 2;
  uint32 begin_time = 3;
  uint32 end_time = 4;
  uint32 begin_day_time = 5;
  uint32 end_day_time = 6;
}

// CmdID: 2427
message ChatworldGetActivityScheduleReq {
  uint32 scene_id = 1;
}

// CmdID: 2428
message ChatworldGetActivityScheduleRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  ChatworldGetActivityScheduleRsp.Retcode retcode = 1;
  uint32 scene_id = 2;
  repeated ChatworldActivitySchedule schedule_list = 3;
}

// CmdID: 2429
message ChatworldFishJoinSpotReq {
  uint32 fish_spot_id = 1;
  uint32 seat_idx = 2;
  ChatworldFishInfo fish_info = 3;
}

// CmdID: 2430
message ChatworldFishJoinSpotRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    SPOT_FULL = 2;
    CURRENCY_LIMIT = 3;
  }

  ChatworldFishJoinSpotRsp.Retcode retcode = 1;
  uint32 fish_spot_id = 2;
  uint32 seat_idx = 3;
}

// CmdID: 2431
message ChatworldFishLeaveSpotReq {
  uint32 fish_spot_id = 1;
}

// CmdID: 2432
message ChatworldFishLeaveSpotRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  ChatworldFishLeaveSpotRsp.Retcode retcode = 1;
  uint32 fish_spot_id = 2;
}

// CmdID: 2433
message ChatworldFishStartReq {
  uint32 fish_spot_id = 1;
}

// CmdID: 2434
message ChatworldFishStartRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    CURRENCY_LIMIT = 2;
  }

  ChatworldFishStartRsp.Retcode retcode = 1;
  uint32 fish_spot_id = 2;
}

// CmdID: 2435
message ChatworldFishEndReq {
  enum FishEndStatus {
    FISH_END_SUCC = 0;
    FISH_END_WAIT_ASSIST = 1;
    FISH_END_FAIL = 2;
  }

  ChatworldFishEndReq.FishEndStatus fish_end_status = 1;
  uint32 fish_spot_id = 2;
  uint32 fish_group_id = 3;
  uint32 fish_hard_level = 4;
}

// CmdID: 2436
message ChatworldFishEndRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  ChatworldFishEndRsp.Retcode retcode = 1;
  uint32 fish_spot_id = 2;
}

// CmdID: 2437
message ChatworldFishAssistReq {
  uint32 fish_spot_id = 1;
  uint32 target_uid = 2;
}

// CmdID: 2438
message ChatworldFishAssistRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    CURRENCY_LIMIT = 2;
  }

  ChatworldFishAssistRsp.Retcode retcode = 1;
  uint32 fish_spot_id = 2;
  uint32 target_uid = 3;
}

// CmdID: 2439
message ChatworldFishLikeReq {
  uint32 fish_spot_id = 1;
  uint32 target_uid = 2;
}

// CmdID: 2440
message ChatworldFishLikeRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    CURRENCY_LIMIT = 2;
  }

  ChatworldFishLikeRsp.Retcode retcode = 1;
  uint32 fish_spot_id = 2;
  uint32 target_uid = 3;
}

// CmdID: 2441
message ChatworldFishRewardNotify {
  FishRewardSrc reward_src = 1;
  uint32 fish_id = 2;
  uint32 add_currency_num = 3;
  uint32 cur_daily_get_currency_num = 4;
  RewardData extra_reward_data = 5;
}

// CmdID: 2442
message ChatworldFishCancelWaitAssistReq {
  uint32 fish_spot_id = 1;
}

// CmdID: 2443
message ChatworldFishCancelWaitAssistRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_WAIT = 2;
  }

  ChatworldFishCancelWaitAssistRsp.Retcode retcode = 1;
  uint32 fish_spot_id = 2;
}

// CmdID: 2444
message ChatworldFishKickPlayerNotify {
  enum KickReason {
    KICK_NONE = 0;
    KICK_CURRENCY_FULL = 1;
    KICK_NO_ACTION = 2;
  }

  ChatworldFishKickPlayerNotify.KickReason kick_reason = 1;
}

// CmdID: 2445
message ChatworldFishGetActivityInfoReq {
}

// CmdID: 2446
message ChatworldFishGetActivityInfoRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  ChatworldFishGetActivityInfoRsp.Retcode retcode = 1;
  ChatworldFishInfo fish_info = 2;
}

// CmdID: 2451
message ChatworldGetPrayInfoReq {
  uint32 scene_id = 1;
}

// CmdID: 2452
message ChatworldGetPrayInfoRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  ChatworldGetPrayInfoRsp.Retcode retcode = 1;
  uint32 pray_id = 2;
  bool is_has_prayed = 3;
  uint32 has_taken_character_pray_num = 4;
  uint32 total_character_pray_num = 5;
}

// CmdID: 2453
message ChatworldPrayReq {
  uint32 scene_id = 1;
}

// CmdID: 2454
message ChatworldPrayRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_CHATWORLD = 2;
    PRAYED = 3;
    NOT_OPEN = 4;
  }

  ChatworldPrayRsp.Retcode retcode = 1;
  uint32 pray_id = 2;
  RewardData reward_data = 3;
}

// CmdID: 2455
message ChatworldGrantRewardNotify {
  uint32 activity_type = 1;
  uint32 activity_id = 2;
  uint32 reward_id = 3;
  uint32 extra_int = 4;
  RewardData reward_data = 5;
}

// CmdID: 2456
message ChatworldGetDishInfoReq {
}

// CmdID: 2457
message ChatworldGetDishInfoRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  ChatworldGetDishInfoRsp.Retcode retcode = 1;
  uint32 schedule_id = 2;
  bool is_prepare_reward_taken = 3;
  repeated ChatworldDishReward dish_reward_list = 4;
  repeated uint32 taken_dish_limited_reward_list = 5;
}

// CmdID: 2458
message ChatworldTakeDishRewardReq {
  DishRewardType reward_type = 1;
  uint32 reward_id = 2;
}

// CmdID: 2459
message ChatworldTakeDishRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    HAVE_TAKEN = 2;
    NOT_OPEN = 3;
    NO_REWARD = 4;
    IN_CD_TIME = 5;
  }

  ChatworldTakeDishRewardRsp.Retcode retcode = 1;
  DishRewardType reward_type = 2;
  RewardData reward_data = 3;
}

// CmdID: 2460
message ChatworldBeastAddResultNotify {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NO_POSITION = 2;
    ROOM_LIMIT = 3;
  }

  ChatworldBeastAddResultNotify.Retcode retcode = 1;
}

// CmdID: 2461
message ChatworldBeastChallengeReq {
  uint64 beast_unique_id_u64 = 1;
  uint32 beast_id = 2;
}

// CmdID: 2462
message ChatworldBeastChallengeRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    DAILY_LIMIT = 3;
    PLAYER_FULL = 4;
    EXPIRE = 5;
    FINISH = 6;
    TIME_NOT_ENOUGH = 7;
  }

  ChatworldBeastChallengeRsp.Retcode retcode = 1;
  ChatworldBeast beast = 2;
  uint32 chatworld_id = 3;
  uint32 scene_id = 4;
}

// CmdID: 2463
message ChatworldBeastSyncReq {
  uint64 beast_unique_id_u64 = 1;
  uint32 cost_hp = 2;
}

// CmdID: 2464
message ChatworldBeastSyncRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  ChatworldBeastSyncRsp.Retcode retcode = 1;
  uint64 beast_unique_id_u64 = 2;
  uint32 from_uid = 3;
  uint32 cost_hp = 4;
  uint32 left_hp = 5;
}

// CmdID: 2465
message ChatworldBeastGetActivityReq {
}

// CmdID: 2466
message ChatworldBeastGetActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  ChatworldBeastGetActivityRsp.Retcode retcode = 1;
  uint32 daily_senior_challenge_times = 2;
  uint32 daily_junior_challenge_times = 3;
  uint32 daily_senior_treasure_times = 4;
  uint32 daily_junior_treasure_times = 5;
  uint32 refresh_begin_time = 6;
  uint32 refresh_end_time = 7;
  uint32 refresh_interval = 8;
}

// CmdID: 2467
message ChatworldBoxGetDataReq {
}

// CmdID: 2468
message ChatworldBoxGetDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  ChatworldBoxGetDataRsp.Retcode retcode = 1;
  repeated ChatworldBoxActivity box_activity_list = 3;
}

// CmdID: 2469
message ChatworldBoxTakeRewardReq {
  uint32 unique_id = 1;
  uint32 schedule_id = 2;
}

// CmdID: 2470
message ChatworldBoxTakeRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ACTIVITY_NOT_OPEN = 2;
    HAS_TAKE = 3;
    DAILY_LIMIT = 4;
    BOX_NOT_EXIST = 5;
    FINISH = 6;
  }

  ChatworldBoxTakeRewardRsp.Retcode retcode = 1;
  RewardData reward_data = 2;
  uint32 box_series_id = 4;
  uint32 schedule_id = 5;
  uint32 stage_id = 6;
  uint32 box_unique_id = 7;
  repeated uint64 open_box_unique_id_u64_list = 8;
  uint32 chatworld_id = 9;
  uint32 scene_id = 10;
}

// CmdID: 2471
message ChatworldBeastTakeTreasureReq {
  uint64 beast_unique_id_u64 = 1;
  uint32 beast_id = 2;
}

// CmdID: 2472
message ChatworldBeastTakeTreasureRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    HAS_TAKE = 2;
    DAILY_LIMIT = 3;
    NOT_EXIST = 4;
    NO_RIGHT = 5;
    NOT_OPEN = 6;
  }

  ChatworldBeastTakeTreasureRsp.Retcode retcode = 1;
  repeated DropItem drop_item_list = 2;
  uint32 beast_id = 3;
  uint32 treasure_rank_id = 4;
}

// CmdID: 2473
message ChatworldBeastAbandonChallengeReq {
}

// CmdID: 2474
message ChatworldBeastAbandonChallengeRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  ChatworldBeastAbandonChallengeRsp.Retcode retcode = 1;
}

// CmdID: 2475
message ChatworldGetCinemaInfoReq {
}

// CmdID: 2476
message ChatworldGetCinemaInfoRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  ChatworldGetCinemaInfoRsp.Retcode retcode = 1;
  uint32 group_id = 2;
}

message ChatworldWoodenBoyPlayer {
  uint32 uid = 1;
  uint32 score = 2;
  bool is_caught = 3;
  uint32 spot_id = 4;
}

message ChatworldWoodenBoy {
  uint32 activity_id = 1;
  ChatworldWoodenBoyStatus status = 2;
  uint32 status_end_time = 3;
  bool is_npc_win = 4;
  repeated ChatworldWoodenBoyPlayer player_list = 5;
}

// CmdID: 2477
message ChatworldWoodenBoyEnterReq {
}

// CmdID: 2478
message ChatworldWoodenBoyEnterRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    AREA_FULL = 2;
    AREA_PLAYING = 3;
    ALREADY_IN = 4;
  }

  ChatworldWoodenBoyEnterRsp.Retcode retcode = 1;
}

// CmdID: 2479
message ChatworldWoodenBoyLeaveReq {
}

// CmdID: 2480
message ChatworldWoodenBoyLeaveRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  ChatworldWoodenBoyLeaveRsp.Retcode retcode = 1;
}

// CmdID: 2481
message ChatworldWoodenBoyStartNotify {
  uint32 start_time = 1;
  repeated uint32 npc_switch_time_list = 2;
  uint32 timeline_id = 3;
}

// CmdID: 2482
message ChatworldWoodenBoySettleNotify {
  bool is_win = 1;
  uint32 activity_id = 2;
}

// CmdID: 2483
message ChatworldWoodenBoyUpdateStatusReq {
  uint32 score = 1;
  bool is_caught = 2;
}

// CmdID: 2484
message ChatworldWoodenBoyUpdateStatusRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  ChatworldWoodenBoyUpdateStatusRsp.Retcode retcode = 1;
}

// CmdID: 2485
message ChatworldQuestionSettleNotify {
  uint32 activity_id = 1;
  bool is_right = 2;
  uint32 question_id = 3;
  uint32 reward_id = 4;
}

// CmdID: 2486
message ChatWorldGetWishInfoReq {
  uint32 activity_id = 1;
  uint32 pool_id = 2;
}

message ChatWorldWishPool {
  uint32 pool_id = 1;
  repeated uint32 has_got_reward_list = 2;
  uint32 no_baodi_times = 3;
  uint32 wish_random = 4;
  uint32 total_wish_num = 5;
}

// CmdID: 2487
message ChatWorldGetWishInfoRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  ChatWorldGetWishInfoRsp.Retcode retcode = 1;
  ChatWorldWishPool wish_pool_info = 2;
}

// CmdID: 2488
message ChatWorldDoWishReq {
  uint32 activity_id = 1;
  uint32 pool_id = 2;
  uint32 wish_num = 3;
  uint32 wish_random = 4;
}

// CmdID: 2489
message ChatWorldDoWishRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ACTIVITY_NOT_EXIST = 2;
    MATERIAL_LACK = 3;
    ALL_REWARD_GETTED = 4;
  }

  ChatWorldDoWishRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 wish_random = 3;
  repeated uint32 got_reward_id_list = 4;
}

// CmdID: 2492
message ChatWorldExchangeGoodsReq {
  uint32 activity_id = 1;
  uint32 item_id = 2;
}

// CmdID: 2493
message ChatWorldExchangeGoodsRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ACTIVITY_NOT_EXIST = 2;
    MATERIAL_LACK = 3;
    ITEM_NOT_EXIST = 4;
  }

  ChatWorldExchangeGoodsRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 item_id = 3;
  uint32 num = 4;
}

// CmdID: 2494
message ChatworldChangeEnterEffectReq {
  uint32 enter_effect_id = 1;
  uint32 scene_id = 2;
}

// CmdID: 2495
message ChatworldChangeEnterEffectRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_CHATWORLD = 2;
    ENTER_EFFECT_LOCK = 3;
    SCENE_NOT_EXIST = 4;
    IN_MATCH_STATUS = 5;
    IN_READY_STATUS = 6;
  }

  ChatworldChangeEnterEffectRsp.Retcode retcode = 1;
  uint32 enter_effect_id = 2;
  uint32 scene_id = 3;
}

// CmdID: 2496
message ChatworldQCandyActivityGetReq {
  uint32 activity_id = 1;
}

// CmdID: 2497
message ChatworldQCandyActivityGetRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ACTIVITY_NOT_EXIST = 2;
  }

  ChatworldQCandyActivityGetRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 last_choose_avatar_id = 3;
  uint32 last_choose_enter_effect_id = 4;
  repeated uint32 unlocked_avatar_id_list = 5;
  repeated uint32 unlocked_enter_effect_id_list = 6;
  ChatWorldWishPool wish_info = 7;
}

message ChatworldGroupPhotoMember {
  uint32 avatar_id = 1;
  uint32 spot = 2;
  uint32 pose_id = 3;
}

// CmdID: 2506
message ChatworldGroupPhotoGetOpenedBackDropReq {
}

// CmdID: 2507
message ChatworldGroupPhotoGetOpenedBackDropRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  ChatworldGroupPhotoGetOpenedBackDropRsp.Retcode retcode = 1;
  repeated uint32 opened_backdrop_id_list = 2;
}

// CmdID: 2498
message ChatworldGroupPhotoUpdatePlayerInfoReq {
  uint32 schedule_id = 1;
  uint32 backdrop_id = 2;
  uint32 spot = 3;
  uint32 pose_id = 4;
}

// CmdID: 2499
message ChatworldGroupPhotoUpdatePlayerInfoRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    SPOT_NOT_EXIST = 3;
    NOT_IN_ROOM = 4;
  }

  ChatworldGroupPhotoUpdatePlayerInfoRsp.Retcode retcode = 1;
}

// CmdID: 2500
message ChatworldBanquetSendLanternReq {
  uint32 greeting_id = 1;
  string trans_str = 2;
}

// CmdID: 2501
message ChatworldBanquetSendLanternRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    MATERIAL_LACK = 3;
    GREETING_ID_INVALID = 4;
    NOT_IN_CHATWORLD = 5;
  }

  ChatworldBanquetSendLanternRsp.Retcode retcode = 1;
  RewardData reward = 2;
  uint32 greeting_id = 3;
  string trans_str = 4;
}

// CmdID: 2502
message ChatworldBanquetTakeLanternRewardReq {
  uint32 lantern_uid = 1;
  uint32 greeting_id = 2;
}

// CmdID: 2503
message ChatworldBanquetTakeLanternRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    TOO_OFTEN = 3;
    TIMES_LIMIT = 4;
    GREETING_ID_INVALID = 5;
    HAS_TAKEN = 6;
    NOT_EXIST = 7;
    NOT_IN_CHATWORLD = 8;
  }

  ChatworldBanquetTakeLanternRewardRsp.Retcode retcode = 1;
  uint32 lantern_uid = 2;
  RewardData reward = 3;
  bool is_npc_sender = 4;
  string trans_str = 5;
}

// CmdID: 2504
message ChatworldBanquetGetDataReq {
}

// CmdID: 2505
message ChatworldBanquetGetDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    NOT_IN_CHATWORLD = 3;
  }

  ChatworldBanquetGetDataRsp.Retcode retcode = 1;
  uint32 take_lantern_reward_times = 2;
  float dance_time = 3;
  uint32 take_dance_reward_times = 4;
}

// CmdID: 2508
message ChatworldBanquetReportDanceTimeReq {
  float dance_time = 1;
}

// CmdID: 2509
message ChatworldBanquetReportDanceTimeRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    NOT_IN_CHATWORLD = 3;
  }

  ChatworldBanquetReportDanceTimeRsp.Retcode retcode = 1;
}

// CmdID: 2510
message ChatworldBanquetTakeDanceRewardReq {
}

// CmdID: 2511
message ChatworldBanquetTakeDanceRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    NOT_IN_CHATWORLD = 3;
    TIMES_LIMIT = 4;
  }

  ChatworldBanquetTakeDanceRewardRsp.Retcode retcode = 1;
  RewardData reward = 2;
  uint32 today_take_reward_times = 3;
}

// CmdID: 2512
message ChatworldAddRobotNotify {
  uint32 robot_num = 1;
  uint32 chatworld_id = 2;
  ChatworldPosition position = 3;
  ChatworldPlayerInfo player_info = 4;
  uint32 scene_id = 5;
  ChatworldPlayerScene scene_data = 6;
}

enum CmdTypeChatworld {
  CMD_TYPE_CHATWORLD_NONE = 0;
  CMD_ENTER_COMMON_CHATWORLD_REQ = 2400;
  CMD_ENTER_COMMON_CHATWORLD_RSP = 2401;
  CMD_LEAVE_COMMON_CHATWORLD_REQ = 2402;
  CMD_LEAVE_COMMON_CHATWORLD_RSP = 2403;
  CMD_SEND_COMMON_CHATWORLD_MSG_NOTIFY = 2404;
  CMD_RECV_COMMON_CHATWORLD_MSG_NOTIFY = 2405;
  CMD_CHATWORLD_USE_ITEM_REQ = 2407;
  CMD_CHATWORLD_USE_ITEM_RSP = 2408;
  CMD_CHATWORLD_CHANGE_AVATAR_REQ = 2409;
  CMD_CHATWORLD_CHANGE_AVATAR_RSP = 2410;
  CMD_GET_CHATWORLD_LIST_REQ = 2411;
  CMD_GET_CHATWORLD_LIST_RSP = 2412;
  CMD_CHATWORLD_INTERACT_REQ = 2413;
  CMD_CHATWORLD_INTERACT_RSP = 2414;
  CMD_GET_CHATWORLD_TREASURE_DATA_REQ = 2415;
  CMD_GET_CHATWORLD_TREASURE_DATA_RSP = 2416;
  CMD_OPEN_CHATWORLD_TREASURE_REQ = 2417;
  CMD_OPEN_CHATWORLD_TREASURE_RSP = 2418;
  CMD_CHATWORLD_TREASURE_REWARD_NOTIFY = 2419;
  CMD_CHATWORLD_SKILL_DAMAGE_JUDGE_REQ = 2420;
  CMD_CHATWORLD_SKILL_DAMAGE_JUDGE_RSP = 2421;
  CMD_CHATWORLD_BATTLE_USE_ITEM_REQ = 2422;
  CMD_CHATWORLD_BATTLE_USE_ITEM_RSP = 2423;
  CMD_CHATWORLD_POS_RESET_NOTIFY = 2424;
  CMD_CHATWORLD_BATTLE_COLLECT_ITEM_REQ = 2425;
  CMD_CHATWORLD_BATTLE_COLLECT_ITEM_RSP = 2426;
  CMD_CHATWORLD_GET_ACTIVITY_SCHEDULE_REQ = 2427;
  CMD_CHATWORLD_GET_ACTIVITY_SCHEDULE_RSP = 2428;
  CMD_CHATWORLD_FISH_JOIN_SPOT_REQ = 2429;
  CMD_CHATWORLD_FISH_JOIN_SPOT_RSP = 2430;
  CMD_CHATWORLD_FISH_LEAVE_SPOT_REQ = 2431;
  CMD_CHATWORLD_FISH_LEAVE_SPOT_RSP = 2432;
  CMD_CHATWORLD_FISH_START_REQ = 2433;
  CMD_CHATWORLD_FISH_START_RSP = 2434;
  CMD_CHATWORLD_FISH_END_REQ = 2435;
  CMD_CHATWORLD_FISH_END_RSP = 2436;
  CMD_CHATWORLD_FISH_ASSIST_REQ = 2437;
  CMD_CHATWORLD_FISH_ASSIST_RSP = 2438;
  CMD_CHATWORLD_FISH_LIKE_REQ = 2439;
  CMD_CHATWORLD_FISH_LIKE_RSP = 2440;
  CMD_CHATWORLD_FISH_REWARD_NOTIFY = 2441;
  CMD_CHATWORLD_FISH_CANCEL_WAIT_ASSIST_REQ = 2442;
  CMD_CHATWORLD_FISH_CANCEL_WAIT_ASSIST_RSP = 2443;
  CMD_CHATWORLD_FISH_KICK_PLAYER_NOTIFY = 2444;
  CMD_CHATWORLD_FISH_GET_ACTIVITY_INFO_REQ = 2445;
  CMD_CHATWORLD_FISH_GET_ACTIVITY_INFO_RSP = 2446;
  CMD_CHATWORLD_GET_PRAY_INFO_REQ = 2451;
  CMD_CHATWORLD_GET_PRAY_INFO_RSP = 2452;
  CMD_CHATWORLD_PRAY_REQ = 2453;
  CMD_CHATWORLD_PRAY_RSP = 2454;
  CMD_CHATWORLD_GRANT_REWARD_NOTIFY = 2455;
  CMD_CHATWORLD_GET_DISH_INFO_REQ = 2456;
  CMD_CHATWORLD_GET_DISH_INFO_RSP = 2457;
  CMD_CHATWORLD_TAKE_DISH_REWARD_REQ = 2458;
  CMD_CHATWORLD_TAKE_DISH_REWARD_RSP = 2459;
  CMD_CHATWORLD_BEAST_ADD_RESULT_NOTIFY = 2460;
  CMD_CHATWORLD_BEAST_CHALLENGE_REQ = 2461;
  CMD_CHATWORLD_BEAST_CHALLENGE_RSP = 2462;
  CMD_CHATWORLD_BEAST_SYNC_REQ = 2463;
  CMD_CHATWORLD_BEAST_SYNC_RSP = 2464;
  CMD_CHATWORLD_BEAST_GET_ACTIVITY_REQ = 2465;
  CMD_CHATWORLD_BEAST_GET_ACTIVITY_RSP = 2466;
  CMD_CHATWORLD_BOX_GET_DATA_REQ = 2467;
  CMD_CHATWORLD_BOX_GET_DATA_RSP = 2468;
  CMD_CHATWORLD_BOX_TAKE_REWARD_REQ = 2469;
  CMD_CHATWORLD_BOX_TAKE_REWARD_RSP = 2470;
  CMD_CHATWORLD_BEAST_TAKE_TREASURE_REQ = 2471;
  CMD_CHATWORLD_BEAST_TAKE_TREASURE_RSP = 2472;
  CMD_CHATWORLD_BEAST_ABANDON_CHALLENGE_REQ = 2473;
  CMD_CHATWORLD_BEAST_ABANDON_CHALLENGE_RSP = 2474;
  CMD_CHATWORLD_GET_CINEMA_INFO_REQ = 2475;
  CMD_CHATWORLD_GET_CINEMA_INFO_RSP = 2476;
  CMD_CHATWORLD_WOODEN_BOY_ENTER_REQ = 2477;
  CMD_CHATWORLD_WOODEN_BOY_ENTER_RSP = 2478;
  CMD_CHATWORLD_WOODEN_BOY_LEAVE_REQ = 2479;
  CMD_CHATWORLD_WOODEN_BOY_LEAVE_RSP = 2480;
  CMD_CHATWORLD_WOODEN_BOY_START_NOTIFY = 2481;
  CMD_CHATWORLD_WOODEN_BOY_SETTLE_NOTIFY = 2482;
  CMD_CHATWORLD_WOODEN_BOY_UPDATE_STATUS_REQ = 2483;
  CMD_CHATWORLD_WOODEN_BOY_UPDATE_STATUS_RSP = 2484;
  CMD_CHATWORLD_QUESTION_SETTLE_NOTIFY = 2485;
  CMD_CHATWORLD_GET_WISH_INFO_REQ = 2486;
  CMD_CHATWORLD_GET_WISH_INFO_RSP = 2487;
  CMD_CHATWORLD_DO_WISH_REQ = 2488;
  CMD_CHATWORLD_DO_WISH_RSP = 2489;
  CMD_CHATWORLD_EXCHANGE_GOODS_REQ = 2492;
  CMD_CHATWORLD_EXCHANGE_GOODS_RSP = 2493;
  CMD_CHATWORLD_CHANGE_ENTER_EFFECT_REQ = 2494;
  CMD_CHATWORLD_CHANGE_ENTER_EFFECT_RSP = 2495;
  CMD_CHATWORLD_QCANDY_ACTIVITY_GET_REQ = 2496;
  CMD_CHATWORLD_QCANDY_ACTIVITY_GET_RSP = 2497;
  CMD_CHATWORLD_GROUP_PHOTO_UPDATE_PLAYER_INFO_REQ = 2498;
  CMD_CHATWORLD_GROUP_PHOTO_UPDATE_PLAYER_INFO_RSP = 2499;
  CMD_CHATWORLD_BANQUET_SEND_LANTERN_REQ = 2500;
  CMD_CHATWORLD_BANQUET_SEND_LANTERN_RSP = 2501;
  CMD_CHATWORLD_BANQUET_TAKE_LANTERN_REWARD_REQ = 2502;
  CMD_CHATWORLD_BANQUET_TAKE_LANTERN_REWARD_RSP = 2503;
  CMD_CHATWORLD_BANQUET_GET_DATA_REQ = 2504;
  CMD_CHATWORLD_BANQUET_GET_DATA_RSP = 2505;
  CMD_CHATWORLD_BANQUET_REPORT_DANCE_TIME_REQ = 2508;
  CMD_CHATWORLD_BANQUET_REPORT_DANCE_TIME_RSP = 2509;
  CMD_CHATWORLD_BANQUET_TAKE_DANCE_REWARD_REQ = 2510;
  CMD_CHATWORLD_BANQUET_TAKE_DANCE_REWARD_RSP = 2511;
  CMD_CHATWORLD_GROUP_PHOTO_GET_OPENED_BACKDROP_REQ = 2506;
  CMD_CHATWORLD_GROUP_PHOTO_GET_OPENED_BACKDROP_RSP = 2507;
  CMD_CHATWORLD_ADD_ROBOT_NOTIFY = 2512;
  CMD_CHATWORLD_DUMMY = 2599;
}

enum ChatworldComponentType {
  CHATWORLD_COMPONENT_TYPE_NONE = 0;
  CHATWORLD_COMPONENT_TYPE_MOVE = 1;
  CHATWORLD_COMPONENT_TYPE_BUFF = 2;
  CHATWORLD_COMPONENT_TYPE_SKILL = 3;
  CHATWORLD_COMPONENT_TYPE_HEALTH = 4;
  CHATWORLD_COMPONENT_TYPE_COLLISION = 5;
}

enum ChatworldEntityType {
  CHATWORLD_ENTITY_TYPE_NONE = 0;
  CHATWORLD_ENTITY_TYPE_PLAYER = 1;
  CHATWORLD_ENTITY_TYPE_SKILL = 2;
  CHATWORLD_ENTITY_TYPE_ITEM = 3;
  CHATWORLD_ENTITY_TYPE_STANCE = 4;
  CHATWORLD_ENTITY_TYPE_FISH = 5;
  CHATWORLD_ENTITY_TYPE_QUESTION = 6;
  CHATWORLD_ENTITY_TYPE_BEAST = 7;
  CHATWORLD_ENTITY_TYPE_BOX = 8;
  CHATWORLD_ENTITY_TYPE_WOODEN_BOY = 9;
}

enum ChatworldQuestionStatus {
  CHATWORLD_QUESTION_NONE = 0;
  CHATWORLD_QUESTION_PREPARE = 1;
  CHATWORLD_QUESTION_ANSWER = 2;
  CHATWORLD_QUESTION_RESULT = 3;
  CHATWORLD_QUESTION_CD = 4;
}

enum ChatworldBattleCampTag {
  CHATWORLD_BATTLE_CAMP_TAG_NONE = 0;
  CHATWORLD_BATTLE_CAMP_TAG_1 = 1;
  CHATWORLD_BATTLE_CAMP_TAG_2 = 2;
}

enum ChatworldBattleItemEffectTarget {
  CHATWORLD_BATTLE_ITEM_EFFECT_ALL = 0;
  CHATWORLD_BATTLE_ITEM_EFFECT_ENEMY_CAMP = 1;
  CHATWORLD_BATTLE_ITEM_EFFECT_SELF_CAMP = 2;
}

enum ChatworldFisherStatus {
  CHATWORLD_FISHER_STATUS_NONE = 0;
  CHATWORLD_FISHER_STATUS_PREPARE = 1;
  CHATWORLD_FISHER_STATUS_START = 2;
  CHATWORLD_FISHER_STATUS_END = 3;
  CHATWORLD_FISHER_STATUS_WAIT_ASSIST = 4;
}

enum ChatworldBoxType {
  CHATWORLD_BOX_TYPE_NONE = 0;
  CHATWORLD_BOX_TYPE_REWARD = 1;
  CHATWORLD_BOX_TYPE_BATTLE = 2;
}

enum ChatworldInteractType {
  CHATWORLD_INTERACT_TYPE_NONE = 0;
  CHATWORLD_INTERACT_TYPE_HOLD = 1;
  CHATWORLD_INTERACT_TYPE_UNHOLD = 2;
}

enum SkillDamageCollisionType {
  SKILL_DAMAGE_COLLISION_TYPE_NONE = 0;
  SKILL_DAMAGE_COLLISION_TYPE_POINT = 1;
  SKILL_DAMAGE_COLLISION_TYPE_CIRCLE = 2;
  SKILL_DAMAGE_COLLISION_TYPE_RECT = 3;
  SKILL_DAMAGE_COLLISION_TYPE_SECTOR = 4;
}

enum ChatworldBuffType {
  CHATWORLD_BUFF_TYPE_NONE = 0;
  CHATWORLD_BUFF_TYPE_DAMAGE_FREE = 1;
  CHATWORLD_BUFF_TYPE_SPEED = 2;
}

enum ChatworldType {
  CHATWORLD_TYPE_NONE = 0;
  CHATWORLD_TYPE_PLAIN = 1;
  CHATWORLD_TYPE_BRAWL = 3;
  CHATWORLD_TYPE_STANCE = 4;
  CHATWORLD_TYPE_SPRING_FESTIVAL = 5;
}

enum ChatworldEnterType {
  CHATWORLD_ENTER_TYPE_NONE = 0;
  CHATWORLD_ENTER_TYPE_WORLD = 1;
  CHATWORLD_ENTER_TYPE_ARMADA = 2;
}

enum ChatworldActivityType {
  CHATWORLD_ACTIVITY_TYPE_NONE = 0;
  CHATWORLD_ACTIVITY_TYPE_MAIN_PAGE_NOTICE = 1;
  CHATWORLD_ACTIVITY_TYPE_ACTIVITY_NOTICE = 2;
  CHATWORLD_ACTIVITY_TYPE_FIRE_WORKS = 3;
  CHATWORLD_ACTIVITY_TYPE_FISH = 4;
  CHATWORLD_ACTIVITY_TYPE_PRAY = 5;
  CHATWORLD_ACTIVITY_TYPE_QUESTION = 6;
  CHATWORLD_ACTIVITY_TYPE_PREPARE = 7;
  CHATWORLD_ACTIVITY_TYPE_ARMADA_REUNION = 8;
  CHATWORLD_ACTIVITY_TYPE_DISH = 9;
  CHATWORLD_ACTIVITY_TYPE_BEAST = 10;
  CHATWORLD_ACTIVITY_TYPE_BOX = 11;
  CHATWORLD_ACTIVITY_TYPE_PRAY_WITH_ORDER = 12;
  CHATWORLD_ACTIVITY_TYPE_CINEMA = 13;
  CHATWORLD_ACTIVITY_TYPE_WOODEN_BOY = 14;
  CHATWORLD_ACTIVITY_TYPE_QCANDY = 15;
  CHATWORLD_ACTIVITY_TYPE_GROUPPHOTO = 16;
  CHATWORLD_ACTIVITY_TYPE_BANQUET = 17;
}

enum ChatworldFishHardLevel {
  CHATWORLD_FISH_HARD_LEVEL_NONE = 0;
  CHATWORLD_FISH_HARD_LEVEL_EASY = 1;
  CHATWORLD_FISH_HARD_LEVEL_NORMAL = 2;
  CHATWORLD_FISH_HARD_LEVEL_HARD = 3;
}

enum FishRewardSrc {
  FISH_REWARD_SRC_NONE = 0;
  FISH_REWARD_SRC_NORMAL = 1;
  FISH_REWARD_SRC_GET_MISSED = 2;
  FISH_REWARD_SRC_ASSIST = 3;
  FISH_REWARD_SRC_LIKE = 4;
}

enum ChatworldPrayType {
  CHATWORLD_PRAY_TYPE_NONE = 0;
  CHATWORLD_PRAY_TYPE_NORMAL = 1;
  CHATWORLD_PRAY_TYPE_CHARACTER = 2;
  CHATWORLD_PRAY_TYPE_OLD = 3;
}

enum DishRewardType {
  DISH_REWARD_TYPE_NONE = 0;
  DISH_REWARD_TYPE_PREPARE = 1;
  DISH_REWARD_TYPE_DAILY = 2;
  DISH_REWARD_TYPE_LIMITED = 3;
}

enum ChatwoldBeastLevel {
  CHATWOLD_BEAST_LEVEL_NONE = 0;
  CHATWORLD_BEAST_SENIOR = 1;
  CHATWORLD_BEAST_JUNIOR = 2;
}

enum ChatworldBeastAwardType {
  CHATWORLD_BEAST_AWARD_TYPE_NONE = 0;
  CHATWORLD_BEAST_AWARD_HP_RATIO = 1;
  CHATWORLD_BEAST_AWARD_SCORE = 2;
}

enum ChatworldWoodenBoyStatus {
  CHATWORLD_WOODEN_BOY_NONE = 0;
  CHATWORLD_WOODEN_BOY_PREPARE = 1;
  CHATWORLD_WOODEN_BOY_PLAY = 2;
  CHATWORLD_WOODEN_BOY_RESULT = 3;
  CHATWORLD_WOODEN_BOY_CD = 4;
}

enum ChatWorldWishItemType {
  CHATWORLD_WISH_ITEM_NONE = 0;
  CHATWORLD_WISH_ITEM_REWARD = 1;
  CHATWORLD_WISH_ITEM_AVATAR = 2;
  CHATWORLD_WISH_ITEM_ENTER_EFFECT = 3;
  CHATWORLD_WISH_ITEM_REDENVELOPE = 4;
}

enum ChatWorldGoodsType {
  CHATWORLD_GOODS_NONE = 0;
  CHATWORLD_GOODS_AVATAR = 1;
  CHATWORLD_GOODS_EFFECT = 2;
  CHATWORLD_GOODS_COIN = 3;
}

enum ChatWorldGoodsSourceType {
  CHATWORLD_SOURCE_TYPE_NONE = 0;
  CHATWORLD_SOURCE_TYPE_EXCHANGE = 1;
  CHATWORLD_SOURCE_TYPE_WISH = 2;
  CHATWORLD_SOURCE_TYPE_DEFAULT_UNLOCK = 3;
}

enum ChatworldAvatarType {
  CHATWORLD_AVATAR_NONE = 0;
  CHATWORLD_AVATAR_DORM = 1;
  CHATWORLD_AVATAR_QCANDY = 2;
}

enum ChatworldBanquetNpcType {
  CHATWORLD_BANQUET_NPC_TYPE_NONE = 0;
  CHATWORLD_BANQUET_NPC_TYPE_LANTERN = 1;
  CHATWORLD_BANQUET_NPC_TYPE_DANMAKU = 2;
}

enum ChatworldObjectType {
  CHATWORLD_OBJECT_TYPE_NONE = 0;
  CHATWORLD_OBJECT_TYPE_OBJECT = 1;
  CHATWORLD_OBJECT_TYPE_NPC = 2;
  CHATWORLD_OBJECT_TYPE_TREASURE = 3;
  CHATWORLD_OBJECT_TYPE_FIREWORKS = 4;
}

message ProtoVector2Int {
  int32 x = 1;
  int32 y = 2;
}

message WorldMapServerLocalMessage {
  uint32 last_report_time = 1;
  repeated int32 main_line_Story_list = 2;
  repeated int32 main_chapter_activity_section_list = 3;
  uint32 last_sin_ex = 4;
  repeated int32 entered_open_world_list = 5;
  uint32 last_endless = 6;
}

message AugmentPerformanceLocalMessage {
  repeated int32 finished_entry_perform_id_list = 1;
  repeated ProtoVector2Int selected_finish_dialog_id_list = 2;
}

message AvatarServerLocalMessage {
  repeated int32 favorite_avatar_id_list = 1;
  repeated int32 new_avatar_id_list = 2;
}

message NinjaEventIDPlayedServerLocalMessage {
  repeated int32 played_event_id_list = 1;
}

message GeneralAvatarActivityServeLocalMessage {
  bool entered_sourec_page = 1;
}

message TimerIDToTimeStamp {
  int32 timer_id = 1;
  uint32 time_stamp = 2;
}

message OpenWorldServerLocalMessage {
  repeated TimerIDToTimeStamp started_timer_id_to_time_stamp_list = 1;
}

message PlotGroupIDToTriggerTime {
  uint32 plot_group_id = 1;
  int32 trigger_time = 2;
}

message CardSuiteEpicActiveTime {
  int32 id = 1;
  uint32 time_stamp = 2;
}

message HeroSpiritsEventNotice {
  uint32 hero_id = 1;
  bool is_already_notice = 2;
}

message ChapterOWServerLocalMessage {
  repeated int32 triggered_tips_id_list = 1;
  bool is_ow_map_unlocked = 2;
  bool is_ow_map_churchLight_unlocked = 3;
  bool is_ow_map_church_light_break_played = 4;
  bool is_ow_map_anim_tips_shown = 5;
  bool is_ow_map_memory_tips_shown = 6;
  repeated PlotGroupIDToTriggerTime plot_group_trigger_time_list = 7;
  int32 last_played_site_id = 8;
  uint32 last_played_tower_id = 9;
  bool enterd_endless_tower = 10;
  repeated CardSuiteEpicActiveTime card_suite_epic_active_time_list = 11;
  repeated HeroSpiritsEventNotice hero_spirits_event_notice_list = 12;
  repeated int32 hero_card_collection_popup_list = 13;
  repeated int32 achievement_collection_popup_list = 14;
  bool show_create_suite_btn_popup = 15;
  repeated int32 new_got_hero_id_list = 16;
  repeated int32 new_got_hero_card_id_list = 17;
  bool hide_vfx_in_level = 18;
  bool played_fuse_anim = 19;
  bool played_resurrection_anim = 20;
  bool played_sp_hero_unlock_anim = 21;
  repeated ProtoVector2Int collection_unlock_num_list = 22;
  repeated ProtoVector2Int bag_item_num_list = 23;
  repeated int32 bag_item_popup_list = 24;
  repeated ProtoVector2Int story_series_num_list = 25;
  repeated int32 unlocked_activate_talent_id_list = 26;
  repeated int32 final_achievement_relic_popup_list = 27;
}

message PictureTutorial {
  int32 activity_id = 1;
  repeated int32 tutorial_id_list = 2;
}

message AvatarTutorialLocalMessage {
  repeated uint32 entered_avatar_tutorial_activity_id_list = 1;
  repeated uint32 entered_newbie_guide_tutorial_id_list = 2;
  repeated PictureTutorial finished_picture_tutorial_list = 3;
  repeated PictureTutorial in_level_hinted_picture_tutorial_list = 4;
}

message PhoneNoticeLocalMessage {
  int32 notice_schedule_id = 1;
  uint32 last_notice_time = 2;
  repeated int32 finished_perform_list = 3;
}

message LoginPostData {
  int32 all_show_times = 1;
  uint32 begin_time_of_record_day = 2;
  int32 show_times_in_record_day = 3;
}

message NewbieLoginPostEntry {
  uint32 id = 1;
  LoginPostData data = 2;
}

message NewbieActivityServerMessage {
  repeated NewbieLoginPostEntry newbie_login_post_data_list = 1;
}

message KingdomsWarServerMessage {
  bool played_start_story = 1;
  int64 story_play_record = 2;
}

message GlobalExploreServerMessage {
  repeated int32 clicked_event_collection_id_list = 1;
  repeated int32 viewed_message_id_list = 2;
}

message MainStoryLevelSpecialJobServerMessage {
  repeated int32 job_id_list = 1;
}

message ChapterMemoirServerMessage {
  bool has_access_ender_panel = 1;
}

message QCandyServerMessage {
  bool has_show_trial_level_dialog = 1;
}

message SusannaTrialServerMessage {
  repeated int32 HasEnteredAreas = 1;
}

message GodWarServerMessage {
  repeated uint32 viewed_typewriter_doc_id_list = 1;
}

message ThemeTowerServerMessage {
  repeated int32 HasEnteredSections = 1;
}

message TiledGameLunaServerMessage {
  uint32 CurrentTracingMissionId = 1;
  uint32 CurrentTowerId = 2;
  repeated int32 HasShownMissionGroupBeginHint = 3;
}

message MainLineBagMessage {
  repeated int32 clicked_storage_itemid_list = 1;
}

message AdventureServerMessage {
  bool newsys_dialog_displayed = 1;
}

message SpecialReturneeServerMessage {
  bool has_skip_firstlogin_dialog = 1;
  uint32 skip_endless_dialog_recordID = 2;
  uint32 last_play_tutorial_time_stamp = 3;
  bool has_play_tutorial = 4;
  bool has_clicked_monthcardbtn = 5;
}

message TiledGameFarmServerMessage {
  uint32 CurrentTracingMissionID = 1;
  uint32 EquippedItemID = 2;
  repeated uint32 ViewdAchivementIDs = 3;
  uint32 EquippedSeedItemID = 4;
  repeated uint32 GetMissionIDs = 5;
  repeated uint32 GetAchivementIDs = 6;
  repeated uint32 ViewedHandbookItemIDs = 7;
}

message NewRedDotDressIdServerMessage {
  repeated uint32 NewRedDotDressIdList = 1;
}

message GourmetHuntServerMessage {
  uint32 current_tracing_mission_group_id = 1;
  repeated int32 hasShownMissionGroupBeginHint = 2;
}

message ChatLobbyTextFireworkItemUseExtraData {
  uint32 TextFireworkMetaID = 1;
  int32 PosX = 2;
  int32 PosY = 3;
  int32 PosZ = 4;
}

message ChatLobbyServerMessage {
  repeated uint32 triggered_tutorial_object_id_list = 1;
}

message NewElfMessage {
  bool inited = 1;
  repeated int32 clicked_id_list = 2;
}

message TiledGameSRPGServerMessage {
  uint32 CurrentTracingMissionId = 1;
  uint32 CurrentTowerId = 2;
  repeated int32 HasShownMissionGroupBeginHint = 3;
}

message PjmsActivityReMessage {
  repeated int32 UnlockedSkillIDList = 1;
  int32 OpenAreaNum = 2;
}

message PJMSStoryTrialTeamEditServerMessage {
  repeated int32 TrialUseSelfAvatarIDList = 1;
}

message MonsterFarmServerMessage {
  int32 CurrentTracingMissionID = 1;
  int32 EquippedItemID = 2;
  repeated int32 ViewdAchivementIDs = 3;
  int32 EquippedSeedItemID = 4;
  repeated int32 GetMissionIDs = 5;
  repeated int32 GetAchivementIDs = 6;
  repeated int32 ViewedHandbookItemIDs = 7;
  repeated uint32 MonstersMarkedForDel = 8;
}

message WorldMapResidentActivityServerMessage {
  bool is_in_resident_activity = 1;
  uint32 first_login_level_record = 2;
  uint32 last_resident_activity_id = 3;
  repeated uint32 popup_new_resident_activity_id_record = 4;
  repeated uint32 outer_popup_new_resident_activity_id_record = 5;
}

message SparklePRPGServerMessage {
  uint32 CurrentTowerId = 1;
}

message MarsDurandalCubeRedDotServerMessage {
  uint32 last_time_goto_area_page = 1;
}

message MCKChapterRewardRedDotServerMessage {
  bool already_click_tower_tab = 1;
  bool already_click_explore_tower_btn = 2;
}

message KianaAutoChessServerMessage {
  repeated KianaAutoChessOverAllValue kiana_auto_chess_overallvalue_list = 1;
  repeated int32 kiana_auto_chess_rune_list = 2;
  repeated KianaAutoChessItem kiana_auto_chess_item_list = 3;
  repeated KianaAutoChessCard kiana_auto_chess_card_list = 4;
  int32 free_refresh_times = 5;
  int32 bag_cell_count = 6;
  int32 shop_upgrade_price_reduce = 7;
  int32 gold_num = 8;
  int32 player_max_hp = 9;
  int32 player_hp = 10;
  int32 player_level = 11;
  int32 shop_refresh_cost = 12;
  int32 chosen_battle_npc_id = 13;
  repeated KianaAutoChessPveNpc npc_data_list = 14;
  repeated KianaAutoChessCard redundant_card_list = 15;
  int32 shop_extra_refresh_card_level = 16;
}

message KianaAutoChessOverAllValue {
  int32 key = 1;
  float value = 2;
}

message KianaAutoChessCard {
  int32 cardId = 1;
  int32 cardExp = 2;
}

message KianaAutoChessItem {
  int32 itemId = 1;
  int32 itemLevel = 2;
}

message KianaAutoChessPveNpc {
  int32 npc_Id = 1;
  int32 npc_Hp = 2;
  int32 npc_MaxHp = 3;
}

message TiledGameInnServerMessage {
  repeated TiledGameInnMissionGroupStatusMessage mission_group_status_list = 1;
  int32 track_mission_id = 2;
  uint32 last_time_fetch_daily_mission = 3;
  bool has_show_daily_mission_finish_hint = 4;
  repeated uint32 unlock_area_id_list = 6;
}

message TiledGameInnMissionGroupStatusMessage {
  int32 group_id = 1;
  int32 group_status = 2;
}

message TiledGameInnUnLockSiteGroupMessage {
  uint32 area_id = 1;
  uint32 site_group_id = 2;
}

message DevilAutoChessEvent {
  DevilAutoChessEventType type = 1;
  uint32 event_param = 2;
}

message DevilAutoChessRole {
  uint32 role_id = 1;
  uint32 level = 2;
}

message DevilAutoChessCard {
  uint32 unique_id = 1;
  uint32 card_id = 2;
}

message DevilAutoChessWiki {
  repeated uint32 card_collection_list = 1;
  repeated uint32 treasure_collection_list = 2;
  repeated uint32 achievement_collection_list = 3;
  repeated uint32 bond_collection_list = 4;
}

message DevilAutoChessGame {
  uint32 game_id = 1;
  uint32 wave_id = 2;
  uint32 role_id = 3;
  uint32 hp_lost = 4;
  repeated DevilAutoChessCard card_list = 5;
  repeated uint32 treasure_id_list = 6;
  uint32 action_random = 7;
  repeated uint32 wait_select_card_list = 8;
  repeated uint32 wait_select_treasure_list = 9;
  uint32 removal_num = 10;
  uint32 refresh_num = 11;
  uint32 promote_num = 12;
  uint32 energy = 13;
  string game_transaction_str = 14;
  string ext_info = 15;
}

message DevilAutoChessActivity {
  uint32 activity_id = 1;
  repeated DevilAutoChessRole role_list = 2;
  repeated DevilAutoChessGame game_save_point_list = 3;
  DevilAutoChessWiki wiki = 4;
  repeated uint32 passed_game_list = 5;
  repeated uint32 unlock_card_list = 6;
}

// CmdID: 8200
message DevilAutoChessGetActivityReq {
  uint32 activity_id = 1;
}

// CmdID: 8201
message DevilAutoChessGetActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    FEATURE_CLOSE = 3;
  }

  DevilAutoChessGetActivityRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  DevilAutoChessActivity activity = 3;
}

// CmdID: 8202
message DevilAutoChessRoleLevelUpReq {
  uint32 role_id = 1;
  uint32 target_level = 2;
}

// CmdID: 8203
message DevilAutoChessRoleLevelUpRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    INVALID_ROLE = 2;
    TARGET_LEVEL_ERROR = 3;
    MATERIAL_LACK = 4;
    CONDITION_NOT_MEET = 5;
    NOT_OPEN = 6;
    FEATURE_CLOSE = 7;
  }

  DevilAutoChessRoleLevelUpRsp.Retcode retcode = 1;
  DevilAutoChessRole role = 2;
}

// CmdID: 8204
message DevilAutoChessBeginGameReq {
  uint32 activity_id = 1;
  uint32 game_id = 2;
  uint32 role_id = 3;
  uint32 wave_id = 4;
}

// CmdID: 8205
message DevilAutoChessBeginGameRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    ROLE_ERROR = 3;
    INVALID_GAME = 4;
    WAVE_MISMATCH = 5;
    RPG_SITE_CANNOT_ENTER = 6;
    FEATURE_CLOSE = 7;
  }

  DevilAutoChessBeginGameRsp.Retcode retcode = 1;
  uint32 game_id = 2;
  DevilAutoChessGame game = 3;
}

// CmdID: 8206
message DevilAutoChessGetGameReq {
  uint32 activity_id = 1;
}

// CmdID: 8207
message DevilAutoChessGetGameRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    NOT_IN_GAME = 3;
  }

  DevilAutoChessGetGameRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  DevilAutoChessGame game = 3;
}

// CmdID: 8208
message DevilAutoChessEndGameReq {
  enum Status {
    WIN = 0;
    LOSE = 1;
    ABANDON = 2;
  }

  uint32 game_id = 1;
  DevilAutoChessEndGameReq.Status status = 2;
  uint32 score = 3;
  uint32 wave_num = 4;
  uint32 round_num = 5;
  uint32 card_num = 6;
}

// CmdID: 8209
message DevilAutoChessEndGameRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    GAME_ERROR = 3;
    WAVE_ERROR = 4;
  }

  DevilAutoChessEndGameRsp.Retcode retcode = 1;
  uint32 game_id = 2;
  bool is_first_win = 3;
  RewardData first_reward_data = 4;
  repeated uint32 role_id_list = 5;
  repeated uint32 card_id_list = 6;
  RewardData normal_reward_data = 7;
}

// CmdID: 8210
message DevilAutoChessRemoveCardReq {
  uint32 action_random = 1;
  uint32 card_unique_id = 2;
}

// CmdID: 8211
message DevilAutoChessRemoveCardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    NOT_IN_GAME = 3;
    UNIQUE_ID_ERROR = 4;
    LACK_NUM = 5;
    ACTION_RANDOM_ERROR = 6;
  }

  DevilAutoChessRemoveCardRsp.Retcode retcode = 1;
  uint32 remove_card_unique_id = 2;
  uint32 action_random = 3;
  uint32 cur_removal_num = 4;
}

// CmdID: 8212
message DevilAutoChessRefreshTreasurePoolReq {
  uint32 action_random = 1;
}

// CmdID: 8213
message DevilAutoChessRefreshTreasurePoolRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    NOT_IN_GAME = 3;
    LACK_NUM = 4;
    ACTION_RANDOM_ERROR = 5;
  }

  DevilAutoChessRefreshTreasurePoolRsp.Retcode retcode = 1;
}

// CmdID: 8214
message DevilAutoChessRefreshCardPoolReq {
  uint32 action_random = 1;
}

// CmdID: 8215
message DevilAutoChessRefreshCardPoolRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    NOT_IN_GAME = 3;
    LACK_NUM = 4;
    ACTION_RANDOM_ERROR = 5;
  }

  DevilAutoChessRefreshCardPoolRsp.Retcode retcode = 1;
}

// CmdID: 8216
message DevilAutoChessPromoteCardReq {
  uint32 action_random = 1;
  repeated uint32 source_card_unique_id_list = 2;
  uint32 target_card_id = 3;
}

// CmdID: 8217
message DevilAutoChessPromoteCardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    NOT_IN_GAME = 3;
    SOURCE_CARD_ERROR = 4;
    TARGET_CARD_ERROR = 5;
    LACK_NUM = 6;
    ACTION_RANDOM_ERROR = 7;
  }

  DevilAutoChessPromoteCardRsp.Retcode retcode = 1;
  uint32 card_unique_id = 2;
  uint32 target_card_id = 3;
  uint32 action_random = 4;
  uint32 cur_promote_num = 5;
}

// CmdID: 8218
message DevilAutoChessSelectTreasureReq {
  uint32 action_random = 1;
  uint32 treasure_id = 2;
}

// CmdID: 8219
message DevilAutoChessSelectTreasureRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    NOT_IN_GAME = 3;
    TREASURE_ERROR = 4;
    NUM_LIMIT = 5;
    ACTION_RANDOM_ERROR = 6;
  }

  DevilAutoChessSelectTreasureRsp.Retcode retcode = 1;
}

// CmdID: 8220
message DevilAutoChessSelectCardReq {
  uint32 action_random = 1;
  uint32 card_id = 2;
}

// CmdID: 8221
message DevilAutoChessSelectCardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    NOT_IN_GAME = 3;
    CARD_ERROR = 4;
    NUM_LIMIT = 5;
    ACTION_RANDOM_ERROR = 6;
  }

  DevilAutoChessSelectCardRsp.Retcode retcode = 1;
  uint32 card_unique_id = 2;
}

// CmdID: 8222
message DevilAutoChessFinishWaveReq {
  uint32 action_random = 1;
  uint32 wave_id = 2;
  uint32 round_num = 3;
  uint32 hp_lost = 4;
  uint32 energy = 5;
  string ext_info = 6;
}

// CmdID: 8223
message DevilAutoChessFinishWaveRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    NOT_IN_GAME = 3;
    ACTION_RANDOM_ERROR = 4;
    WAVE_ERROR = 5;
    INFO_SIZE_LIMIT = 6;
  }

  DevilAutoChessFinishWaveRsp.Retcode retcode = 1;
}

// CmdID: 8224
message DevilAutoChessTriggerEventReq {
  uint32 action_random = 1;
  repeated DevilAutoChessEvent event_list = 2;
}

// CmdID: 8225
message DevilAutoChessTriggerEventRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    NOT_IN_GAME = 3;
    ACTION_RANDOM_ERROR = 4;
  }

  DevilAutoChessTriggerEventRsp.Retcode retcode = 1;
}

// CmdID: 8226
message DevilAutoChessSweepChallengeReq {
  uint32 game_id = 1;
  uint32 sweep_material_num = 2;
}

// CmdID: 8227
message DevilAutoChessSweepChallengeRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    GAME_TYPE_ERROR = 3;
    GAME_NOT_PASS = 4;
    MATERIAL_ERROR = 5;
  }

  DevilAutoChessSweepChallengeRsp.Retcode retcode = 1;
  uint32 game_id = 2;
  RewardData normal_reward_data = 3;
}

// CmdID: 8228
message DevilAutoChessGetSpecialRankReq {
  uint32 game_id = 1;
}

// CmdID: 8229
message DevilAutoChessGetSpecialRankRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    INVALID_GAME = 3;
    FEATURE_CLOSE = 4;
  }

  DevilAutoChessGetSpecialRankRsp.Retcode retcode = 1;
  uint32 game_id = 2;
  RankShowData rank_data = 3;
  uint32 rank_percent = 4;
  DevilAutoChessActivitySpecialRankInfo self_rank_data = 5;
  uint32 rank = 6;
}

// CmdID: 8230
message DevilAutoChessGetWikiReq {
  uint32 activity_id = 1;
}

// CmdID: 8231
message DevilAutoChessGetWikiRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    FEATURE_CLOSE = 3;
  }

  DevilAutoChessGetWikiRsp.Retcode retcode = 1;
  DevilAutoChessWiki wiki = 2;
  repeated uint32 unlock_card_list = 3;
}

// CmdID: 8232
message DevilAutoChessUnlockAchievementReq {
  uint32 activity_id = 1;
  uint32 achievement_id = 2;
}

// CmdID: 8233
message DevilAutoChessUnlockAchievementRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  DevilAutoChessUnlockAchievementRsp.Retcode retcode = 1;
  uint32 achievement_id = 2;
}

// CmdID: 8234
message DevilAutoChessUnlockBondReq {
  uint32 activity_id = 1;
  uint32 bond_id = 2;
}

// CmdID: 8235
message DevilAutoChessUnlockBondRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  DevilAutoChessUnlockBondRsp.Retcode retcode = 1;
  uint32 bond_id = 2;
}

enum CmdTypeDevilautochess {
  CMD_TYPE_DEVILAUTOCHESS_NONE = 0;
  CMD_DEVIL_AUTO_CHESS_GET_ACTIVITY_REQ = 8200;
  CMD_DEVIL_AUTO_CHESS_GET_ACTIVITY_RSP = 8201;
  CMD_DEVIL_AUTO_CHESS_ROLE_LEVEL_UP_REQ = 8202;
  CMD_DEVIL_AUTO_CHESS_ROLE_LEVEL_UP_RSP = 8203;
  CMD_DEVIL_AUTO_CHESS_BEGIN_GAME_REQ = 8204;
  CMD_DEVIL_AUTO_CHESS_BEGIN_GAME_RSP = 8205;
  CMD_DEVIL_AUTO_CHESS_GET_GAME_REQ = 8206;
  CMD_DEVIL_AUTO_CHESS_GET_GAME_RSP = 8207;
  CMD_DEVIL_AUTO_CHESS_END_GAME_REQ = 8208;
  CMD_DEVIL_AUTO_CHESS_END_GAME_RSP = 8209;
  CMD_DEVIL_AUTO_CHESS_REMOVE_CARD_REQ = 8210;
  CMD_DEVIL_AUTO_CHESS_REMOVE_CARD_RSP = 8211;
  CMD_DEVIL_AUTO_CHESS_REFRESH_TREASURE_POOL_REQ = 8212;
  CMD_DEVIL_AUTO_CHESS_REFRESH_TREASURE_POOL_RSP = 8213;
  CMD_DEVIL_AUTO_CHESS_REFRESH_CARD_POOL_REQ = 8214;
  CMD_DEVIL_AUTO_CHESS_REFRESH_CARD_POOL_RSP = 8215;
  CMD_DEVIL_AUTO_CHESS_PROMOTE_CARD_REQ = 8216;
  CMD_DEVIL_AUTO_CHESS_PROMOTE_CARD_RSP = 8217;
  CMD_DEVIL_AUTO_CHESS_SELECT_TREASURE_REQ = 8218;
  CMD_DEVIL_AUTO_CHESS_SELECT_TREASURE_RSP = 8219;
  CMD_DEVIL_AUTO_CHESS_SELECT_CARD_REQ = 8220;
  CMD_DEVIL_AUTO_CHESS_SELECT_CARD_RSP = 8221;
  CMD_DEVIL_AUTO_CHESS_FINISH_WAVE_REQ = 8222;
  CMD_DEVIL_AUTO_CHESS_FINISH_WAVE_RSP = 8223;
  CMD_DEVIL_AUTO_CHESS_TRIGGER_EVENT_REQ = 8224;
  CMD_DEVIL_AUTO_CHESS_TRIGGER_EVENT_RSP = 8225;
  CMD_DEVIL_AUTO_CHESS_SWEEP_CHALLENGE_REQ = 8226;
  CMD_DEVIL_AUTO_CHESS_SWEEP_CHALLENGE_RSP = 8227;
  CMD_DEVIL_AUTO_CHESS_GET_SPECIAL_RANK_REQ = 8228;
  CMD_DEVIL_AUTO_CHESS_GET_SPECIAL_RANK_RSP = 8229;
  CMD_DEVIL_AUTO_CHESS_GET_WIKI_REQ = 8230;
  CMD_DEVIL_AUTO_CHESS_GET_WIKI_RSP = 8231;
  CMD_DEVIL_AUTO_CHESS_UNLOCK_ACHIEVEMENT_REQ = 8232;
  CMD_DEVIL_AUTO_CHESS_UNLOCK_ACHIEVEMENT_RSP = 8233;
  CMD_DEVIL_AUTO_CHESS_UNLOCK_BOND_REQ = 8234;
  CMD_DEVIL_AUTO_CHESS_UNLOCK_BOND_RSP = 8235;
}

enum DevilAutoChessGameType {
  DEVIL_AUTO_CHESS_GAME_TYPE_NONE = 0;
  DEVIL_AUTO_CHESS_GAME_TYPE_STORY = 1;
  DEVIL_AUTO_CHESS_GAME_TYPE_CHALLENGE = 2;
  DEVIL_AUTO_CHESS_GAME_TYPE_SPECIAL = 3;
}

enum DevilAutoChessCollectionType {
  DEVIL_AUTO_CHESS_COLLECTION_TYPE_NONE = 0;
  DEVIL_AUTO_CHESS_COLLECTION_TYPE_CARD = 1;
  DEVIL_AUTO_CHESS_COLLECTION_TYPE_TREASURE = 2;
  DEVIL_AUTO_CHESS_COLLECTION_TYPE_ACHIEVEMENT = 3;
  DEVIL_AUTO_CHESS_COLLECTION_TYPE_BOND = 4;
}

enum DevilAutoChessCardRarity {
  DEVIL_AUTO_CHESS_CARD_RARITY_NONE = 0;
  DEVIL_AUTO_CHESS_CARD_RARITY_COMMON = 1;
  DEVIL_AUTO_CHESS_CARD_RARITY_RARE = 2;
  DEVIL_AUTO_CHESS_CARD_RARITY_EPIC = 3;
  DEVIL_AUTO_CHESS_CARD_RARITY_LEGENDARY = 4;
}

enum DevilAutoChessEventType {
  DEVIL_AUTO_CHESS_EVENT_TYPE_NONE = 0;
  DEVIL_AUTO_CHESS_EMPTY = 1;
  DEVIL_AUTO_CHESS_ADD_CARD = 2;
  DEVIL_AUTO_CHESS_REMOVE_CARD = 3;
  DEVIL_AUTO_CHESS_REMOVE_TREASURE = 4;
  DEVIL_AUTO_CHESS_ADD_PROMOTE = 5;
  DEVIL_AUTO_CHESS_ADD_REFRESH = 6;
  DEVIL_AUTO_CHESS_ADD_REMOVAL = 7;
  DEVIL_AUTO_CHESS_ADD_EPIC_CARD_EXT_WEIGHT = 8;
  DEVIL_AUTO_CHESS_SUB_EPIC_CARD_EXT_WEIGHT = 9;
  DEVIL_AUTO_CHESS_ADD_LEGENDARY_CARD_EXT_WEIGHT = 10;
  DEVIL_AUTO_CHESS_SUB_LEGENDARY_CARD_EXT_WEIGHT = 11;
  DEVIL_AUTO_CHESS_ADD_EXT_WAIT_SELECT_CARD_NUM = 12;
  DEVIL_AUTO_CHESS_REFERSH_CARD_POOL = 13;
  DEVIL_AUTO_CHESS_SUB_PROMOTE = 14;
  DEVIL_AUTO_CHESS_SUB_REFRESH = 15;
  DEVIL_AUTO_CHESS_SUB_REMOVAL = 16;
  DEVIL_AUTO_CHESS_REFERSH_TREASURE_POOL = 17;
}

message DiceyDungeonRole {
  uint32 role_id = 1;
  uint32 level = 2;
}

message DiceyDungeonWeapon {
  uint32 weapon_id = 1;
  uint32 level = 2;
}

message DiceyDungeonOrnament {
  uint32 ornament_id = 1;
  uint32 level = 2;
}

message DiceyDungeonInfo {
  uint32 dungeon_id = 1;
  uint32 floor = 2;
  uint32 dungeon_room_id = 3;
  DiceyDungeonRole role = 4;
  uint32 health = 5;
  DiceyDungeonWeapon weapon = 6;
  repeated uint32 passed_room_id_list = 7;
  repeated DiceyDungeonOrnament ornament_list = 8;
  repeated uint32 wait_select_ornament_id_list = 9;
  repeated uint32 random_dicey_num_list = 10;
  uint32 left_refresh_ornament_times = 11;
  uint32 dicey_battle_score = 12;
  uint32 total_dicey_battle_score = 13;
}

message DiceyDungeonHasGotDailyMaterial {
  uint32 material_id = 1;
  uint32 num = 2;
}

message DiceyDungeonActivity {
  uint32 activity_id = 1;
  repeated DiceyDungeonRole role_list = 2;
  repeated DiceyDungeonWeapon weapon_list = 3;
  DiceyDungeonInfo story_dicey_dungeon_info = 4;
  DiceyDungeonInfo schedule_dicey_dungeon_info = 5;
  DiceyDungeonInfo endless_dicey_dungeon_info = 6;
  repeated uint32 passed_endless_dungeon_room_id_list = 7;
  uint32 cur_schedule_id = 8;
  uint32 refresh_ornament_random = 9;
  repeated DiceyDungeonHasGotDailyMaterial has_got_daily_material_list = 11;
}

// CmdID: 6500
message DiceyDungeonActivityGetDataReq {
  uint32 tale_id = 1;
  uint32 activity_id = 2;
}

// CmdID: 6501
message DiceyDungeonActivityGetDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ACTIVITY_NOT_EXIST = 2;
  }

  DiceyDungeonActivityGetDataRsp.Retcode retcode = 1;
  DiceyDungeonActivity dungeon_activity = 2;
}

// CmdID: 6502
message DiceyDungeonActivityRoleLevelUpReq {
  uint32 tale_id = 1;
  uint32 activity_id = 2;
  uint32 role_id = 3;
}

// CmdID: 6503
message DiceyDungeonActivityRoleLevelUpRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ACTIVITY_NOT_EXIST = 2;
    ROLE_NOT_EXIST = 3;
    MATERIAL_LACK = 4;
    SITE_LOCK = 5;
  }

  DiceyDungeonActivityRoleLevelUpRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
}

// CmdID: 6504
message DiceyDungeonActivityDungeonBeginReq {
  uint32 tale_id = 1;
  uint32 activity_id = 2;
  DiceyDungeonInfo dungeon_info = 3;
  DiceyDungeonType dungeon_type = 4;
}

// CmdID: 6505
message DiceyDungeonActivityDungeonBeginRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ACTIVITY_NOT_EXIST = 2;
    ROLE_NOT_EXIST = 3;
    WEAPON_NOT_EXIST = 4;
    ROLE_RESTRICT = 5;
    TICKET_LACK = 6;
    DUNGEON_TYPE_ERROR = 7;
    SCHEDULE_ERROR = 8;
    ORNAMENT_NUM_ERROR = 9;
    ORNAMENT_ERROR = 10;
  }

  DiceyDungeonActivityDungeonBeginRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 dungeon_id = 3;
}

// CmdID: 6506
message DiceyDungeonActivityDungeonEndReq {
  uint32 tale_id = 1;
  uint32 activity_id = 2;
  DiceyDungeonInfo dungeon_info = 3;
  DiceyDungeonType dungeon_type = 4;
}

// CmdID: 6507
message DiceyDungeonActivityDungeonEndRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ACTIVITY_NOT_EXIST = 2;
    DUNGEON_NOT_BEGIN = 3;
    ROLE_ERROR = 4;
    WEAPON_ERROR = 5;
    DUNGEON_ROOM_ERROR = 6;
  }

  enum Status {
    WIN = 0;
    LOSE = 1;
    ABANDON = 2;
  }

  DiceyDungeonActivityDungeonEndRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 dungeon_id = 3;
  DiceyDungeonActivityDungeonEndRsp.Status status = 4;
  RewardData reward_data = 5;
  uint32 total_dicey_battle_score = 7;
  repeated DropItem daily_drop_item_list = 8;
}

// CmdID: 6508
message DiceyDungeonActivityRoomBeginReq {
  uint32 tale_id = 1;
  uint32 activity_id = 2;
  uint32 select_dungeon_room_id = 3;
  DiceyDungeonType dungeon_type = 4;
  DiceyDungeonInfo dungeon_info = 5;
}

// CmdID: 6509
message DiceyDungeonActivityRoomBeginRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ACTIVITY_NOT_EXIST = 2;
    DUNGEON_NOT_BEGIN = 3;
    SELECT_ROOM_ERROR = 4;
    ROLE_ERROR = 5;
    WEAPON_ERROR = 6;
    DUNGEON_ROOM_ERROR = 7;
  }

  DiceyDungeonActivityRoomBeginRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 dungeon_id = 3;
  uint32 dungeon_room_id = 4;
}

// CmdID: 6510
message DiceyDungeonActivityRoomEndReq {
  enum Status {
    WIN = 0;
    LOSE = 1;
    SKIP = 2;
  }

  uint32 tale_id = 1;
  uint32 activity_id = 2;
  DiceyDungeonInfo dungeon_info = 3;
  DiceyDungeonActivityRoomEndReq.Status status = 4;
  DiceyDungeonType dungeon_type = 5;
  uint32 battle_time = 6;
  uint32 battle_round = 7;
}

// CmdID: 6511
message DiceyDungeonActivityRoomEndRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ACTIVITY_NOT_EXIST = 2;
    DUNGEON_NOT_BEGIN = 3;
    DUNGEON_ROOM_ERROR = 4;
    ROLE_ERROR = 5;
    WEAPON_ERROR = 6;
    CHECK_EVENT_FAIL = 7;
  }

  DiceyDungeonActivityRoomEndRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 dungeon_id = 3;
  uint32 dungeon_room_id = 4;
}

// CmdID: 6512
message DiceyDungeonActivityGetWeaponGachaDisplayReq {
  uint32 tale_id = 1;
  uint32 activity_id = 2;
}

// CmdID: 6513
message DiceyDungeonActivityGetWeaponGachaDisplayRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ACTIVITY_NOT_EXIST = 2;
  }

  DiceyDungeonActivityGetWeaponGachaDisplayRsp.Retcode retcode = 1;
  repeated uint32 valid_pool_id_list = 2;
  uint32 gacha_random = 3;
  uint32 activity_id = 4;
}

// CmdID: 6514
message DiceyDungeonActivityWeaponGachaReq {
  uint32 tale_id = 1;
  uint32 activity_id = 2;
  uint32 gacha_random = 3;
}

// CmdID: 6515
message DiceyDungeonActivityWeaponGachaRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ACTIVITY_NOT_EXIST = 2;
    MATERIAL_LACK = 3;
    ALL_WEAPON_GETTED = 4;
  }

  DiceyDungeonActivityWeaponGachaRsp.Retcode retcode = 1;
  uint32 weapon_id = 2;
  bool is_new = 3;
  uint32 gacha_random = 4;
  uint32 activity_id = 5;
}

// CmdID: 6516
message DiceyDungeonActivitySelectOrnamentReq {
  uint32 tale_id = 1;
  uint32 activity_id = 2;
  uint32 select_ornament_id = 3;
  uint32 replace_ornament_id = 4;
  bool is_abandon = 5;
  DiceyDungeonInfo dungeon_info = 6;
  DiceyDungeonType dungeon_type = 7;
}

// CmdID: 6517
message DiceyDungeonActivitySelectOrnamentRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ACTIVITY_NOT_EXIST = 2;
    SELECT_ORNAMENT_ERROR = 3;
    REPLACE_ORNAMENT_ERROR = 4;
    DUNGEON_NOT_BEGIN = 5;
    DUNGEON_ROOM_ERROR = 6;
    ROLE_ERROR = 7;
    WEAPON_ERROR = 8;
    NO_REPLACE_ORNAMENT = 9;
  }

  DiceyDungeonActivitySelectOrnamentRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  bool is_abandon = 3;
}

// CmdID: 6518
message DiceyDungeonActivityRefreshOrnamentReq {
  uint32 tale_id = 1;
  uint32 activity_id = 2;
  uint32 refresh_ornament_random = 3;
  DiceyDungeonInfo dungeon_info = 4;
  DiceyDungeonType dungeon_type = 5;
}

// CmdID: 6519
message DiceyDungeonActivityRefreshOrnamentRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ACTIVITY_NOT_EXIST = 2;
    DUNGEON_NOT_BEGIN = 3;
    SELECT_ROOM_ERROR = 4;
    ROLE_ERROR = 5;
    WEAPON_ERROR = 6;
    DUNGEON_ROOM_ERROR = 7;
    REFRESH_TIMES_LACK = 8;
    CANNOT_REFRESH = 9;
  }

  DiceyDungeonActivityRefreshOrnamentRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
}

// CmdID: 6520
message DiceyDungeonActivityGetDailyScoreRankReq {
  uint32 tale_id = 1;
  uint32 activity_id = 2;
  uint32 dungeon_id = 3;
}

// CmdID: 6521
message DiceyDungeonActivityGetDailyScoreRankRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ACTIVITY_NOT_EXIST = 2;
    SCHEDULE_ERROR = 3;
  }

  DiceyDungeonActivityGetDailyScoreRankRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 dungeon_id = 3;
  RankShowData rank_data = 4;
  uint32 rank_percent = 5;
}

enum CmdTypeDiceydungeon {
  CMD_TYPE_DICEYDUNGEON_NONE = 0;
  CMD_DICEY_DUNGEON_ACTIVITY_GET_DATA_REQ = 6500;
  CMD_DICEY_DUNGEON_ACTIVITY_GET_DATA_RSP = 6501;
  CMD_DICEY_DUNGEON_ACTIVITY_ROLE_LEVEL_UP_REQ = 6502;
  CMD_DICEY_DUNGEON_ACTIVITY_ROLE_LEVEL_UP_RSP = 6503;
  CMD_DICEY_DUNGEON_ACTIVITY_DUNGEON_BEGIN_REQ = 6504;
  CMD_DICEY_DUNGEON_ACTIVITY_DUNGEON_BEGIN_RSP = 6505;
  CMD_DICEY_DUNGEON_ACTIVITY_DUNGEON_END_REQ = 6506;
  CMD_DICEY_DUNGEON_ACTIVITY_DUNGEON_END_RSP = 6507;
  CMD_DICEY_DUNGEON_ACTIVITY_ROOM_BEGIN_REQ = 6508;
  CMD_DICEY_DUNGEON_ACTIVITY_ROOM_BEGIN_RSP = 6509;
  CMD_DICEY_DUNGEON_ACTIVITY_ROOM_END_REQ = 6510;
  CMD_DICEY_DUNGEON_ACTIVITY_ROOM_END_RSP = 6511;
  CMD_DICEY_DUNGEON_ACTIVITY_GET_WEAPON_GACHA_DISPLAY_REQ = 6512;
  CMD_DICEY_DUNGEON_ACTIVITY_GET_WEAPON_GACHA_DISPLAY_RSP = 6513;
  CMD_DICEY_DUNGEON_ACTIVITY_WEAPON_GACHA_REQ = 6514;
  CMD_DICEY_DUNGEON_ACTIVITY_WEAPON_GACHA_RSP = 6515;
  CMD_DICEY_DUNGEON_ACTIVITY_SELECT_ORNAMENT_REQ = 6516;
  CMD_DICEY_DUNGEON_ACTIVITY_SELECT_ORNAMENT_RSP = 6517;
  CMD_DICEY_DUNGEON_ACTIVITY_REFRESH_ORNAMENT_REQ = 6518;
  CMD_DICEY_DUNGEON_ACTIVITY_REFRESH_ORNAMENT_RSP = 6519;
  CMD_DICEY_DUNGEON_ACTIVITY_GET_DAILY_SCORE_RANK_REQ = 6520;
  CMD_DICEY_DUNGEON_ACTIVITY_GET_DAILY_SCORE_RANK_RSP = 6521;
}

enum DiceyDungeonType {
  DICEY_DUNGEON_NONE = 0;
  DICEY_DUNGEON_STORY = 1;
  DICEY_DUNGEON_SCHEDULE = 2;
  DICEY_DUNGEON_ENDLESS = 3;
}

enum DiceyDungeonRoomType {
  DICEY_DUNGEON_ROOM_TYPE_NONE = 0;
  DICEY_DUNGEON_ROOM_DICEY_BATTLE = 1;
  DICEY_DUNGEON_ROOM_AVATAR_BATTLE = 2;
  DICEY_DUNGEON_ROOM_ORNAMENT_REWARD = 3;
  DICEY_DUNGEON_ROOM_HP_RECOVER = 4;
  DICEY_DUNGEON_ROOM_PLOT = 5;
  DICEY_DUNGEON_ROOM_BOSS = 6;
  DICEY_DUNGEON_ROOM_SKIP = 7;
}

enum DiceyDungeonSkillType {
  DICEY_DUNGEON_SKILL_NONE = 0;
  DICEY_DUNGEON_SKILL_INITIATIVE = 1;
  DICEY_DUNGEON_SKILL_PASSIVE = 2;
}

enum DiceyDungeonRoleAttributeType {
  DICEY_DUNGEON_ROLE_ATTRIBUTE_TYPE_NONE = 0;
  DICEY_DUNGEON_ROLE_ATTR_STRENGTH = 1;
  DICEY_DUNGEON_ROLE_ATTR_AGILITY = 2;
  DICEY_DUNGEON_ROLE_ATTR_INTELLIGENCE = 3;
}

enum DiceyDungeonGachaType {
  DICEY_DUNGEON_GACHA_TYPE_NONE = 0;
  DICEY_DUNGEON_GACHA_WEAPON = 1;
  DICEY_DUNGEON_GACHA_ORNAMENT_INITIATIVE = 2;
  DICEY_DUNGEON_GACHA_ORNAMENT_PASSIVE = 3;
}

message DLCAvatarTalent {
  uint32 talent_id = 1;
  uint32 level = 2;
  uint32 affix_set_id = 4;
  uint32 wait_select_affix_set_id = 6;
  bool is_mask = 7;
}

message DLCAvatar {
  uint32 avatar_id = 1;
  repeated DLCAvatarTalent talent_list = 2;
  repeated uint32 equip_talent_list = 3;
}

message DLCSupportNPC {
  uint32 npc_id = 1;
  uint32 support_point = 2;
  uint32 support_level = 3;
}

// CmdID: 3550
message GetDLCReq {
}

// CmdID: 3551
message GetDLCRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetDLCRsp.Retcode retcode = 1;
  string name = 2;
  uint32 level = 3;
  uint32 exp = 4;
  uint32 has_take_reward_level = 5;
  repeated DLCSupportNPC support_npc_list = 6;
  repeated uint32 finished_dialog_id_list = 7;
}

// CmdID: 3552
message LevelUpDLCAvatarTalentReq {
  uint32 talent_id = 1;
  uint32 target_level = 2;
}

// CmdID: 3553
message LevelUpDLCAvatarTalentRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    AVATAR_NOT_EXIST = 2;
    TARGET_LEVEL_ERROR = 3;
    PRE_TALENT_LACK = 4;
    MATERIAL_LACK = 5;
    DLC_LEVEL_LACK = 6;
    PRE_AVATAR_LOCK = 7;
    WAIT_SELECT_AFFIX_SET_NOT_EMPTY = 8;
  }

  LevelUpDLCAvatarTalentRsp.Retcode retcode = 1;
  uint32 talent_id = 2;
}

// CmdID: 3554
message EquipDLCAvatarTalentReq {
  uint32 avatar_id = 1;
  repeated uint32 equip_talent_list = 2;
}

// CmdID: 3555
message EquipDLCAvatarTalentRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    AVATAR_NOT_EXIST = 2;
    TALENT_NOT_EXIST = 3;
    TALENT_TYPE_ERROR = 4;
    TALENT_TAG_REPEAT = 5;
  }

  EquipDLCAvatarTalentRsp.Retcode retcode = 1;
}

// CmdID: 3556
message SyncDLCAvatarNotify {
  repeated DLCAvatar avatar_list = 1;
}

// CmdID: 3557
message ModifyDLCNameReq {
  string name = 1;
}

// CmdID: 3558
message ModifyDLCNameRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    FORMAT_ERROR = 2;
    SENSITIVE_WORDS = 3;
  }

  ModifyDLCNameRsp.Retcode retcode = 1;
}

// CmdID: 3559
message GetDLCAvatarReq {
}

// CmdID: 3560
message GetDLCAvatarRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetDLCAvatarRsp.Retcode retcode = 1;
  repeated DLCAvatar avatar_list = 2;
}

// CmdID: 3561
message TakeDLCLevelRewardReq {
}

// CmdID: 3562
message TakeDLCLevelRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NO_REWARD = 2;
  }

  TakeDLCLevelRewardRsp.Retcode retcode = 1;
  repeated RewardData reward_list = 2;
}

message DLCTowerAvatarInfo {
  uint32 avatar_id = 1;
  uint32 hp_percent = 2;
  uint32 sp_percent = 3;
}

// CmdID: 3563
message DLCTowerStageBeginReq {
  repeated uint32 avatar_id_list = 1;
}

// CmdID: 3564
message DLCTowerStageBeginRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_BEGIN = 2;
    PROGRESS_FULL = 3;
    AVATAR_ERROR = 4;
    AVATAR_DIE = 5;
  }

  DLCTowerStageBeginRsp.Retcode retcode = 1;
  uint32 progress = 2;
}

// CmdID: 3565
message DLCTowerStageEndReq {
  StageEndStatus end_status = 1;
  repeated DLCTowerAvatarInfo avatar_info_list = 2;
  uint32 progress = 3;
  uint32 stage_pass_time = 4;
  repeated DropItem drop_item_list = 6;
}

// CmdID: 3566
message DLCTowerStageEndRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    NOT_BEGIN = 3;
    PROGRESS_ERROR = 4;
    PRODUCE_NUM_ERROR = 5;
    AVATAR_ERROR = 6;
  }

  DLCTowerStageEndRsp.Retcode retcode = 1;
  uint32 progress = 2;
  RewardData reward_data = 3;
  uint32 end_progress = 4;
  uint32 score = 5;
  bool is_new_record = 6;
}

// CmdID: 3569
message DLCAvatarReviveReq {
  DLCAvatarReviveCostType cost_type = 1;
  uint32 map_id = 3;
  uint32 avatar_id = 4;
  repeated DropItem drop_item_list = 5;
}

// CmdID: 3570
message DLCAvatarReviveRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MATERIAL_LACK = 2;
    TIMES_LACK = 3;
    NOT_IN_STAGE = 4;
    MAP_ERROR = 5;
    AVATAR_ERROR = 6;
  }

  DLCAvatarReviveRsp.Retcode retcode = 1;
  uint32 revive_times = 2;
  DLCAvatarReviveCostType cost_type = 3;
  uint32 map_id = 4;
  uint32 avatar_id = 5;
}

// CmdID: 3571
message GetDLCTowerRankReq {
}

// CmdID: 3572
message GetDLCTowerRankRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  GetDLCTowerRankRsp.Retcode retcode = 1;
  RankShowData rank_data = 2;
}

// CmdID: 3573
message TakeDLCTowerRankRewardNotify {
  RewardData reward_data = 1;
  uint32 rank = 2;
  uint32 score = 3;
}

message DLCTowerFloorMaxScore {
  uint32 floor = 1;
  uint32 max_score = 2;
}

// CmdID: 3574
message GetDLCTowerReq {
}

// CmdID: 3575
message GetDLCTowerRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  GetDLCTowerRsp.Retcode retcode = 1;
  uint32 schedule_id = 2;
  uint32 progress = 3;
  repeated DLCTowerAvatarInfo avatar_info_list = 4;
  uint32 tower_cost_time = 5;
  uint32 max_progress = 6;
  uint32 avatar_revive_times = 7;
  repeated DLCTowerFloorMaxScore floor_max_score_list = 8;
}

// CmdID: 3576
message ResetDLCTowerProgressReq {
}

// CmdID: 3577
message ResetDLCTowerProgressRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  ResetDLCTowerProgressRsp.Retcode retcode = 1;
}

// CmdID: 3578
message FinishDLCDialogReq {
  uint32 dialog_id = 1;
}

// CmdID: 3579
message FinishDLCDialogRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_SUPPORT_DIALOG = 2;
    ALREADY_TAKEN = 3;
  }

  FinishDLCDialogRsp.Retcode retcode = 1;
  uint32 dialog_id = 2;
  uint32 add_support_point = 3;
}

// CmdID: 3580
message RefreshDLCTalentAffixReq {
  uint32 avatar_id = 1;
  uint32 talent_id = 2;
}

// CmdID: 3581
message RefreshDLCTalentAffixRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    AVATAR_ERROR = 2;
    NOT_REFRESHABLE_TALENT = 3;
    MATERIAL_LACK = 4;
    WAIT_SELECT_AFFIX_SET_NOT_EMPTY = 5;
  }

  RefreshDLCTalentAffixRsp.Retcode retcode = 1;
  uint32 new_affix_set_id = 2;
}

// CmdID: 3584
message SelectDLCTalentAffixReq {
  uint32 avatar_id = 1;
  uint32 talent_id = 2;
  bool is_select = 3;
}

// CmdID: 3585
message SelectDLCTalentAffixRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NO_NEW_AFFIX = 2;
  }

  SelectDLCTalentAffixRsp.Retcode retcode = 1;
}

// CmdID: 3586
message UnlockDLCPhotoReq {
  uint32 unique_monster_id = 1;
}

// CmdID: 3587
message UnlockDLCPhotoRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  UnlockDLCPhotoRsp.Retcode retcode = 1;
}

// CmdID: 3588
message SwitchDLCAvatarTalentReq {
  uint32 avatar_id = 1;
  uint32 talent_id = 2;
}

// CmdID: 3589
message SwitchDLCAvatarTalentRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    AVATAR_NOT_EXIST = 2;
    TALENT_NOT_EXIST = 3;
    TALENT_CAN_NOT_SWITCH = 4;
  }

  SwitchDLCAvatarTalentRsp.Retcode retcode = 1;
}

// CmdID: 3590
message ReportDLCDropItemReq {
  repeated DropItem drop_item_list = 1;
}

// CmdID: 3591
message ReportDLCDropItemRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  ReportDLCDropItemRsp.Retcode retcode = 1;
}

enum CmdTypeDlc {
  CMD_TYPE_DLC_NONE = 0;
  CMD_GET_DLC_REQ = 3550;
  CMD_GET_DLC_RSP = 3551;
  CMD_LEVEL_UP_DLC_AVATAR_TALENT_REQ = 3552;
  CMD_LEVEL_UP_DLC_AVATAR_TALENT_RSP = 3553;
  CMD_EQUIP_DLC_AVATAR_TALENT_REQ = 3554;
  CMD_EQUIP_DLC_AVATAR_TALENT_RSP = 3555;
  CMD_SYNC_DLC_AVATAR_NOTIFY = 3556;
  CMD_MODIFY_DLC_NAME_REQ = 3557;
  CMD_MODIFY_DLC_NAME_RSP = 3558;
  CMD_GET_DLC_AVATAR_REQ = 3559;
  CMD_GET_DLC_AVATAR_RSP = 3560;
  CMD_TAKE_DLC_LEVEL_REWARD_REQ = 3561;
  CMD_TAKE_DLC_LEVEL_REWARD_RSP = 3562;
  CMD_DLC_TOWER_STAGE_BEGIN_REQ = 3563;
  CMD_DLC_TOWER_STAGE_BEGIN_RSP = 3564;
  CMD_DLC_TOWER_STAGE_END_REQ = 3565;
  CMD_DLC_TOWER_STAGE_END_RSP = 3566;
  CMD_DLC_AVATAR_REVIVE_REQ = 3569;
  CMD_DLC_AVATAR_REVIVE_RSP = 3570;
  CMD_GET_DLC_TOWER_RANK_REQ = 3571;
  CMD_GET_DLC_TOWER_RANK_RSP = 3572;
  CMD_TAKE_DLC_RANK_REWARD_NOTIFY = 3573;
  CMD_GET_DLC_TOWER_REQ = 3574;
  CMD_GET_DLC_TOWER_RSP = 3575;
  CMD_RESET_DLC_TOWER_PROGRESS_REQ = 3576;
  CMD_RESET_DLC_TOWER_PROGRESS_RSP = 3577;
  CMD_FINISH_DLC_DIALOG_REQ = 3578;
  CMD_FINISH_DLC_DIALOG_RSP = 3579;
  CMD_REFRESH_DLC_TALENT_AFFIX_REQ = 3580;
  CMD_REFRESH_DLC_TALENT_AFFIX_RSP = 3581;
  CMD_SELECT_DLC_TALENT_AFFIX_REQ = 3584;
  CMD_SELECT_DLC_TALENT_AFFIX_RSP = 3585;
  CMD_UNLOCK_DLC_PHOTO_REQ = 3586;
  CMD_UNLOCK_DLC_PHOTO_RSP = 3587;
  CMD_SWITCH_DLC_AVATAR_TALENT_REQ = 3588;
  CMD_SWITCH_DLC_AVATAR_TALENT_RSP = 3589;
  CMD_REPORT_DLC_DROP_ITEM_REQ = 3590;
  CMD_REPORT_DLC_DROP_ITEM_RSP = 3591;
}

enum DLCSupportType {
  DLC_SUPPORT_TYPE_NONE = 0;
  DLC_SUPPORT_TYPE_COLLECTION = 1;
  DLC_SUPPORT_TYPE_STAGE_BEGIN = 2;
  DLC_SUPPORT_TYPE_STORY = 3;
  DLC_SUPPORT_TYPE_DIALOG = 4;
  DLC_SUPPORT_TYPE_QUEST = 5;
}

enum DLCTalentType {
  DLC_TALENT_TYPE_NONE = 0;
  DLC_TALENT_TYPE_AUTO = 1;
  DLC_TALENT_TYPE_ACTIVE = 2;
  DLC_TALENT_TYPE_PASSIVE = 3;
  DLC_TALENT_TYPE_REFRESHABLE = 4;
}

enum DLCAvatarReviveType {
  DLC_AVATAR_REVIVE_TYPE_NONE = 0;
  DLC_AVATAR_REVIVE_TYPE_DLC_TOWER = 1;
  DLC_AVATAR_REVIVE_TYPE_DLC_STAGE = 2;
  DLC_AVATAR_REVIVE_TYPE_OUTER_STAGE = 3;
  DLC_AVATAR_REVIVE_TYPE_DLC_OW = 4;
}

enum DLCAvatarReviveCostType {
  DLC_AVATAR_REVIVE_COST_TYPE_NONE = 0;
  DLC_AVATAR_REVIVE_COST_TYPE_REVIVE_COIN = 1;
  DLC_AVATAR_REVIVE_COST_TYPE_COIN = 2;
}

message ElfTalent {
  uint32 talent_id = 1;
  uint32 talent_level = 2;
  uint32 equip_elf_id = 3;
}

message ElfFragment {
  uint32 elf_id = 1;
  uint32 fragment_num = 2;
}

message ElfSkill {
  uint32 skill_id = 1;
  uint32 skill_level = 2;
}

message Elf {
  uint32 elf_id = 1;
  uint32 star = 2;
  uint32 level = 3;
  uint32 exp = 4;
  repeated uint32 equip_talent_id_list = 5;
  repeated ElfSkill skill_list = 6;
  uint32 compensate_level = 7;
  uint32 total_compensate_exp = 8;
}

// CmdID: 2100
message GetElfDataReq {
}

// CmdID: 2101
message GetElfDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetElfDataRsp.Retcode retcode = 1;
  repeated Elf elf_list = 2;
  repeated ElfFragment elf_fragment_list = 3;
  repeated ElfTalent elf_talent_list = 4;
  bool is_take_compensation = 5;
}

// CmdID: 2102
message SyncElfDataNotify {
  repeated Elf elf_list = 3;
}

// CmdID: 2103
message SyncElfFragmentNotify {
  repeated ElfFragment elf_fragment_list = 3;
}

// CmdID: 2105
message ElfStarUpReq {
  uint32 elf_id = 1;
}

// CmdID: 2106
message ElfStarUpRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ELF_NOT_EXIST = 2;
    FRAGMENT_LACK = 3;
    STAR_FULL = 4;
    LEVEL_LACK = 5;
    FEATURE_CLOSED = 6;
  }

  ElfStarUpRsp.Retcode retcode = 1;
  uint32 elf_id = 2;
  bool is_unlock = 3;
}

// CmdID: 2107
message AddElfExpByMaterialReq {
  uint32 elf_id = 1;
  uint32 material_id = 2;
  uint32 material_num = 3;
}

// CmdID: 2108
message AddElfExpByMaterialRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ELF_NOT_EXIST = 2;
    ELF_LEVEL_FULL = 3;
    MATERIAL_NOT_ENOUGH = 4;
    MATERIAL_CAN_NOT_ADD_EXP = 5;
    SCOIN_LACK = 6;
  }

  AddElfExpByMaterialRsp.Retcode retcode = 1;
  uint32 old_level = 2;
  uint32 old_exp = 3;
}

// CmdID: 2121
message ElfFragmentTransformReq {
  uint32 elf_fragment_id = 1;
  uint32 elf_fragment_num = 2;
  repeated GenericItemNum fragment_list = 3;
}

// CmdID: 2122
message ElfFragmentTransformRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    STAR_LACK = 2;
    FRAGMENT_LACK = 3;
    MATERIAL_FULL = 4;
    FEATURE_CLOSED = 5;
  }

  ElfFragmentTransformRsp.Retcode retcode = 1;
  uint32 add_material_id = 2;
  uint32 add_material_num = 3;
  repeated GenericItemNum return_list = 4;
}

// CmdID: 2123
message ElfSkillLevelUpReq {
  uint32 elf_id = 1;
  uint32 elf_skill_id = 2;
  bool is_level_up_all = 4;
}

// CmdID: 2124
message ElfSkillLevelUpRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ELF_LOCKED = 2;
    SCOIN_LACK = 3;
    MATERIAL_NOT_ENOUGH = 4;
    LEVEL_FULL = 5;
    ELF_STAR_NOT_ENOUGH = 6;
    PRE_SKILL_LEVEL_NOT_ENOUGH = 7;
    ELF_LEVEL_NOT_ENOUGH = 8;
    NOT_NORMAL_ELF = 9;
    NO_VALID_SKILL = 10;
  }

  ElfSkillLevelUpRsp.Retcode retcode = 1;
  ElfSkill elf_skill = 2;
}

// CmdID: 2125
message ElfTakeCompensationReq {
}

// CmdID: 2126
message ElfTakeCompensationRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    HAS_TAKE = 2;
  }

  ElfTakeCompensationRsp.Retcode retcode = 1;
  repeated RewardItemData item_list = 2;
}

enum CmdTypeElf {
  CMD_TYPE_ELF_NONE = 0;
  CMD_GET_ELF_DATA_REQ = 2100;
  CMD_GET_ELF_DATA_RSP = 2101;
  CMD_SYNC_ELF_DATA_NOTIFY = 2102;
  CMD_SYNC_ELF_FRAGMENT_NOTIFY = 2103;
  CMD_ELF_STAR_UP_REQ = 2105;
  CMD_ELF_STAR_UP_RSP = 2106;
  CMD_ADD_ELF_EXP_BY_MATERIAL_REQ = 2107;
  CMD_ADD_ELF_EXP_BY_MATERIAL_RSP = 2108;
  CMD_ELF_FRAGMENT_TRANSFORM_REQ = 2121;
  CMD_ELF_FRAGMENT_TRANSFORM_RSP = 2122;
  CMD_ELF_SKILL_LEVEL_UP_REQ = 2123;
  CMD_ELF_SKILL_LEVEL_UP_RSP = 2124;
  CMD_ELF_TAKE_COMPENSATION_REQ = 2125;
  CMD_ELF_TAKE_COMPENSATION_RSP = 2126;
}

enum ElfType {
  ELF_TYPE_NONE = 0;
  ELF_TYPE_ELF = 1;
  ELF_TYPE_ASTRA_MATE = 2;
  ELF_TYPE_ASTRA_MATE_HERO = 3;
}

enum ElfSkillSystemType {
  ELF_SKILL_SYSTEM_TYPE_NONE = 0;
  ELF_SKILL_SYSTEM_TYPE_ELF_SKILL = 1;
  ELF_SKILL_SYSTEM_TYPE_ASTRA_SKILL = 2;
}

// CmdID: 3406
message GetLastEndlessRewardDataReq {
}

// CmdID: 3407
message GetLastEndlessRewardDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_JOIN = 2;
  }

  GetLastEndlessRewardDataRsp.Retcode retcode = 1;
  uint32 begin_time = 2;
  uint32 group_level = 3;
  uint32 rank = 4;
  uint32 progress_or_score = 5;
  EndlessRewardType reward_type = 6;
  uint32 reward_id = 7;
  repeated RewardData reward_list = 8;
  uint32 cur_group_level = 9;
  uint32 type = 10;
}

// CmdID: 3417
message TakeEndlessBaseRewardReq {
  EndlessType type = 1;
}

// CmdID: 3418
message TakeEndlessBaseRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NO_REWARD = 2;
    NOT_JOIN = 3;
  }

  TakeEndlessBaseRewardRsp.Retcode retcode = 1;
  uint32 reward_progress = 2;
  repeated RewardData reward_list = 3;
  repeated uint32 reward_id_list = 4;
  EndlessType type = 5;
}

// CmdID: 3419
message GetOpenworldEndlessDataReq {
  uint32 level = 1;
  EndlessType type = 2;
  bool is_finish_front = 3;
}

message OpenworldEndlessMonsterGroup {
  uint32 group_id = 1;
  uint32 progress = 2;
  uint32 old_progress = 3;
}

message QuantumEndless {
  uint32 cur_monster_group = 1;
  uint32 monster_progress = 2;
  uint32 finish_monster_num = 3;
}

message GreedyEndless {
  bool is_need_enroll = 1;
  uint32 floor_config_id = 2;
  uint32 reward_config_id = 3;
  uint32 cur_floor = 4;
  uint32 max_finish_floor = 5;
  repeated uint32 finish_challenge_id_list = 6;
}

// CmdID: 3420
message GetOpenworldEndlessDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    LEVEL_LACK = 2;
    NO_ENDLESS = 3;
    URGENCY_STOP = 4;
    ULTRA_ENDLESS = 5;
    FEATURE_CLOSED = 6;
  }

  GetOpenworldEndlessDataRsp.Retcode retcode = 1;
  uint32 group_id = 3;
  uint32 group_level = 4;
  uint32 begin_time = 5;
  uint32 end_time = 6;
  uint32 close_time = 7;
  repeated OpenworldEndlessPlayer endless_data_list = 8;
  repeated PlayerFriendBriefData brief_data_list = 9;
  uint32 random_seed = 10;
  repeated OpenworldEndlessItem item_list = 11;
  repeated uint32 finish_monster_group_list = 12;
  uint32 battle_config_id = 13;
  repeated OpenworldEndlessItem effect_item_list = 14;
  repeated OpenworldEndlessItem trap_add_item_list = 15;
  uint32 boss_extra_score = 16;
  uint32 is_just_join = 17;
  uint32 cur_top_group_level = 18;
  uint32 top_group_player_num = 19;
  uint32 top_group_promote_unlock_player_num = 20;
  uint32 invasion_id = 21;
  uint32 hard_level = 22;
  repeated OpenworldEndlessWarInfo war_info_list = 23;
  repeated uint32 event_sub_type_id_list = 24;
  repeated uint32 trap_item_show_id_list = 25;
  repeated OpenworldEndlessMonsterGroup monster_group_list = 26;
  EndlessType type = 27;
  QuantumEndless quantum_endless = 28;
  GreedyEndless greedy_endless = 29;
}

// CmdID: 3421
message OpenworldEndlessItemUpdateNotify {
  repeated OpenworldEndlessItem item_list = 1;
}

message OpenworldInvasionItem {
  uint32 invasion_id = 1;
  repeated uint32 avatar_list = 2;
  repeated uint32 buff_list = 3;
}

// CmdID: 3422
message UseOpenworldEndlessItemReq {
  uint32 item_id = 1;
  uint32 target_uid = 2;
  OpenworldInvasionItem invasion = 3;
  uint32 item_num = 4;
}

// CmdID: 3423
message UseOpenworldEndlessItemRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ITEM_LACK = 2;
    INVASION_AVATAR_ERROR = 3;
    TARGET_ERROR = 4;
    TARGET_GROUP_ERROR = 5;
    OUT_OF_RANGE = 6;
    INVASION_FULL = 7;
    INVASION_ID_ERROR = 8;
    ENDLESS_STATUS_ERROR = 9;
    NOT_JOIN = 10;
    TRAP_FULL = 11;
  }

  UseOpenworldEndlessItemRsp.Retcode retcode = 1;
  uint32 new_invasion_id = 2;
  uint32 item_id = 3;
  uint32 battle_id = 4;
  repeated OpenworldEndlessItem effect_item_list = 5;
  uint32 old_invaison_id = 6;
  uint32 target_id = 7;
  uint32 invasion_buff_num = 8;
}

// CmdID: 3424
message FinishOpenworldEndlessMonsterGroupReq {
  uint32 group_id = 1;
  LineupBriefInfo lineup_info = 2;
  uint32 extra_score = 3;
  uint32 battle_id = 4;
  uint32 cost_time = 5;
  repeated StageCheatData cheat_data_list = 6;
  uint32 stage_id = 7;
  string transaction_str = 8;
  EndlessType type = 9;
  uint32 quantum_monster_progress = 10;
  bool is_skip_level = 11;
  uint32 final_boss_id = 12;
}

// CmdID: 3425
message FinishOpenworldEndlessMonsterGroupRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  FinishOpenworldEndlessMonsterGroupRsp.Retcode retcode = 1;
  repeated uint32 finish_monster_group_list = 2;
  uint32 group_id = 3;
  repeated OpenworldEndlessItem clear_item_list = 4;
  uint32 score = 5;
  uint32 battle_id = 6;
  uint32 old_score = 7;
  bool is_boss = 8;
  string transaction_str = 9;
  repeated OpenworldEndlessMonsterGroup monster_group_list = 10;
  uint32 group_level = 11;
  LineupBriefInfo lineup_info = 12;
  EndlessType type = 13;
  QuantumEndless quantum_endless = 14;
  bool is_skip_level = 15;
  uint32 final_boss_id = 16;
  LineupBriefInfo max_score_lineup_info = 17;
}

message OpenworldEndlessTrap {
  uint32 item_id = 1;
  uint32 battle_id = 2;
  uint32 unique_id = 3;
  uint32 set_uid = 4;
}

message OpenworldEndlessBattle {
  uint32 battle_id = 1;
  repeated OpenworldEndlessTrap trap_list = 2;
  uint32 scene_gear = 3;
}

// CmdID: 3426
message GetOpenworldEndlessStageInnerDataReq {
  uint32 area_id = 1;
}

// CmdID: 3427
message GetOpenworldEndlessStageInnerDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetOpenworldEndlessStageInnerDataRsp.Retcode retcode = 1;
  repeated OpenworldEndlessBattle battle_list = 2;
  repeated OpenworldEndlessItem effect_item_list = 3;
}

// CmdID: 3428
message TriggerOpenworldEndlessTrapReq {
  uint32 unique_id = 1;
  uint32 item_id = 2;
}

// CmdID: 3429
message TriggerOpenworldEndlessTrapRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_JOIN = 2;
  }

  TriggerOpenworldEndlessTrapRsp.Retcode retcode = 1;
}

// CmdID: 3430
message FinishOpenworldEndlessInvasionMonsterReq {
  uint32 id = 1;
  uint32 battle_id = 2;
  string transaction_str = 3;
}

// CmdID: 3431
message FinishOpenworldEndlessInvasionMonsterRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ENDLESS_STATUS_ERROR = 2;
    NOT_JOIN = 3;
    NO_INVASION = 4;
  }

  FinishOpenworldEndlessInvasionMonsterRsp.Retcode retcode = 1;
  uint32 sub_score = 2;
  uint32 id = 3;
  repeated OpenworldEndlessItem clear_item_list = 4;
  uint32 score = 5;
  uint32 battle_id = 6;
  string transaction_str = 7;
}

// CmdID: 3432
message GetEndlessStatusReq {
  uint32 level = 1;
  bool is_finish_front = 2;
}

message EndlessStatus {
  EndlessType endless_type = 1;
  uint32 begin_time = 2;
  uint32 end_time = 3;
  uint32 close_time = 4;
  uint32 sin_type = 5;
  uint32 progress_or_score = 6;
  uint32 group_level = 7;
  LineupBriefInfo last_lineup_info = 8;
  bool can_join_in = 9;
  uint32 pre_general_activity_id = 10;
  repeated uint32 replace_endless_group_list = 11;
  LineupBriefInfo max_score_lineup_info = 12;
  uint32 greedy_max_finish_floor = 13;
}

// CmdID: 3433
message GetEndlessStatusRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetEndlessStatusRsp.Retcode retcode = 1;
  EndlessStatus cur_status = 2;
  repeated EndlessStatus next_status_list = 3;
  uint32 selected_endless_type = 4;
}

message OpenworldEndlessReprotInvasion {
  uint32 id = 1;
  uint32 battle_id = 2;
}

message OpenworldEndlessReprotBattle {
  uint32 battle_id = 1;
  uint32 scene_gear = 2;
}

// CmdID: 3434
message ReportOpenworldEndlessDataReq {
  OpenworldEndlessDataType type = 1;
  OpenworldEndlessReprotInvasion invasion = 2;
  OpenworldEndlessReprotBattle battle = 3;
}

// CmdID: 3435
message ReportOpenworldEndlessDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  ReportOpenworldEndlessDataRsp.Retcode retcode = 1;
}

// CmdID: 3438
message OpenworldEndlessBattleBeginReq {
  uint32 battle_id = 1;
  uint32 group_level = 2;
  uint32 monster_group_id = 3;
  uint32 layer_number = 4;
  string transaction_str = 5;
  EndlessType type = 6;
}

// CmdID: 3439
message OpenworldEndlessBattleBeginRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  OpenworldEndlessBattleBeginRsp.Retcode retcode = 1;
}

message QuantumEndlessBattleWave {
  uint32 wave_id = 1;
  StageEndStatus end_status = 2;
  uint32 cost_time = 3;
}

message QuantumEndlessBattleAoe {
  uint32 aoe_num = 1;
  uint32 evade_num = 2;
}

// CmdID: 3440
message OpenworldEndlessBattleEndReq {
  uint32 battle_id = 1;
  uint32 group_level = 2;
  uint32 invasion_id = 3;
  uint32 invasion_buff_num = 4;
  uint32 cost_time = 5;
  StageEndStatus end_status = 6;
  repeated StageInnerAvatarData avatar_list = 7;
  uint32 monster_group_id = 8;
  uint32 environment_id = 9;
  uint32 layer_number = 10;
  string transaction_str = 11;
  string monster_str = 12;
  repeated StageInnerElfData elf_list = 13;
  EndlessType type = 14;
  string quantum_string = 15;
  string wave_string = 16;
  string aoe_string = 17;
}

// CmdID: 3441
message OpenworldEndlessBattleEndRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  OpenworldEndlessBattleEndRsp.Retcode retcode = 1;
}

message OpenworldEndlessWarInfo {
  enum Type {
    NONE = 0;
    SET_TRAP = 1;
    TRIGGER_TRAP = 2;
    SCENE_GEAR = 3;
    INVASION = 4;
    INVASION_SUB_SCORE = 5;
    FINISH_INVASION = 6;
  }

  uint32 uid = 1;
  OpenworldEndlessWarInfo.Type type = 2;
  uint32 item_id = 3;
  uint32 battle_id = 4;
  uint32 target_id = 5;
  uint32 from_who = 6;
  uint32 invasion_id = 7;
  uint32 score = 8;
  uint32 scene_gear = 9;
  uint32 time = 10;
}

// CmdID: 3442
message OpenworldEndlessWarInfoNotify {
  OpenworldEndlessWarInfo war_info = 1;
}

// CmdID: 3443
message GetOpenworldEndlessPlayerWarInfoReq {
  uint32 target_uid = 1;
}

// CmdID: 3444
message GetOpenworldEndlessPlayerWarInfoRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetOpenworldEndlessPlayerWarInfoRsp.Retcode retcode = 1;
  uint32 target_uid = 2;
  repeated OpenworldEndlessWarInfo war_info_list = 3;
}

// CmdID: 3445
message OpenworldEndlessPlayerUpdateNotify {
  OpenworldEndlessPlayer player_data = 1;
  PlayerFriendBriefData brief_data = 2;
  EndlessType type = 3;
}

// CmdID: 3446
message GetOpenworldEndlessTopGroupReq {
  EndlessType type = 9;
}

// CmdID: 3447
message GetOpenworldEndlessTopGroupRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    TOP_GROUP_NOT_OPEN = 2;
  }

  GetOpenworldEndlessTopGroupRsp.Retcode retcode = 1;
  repeated OpenworldEndlessPlayer endless_data_list = 2;
  repeated PlayerFriendBriefData brief_data_list = 3;
  repeated OpenworldEndlessWarInfo war_info_list = 4;
  uint32 hard_level = 5;
  EndlessType type = 6;
}

// CmdID: 3448
message SetOpenworldEndlessMonsterGroupProgressReq {
  uint32 group_id = 1;
  uint32 progress = 2;
  EndlessType type = 3;
}

// CmdID: 3449
message SetOpenworldEndlessMonsterGroupProgressRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    GROUP_ERROR = 2;
    PROGRESS_ERROR = 3;
    HAS_FINISHED = 4;
  }

  SetOpenworldEndlessMonsterGroupProgressRsp.Retcode retcode = 1;
  repeated OpenworldEndlessMonsterGroup monster_group_list = 2;
  EndlessType type = 3;
}

// CmdID: 3450
message OpenworldEndlessChangeAvatarReq {
  repeated uint32 avatar_id_list = 1;
}

// CmdID: 3451
message OpenworldEndlessChangeAvatarRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    AVATAR_ERROR = 2;
    STAGE_ERROR = 3;
  }

  OpenworldEndlessChangeAvatarRsp.Retcode retcode = 1;
}

// CmdID: 3452
message EndlessInSettleNotify {
}

// CmdID: 3453
message GreedyEndlessEnrollReq {
}

// CmdID: 3454
message GreedyEndlessEnrollRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ALREADY_ENROLL = 2;
  }

  GreedyEndlessEnrollRsp.Retcode retcode = 1;
  uint32 new_group_id = 2;
}

// CmdID: 3455
message GreedyEndlessReportFloorEndReq {
  uint32 floor = 1;
  repeated uint32 finish_challenge_id_list = 3;
  uint32 score = 4;
  uint32 extra_score = 5;
  LineupBriefInfo lineup_info = 6;
  uint32 stage_cost_time = 7;
  StageEndStatus end_status = 8;
  repeated StageCheatData cheat_data_list = 9;
}

// CmdID: 3456
message GreedyEndlessReportFloorEndRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    FEATURE_CLOSED = 2;
    NOT_CUR_FLOOR = 3;
  }

  GreedyEndlessReportFloorEndRsp.Retcode retcode = 1;
  RewardData reward_data = 2;
  uint32 next_floor = 3;
  uint32 max_finish_floor = 4;
  uint32 total_score = 5;
  repeated uint32 finish_challenge_id_list = 6;
  LineupBriefInfo max_score_lineup_info = 7;
}

// CmdID: 3457
message GreedyEndlessFloorRewardNotify {
  RewardData reward_data = 1;
  uint32 max_finish_floor = 2;
  repeated uint32 finish_challenge_id_list = 6;
}

// CmdID: 3458
message GreedyEndlessGetRankReq {
}

// CmdID: 3459
message GreedyEndlessGetRankRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NO_RANK = 2;
  }

  GreedyEndlessGetRankRsp.Retcode retcode = 1;
  RankShowData rank_data = 2;
}

// CmdID: 3460
message GreedyEndlessTakeRankRewardReq {
}

// CmdID: 3461
message GreedyEndlessTakeRankRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    HAS_TAKE = 2;
    NO_REWARD = 3;
  }

  GreedyEndlessTakeRankRewardRsp.Retcode retcode = 1;
  uint32 group_level = 2;
  uint32 rank_percent = 3;
  RewardData reward_data = 4;
}

// CmdID: 3462
message EndlessSelectTypeReq {
  EndlessType endless_type = 1;
  uint32 level = 2;
}

// CmdID: 3463
message EndlessSelectTypeRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    IN_ULTRA = 2;
    NOT_IN_NEXT_SCHEDULE = 3;
    LACK_LEVEL = 4;
  }

  EndlessSelectTypeRsp.Retcode retcode = 1;
  EndlessType endless_type = 2;
}

// CmdID: 3464
message GreedyEndlessReportFloorBeginReq {
  uint32 floor = 1;
}

// CmdID: 3465
message GreedyEndlessReportFloorBeginRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GreedyEndlessReportFloorBeginRsp.Retcode retcode = 1;
}

enum CmdTypeEndless {
  CMD_TYPE_ENDLESS_NONE = 0;
  CMD_GET_LAST_ENDLESS_REWARD_DATA_REQ = 3406;
  CMD_GET_LAST_ENDLESS_REWARD_DATA_RSP = 3407;
  CMD_TAKE_ENDLESS_BASE_REWARD_REQ = 3417;
  CMD_TAKE_ENDLESS_BASE_REWARD_RSP = 3418;
  CMD_GET_OPENWORLD_ENDLESS_DATA_REQ = 3419;
  CMD_GET_OPENWORLD_ENDLESS_DATA_RSP = 3420;
  CMD_OPENWORLD_ENDLESS_ITEM_UPDATE_NOTIFY = 3421;
  CMD_USE_OPENWORLD_ENDLESS_ITEM_REQ = 3422;
  CMD_USE_OPENWORLD_ENDLESS_ITEM_RSP = 3423;
  CMD_FINISH_OPENWORLD_ENDLESS_MONSTER_GROUP_REQ = 3424;
  CMD_FINISH_OPENWORLD_ENDLESS_MONSTER_GROUP_RSP = 3425;
  CMD_GET_OPENWORLD_ENDLESS_STAGE_INNER_DATA_REQ = 3426;
  CMD_GET_OPENWORLD_ENDLESS_STAGE_INNER_DATA_RSP = 3427;
  CMD_TRIGGER_OPENWORLD_ENDLESS_TRAP_REQ = 3428;
  CMD_TRIGGER_OPENWORLD_ENDLESS_TRAP_RSP = 3429;
  CMD_FINISH_OPENWORLD_ENDLESS_INVASION_MONSTER_REQ = 3430;
  CMD_FINISH_OPENWORLD_ENDLESS_INVASION_MONSTER_RSP = 3431;
  CMD_GET_ENDLESS_STATUS_REQ = 3432;
  CMD_GET_ENDLESS_STATUS_RSP = 3433;
  CMD_REPORT_OPENWORLD_ENDLESS_DATA_REQ = 3434;
  CMD_REPORT_OPENWORLD_ENDLESS_DATA_RSP = 3435;
  CMD_OPENWORLD_ENDLESS_BATTLE_BEGIN_REQ = 3438;
  CMD_OPENWORLD_ENDLESS_BATTLE_BEGIN_RSP = 3439;
  CMD_OPENWORLD_ENDLESS_BATTLE_END_REQ = 3440;
  CMD_OPENWORLD_ENDLESS_BATTLE_END_RSP = 3441;
  CMD_OPENWORLD_ENDLESS_WAR_INFO_NOTIFY = 3442;
  CMD_GET_OPENWORLD_ENDLESS_PLAYER_WAR_INFO_REQ = 3443;
  CMD_GET_OPENWORLD_ENDLESS_PLAYER_WAR_INFO_RSP = 3444;
  CMD_OPENWORLD_ENDLESS_PLAYER_UPDATE_NOTIFY = 3445;
  CMD_GET_OPENWORLD_ENDLESS_TOP_GROUP_REQ = 3446;
  CMD_GET_OPENWORLD_ENDLESS_TOP_GROUP_RSP = 3447;
  CMD_SET_OPENWORLD_ENDLESS_MONSTER_GROUP_PROGRESS_REQ = 3448;
  CMD_SET_OPENWORLD_ENDLESS_MONSTER_GROUP_PROGRESS_RSP = 3449;
  CMD_OPENWORLD_ENDLESS_CHANGE_AVATAR_REQ = 3450;
  CMD_OPENWORLD_ENDLESS_CHANGE_AVATAR_RSP = 3451;
  CMD_ENDLESS_IN_SETTLE_NOTIFY = 3452;
  CMD_GREEDY_ENDLESS_ENROLL_REQ = 3453;
  CMD_GREEDY_ENDLESS_ENROLL_RSP = 3454;
  CMD_GREEDY_ENDLESS_REPORT_FLOOR_END_REQ = 3455;
  CMD_GREEDY_ENDLESS_REPORT_FLOOR_END_RSP = 3456;
  CMD_GREEDY_ENDLESS_FLOOR_REWARD_NOTIFY = 3457;
  CMD_GREEDY_ENDLESS_GET_RANK_REQ = 3458;
  CMD_GREEDY_ENDLESS_GET_RANK_RSP = 3459;
  CMD_GREEDY_ENDLESS_TAKE_RANK_REWARD_REQ = 3460;
  CMD_GREEDY_ENDLESS_TAKE_RANK_REWARD_RSP = 3461;
  CMD_ENDLESS_SELECT_TYPE_REQ = 3462;
  CMD_ENDLESS_SELECT_TYPE_RSP = 3463;
  CMD_GREEDY_ENDLESS_REPORT_FLOOR_BEGIN_REQ = 3464;
  CMD_GREEDY_ENDLESS_REPORT_FLOOR_BEGIN_RSP = 3465;
}

enum OpenworldEndlessItemType {
  OPENWORLD_ENDLESS_ITEM_TYPE_NONE = 0;
  OPENWORLD_ENDLESS_ITEM_INVASION = 1;
  OPENWORLD_ENDLESS_ITEM_BUFF = 2;
  OPENWORLD_ENDLESS_ITEM_TRAP = 3;
  OPENWORLD_ENDLESS_ITEM_COUNTER = 4;
  OPENWORLD_ENDLESS_ITEM_CONSUME = 5;
  OPENWORLD_ENDLESS_ITEM_TRAP_BUFF = 6;
}

enum OpenworldEndlessInvasionBuffConditionType {
  OPENWORLD_ENDLESS_INVASION_BUFF_CONDITION_TYPE_NONE = 0;
  INVASION_BUFF_CONDITION_TOTAL_LEVEL = 1;
  INVASION_BUFF_CONDITION_NUM_LEVEL = 2;
  INVASION_BUFF_CONDITION_NUM_LEVEL_ATTRIBUTE = 3;
  INVASION_BUFF_CONDITION_NUM_LEVEL_ALL_ATTRIBUTE = 4;
  INVASION_BUFF_CONDITION_NUM_CLASS = 5;
  INVASION_BUFF_CONDITION_ID_STAR_LEVEL = 6;
}

enum OpenworldEndlessDataType {
  OPENWORLD_ENDLESS_DATA_TYPE_NONE = 0;
  OPENWORLD_ENDLESS_DATA_TYPE_INVAISON = 1;
  OPENWORLD_ENDLESS_DATA_TYPE_SCENE_GEAR = 2;
}

enum GreedyEndlessFloorType {
  GREEDY_ENDLESS_FLOOR_TYPE_NONE = 0;
  GREEDY_ENDLESS_FLOOR_DEMOTE = 1;
  GREEDY_ENDLESS_FLOOR_NORMAL = 2;
  GREEDY_ENDLESS_FLOOR_PROMOTE = 3;
}

// CmdID: 3650
message GetEquipmentForgeDataReq {
}

message EquipmentForge {
  uint32 forge_id = 1;
  uint32 times = 2;
}

// CmdID: 3651
message GetEquipmentForgeDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetEquipmentForgeDataRsp.Retcode retcode = 1;
  uint32 schedule_id = 2;
  repeated EquipmentForge has_forge_list = 3;
  repeated uint32 forge_list = 4;
}

// CmdID: 3652
message ForgeEquipmentReq {
  uint32 forge_id = 1;
  EquipmentItemList consume_item_list = 2;
  uint32 keep_rune_equip_unique_id = 4;
  EquipmentItemList keep_rune_cost_item_list = 5;
}

// CmdID: 3653
message ForgeEquipmentRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    LEVEL_LIMIT = 2;
    NO_TIMES = 3;
    CONSUME_ITEM_NOT_EXIST = 4;
    CONSUME_ITEM_IN_USE = 5;
    CONSUME_ITEM_REPEAT = 6;
    CONSUME_ITEM_PROTECTED = 7;
    COST_GACHA_TICKET = 8;
    COST_SENIOR_EQUIP_FROM_NEW_DEVICE = 9;
    COST_SENIOR_EQUIP_CANCEL_PROTECT_TOO_SOON = 10;
    CONSUME_ITEM_GRAND_KEY = 11;
    CONSUME_ITEM_IN_FACILITY = 12;
    CURRENCY_LACK = 13;
    CONSUME_ITEM_MATCHING_REDUNDANT = 14;
    CONSUME_ITEM_MATCHING_LACK = 15;
    CONSUME_WEAPON_LOCKED = 16;
    QUANTUM_WEAPON_NUM_LIMIT = 17;
    QUANTUM_FORGE_CLOSED = 18;
    WAIT_SELECTED_RUNE = 19;
    NO_RUNE = 20;
    CONSUME_ITEM_PROTECTED_BY_SECURITY_PASSWORD = 21;
    FEATURE_CLOSED = 22;
  }

  ForgeEquipmentRsp.Retcode retcode = 1;
  uint32 forge_id = 2;
  repeated Material return_material_list = 3;
}

// CmdID: 3654
message ExtractEquipmentReq {
  EquipmentType type = 1;
  uint32 unique_id = 2;
  uint32 capsule_id = 3;
}

// CmdID: 3655
message ExtractEquipmentRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    JUST_SUPPORT_WEAPON = 2;
    CONSUME_ITEM_NOT_EXIST = 3;
    CONSUME_ITEM_IN_USE = 4;
    CONSUME_ITEM_PROTECTED = 5;
    COST_SENIOR_EQUIP_FROM_NEW_DEVICE = 6;
    COST_SENIOR_EQUIP_CANCEL_PROTECT_TOO_SOON = 7;
    NOT_CULTIVATED = 8;
    ACTIVITY_NOT_OPEN = 9;
    EQUIP_NOT_OPEN = 10;
    MATERIAL_NOT_FITTED = 11;
    MATERIAL_LACK = 12;
    CONSUME_ITEM_IN_FACILITY = 13;
    CONSUME_ITEM_GRAND_KEY = 14;
    CONSUME_ITEM_REPEAT = 15;
    COST_GACHA_TICKET = 16;
    CONSUME_ITEM_PROTECTED_BY_SECURITY_PASSWORD = 17;
  }

  ExtractEquipmentRsp.Retcode retcode = 1;
  uint32 unique_id = 2;
  repeated Material material_list = 3;
}

// CmdID: 3657
message ReforgeEquipmentReq {
  EquipmentType type = 1;
  uint32 unique_id = 2;
  uint32 target_equip_id = 3;
}

// CmdID: 3658
message ReforgeEquipmentRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    JUST_SUPPORT_WEAPON = 2;
    CONSUME_ITEM_NOT_EXIST = 3;
    CONSUME_ITEM_IN_USE = 4;
    CONSUME_ITEM_PROTECTED = 5;
    COST_SENIOR_EQUIP_FROM_NEW_DEVICE = 6;
    COST_SENIOR_EQUIP_CANCEL_PROTECT_TOO_SOON = 7;
    EQUIPMENT_NOT_EXTRACTED = 8;
    ACTIVITY_NOT_OPEN = 9;
    EQUIPMENT_NOT_OPEN = 10;
    TIMES_LACK = 11;
    CONSUME_ITEM_IN_FACILITY = 12;
    TARGET_NOT_FITTED = 13;
    CONSUME_ITEM_GRAND_KEY = 14;
    CONSUME_ITEM_REPEAT = 15;
    COST_GACHA_TICKET = 16;
    CONSUME_ITEM_PROTECTED_BY_SECURITY_PASSWORD = 17;
  }

  ReforgeEquipmentRsp.Retcode retcode = 1;
  uint32 unique_id = 2;
  uint32 remain_reforge_times = 3;
}

// CmdID: 3659
message GetExtractReforgeActivityReq {
}

message ExtractEquipmentActivity {
  message OpenExtractWeapon {
    uint32 quality = 1;
    uint32 base_type = 2;
  }

  repeated ExtractEquipmentActivity.OpenExtractWeapon extract_weapon_list = 4;
  repeated uint32 mainid_black_list = 5;
  bool is_reforge = 6;
  repeated uint32 reforge_main_id_list = 7;
  uint32 reforge_times = 8;
  uint32 powerup_material_ratio = 10;
  uint32 reforge_init_level = 11;
  uint32 remain_reforge_times = 12;
}

message BackEquipmentActivity {
  repeated uint32 mainid_list = 1;
  uint32 remain_back_times = 2;
}

// CmdID: 3660
message GetExtractReforgeActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  GetExtractReforgeActivityRsp.Retcode retcode = 1;
  uint32 begin_time = 2;
  uint32 end_time = 3;
  ExtractEquipmentActivity extract_equipment_activity = 4;
  BackEquipmentActivity back_equipment_activity = 5;
}

// CmdID: 3661
message GetEquipmentBackReq {
}

message EquipmentForgeConsume {
  message ConsumeEquip {
    uint32 id = 1;
    uint32 level = 2;
    uint32 exp = 3;
  }

  uint32 unique_id = 1;
  repeated EquipmentForgeConsume.ConsumeEquip equip_list = 2;
  repeated Material material_list = 3;
}

// CmdID: 3662
message GetEquipmentBackRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  GetEquipmentBackRsp.Retcode retcode = 1;
  repeated EquipmentForgeConsume consume_equip_list = 2;
}

// CmdID: 3663
message BackEquipmentReq {
  uint32 unique_id = 1;
}

// CmdID: 3664
message BackEquipmentRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ACTIVITY_NOT_OPEN = 2;
    CONSUME_ITEM_NOT_EXIST = 3;
    CONSUME_ITEM_IN_USE = 4;
    CONSUME_ITEM_PROTECTED = 5;
    COST_SENIOR_EQUIP_FROM_NEW_DEVICE = 6;
    COST_SENIOR_EQUIP_CANCEL_PROTECT_TOO_SOON = 7;
    EQUIPMENT_NOT_OPEN = 8;
    TIMES_LACK = 9;
    CONSUME_ITEM_IN_FACILITY = 10;
    CONSUME_ITEM_GRAND_KEY = 11;
    CONSUME_ITEM_REPEAT = 12;
    COST_GACHA_TICKET = 13;
    CONSUME_ITEM_PROTECTED_BY_SECURITY_PASSWORD = 14;
  }

  BackEquipmentRsp.Retcode retcode = 1;
  repeated uint32 unique_id_list = 2;
  repeated Material material_list = 3;
  uint32 remain_back_times = 4;
}

enum CmdTypeEquipforge {
  CMD_TYPE_EQUIPFORGE_NONE = 0;
  CMD_GET_EQUIPMENT_FORGE_DATA_REQ = 3650;
  CMD_GET_EQUIPMENT_FORGE_DATA_RSP = 3651;
  CMD_FORGE_EQUIPMENT_REQ = 3652;
  CMD_FORGE_EQUIPMENT_RSP = 3653;
  CMD_EXTRACT_EQUIPMENT_REQ = 3654;
  CMD_EXTRACT_EQUIPMENT_RSP = 3655;
  CMD_REFORGE_EQUIPMENT_REQ = 3657;
  CMD_REFORGE_EQUIPMENT_RSP = 3658;
  CMD_GET_EXTRACT_REFORGE_ACTIVITY_REQ = 3659;
  CMD_GET_EXTRACT_REFORGE_ACTIVITY_RSP = 3660;
  CMD_GET_EQUIPMENT_BACK_REQ = 3661;
  CMD_GET_EQUIPMENT_BACK_RSP = 3662;
  CMD_BACK_EQUIPMENT_REQ = 3663;
  CMD_BACK_EQUIPMENT_RSP = 3664;
}

enum EquipmentForgeType {
  EQUIPMENT_FORGE_TYPE_NONE = 0;
  EQUIPMENT_FORGE_TIMES = 1;
  EQUIPMENT_FORGE_PACKAGE_NUM = 2;
}

enum EquipmentForgeRefreshType {
  EQUIPMENT_FORGE_REFRESH_NONE = 0;
  EQUIPMENT_FORGE_REFRESH_SCHEDULE = 1;
  EQUIPMENT_FORGE_REFRESH_DAILY = 2;
}

message GachaItem {
  uint32 item_id = 1;
  uint32 level = 2;
  uint32 num = 3;
  uint32 split_fragment_num = 4;
  bool is_rare_drop = 5;
  uint32 gift_item_id = 6;
  uint32 gift_level = 7;
  uint32 gift_num = 8;
  repeated GenericItemNum transfer_item_list = 9;
  bool is_client_display_transfer = 10;
}

message GachaSortItem {
  uint32 item_id = 1;
  uint32 level = 2;
  uint32 num = 3;
}

message GachaFreeInfo {
  GachaFreeType free_type = 1;
  uint32 free_times = 2;
  uint32 total_free_times = 3;
  uint32 next_auto_refresh_time = 4;
}

message GachaDisplayCommonData {
  string title_image = 1;
  string supply_image = 2;
  string title = 3;
  string content = 4;
  repeated uint32 up_avatar_list = 5;
  repeated WeaponDetailData up_weapon_list = 6;
  repeated StigmataDetailData up_stigmata_list = 7;
  string rule = 8;
  string content_detail = 9;
  repeated uint32 up_item_list = 10;
  string content_url = 11;
  string btn_image_path = 12;
  repeated GachaSortItem sort_item_list = 13;
  bool is_enable_prompt = 14;
  uint32 gacha_id = 15;
  uint32 data_begin_time = 16;
  uint32 data_end_time = 17;
  repeated uint32 up_elf_list = 18;
  string display_ext = 19;
  uint32 free_gacha_times = 20;
  repeated GachaFreeInfo free_info_list = 21;
}

message GachaLog {
  uint32 time = 1;
  GachaItem item = 2;
}

message WishWellData {
  message Equip {
    uint32 equip_id = 1;
    uint32 equip_level = 2;
  }

  uint32 left_times = 1;
  uint32 set_id = 2;
  uint32 material_id = 3;
  uint32 material_num = 4;
  uint32 equip_need_num = 5;
  repeated WishWellData.Equip equip_list = 6;
  uint32 max_wish_times = 7;
}

message HcoinGachaData {
  uint32 ticket_hcoin_cost = 2;
  uint32 ticket_material_id = 3;
  WishWellData wish_well_data = 7;
  uint32 shining_type = 8;
  uint32 gacha_panel_type = 9;
  uint32 protect_type_id = 10;
  uint32 protect_left_times = 11;
  GachaProtectDisplayInfo protect_display_info = 12;
  uint32 display_max_times = 13;
}

message FriendsPointGachaData {
  uint32 friends_point_cost = 2;
}

message GachaExRewardInfo {
  message ExReward {
    uint32 need_gacha_times = 1;
    uint32 reward_id = 2;
    bool is_taken = 3;
  }

  message ExRewardDisplayDetail {
    uint32 need_gacha_times = 1;
    uint32 item_id = 2;
    uint32 item_num = 3;
    bool is_taken = 4;
    bool is_display_shining = 5;
  }

  repeated GachaExRewardInfo.ExReward ex_reward_list = 15;
  uint32 display_ex_reward_item = 16;
  uint32 display_ex_reward_type = 17;
  repeated GachaExRewardInfo.ExRewardDisplayDetail display_ex_reward_detail_list = 18;
}

message ProtectEntry {
  repeated DropItem possible_item_list = 1;
  uint32 total_times = 2;
  uint32 drop_times = 3;
}

message ActivityGachaData {
  uint32 ticket_hcoin_cost = 2;
  uint32 ticket_material_id = 3;
  uint32 cost_material_id = 4;
  uint32 cost_material_num = 5;
  uint32 baodi_times = 6;
  GachaType gacha_type = 9;
  uint32 gacha_times = 10;
  repeated ProtectEntry display_protect_entry_list = 11;
  bool is_protect_recycle = 12;
  uint32 display_protect_times = 13;
  uint32 no_protect_gacha_times = 14;
  GachaExRewardInfo gacha_ex_reward_info = 15;
  SettingDict display_setting_dict = 16;
  WishWellData wish_well_data = 17;
}

message GachaProtectDisplayInfo {
  enum ProtectDisplayType {
    NO_DISPLAY = 0;
    AVATAR_DISPLAY = 1;
    EQUIP_DISPLAY = 2;
  }

  GachaProtectDisplayInfo.ProtectDisplayType protect_display_type = 1;
  uint32 display_key_avatar = 2;
  repeated uint32 display_key_item_list = 3;
  repeated uint32 droped_up_item_list = 4;
  uint32 no_protect_gacha_times = 5;
  uint32 display_key_elf_card_id = 6;
}

message CustomGachaItemData {
  uint32 id = 1;
  uint32 total_num = 2;
  uint32 gacha_num = 3;
}

message CustomGachaData {
  enum ProtectDisplayType {
    NO_DISPLAY = 0;
    AVATAR_DISPLAY = 1;
    EQUIP_DISPLAY = 2;
  }

  uint32 ticket_hcoin_cost = 2;
  uint32 ticket_material_id = 3;
  uint32 cost_material_id = 4;
  uint32 cost_material_num = 5;
  bool is_enable_baodi = 6;
  GachaType gacha_type = 9;
  uint32 total_gacha_times = 10;
  uint32 gacha_times = 11;
  repeated CustomGachaItemData item_list = 12;
  uint32 display_max_times = 13;
  uint32 no_protect_gacha_times = 14;
  CustomGachaData.ProtectDisplayType protect_display_type = 15;
  uint32 display_key_avatar = 16;
  uint32 display_video_avatar = 17;
  repeated uint32 droped_up_item_list = 18;
  uint32 shining_type = 19;
  uint32 gacha_panel_type = 20;
  repeated uint32 display_key_item_list = 21;
  string display_extra_para = 22;
  uint32 ex_id = 23;
  uint32 ex_energy = 24;
  uint32 ex_gacha_num = 25;
  GachaExRewardInfo gacha_ex_reward_info = 26;
  GachaProtectDisplayInfo protect_display_info = 27;
}

message BoxGachaItemData {
  uint32 id = 1;
  uint32 total_num = 2;
  uint32 gacha_num = 3;
  uint32 item_num_per_drop = 4;
}

message BoxGachaDisplayData {
  repeated BoxGachaItemData item_list = 1;
  repeated GachaItem show_list = 2;
  uint32 pre_gacha_id = 3;
  string web_link = 4;
  uint32 link_type = 5;
  string link_para = 6;
  string link_para_str = 7;
}

message BoxGachaData {
  BoxGachaDisplayData box_gacha_data = 2;
  uint32 ticket_hcoin_cost = 3;
  uint32 ticket_material_id = 4;
  uint32 cost_material_id = 5;
  uint32 cost_material_num = 6;
  bool is_enable_baodi = 7;
  uint32 max_gacha_times = 10;
  uint32 gacha_times = 11;
}

message UniqueGachaSelectItemPool {
  repeated uint32 select_item_list = 1;
}

message UniqueGachaData {
  uint32 ticket_hcoin_cost = 2;
  uint32 ticket_material_id = 3;
  uint32 left_gacha_times = 7;
  UniqueGachaSelectItemPool select_item_pool = 8;
}

message PrayGachaItemData {
  uint32 id = 1;
  uint32 total_num = 2;
  uint32 gacha_num = 3;
}

message PrayGachaData {
  uint32 ticket_hcoin_cost = 2;
  uint32 ticket_material_id = 3;
  uint32 cost_material_id = 4;
  uint32 cost_material_num = 5;
  uint32 max_gacha_times = 8;
  uint32 gacha_times = 9;
  bool is_finished = 10;
  repeated GachaItem protect_item_list = 11;
  repeated PrayGachaItemData pool_item_list = 12;
  uint32 gacha_id = 13;
  uint32 pray_value_per_gacha = 14;
}

message ControllableBoxGachaSelectableGroup {
  uint32 group_id = 1;
  uint32 select_drop_id = 2;
  repeated uint32 drop_id_list = 3;
}

message ControllableBoxGachaItem {
  uint32 drop_id = 1;
  uint32 item_id = 2;
  uint32 item_level = 3;
  uint32 item_num = 4;
  bool is_shining = 5;
  bool is_core = 6;
  SettingDict display_setting_dict = 9;
}

message ControllableBoxGachaItemData {
  repeated ControllableBoxGachaItem item_list = 1;
  repeated uint32 has_got_item_list = 2;
  repeated ControllableBoxGachaSelectableGroup selecetable_group_list = 3;
}

message ControllableBoxGachaData {
  ControllableBoxGachaItemData show_gacha_data = 2;
  uint32 ticket_hcoin_cost = 3;
  uint32 ticket_material_id = 4;
  repeated uint32 ticket_material_num_list = 5;
  repeated uint32 hcoin_cost_list = 6;
  SettingDict display_setting_dict = 9;
}

message OptionalGachaItemData {
  uint32 sub_gacha_id = 1;
  string choose_image = 2;
  bool is_recommend = 3;
  GachaDisplayCommonData common_data = 4;
}

message OptionalGachaData {
  uint32 choosed_sub_gacha_id = 1;
  repeated OptionalGachaItemData candidate_gacha_list = 2;
  uint32 reset_left_times = 3;
  string title_image = 4;
  uint32 display_max_times = 5;
  uint32 no_protect_gacha_times = 6;
  repeated ProtectEntry protect_item_list = 8;
  bool is_protect_display = 9;
  uint32 ticket_hcoin_cost = 10;
  uint32 ticket_material_id = 11;
  WishWellData wish_well_data = 12;
  uint32 ex_id = 13;
  uint32 ex_energy = 14;
  uint32 ex_gacha_num = 15;
  GachaProtectDisplayInfo protect_display_info = 16;
}

message AdventureGachaData {
  uint32 ticket_hcoin_cost = 1;
  uint32 ticket_material_id = 2;
  bool is_enable_baodi = 3;
  uint32 gacha_times = 4;
  bool is_protect_display = 5;
  uint32 display_max_times = 6;
  uint32 no_protect_gacha_times = 7;
  bool is_got_s_avatar_protect = 8;
  double new_s_avatar_prob = 9;
  uint32 next_s_avatar_assure_gacha_times = 10;
  uint32 next_s_avatar_assure_new_need_times = 11;
  uint32 free_gacha_times = 12;
}

message AdventureEquipGachaData {
  uint32 ticket_hcoin_cost = 1;
  uint32 ticket_material_id = 2;
  bool is_enable_baodi = 3;
  uint32 gacha_times = 4;
  uint32 new_protect_equip_prob = 5;
  uint32 next_assure_new_equip_need_times = 6;
}

message SpEquipGachaData {
  uint32 ticket_hcoin_cost = 2;
  uint32 ticket_material_id = 3;
  uint32 cost_material_id = 4;
  uint32 cost_material_num = 5;
  uint32 baodi_times = 6;
  GachaType gacha_type = 9;
  uint32 gacha_times = 10;
  repeated ProtectEntry display_protect_entry_list = 11;
  bool is_protect_recycle = 12;
  uint32 display_protect_times = 13;
  uint32 no_protect_gacha_times = 14;
  GachaExRewardInfo gacha_ex_reward_info = 15;
  SettingDict display_setting_dict = 16;
  WishWellData wish_well_data = 17;
}

message SpecialCommonGachaData {
  uint32 ticket_hcoin_cost = 2;
  uint32 ticket_material_id = 3;
  uint32 cost_material_id = 4;
  uint32 cost_material_num = 5;
  uint32 baodi_times = 6;
  GachaType gacha_type = 9;
  uint32 gacha_times = 10;
  repeated ProtectEntry display_protect_entry_list = 11;
  bool is_protect_recycle = 12;
  uint32 display_protect_times = 13;
  uint32 no_protect_gacha_times = 14;
  GachaExRewardInfo gacha_ex_reward_info = 15;
  SettingDict display_setting_dict = 16;
  WishWellData wish_well_data = 17;
  GachaProtectDisplayInfo protect_display_info = 18;
}

message PjmsGachaData {
  uint32 ticket_hcoin_cost = 1;
  uint32 ticket_material_id = 2;
  uint32 gacha_times = 3;
  uint32 display_protect_times = 4;
  uint32 no_protect_gacha_times = 5;
  SettingDict display_setting_dict = 6;
  GachaExRewardInfo gacha_ex_reward_info = 7;
  GachaProtectDisplayInfo protect_display_info = 8;
}

message GachaExFragment {
  uint32 ex_id = 1;
  uint32 ex_energy = 2;
  uint32 ex_num = 3;
  uint32 ex_energy_add = 4;
  uint32 fragment_add = 5;
  uint32 ex_energy_add_orig = 6;
  uint32 ex_energy_add_bonus = 7;
  uint32 avatar_id = 8;
}

// CmdID: 4700
message GachaReq {
  GachaType type = 1;
  uint32 num = 2;
  bool is_use_hcoin = 3;
  uint32 gacha_random = 4;
  uint32 simulate_magic = 5;
  bool is_use_free_gacha = 6;
  uint32 free_gacha_ticket_id = 7;
}

// CmdID: 4701
message GachaRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    FRIENDS_POINT_LACK = 2;
    TICKET_LACK = 3;
    EQUIPMENT_FULL = 4;
    GACHA_CLOSED = 5;
    HCOIN_LACK = 6;
    EQUIPMENT_MATERIAL_LIMIT = 7;
    EQUIPMENT_FRAGMENT_LIMIT = 8;
    MAX_TIMES_LIMIT = 9;
    GACHA_FINISHED = 10;
    USE_HCOIN_FORBID = 11;
    REQUIRE_SELECT = 12;
    NOT_NEWBIE = 13;
    FEATURE_CLOSED = 14;
    DAILY_TIMES_LIMIT = 15;
    NOT_GOBACK = 16;
    FREE_TYPE_MISMATCH = 17;
    FREE_TICKET_NOT_HCOIN = 18;
    FREE_TICKET_ID_MISMATCH = 19;
  }

  GachaRsp.Retcode retcode = 1;
  repeated GachaItem item_list = 2;
  uint32 gacha_random = 4;
  GetGachaDisplayRsp display = 5;
  GachaExFragment ex_fragment = 6;
  bool is_use_free_gacha = 7;
  GachaType type = 8;
}

// CmdID: 4702
message GetGachaDisplayReq {
  bool is_all = 1;
  GachaType type = 2;
}

message GachaDisplayInfo {
  GachaType gacha_type = 1;
  GachaDisplayCommonData common_data = 2;
  HcoinGachaData hcoin_gacha_data = 3;
  FriendsPointGachaData friends_point_gacha_data = 4;
  ActivityGachaData activity_gacha_data = 5;
  CustomGachaData custom_gacha_data = 6;
  UniqueGachaData unique_gacha_data = 7;
  BoxGachaData box_gacha_data = 8;
  PrayGachaData pray_gacha_data = 9;
  ControllableBoxGachaData controllable_box_gacha_data = 10;
  OptionalGachaData optional_gacha_data = 11;
  AdventureGachaData adventure_gacha_data = 12;
  AdventureEquipGachaData adventure_equip_gacha_data = 13;
  SpEquipGachaData sp_equip_gacha_data = 14;
  SpecialCommonGachaData special_gacha_data = 15;
  PjmsGachaData pjms_gacha_data = 16;
}

message GachaTenDiscountInfo {
  uint32 activity_id = 1;
  uint32 begin_time = 2;
  uint32 end_time = 3;
  uint32 ticket_cost_num = 4;
  bool is_used = 5;
  repeated uint32 gacha_type_list = 6;
}

// CmdID: 4703
message GetGachaDisplayRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetGachaDisplayRsp.Retcode retcode = 1;
  bool is_all = 2;
  GachaType type = 3;
  uint32 pray_gacha_id = 4;
  uint32 gacha_random = 5;
  repeated GachaDisplayInfo gacha_display_info_list = 6;
  repeated GachaTenDiscountInfo gacha_ten_discount_info_list = 7;
  repeated GachaDailyTimesLimit gacha_daily_times_limit_list = 8;
}

// CmdID: 4704
message BuyGachaTicketReq {
  uint32 material_id = 1;
  uint32 num = 2;
}

// CmdID: 4705
message BuyGachaTicketRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MATERIAL_ID_ERROR = 2;
    HCOIN_LACK = 3;
    EQUIPMENT_MATERIAL_LIMIT = 4;
  }

  BuyGachaTicketRsp.Retcode retcode = 1;
  uint32 material_id = 2;
  uint32 num = 3;
  uint32 hcoin_cost = 4;
}

// CmdID: 4706
message GetGachaLogReq {
}

// CmdID: 4707
message GetGachaLogRsp {
  message GachaLogInfo {
    GachaType gacha_type = 1;
    repeated GachaLog log_list = 2;
  }

  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetGachaLogRsp.Retcode retcode = 1;
  repeated GetGachaLogRsp.GachaLogInfo log_info_list = 2;
}

// CmdID: 4708
message GetGachaProbReq {
  uint32 gacha_type = 1;
}

// CmdID: 4709
message GetGachaProbRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetGachaProbRsp.Retcode retcode = 1;
  uint32 gacha_type = 2;
  repeated GachaTotalProb total_prob_list = 3;
  repeated GachaDetailProb detail_prob_list = 4;
  repeated GachaDetailProb baodi_prob_list = 5;
}

message WishCostEquip {
  uint32 cost_equip_id = 1;
  uint32 cost_equip_num = 2;
}

// CmdID: 4710
message WishWellReq {
  uint32 wish_id = 1;
  repeated WishCostEquip cost_equip_list = 2;
  GachaType gacha_type = 3;
  bool is_force_set = 4;
}

// CmdID: 4711
message WishWellRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    EQUIP_NUM_ERROR = 2;
    MATERIAL_NOT_ENOUGH = 3;
    WISH_TIMES_LIMIT = 4;
    DEVICE_ERROR = 5;
    MATERIAL_ERROR = 6;
  }

  WishWellRsp.Retcode retcode = 1;
  uint32 wish_id = 2;
  repeated RewardData reward_list = 3;
  GachaType gacha_type = 4;
}

// CmdID: 4712
message BuyControllableBoxGachaTicketReq {
  uint32 gacha_id = 1;
}

// CmdID: 4713
message BuyControllableBoxGachaTicketRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    GACHA_ID_ERROR = 2;
    HCOIN_LACK = 3;
    EQUIPMENT_MATERIAL_LIMIT = 4;
    NOT_OPENT = 5;
    NOT_LACK = 6;
    GACHA_EMPTY = 7;
  }

  BuyControllableBoxGachaTicketRsp.Retcode retcode = 1;
  uint32 material_id = 2;
  uint32 num = 3;
  uint32 hcoin_cost = 4;
}

// CmdID: 4714
message TakeGachaExRewardReq {
  GachaType gacha_type = 1;
  uint32 gacha_id = 2;
  uint32 ex_reward_gacha_times = 3;
}

// CmdID: 4715
message TakeGachaExRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    HAS_TAKEN = 2;
    GACHA_TIMES_LACK = 3;
    NO_REWARD = 4;
    GACHA_ID_ERROR = 5;
  }

  TakeGachaExRewardRsp.Retcode retcode = 1;
  GachaType gacha_type = 2;
  uint32 gacha_id = 3;
  uint32 ex_reward_gacha_times = 4;
  RewardData reward = 5;
}

// CmdID: 4716
message ChooseOptionalGachaReq {
  GachaType gacha_type = 1;
  uint32 sub_gacha_id = 2;
}

// CmdID: 4717
message ChooseOptionalGachaRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  ChooseOptionalGachaRsp.Retcode retcode = 1;
  GachaType gacha_type = 2;
  uint32 sub_gacha_id = 3;
  GachaExFragment ex_fragment = 4;
}

// CmdID: 4718
message SelectControllableBoxGachaSelectableGroupItemReq {
  uint32 gacha_id = 1;
  uint32 group_id = 2;
  uint32 select_item_id = 3;
}

// CmdID: 4719
message SelectControllableBoxGachaSelectableGroupItemRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    GACHA_ID_ERROR = 2;
    GROUP_ID_ERROR = 3;
    ITEM_ID_ERROR = 4;
    FIRST_IS_TAKEN = 5;
  }

  SelectControllableBoxGachaSelectableGroupItemRsp.Retcode retcode = 1;
  uint32 gacha_id = 2;
  ControllableBoxGachaSelectableGroup group_info = 3;
}

// CmdID: 4722
message UniqueGachaUpdateItemPoolReq {
  repeated uint32 select_item_list = 1;
}

// CmdID: 4723
message UniqueGachaUpdateItemPoolRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  UniqueGachaUpdateItemPoolRsp.Retcode retcode = 1;
}

message GachaDailyTimesLimit {
  GachaType type = 1;
  uint32 group_daily_times = 2;
  uint32 group_daily_limit_times = 3;
  string group_limit_display_ext = 4;
}

enum CmdTypeGacha {
  CMD_TYPE_GACHA_NONE = 0;
  CMD_GACHA_REQ = 4700;
  CMD_GACHA_RSP = 4701;
  CMD_GET_GACHA_DISPLAY_REQ = 4702;
  CMD_GET_GACHA_DISPLAY_RSP = 4703;
  CMD_BUY_GACHA_TICKET_REQ = 4704;
  CMD_BUY_GACHA_TICKET_RSP = 4705;
  CMD_GET_GACHA_LOG_REQ = 4706;
  CMD_GET_GACHA_LOG_RSP = 4707;
  CMD_GET_GACHA_PROB_REQ = 4708;
  CMD_GET_GACHA_PROB_RSP = 4709;
  CMD_WISH_WELL_REQ = 4710;
  CMD_WISH_WELL_RSP = 4711;
  CMD_BUY_CONTROLLABLE_BOX_GACHA_TICKET_REQ = 4712;
  CMD_BUY_CONTROLLABLE_BOX_GACHA_TICKET_RSP = 4713;
  CMD_TAKE_GACHA_EX_REWARD_REQ = 4714;
  CMD_TAKE_GACHA_EX_REWARD_RSP = 4715;
  CMD_CHOOSE_OPTIONAL_GACHA_REQ = 4716;
  CMD_CHOOSE_OPTIONAL_GACHA_RSP = 4717;
  CMD_SELECT_CONTROLLABLE_BOX_GACHA_SELECTABLE_GROUP_ITEM_REQ = 4718;
  CMD_SELECT_CONTROLLABLE_BOX_GACHA_SELECTABLE_GROUP_ITEM_RSP = 4719;
  CMD_UNIQUE_GACHA_UPDATE_ITEM_POOL_REQ = 4722;
  CMD_UNIQUE_GACHA_UPDATE_ITEM_POOL_RSP = 4723;
}

enum GachaUniqueType {
  GACHA_UNIQUE_NONE = 0;
  GACHA_UNIQUE_WEAPON = 1;
  GACHA_UNIQUE_STIGMATA = 2;
  GACHA_UNIQUE_EQUIP = 3;
}

enum GachaProtectType {
  GACHA_PROTECT_NONE = 0;
  GACHA_PROTECT_UP = 1;
  GACHA_PROTECT_NO_UP = 2;
}

enum GachaAdventureConditionType {
  GACHA_ADVENTURE_CONDITION_NONE = 0;
  GACHA_ADVENTURE_CONDITION_CONDITION_ID = 1;
  GACHA_ADVENTURE_CONDITION_ITEM_ID = 2;
}

enum GachaFreeType {
  GACHA_FREE_NONE = 0;
  GACHA_FREE_ONE_PULL = 1;
  GACHA_FREE_TEN_PULLS = 2;
}

enum GachaExRewardDisplayType {
  GACHA_EX_REWARD_DISPLAY_NONE = 0;
  GACHA_EX_REWARD_DISPLAY_BRIEF = 1;
  GACHA_EX_REWARD_DISPLAY_DETAIL = 2;
  GACHA_EX_REWARD_DISPLAY_SHINING = 3;
}

enum AdventureSubGroupType {
  ADVENTURE_SUB_GROUP_NORMAL = 0;
  ADVENTURE_SUB_GROUP_S_AVATAR = 1;
  ADVENTURE_SUB_GROUP_A_AVATAR = 2;
}

// CmdID: 4000
message GeneralActivityScoreRewardNotify {
  uint32 activity_id = 1;
  uint32 id = 2;
  repeated RewardData reward_list = 3;
}

// CmdID: 4001
message GeneralActivityGetScoreRewardInfoReq {
  repeated uint32 activity_id_list = 1;
}

message GeneralActivityScoreRewardInfo {
  uint32 activity_id = 1;
  uint32 cur_score = 2;
  repeated uint32 score_reward_taken_list = 3;
}

// CmdID: 4002
message GeneralActivityGetScoreRewardInfoRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GeneralActivityGetScoreRewardInfoRsp.Retcode retcode = 1;
  repeated GeneralActivityScoreRewardInfo score_info_list = 2;
}

// CmdID: 4003
message GeneralActivityGetScheduleReq {
}

message GeneralActivityScheduleInfo {
  uint32 activity_id = 1;
  uint32 show_time = 2;
  uint32 begin_time = 3;
  uint32 settle_time = 4;
  uint32 end_time = 5;
  uint32 begin_day_time = 6;
  uint32 end_day_time = 7;
  uint32 left_times = 8;
  uint32 schedule_id = 9;
}

// CmdID: 4004
message GeneralActivityGetScheduleRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GeneralActivityGetScheduleRsp.Retcode retcode = 1;
  repeated GeneralActivityScheduleInfo schedule_list = 2;
}

// CmdID: 4005
message GeneralActivityGetMainInfoReq {
  repeated uint32 activity_id_list = 1;
}

message GeneralActivityBasicInfo {
  uint32 activity_id = 1;
  uint32 cur_score = 2;
  repeated uint32 series_activity_id = 3;
  repeated uint32 score_reward_taken_list = 4;
  uint32 schedule_id = 5;
}

message GeneralActivitySettleInfo {
  uint32 activity_id = 1;
  uint32 rank_type = 2;
  uint32 rank = 3;
  repeated RewardData reward_list = 4;
}

message PushTowerActivityInfo {
  uint32 enter_times = 1;
  repeated uint32 stage_reward_taken_list = 2;
  bool is_clear_reward_taken = 3;
  uint32 grow_buff_level = 4;
}

message GeneralActivityStageGroupScheduleInfo {
  uint32 stage_group_id = 1;
  uint32 begin_time = 2;
  uint32 end_time = 3;
}

message GeneralActivityStage {
  uint32 enter_times = 1;
  uint32 exchange_times = 2;
  uint32 cur_score = 3;
  repeated uint32 stage_reward_taken_list = 4;
  uint32 bonus_score_times = 5;
  repeated GeneralActivityStageGroupScheduleInfo stage_group_schedule_list = 6;
  repeated uint32 stage_group_reward_taken_list = 7;
}

message EndlessSingleModeScore {
  uint32 floor = 1;
  uint32 score = 2;
}

message EndlessSingleModeMonsterScore {
  uint32 monster_group_id = 1;
  uint32 score = 2;
}

message EndlessSingleModeItem {
  uint32 item_id = 1;
  uint32 item_num = 2;
}

message EndlessSingleModeActivity {
  uint32 cur_floor = 1;
  repeated EndlessSingleModeScore floor_score_list = 2;
  bool is_settled = 3;
  uint32 reset_times = 4;
  uint32 monster_random_id = 5;
  uint32 activity_type = 6;
  repeated EndlessSingleModeMonsterScore ow_monster_score_list = 7;
  repeated EndlessSingleModeItem ow_item_list = 8;
}

message CrisisModeActivity {
  repeated GeneralActivityStageGroupScheduleInfo stage_group_schedule_list = 1;
  repeated uint32 stage_reward_taken_list = 2;
}

message ScheduledMapSiteActivity {
  repeated GeneralActivityStageGroupScheduleInfo stage_group_schedule_list = 1;
  uint32 enter_times = 2;
}

message BossChallengeAvatar {
  uint32 avatar_id = 1;
  uint32 hp_percent = 2;
  uint32 sp_percent = 3;
}

message BossChallengeScDLCStatus {
  uint32 sc_dlc_fever_score = 1;
  uint32 sc_dlc_climax_score = 2;
}

message BossChallengeStage {
  uint32 stage_id = 1;
  uint32 unlock_time = 2;
  uint32 max_reward_idx = 3;
  uint32 cur_floor = 4;
  uint32 cur_stage_cost_time = 5;
  uint32 min_stage_cost_time = 6;
  repeated BossChallengeAvatar avatar_list = 7;
  BossChallengeScDLCStatus sc_dlc_status = 8;
}

message BossChallengeActivity {
  repeated BossChallengeStage stage_list = 1;
}

message FrontEndlessActivity {
  message FloorScore {
    uint32 floor = 1;
    uint32 score = 2;
  }

  uint32 cur_floor = 1;
  repeated FrontEndlessActivity.FloorScore floor_score_list = 2;
}

message GeneralActivity {
  GeneralActivityBasicInfo general_basic_info = 1;
  GeneralActivitySettleInfo settle_info = 2;
  PushTowerActivityInfo push_tower_info = 3;
  GeneralActivityStage activity_stage = 5;
  EndlessSingleModeActivity endless_single = 7;
  CrisisModeActivity crisis_mode = 11;
  ScheduledMapSiteActivity scheduled_map_site = 12;
  BossChallengeActivity boss_challenge = 13;
  FrontEndlessActivity front_endless = 14;
}

// CmdID: 4006
message GeneralActivityGetMainInfoRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GeneralActivityGetMainInfoRsp.Retcode retcode = 1;
  repeated GeneralActivity activity_list = 2;
}

// CmdID: 4007
message GeneralActivityGetRankReq {
  uint32 activity_id = 1;
}

// CmdID: 4008
message GeneralActivityGetRankRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GeneralActivityGetRankRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  RankShowData rank_data = 3;
}

// CmdID: 4009
message PushTowerActivityTakeStageRewardReq {
  uint32 activity_id = 1;
  uint32 stage_config_id = 2;
}

// CmdID: 4010
message PushTowerActivityTakeStageRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  PushTowerActivityTakeStageRewardRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 stage_config_id = 3;
  repeated RewardData reward_data_list = 4;
}

// CmdID: 4011
message PushTowerActivityTakeClearRewardReq {
  uint32 activity_id = 1;
}

// CmdID: 4012
message PushTowerActivityTakeClearRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    HAS_TAKE_CAMPAIGN_REWARD = 2;
  }

  PushTowerActivityTakeClearRewardRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  repeated RewardData reward_data_list = 3;
}

// CmdID: 4030
message GeneralActivityStageExchangeEnterTimesReq {
  uint32 activity_id = 1;
}

// CmdID: 4031
message GeneralActivityStageExchangeEnterTimesRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MATERIAL_LACK = 2;
    RESET_TIMES_LACK = 3;
  }

  GeneralActivityStageExchangeEnterTimesRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 enter_times = 3;
  uint32 exchange_times = 4;
}

// CmdID: 4032
message GeneralActivityStageTakeStageRewardReq {
  uint32 activity_id = 1;
  uint32 stage_id = 2;
}

// CmdID: 4033
message GeneralActivityStageTakeStageRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GeneralActivityStageTakeStageRewardRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 stage_id = 3;
  repeated RewardData reward_data_list = 4;
}

// CmdID: 4034
message TakeGeneralActivityScoreRewardReq {
  uint32 activity_id = 1;
  uint32 score_id = 2;
}

// CmdID: 4035
message TakeGeneralActivityScoreRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    HAS_TAKEN = 2;
    NOT_REACH = 3;
    NOT_OPEN = 4;
  }

  TakeGeneralActivityScoreRewardRsp.Retcode retcode = 1;
  RewardData reward_data = 2;
  uint32 activity_id = 3;
  uint32 score_id = 4;
}

// CmdID: 4036
message GeneralActivityStageTakeStageGroupRewardReq {
  uint32 activity_id = 1;
  uint32 activity_stage_group_id = 2;
}

// CmdID: 4037
message GeneralActivityStageTakeStageGroupRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    HAS_TAKEN = 2;
    NOT_REACH = 3;
  }

  GeneralActivityStageTakeStageGroupRewardRsp.Retcode retcode = 1;
  RewardData reward_data = 2;
  uint32 activity_id = 3;
  uint32 activity_stage_group_id = 4;
}

// CmdID: 4038
message EndlessSingleModeActivityFinishFloorReq {
  uint32 stage_id = 1;
  uint32 floor = 2;
  uint32 score = 3;
  uint32 cost_time = 4;
  repeated StageCheatData cheat_data_list = 5;
}

// CmdID: 4039
message EndlessSingleModeActivityFinishFloorRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_CUR_FLOOR = 2;
  }

  EndlessSingleModeActivityFinishFloorRsp.Retcode retcode = 1;
}

// CmdID: 4040
message EndlessSingleModeActivityResetReq {
  uint32 activity_id = 1;
}

// CmdID: 4041
message EndlessSingleModeActivityResetRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MATERIAL_LACK = 2;
    STAMINA_LACK = 3;
  }

  EndlessSingleModeActivityResetRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
}

// CmdID: 4042
message EndlessSingleModeActivityBattleBeginReq {
  uint32 activity_id = 1;
  uint32 map_id = 2;
  uint32 area_id = 3;
  uint32 battle_id = 4;
  uint32 group_level = 5;
  uint32 monster_group_id = 6;
  uint32 layer_number = 7;
}

// CmdID: 4043
message EndlessSingleModeActivityBattleBeginRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  EndlessSingleModeActivityBattleBeginRsp.Retcode retcode = 1;
}

// CmdID: 4044
message EndlessSingleModeActivityBattleEndReq {
  uint32 activity_id = 1;
  uint32 map_id = 2;
  uint32 area_id = 3;
  uint32 battle_id = 4;
  uint32 monster_group_id = 5;
  uint32 score = 6;
  uint32 cost_time = 7;
  StageEndStatus end_status = 8;
  repeated StageInnerAvatarData avatar_list = 9;
  uint32 environment_id = 10;
  uint32 layer_number = 11;
  repeated StageInnerElfData elf_list = 12;
}

// CmdID: 4045
message EndlessSingleModeActivityBattleEndRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  EndlessSingleModeActivityBattleEndRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 map_id = 3;
  uint32 area_id = 4;
  uint32 battle_id = 5;
  uint32 monster_group_id = 6;
}

// CmdID: 4046
message EndlessSingleModeActivityTakeItemReq {
  uint32 activity_id = 1;
  uint32 item_id = 2;
  uint32 item_num = 3;
}

// CmdID: 4047
message EndlessSingleModeActivityTakeItemRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ITEM_FULL = 2;
  }

  EndlessSingleModeActivityTakeItemRsp.Retcode retcode = 1;
}

// CmdID: 4048
message EndlessSingleModeActivityUseItemReq {
  uint32 activity_id = 1;
  uint32 item_id = 2;
  uint32 item_num = 3;
}

// CmdID: 4049
message EndlessSingleModeActivityUseItemRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ITEM_LACK = 2;
  }

  EndlessSingleModeActivityUseItemRsp.Retcode retcode = 1;
}

// CmdID: 4052
message GeneralActivityGetStageRankReq {
  uint32 stage_id = 1;
  uint32 rank_id = 2;
}

// CmdID: 4053
message GeneralActivityGetStageRankRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GeneralActivityGetStageRankRsp.Retcode retcode = 1;
  uint32 stage_id = 2;
  RankShowData rank_data = 3;
}

// CmdID: 4056
message CrisisModeActivityTakeStageRewardReq {
  uint32 activity_id = 1;
  uint32 stage_id = 2;
}

// CmdID: 4057
message CrisisModeActivityTakeStageRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    HAS_TAKEN = 2;
  }

  CrisisModeActivityTakeStageRewardRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 stage_id = 3;
  RewardData reward_data = 4;
}

// CmdID: 4060
message GeneralActivityTakeTicketReq {
  uint32 activity_id = 1;
}

message GeneralActivityTicket {
  uint32 material_id = 1;
  uint32 add_num = 2;
}

// CmdID: 4061
message GeneralActivityTakeTicketRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  GeneralActivityTakeTicketRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  repeated GeneralActivityTicket ticket_list = 3;
}

// CmdID: 4062
message BossChallengeActivityGetStageRankReq {
  uint32 activity_id = 1;
  uint32 stage_id = 2;
}

// CmdID: 4063
message BossChallengeActivityGetStageRankRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  BossChallengeActivityGetStageRankRsp.Retcode retcode = 1;
  uint32 rank = 2;
  uint32 rank_ratio = 3;
}

// CmdID: 4064
message FrontEndlessActivityBattleBeginReq {
  uint32 activity_id = 1;
  uint32 stage_id = 2;
  uint32 floor = 3;
}

// CmdID: 4065
message FrontEndlessActivityBattleBeginRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  FrontEndlessActivityBattleBeginRsp.Retcode retcode = 1;
}

// CmdID: 4066
message FrontEndlessActivityBattleEndReq {
  uint32 activity_id = 1;
  uint32 stage_id = 2;
  uint32 floor = 3;
  uint32 score = 4;
  StageEndStatus end_status = 5;
  uint32 cost_time = 6;
}

// CmdID: 4067
message FrontEndlessActivityBattleEndRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_CUR_FLOOR = 2;
  }

  FrontEndlessActivityBattleEndRsp.Retcode retcode = 1;
  uint32 cur_floor = 2;
  RewardData reward_data = 3;
}

enum CmdTypeGeneralactivity {
  CMD_TYPE_GENERALACTIVITY_NONE = 0;
  CMD_GENERAL_ACTIVITY_SCORE_REWARD_NOTIFY = 4000;
  CMD_GENERAL_ACTIVITY_GET_SCORE_REWARD_INFO_REQ = 4001;
  CMD_GENERAL_ACTIVITY_GET_SCORE_REWARD_INFO_RSP = 4002;
  CMD_GENERAL_ACTIVITY_GET_SCHEDULE_REQ = 4003;
  CMD_GENERAL_ACTIVITY_GET_SCHEDULE_RSP = 4004;
  CMD_GENERAL_ACTIVITY_GET_MAIN_INFO_REQ = 4005;
  CMD_GENERAL_ACTIVITY_GET_MAIN_INFO_RSP = 4006;
  CMD_GENERAL_ACTIVITY_GET_RANK_REQ = 4007;
  CMD_GENERAL_ACTIVITY_GET_RANK_RSP = 4008;
  CMD_PUSH_TOWER_ACTIVTIY_TAKE_STAGE_REWARD_REQ = 4009;
  CMD_PUSH_TOWER_ACTIVTIY_TAKE_STAGE_REWARD_RSP = 4010;
  CMD_PUSH_TOWER_ACTIVTIY_TAKE_CLEAR_REWARD_REQ = 4011;
  CMD_PUSH_TOWER_ACTIVTIY_TAKE_CLEAR_REWARD_RSP = 4012;
  CMD_GENERAL_ACTIVITY_STAGE_EXCHANGE_ENTER_TIMES_REQ = 4030;
  CMD_GENERAL_ACTIVITY_STAGE_EXCHANGE_ENTER_TIMES_RSP = 4031;
  CMD_GENERAL_ACTIVITY_STAGE_TAKE_STAGE_REWARD_REQ = 4032;
  CMD_GENERAL_ACTIVITY_STAGE_TAKE_STAGE_REWARD_RSP = 4033;
  CMD_TAKE_GENERAL_ACTIVITY_SCORE_REWARD_REQ = 4034;
  CMD_TAKE_GENERAL_ACTIVITY_SCORE_REWARD_RSP = 4035;
  CMD_GENERAL_ACTIVITY_STAGE_TAKE_STAGE_GROUP_REWARD_REQ = 4036;
  CMD_GENERAL_ACTIVITY_STAGE_TAKE_STAGE_GROUP_REWARD_RSP = 4037;
  CMD_ENDLESS_SINGLE_MODE_ACTIVITY_FINISH_FLOOR_REQ = 4038;
  CMD_ENDLESS_SINGLE_MODE_ACTIVITY_FINISH_FLOOR_RSP = 4039;
  CMD_ENDLESS_SINGLE_MODE_ACTIVITY_RESET_REQ = 4040;
  CMD_ENDLESS_SINGLE_MODE_ACTIVITY_RESET_RSP = 4041;
  CMD_ENDLESS_SINGLE_MODE_ACTIVITY_BATTLE_BEGIN_REQ = 4042;
  CMD_ENDLESS_SINGLE_MODE_ACTIVITY_BATTLE_BEGIN_RSP = 4043;
  CMD_ENDLESS_SINGLE_MODE_ACTIVITY_BATTLE_END_REQ = 4044;
  CMD_ENDLESS_SINGLE_MODE_ACTIVITY_BATTLE_END_RSP = 4045;
  CMD_ENDLESS_SINGLE_MODE_ACTIVITY_TAKE_ITEM_REQ = 4046;
  CMD_ENDLESS_SINGLE_MODE_ACTIVITY_TAKE_ITEM_RSP = 4047;
  CMD_ENDLESS_SINGLE_MODE_ACTIVITY_USE_ITEM_REQ = 4048;
  CMD_ENDLESS_SINGLE_MODE_ACTIVITY_USE_ITEM_RSP = 4049;
  CMD_GENERAL_ACTIVITY_GET_STAGE_RANK_REQ = 4052;
  CMD_GENERAL_ACTIVITY_GET_STAGE_RANK_RSP = 4053;
  CMD_CRISIS_MODE_ACTIVITY_TAKE_STAGE_REWARD_REQ = 4056;
  CMD_CRISIS_MODE_ACTIVITY_TAKE_STAGE_REWARD_RSP = 4057;
  CMD_GENERAL_ACTIVITY_TAKE_TICKET_REQ = 4060;
  CMD_GENERAL_ACTIVITY_TAKE_TICKET_RSP = 4061;
  CMD_BOSS_CHALLENGE_ACTIVITY_GET_STAGE_RANK_REQ = 4062;
  CMD_BOSS_CHALLENGE_ACTIVITY_GET_STAGE_RANK_RSP = 4063;
  CMD_FRONT_ENDLESS_ACTIVITY_BATTLE_BEGIN_REQ = 4064;
  CMD_FRONT_ENDLESS_ACTIVITY_BATTLE_BEGIN_RSP = 4065;
  CMD_FRONT_ENDLESS_ACTIVITY_BATTLE_END_REQ = 4066;
  CMD_FRONT_ENDLESS_ACTIVITY_BATTLE_END_RSP = 4067;
  CMD_GENERAL_ACTIVITY_DUMMY = 4099;
}

enum GeneralActivityRankType {
  GENERAL_ACTIVITY_RANK_TYPE_NONE = 0;
  GENERAL_ACTIVITY_RANK_TYPE_ABS = 1;
  GENERAL_ACTIVITY_RANK_TYPE_PERCENT = 2;
}

enum GeneralActivityRankSettleType {
  GENERAL_ACTIVITY_RANK_SETTLE_TYPE_DEFAULT = 0;
  GENERAL_ACTIVITY_RANK_SETTLE_TYPE_ACTIVITY = 1;
}

enum GeneralActivityPreCondType {
  GENERAL_ACTIVITY_PRE_COND_TYPE_NONE = 0;
  GENERAL_ACTIVITY_PRE_COND_TYPE_SCORE = 1;
}

enum GeneralActivityStageAvatarBonusType {
  GENERAL_ACTIVITY_STAGE_AVATAR_BONUS_NONE = 0;
  GENERAL_ACTIVITY_STAGE_AVATAR_BONUS_ONCE = 1;
  GENERAL_ACTIVITY_STAGE_AVATAR_BONUS_ALL = 2;
}

enum EndlessSingleModeActivityType {
  ENDLESS_SINGLE_MODE_ACTIVITY_TYPE_NONE = 0;
  ENDLESS_SINGLE_MODE_ACTIVITY_TYPE_NORMAL = 1;
  ENDLESS_SINGLE_MODE_ACTIVITY_TYPE_OW = 2;
}

enum GeneralActivityTicketRefreshType {
  GENERAL_ACTIVITY_TICKET_REFRESH_NONE = 0;
  GENERAL_ACTIVITY_TICKET_REFRESH_DAILY = 1;
  GENERAL_ACTIVITY_TICKET_REFRESH_WEEKLY = 2;
}

message GlobalExplorePos {
  int32 pos_x = 1;
  int32 pos_y = 2;
}

message GlobalExploreGrid {
  GlobalExplorePos pos = 1;
  uint32 entity_id = 2;
  uint32 entity_expire_time = 3;
  bool is_explored = 4;
}

message GlobalExploreEvent {
  uint32 event_id = 1;
  uint32 event_type = 2;
  repeated uint32 event_param_list = 3;
  GlobalExploreHintType hint_type = 4;
}

message GlobalExploreEntity {
  message KingdomData {
    uint32 kingdom_id = 1;
    uint32 progress = 2;
  }

  uint32 entity_id = 1;
  bool is_active = 2;
  repeated GlobalExploreEntity.KingdomData kingdom_data_list = 3;
  uint32 active_time = 4;
  uint32 contribution = 5;
}

message GlobalExploreQuest {
  uint32 quest_id = 1;
  uint32 progress = 2;
  GlobalExploreQuestStatus status = 3;
  uint32 finish_times = 4;
}

message GlobalExploreStage {
  uint32 stage_id = 1;
  uint32 entity_id = 2;
  uint32 grid_id = 3;
  bool is_need_block = 4;
}

message GlobalExploreInfo {
  uint32 kingdom_id = 1;
  GlobalExplorePos cur_pos = 2;
  GlobalExploreStage cur_stage = 3;
  uint32 explore_level = 4;
  uint32 explore_exp = 5;
  uint32 explore_stamina = 6;
  repeated GlobalExploreEntity entity_list = 7;
  repeated GlobalExploreGrid grid_list = 8;
  repeated GlobalExploreQuest quest_list = 9;
  uint32 explore_stamina_limit = 10;
  bool is_take_kingdom_reward = 11;
}

// CmdID: 6900
message GlobalExploreGetActivityReq {
}

// CmdID: 6901
message GlobalExploreGetActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    AFTER_SETTLE_TIME = 3;
    TOO_FREQUENT = 4;
  }

  GlobalExploreGetActivityRsp.Retcode retcode = 1;
  GlobalExploreInfo info = 2;
}

// CmdID: 6902
message GlobalExploreNotify {
  repeated GlobalExploreEvent event_list = 1;
  repeated GlobalExplorePos move_pos_list = 2;
  GlobalExploreInfo update_info = 3;
  repeated uint32 remove_quest_list = 4;
}

// CmdID: 6903
message GlobalExploreMoveReq {
  repeated GlobalExplorePos move_pos_list = 1;
  GlobalExploreMoveType move_type = 2;
}

// CmdID: 6904
message GlobalExploreMoveRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    STAMINA_LACK = 3;
    OUT_OF_RANGE = 4;
    PATH_INVALID = 5;
    UNEXPLOERD_LIMIT = 6;
    ENTITY_OVERLAP = 7;
    STAGE_UNFINISH = 8;
    TOO_FREQUENT = 9;
  }

  GlobalExploreMoveRsp.Retcode retcode = 1;
  repeated GlobalExplorePos move_pos_list = 2;
  GlobalExploreMoveType move_type = 3;
}

// CmdID: 6905
message GlobalExploreInteractReq {
  GlobalExplorePos pos = 1;
  uint32 entity_id = 2;
}

// CmdID: 6906
message GlobalExploreInteractRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    OUT_OF_RANGE = 3;
    ENTITY_NOT_EXIST = 4;
    ENTITY_MISMATCH = 5;
    STAGE_UNFINISH = 6;
  }

  GlobalExploreInteractRsp.Retcode retcode = 1;
  GlobalExplorePos pos = 2;
  uint32 entity_id = 3;
  repeated uint32 action_id_list = 4;
}

// CmdID: 6907
message GlobalExploreActionReq {
  GlobalExplorePos pos = 1;
  uint32 entity_id = 2;
  uint32 action_id = 3;
  uint32 action_param = 4;
}

// CmdID: 6908
message GlobalExploreActionRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    OUT_OF_RANGE = 3;
    ENTITY_NOT_EXIST = 4;
    ENTITY_MISMATCH = 5;
    ACTION_INVALID = 6;
    STAMINA_LACK = 7;
    MATERIAL_LACK = 8;
    STAGE_UNFINISH = 9;
    ENTITY_HAS_ACTIVATE = 10;
  }

  GlobalExploreActionRsp.Retcode retcode = 1;
  GlobalExplorePos pos = 2;
  uint32 entity_id = 3;
  uint32 action_id = 4;
  uint32 action_param = 5;
  uint32 contribution_add = 6;
}

enum CmdTypeGlobalexplore {
  CMD_TYPE_GLOBALEXPLORE_NONE = 0;
  CMD_GLOBAL_EXPLORE_GET_ACTIVITY_REQ = 6900;
  CMD_GLOBAL_EXPLORE_GET_ACTIVITY_RSP = 6901;
  CMD_GLOBAL_EXPLORE_NOTIFY = 6902;
  CMD_GLOBAL_EXPLORE_MOVE_REQ = 6903;
  CMD_GLOBAL_EXPLORE_MOVE_RSP = 6904;
  CMD_GLOBAL_EXPLORE_INTERACT_REQ = 6905;
  CMD_GLOBAL_EXPLORE_INTERACT_RSP = 6906;
  CMD_GLOBAL_EXPLORE_ACTION_REQ = 6907;
  CMD_GLOBAL_EXPLORE_ACTION_RSP = 6908;
}

enum GlobalExploreFlagType {
  GLOBAL_EXPLORE_FLAG_TYPE_NONE = 0;
  GLOBAL_EXPLORE_FLAG_MATERIAL_NUM = 1;
  GLOBAL_EXPLORE_FLAG_CUR_GRID = 2;
  GLOBAL_EXPLORE_FLAG_ENTITY_INACTIVE = 3;
  GLOBAL_EXPLORE_FLAG_ENTITY_ACTIVE = 4;
  GLOBAL_EXPLORE_FLAG_STAGE_COMPLETED = 5;
  GLOBAL_EXPLORE_FLAG_MISSION_COMPLETED = 6;
  GLOBAL_EXPLORE_FLAG_GRID_ADJACENT = 7;
  GLOBAL_EXPLORE_FLAG_QUEST_STATUS = 8;
  GLOBAL_EXPLORE_FLAG_WITHOUT_MATERIAL = 9;
}

enum GlobalExploreEventType {
  GLOBAL_EXPLORE_EVENT_TYPE_NONE = 0;
  GLOBAL_EXPLORE_EVENT_DICE = 1;
  GLOBAL_EXPLORE_EVENT_DROP_MATERIAL = 2;
  GLOBAL_EXPLORE_EVENT_REPLACE_ENTITY = 3;
  GLOBAL_EXPLORE_EVENT_DESTROY_ENTITY = 4;
  GLOBAL_EXPLORE_EVENT_TELEPORT_RANDOM = 5;
  GLOBAL_EXPLORE_EVENT_CHANGE_GRID = 6;
  GLOBAL_EXPLORE_EVENT_ACCEPT_QUEST = 7;
  GLOBAL_EXPLORE_EVENT_TELEPORT_SPECIFIC = 8;
  GLOBAL_EXPLORE_EVENT_RECOVER_STAMINA = 9;
  GLOBAL_EXPLORE_EVENT_ENTER_STAGE = 10;
  GLOBAL_EXPLORE_EVENT_ADD_QUEST_PROGRESS = 11;
  GLOBAL_EXPLORE_EVENT_CHANGE_GRID_RANDOM = 12;
  GLOBAL_EXPLORE_EVENT_DROP_MATERIAL_RANDOM = 13;
  GLOBAL_EXPLORE_EVENT_CREATE_ENTITY_RANDOM = 14;
  GLOBAL_EXPLORE_EVENT_MOVE_CAMERA = 15;
  GLOBAL_EXPLORE_EVENT_TEXT_MAP_HINT = 16;
  GLOBAL_EXPLORE_EVENT_TRIGGER_PLOT = 17;
  GLOBAL_EXPLORE_EVENT_START_TUTORIAL = 18;
  GLOBAL_EXPLORE_EVENT_ZOOM_MAP = 19;
}

enum GlobalExploreHintType {
  GLOBAL_EXPLORE_HINT_NONE = 0;
  GLOBAL_EXPLORE_HINT_COIN = 1;
  GLOBAL_EXPLORE_HINT_INVISIBLE_REWARD = 2;
  GLOBAL_EXPLORE_HINT_COMPLETE_QUEST = 3;
}

enum GlobalExploreActionType {
  GLOBAL_EXPLORE_ACTION_NONE = 0;
  GLOBAL_EXPLORE_ACTION_DICE = 1;
  GLOBAL_EXPLORE_ACTION_EXCHANGE = 2;
  GLOBAL_EXPLORE_ACTION_BATTLE = 3;
  GLOBAL_EXPLORE_ACTION_TELEPORT = 4;
  GLOBAL_EXPLORE_ACTION_AREA_TELEPORT = 5;
  GLOBAL_EXPLORE_ACTION_ACCEPT_QUEST = 6;
  GLOBAL_EXPLORE_ACTION_USE_HAMMER = 7;
  GLOBAL_EXPLORE_ACTION_USE_SPADE = 8;
}

enum GlobalExploreEntityType {
  GLOBAL_EXPLORE_ENTITY_TYPE_NONE = 0;
  GLOBAL_EXPLORE_ENTITY_REWARD = 1;
  GLOBAL_EXPLORE_ENTITY_DICE = 2;
  GLOBAL_EXPLORE_ENTITY_STAGE = 3;
  GLOBAL_EXPLORE_ENTITY_PLOT = 4;
  GLOBAL_EXPLORE_ENTITY_TELEPORT = 5;
  GLOBAL_EXPLORE_ENTITY_EVENT = 6;
}

enum GlobalExploreEntityCriticalType {
  GLOBAL_EXPLORE_ENTITY_CRITICAL_TYPE_NONE = 0;
  GLOBAL_EXPLORE_ENTITY_CRITICAL_STAGE = 1001;
  GLOBAL_EXPLORE_ENTITY_CRITICAL_QUEST = 1002;
  GLOBAL_EXPLORE_ENTITY_CRITICAL_WATCHTOWER = 1003;
  GLOBAL_EXPLORE_ENTITY_CRITICAL_BOSS = 1005;
}

enum GlobalExploreQuestType {
  GLOBAL_EXPLORE_QUEST_TYPE_NONE = 0;
  GLOBAL_EXPLORE_QUEST_EXPLORE = 1;
  GLOBAL_EXPLORE_QUEST_MOVE_PATH = 2;
  GLOBAL_EXPLORE_QUEST_PASS_STAGE = 3;
  GLOBAL_EXPLORE_QUEST_ADD_MATERIAL = 4;
  GLOBAL_EXPLORE_QUEST_FINISH_QUEST = 100;
}

enum GlobalExploreQuestStatus {
  GLOBAL_EXPLORE_QUEST_STATUS_NONE = 0;
  GLOBAL_EXPLORE_QUEST_DOING = 1;
  GLOBAL_EXPLORE_QUEST_CLOSE = 2;
}

enum GlobalExplorePoolType {
  GLOBAL_EXPLORE_POOL_WITH_REPLACEMENT = 0;
  GLOBAL_EXPLORE_POOL_WITHOUT_REPLACEMENT = 1;
  GLOBAL_EXPLORE_POOL_CYCLE = 2;
}

enum GlobalExplorePoolContentType {
  GLOBAL_EXPLORE_POOL_CONTENT_TYPE_NONE = 0;
  GLOBAL_EXPLORE_POOL_CONTENT_EVENT = 1;
  GLOBAL_EXPLORE_POOL_CONTENT_QUEST = 2;
  GLOBAL_EXPLORE_POOL_CONTENT_ENTITY = 3;
}

enum GlobalExploreMoveType {
  GLOBAL_EXPLORE_MOVE_TYPE_NONE = 0;
  GLOBAL_EXPLORE_MOVE_WALK = 1;
  GLOBAL_EXPLORE_MOVE_TELEPORT = 2;
  GLOBAL_EXPLORE_EVENT_TELEPORT = 3;
  GLOBAL_EXPLORE_GM_TELEPORT = 4;
}

enum GlobalExploreBleedingType {
  GLOBAL_EXPLORE_BLEEDING_TYPE_NONE = 0;
  GLOBAL_EXPLORE_BLEEDING_POINT = 1;
  GLOBAL_EXPLORE_BLEEDING_BOSS = 2;
}

message GlobalWarActivity {
  uint32 cur_schedule_id = 1;
  uint32 display_begin_time = 2;
  uint32 display_end_time = 3;
  uint32 begin_time = 4;
  uint32 end_time = 5;
  uint32 total_get_currency = 6;
  uint32 last_daily_get_currency = 7;
  uint32 total_cost_ticket_num = 8;
  repeated uint32 take_point_reward_list = 9;
  repeated GlobalWarPoint global_war_point_list = 10;
  repeated GlobalWarMember member_list = 11;
  uint32 buff_level = 13;
  repeated GlobalWarIsolatePoint global_war_isolate_point_list = 14;
}

// CmdID: 3950
message GetGlobalWarActivityReq {
}

// CmdID: 3951
message GetGlobalWarActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  GetGlobalWarActivityRsp.Retcode retcode = 1;
  GlobalWarActivity global_war_activity = 2;
}

message GlobalWarMember {
  uint32 uid = 1;
  string nickname = 2;
  uint32 level = 3;
  uint32 head_avatar_id = 4;
  uint32 frame_id = 5;
  uint32 dress_id = 6;
  uint32 custom_head_id = 7;
  uint32 global_war_point_id = 8;
  uint32 global_war_add_currency = 9;
  uint32 global_war_add_time = 10;
}

message GlobalWarPoint {
  uint32 point_id = 1;
  uint32 cur_hp = 2;
  uint32 point_status = 3;
  uint32 last_refresh_member_num = 4;
  uint32 point_finish_time = 5;
  uint32 last_take_sweep_reward_time = 6;
}

message GlobalWarIsolatePoint {
  uint32 point_id = 1;
  uint32 point_status = 2;
}

// CmdID: 3952
message GlobalWarTakePointRewardReq {
  repeated uint32 point_id_list = 1;
}

// CmdID: 3953
message GlobalWarTakePointRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    POINT_NOT_FINISH = 2;
    CURRENCY_LACK = 3;
  }

  GlobalWarTakePointRewardRsp.Retcode retcode = 1;
  repeated uint32 point_id_list = 2;
  RewardData reward_data = 3;
}

// CmdID: 3954
message GlobalWarAddCurrencyNotify {
  uint32 point_id = 1;
  GlobalWarMember global_war_member = 2;
}

// CmdID: 3955
message GlobalWarExchangeCurrencyReq {
  uint32 point_id = 1;
}

// CmdID: 3956
message GlobalWarExchangeCurrencyRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    POINT_NOT_ACTIVE = 2;
    MATERIAL_LACK = 3;
    CURRENCY_FULL = 4;
    AREA_NOT_FINISH = 5;
    STAMINA_LACK = 6;
  }

  GlobalWarExchangeCurrencyRsp.Retcode retcode = 1;
  uint32 add_currency_num = 2;
}

// CmdID: 3957
message GlobalWarGetRankReq {
  uint32 point_id = 1;
}

// CmdID: 3958
message GlobalWarGetRankRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GlobalWarGetRankRsp.Retcode retcode = 1;
  uint32 point_id = 2;
  RankShowData rank_data = 3;
}

// CmdID: 3959
message GlobalWarTakeSweepRewardReq {
  repeated uint32 point_id_list = 1;
}

message SweepCurrency {
  uint32 point_id = 1;
  uint32 add_num = 2;
}

// CmdID: 3960
message GlobalWarTakeSweepRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    POINT_NOT_FINISH = 2;
    SWEEP_MATERIAL_CD = 3;
  }

  GlobalWarTakeSweepRewardRsp.Retcode retcode = 1;
  repeated SweepCurrency sweep_currency_list = 2;
}

enum CmdTypeGlobalwar {
  CMD_TYPE_GLOBALWAR_NONE = 0;
  CMD_GET_GLOBAL_WAR_ACTIVITY_REQ = 3950;
  CMD_GET_GLOBAL_WAR_ACTIVITY_RSP = 3951;
  CMD_GLOBAL_WAR_TAKE_POINT_REWARD_REQ = 3952;
  CMD_GLOBAL_WAR_TAKE_POINT_REWARD_RSP = 3953;
  CMD_GLOBAL_WAR_ADD_CURRENCY_NOTIFY = 3954;
  CMD_GLOBAL_WAR_EXCHANGE_CURRENCY_REQ = 3955;
  CMD_GLOBAL_WAR_EXCHANGE_CURRENCY_RSP = 3956;
  CMD_GLOBAL_WAR_GET_RANK_REQ = 3957;
  CMD_GLOBAL_WAR_GET_RANK_RSP = 3958;
  CMD_GLOBAL_WAR_TAKE_SWEEP_REWARD_REQ = 3959;
  CMD_GLOBAL_WAR_TAKE_SWEEP_REWARD_RSP = 3960;
  CMD_GLOBAL_WAR_DUMMY = 3999;
}

enum GlobalWarPointType {
  GLOBAL_WAR_POINT_TYPE_NONE = 0;
  GLOBAL_WAR_POINT_TYPE_NORMAL = 1;
  GLOBAL_WAR_POINT_TYPE_CRITICAL = 2;
  GLOBAL_WAR_POINT_TYPE_BOSS = 3;
}

enum GlobalWarPointRankType {
  GLOBAL_WAR_POINT_RANK_NONE = 0;
  GLOBAL_WAR_POINT_RANK_CURRENCY = 1;
  GLOBAL_WAR_POINT_RANK_SCORE = 2;
}

enum GlobalWarPointStatus {
  GLOBAL_WAR_POINT_STATUS_NONE = 0;
  GLOBAL_WAR_POINT_STATUS_LOCKED = 1;
  GLOBAL_WAR_POINT_STATUS_ACTIVE = 2;
  GLOBAL_WAR_POINT_STATUS_CLOSE = 3;
}

enum GlobalWarIsolatePointStatus {
  GLOBAL_WAR_ISOLATE_POINT_STATUS_NONE = 0;
  GLOBAL_WAR_ISOLATE_POINT_STATUS_LOCKED = 1;
  GLOBAL_WAR_ISOLATE_POINT_STATUS_ACTIVE = 2;
  GLOBAL_WAR_ISOLATE_POINT_STATUS_CLOSE = 3;
}

enum GlobalWarStageType {
  GLOBAL_WAR_STAGE_FOR_NONE = 0;
  GLOBAL_WAR_STAGE_FOR_POINT = 1;
  GLOBAL_WAR_STAGE_FOR_ISOLATE_POINT = 2;
}

// CmdID: 6150
message GetGodWarReq {
  uint32 god_war_id = 1;
}

message GodWarSite {
  uint32 site_id = 1;
  GodWarSiteStatus site_status = 2;
}

message GodWarOverall {
  uint32 overall_id = 1;
  uint32 overall_val = 2;
}

message GodWarChallengeStigmata {
  uint32 id = 1;
  uint32 level = 2;
  repeated StigmataRune rune_list = 3;
}

message GodWarChallengeAvatar {
  uint32 avatar_id = 1;
  uint32 hp_percent = 2;
  bool is_virtual = 3;
  uint32 weapon_id = 4;
  uint32 weapon_level = 5;
  GodWarChallengeStigmata stigmata_1 = 6;
  GodWarChallengeStigmata stigmata_2 = 7;
  GodWarChallengeStigmata stigmata_3 = 8;
  uint32 weapon_homology_level = 9;
}

message GodWarChallengeElf {
  ElfBriefInfo elf_info = 1;
}

message GodWarBonus {
  uint32 bonus_id = 1;
  uint32 count_down = 2;
  GodWarBuff buff = 3;
}

message GodWarChallenge {
  bool is_challenge_fail = 1;
  repeated GodWarChallengeAvatar avatar_list = 2;
  repeated uint32 support_avatar_id_list = 3;
  uint32 elf_id = 4;
  uint32 extra_item_id = 5;
  uint32 refresh_teleport_times = 6;
  repeated GodWarPunishBuff punish_buff_list = 7;
  uint32 challenge_score = 8;
  uint32 random_seed = 9;
  uint32 step_level = 10;
  repeated uint32 punish_buff_id_list = 11;
  bool is_use_virtual_avatar = 12;
  repeated uint32 boon_buff_id_list = 13;
  uint32 gain_coin_num = 14;
  uint32 refresh_teleport_times_limit = 15;
  uint32 assistant_extra_item_id = 16;
  repeated GodWarBonus bonus_list = 17;
  uint32 refresh_gacha_times = 18;
  uint32 refresh_gacha_times_limit = 19;
  uint32 star_ring_energy = 20;
  repeated GodWarChallengeElf elf_list = 21;
  bool is_alleviation = 22;
}

message GodWarChallengeHistory {
  uint32 avatar_id = 1;
  bool is_challenge_succ = 2;
  uint32 max_punish_level = 3;
  repeated uint32 pass_step_level_list = 4;
  uint32 max_challenge_score = 5;
}

message GodWarBuff {
  uint32 buff_id = 1;
  uint32 buff_level = 2;
}

message GodWarTalent {
  uint32 talent_id = 1;
  uint32 talent_level = 2;
}

message GodWarTale {
  uint32 tale_id = 1;
  uint32 schedule_id = 2;
  repeated GodWarSite site_list = 3;
  uint32 cur_site_id = 4;
  uint32 begin_time = 5;
  uint32 end_time = 6;
  GodWarChallenge challenge = 7;
  repeated GodWarBuff buff_list = 8;
  uint32 avatar_schedule_id = 9;
  repeated GodWarChallengeHistory challenge_history_list = 10;
  bool is_locked = 11;
  repeated GodWarOverall overall_list = 12;
  uint32 avatar_schedule_max_score = 13;
  GodWarCurAvatarScheduleInfo cur_avatar_schedule_info = 14;
}

message GodWarCurAvatarScheduleInfo {
  uint32 max_challenge_score = 1;
  uint32 max_punish_level = 2;
  uint32 last_schedule_max_punish_level = 3;
}

message GodWarRoleRelation {
  uint32 role_id = 1;
  uint32 level = 2;
  uint32 exp = 3;
  uint32 reward_has_take_level = 4;
  repeated uint32 reward_has_take_story_list = 5;
}

message GodWarAvatarExpUp {
  uint32 begin_time = 1;
  uint32 end_time = 2;
  repeated uint32 avatar_id_list = 3;
  uint32 up_ratio = 4;
  uint32 schedule_id = 5;
}

message GodWarChapter {
  uint32 chapter_id = 1;
  bool is_locked = 2;
}

message GodWarRoleInfo {
  repeated GodWarRoleRelation role_relation_list = 1;
  GodWarAvatarExpUp avatar_exp_up = 2;
  repeated uint32 main_avatar_id_list = 3;
  repeated uint32 support_avatar_id_list = 4;
}

message GodWar {
  uint32 god_war_id = 1;
  repeated GodWarTale tale_list = 2;
  uint32 begin_time = 3;
  uint32 end_time = 4;
  repeated GodWarTalent talent_list = 5;
  uint32 max_support_point = 6;
  uint32 lobby_id = 9;
  repeated GodWarChapter chapter_list = 14;
  uint32 cur_chapter_id = 15;
  GodWarRoleInfo role_info = 16;
}

// CmdID: 6151
message GetGodWarRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  GetGodWarRsp.Retcode retcode = 1;
  repeated GodWar god_war_list = 2;
}

message GodWarPunishBuff {
  uint32 buff_id = 1;
  uint32 buff_level = 2;
}

// CmdID: 6152
message SelectGodWarChallengeAvatarReq {
  uint32 god_war_id = 1;
  uint32 tale_id = 2;
  repeated uint32 avatar_id_list = 3;
  repeated uint32 support_avatar_id_list = 4;
  uint32 elf_id = 5;
  uint32 extra_item_id = 6;
  bool is_use_virtual_avatar = 7;
  repeated uint32 boon_buff_id_list = 8;
  uint32 step_level = 9;
  uint32 assistant_extra_item_id = 10;
  bool is_alleviation = 11;
}

// CmdID: 6153
message SelectGodWarChallengeAvatarRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ALREADY_SELECTED = 2;
    AVATAR_ERROR = 3;
    SUPPORT_AVATAR_ERROR = 4;
    ELF_ERROR = 5;
    AVATAR_SCHEDULE_ERROR = 6;
    PUNISH_BUFF_ERROR = 7;
    FEATURE_CLOSE = 8;
    FORCE_SETTLE = 9;
    NOT_OPEN = 10;
    BOON_BUFF_ERROR = 11;
    AVATAR_MISSION_NOT_FINISH = 12;
    EXTRA_ITEM_ERROR = 13;
    ALLEVIATION_ERROR = 14;
    ALLEVIATION_NOT_OPEN = 15;
  }

  SelectGodWarChallengeAvatarRsp.Retcode retcode = 1;
  uint32 god_war_id = 2;
  uint32 tale_id = 3;
}

// CmdID: 6154
message ChangeGodWarChallengeSupportAvatarReq {
  uint32 god_war_id = 1;
  uint32 tale_id = 2;
  repeated uint32 support_avatar_id_list = 3;
  uint32 extra_item_id = 4;
  uint32 assistant_extra_item_id = 5;
}

// CmdID: 6155
message ChangeGodWarChallengeSupportAvatarRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    SUPPORT_AVATAR_ERROR = 2;
    FEATURE_CLOSE = 3;
    NOT_OPEN = 4;
    EXTRA_ITEM_ERROR = 5;
  }

  ChangeGodWarChallengeSupportAvatarRsp.Retcode retcode = 1;
  uint32 god_war_id = 2;
  uint32 tale_id = 3;
  repeated uint32 support_avatar_id_list = 4;
  uint32 extra_item_id = 5;
  uint32 assistant_extra_item_id = 6;
}

// CmdID: 6156
message SyncGodWarTaleNotify {
  GodWarTale tale = 1;
}

// CmdID: 6157
message ResetGodWarChallengeReq {
  enum ResetChannel {
    RESET_CHANNEL_NONE = 0;
    USER_OPERATION = 1;
    FORCE_SETTLE = 2;
  }

  uint32 god_war_id = 1;
  uint32 tale_id = 2;
  ResetGodWarChallengeReq.ResetChannel channel = 3;
}

message GodWarScoreEventSettle {
  uint32 score_event_id = 1;
  uint32 settle_times = 2;
  uint32 total_score = 3;
}

// CmdID: 6158
message ResetGodWarChallengeRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    FEATURE_CLOSE = 2;
    FORCE_SETTLE = 3;
    NOT_OPEN = 4;
  }

  ResetGodWarChallengeRsp.Retcode retcode = 1;
  uint32 god_war_id = 2;
  uint32 tale_id = 3;
  repeated GodWarChallengeAvatar avatar_list = 4;
  repeated GodWarBuff buff_list = 5;
  bool is_challenge_succ = 6;
  uint32 challenge_score = 7;
  repeated GodWarScoreEventSettle score_id_settle_times_list = 8;
  uint32 punish_level = 9;
  uint32 total_score = 11;
  uint32 grade = 12;
  repeated Material reward_material_list = 13;
  uint32 site_idx = 14;
  repeated RewardData first_win_reward_list = 15;
  bool is_use_virtual_avatar = 16;
  uint32 challenge_cost_time = 17;
  bool is_alleviation = 18;
}

message GodWarEventInfo {
  message ParamMap {
    uint32 key = 1;
    uint32 value = 2;
  }

  enum EventSettleStatus {
    EFFECT = 0;
    FLAG_NOT_VALID = 1;
    SETTLE_FAIL = 2;
    SETTLE_REPEATED = 3;
    TALE_NOT_FOUND = 4;
    TRIGGER_PARAM_NOT_VALID = 5;
    CANDIDATE_EMPTY = 6;
    FORCE_SETTLE = 7;
  }

  uint32 event_id = 1;
  uint32 event_type = 2;
  GodWarEventInfo.EventSettleStatus event_settle_status = 3;
  repeated uint32 event_param_list = 4;
  uint32 source_event_id = 5;
  repeated RewardData reward_data_list = 6;
  uint32 fingerprint = 7;
  repeated uint32 extra_param_list = 8;
  uint32 source_type = 9;
  repeated GodWarEventInfo.ParamMap event_param_map_list = 10;
}

// CmdID: 6160
message GodWarEventNotify {
  uint32 god_war_id = 1;
  uint32 tale_id = 2;
  repeated GodWarEventInfo event_list = 3;
  uint32 trigger_type = 4;
  repeated uint32 trigger_param_list = 5;
}

// CmdID: 6161
message TriggerGodWarEventReq {
  uint32 god_war_id = 1;
  uint32 tale_id = 2;
  repeated uint32 event_id_list = 3;
  uint32 trigger_type = 4;
  repeated uint32 trigger_param_list = 5;
}

// CmdID: 6162
message TriggerGodWarEventRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    FEATURE_CLOSE = 2;
    FORCE_SETTLE = 3;
  }

  TriggerGodWarEventRsp.Retcode retcode = 1;
  uint32 god_war_id = 2;
  uint32 tale_id = 3;
  repeated uint32 event_id_list = 4;
}

// CmdID: 6163
message RefreshGodWarTeleportEventReq {
  uint32 god_war_id = 1;
  uint32 tale_id = 2;
  uint32 random = 3;
}

// CmdID: 6164
message RefreshGodWarTeleportEventRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    FEATURE_CLOSE = 2;
    RANDOM_INVALID = 3;
  }

  RefreshGodWarTeleportEventRsp.Retcode retcode = 1;
  uint32 god_war_id = 2;
  uint32 tale_id = 3;
  uint32 random = 4;
}

// CmdID: 6170
message SelectGodWarBuffReq {
  uint32 god_war_id = 1;
  uint32 tale_id = 2;
  uint32 buff_id = 3;
}

// CmdID: 6171
message SelectGodWarBuffRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_CANDIDATE = 2;
    FEATURE_CLOSE = 3;
    NOT_OPEN = 4;
  }

  SelectGodWarBuffRsp.Retcode retcode = 1;
  uint32 god_war_id = 2;
  uint32 tale_id = 3;
  GodWarBuff buff = 4;
}

// CmdID: 6172
message LevelUpGodWarTalentReq {
  uint32 god_war_id = 1;
  uint32 talent_id = 2;
  bool is_level_up_all = 3;
}

// CmdID: 6173
message LevelUpGodWarTalentRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    TALENT_ERROR = 2;
    TARGET_LEVEL_ERROR = 3;
    MATERIAL_LACK = 4;
    FLAG_INVALID = 5;
    FEATURE_CLOSE = 6;
    LEVEL_FULL = 7;
  }

  LevelUpGodWarTalentRsp.Retcode retcode = 1;
  uint32 god_war_id = 2;
  GodWarTalent talent = 3;
  uint32 max_support_point = 4;
}

// CmdID: 6176
message TakeGodWarTalentSupportLevelRewardNotify {
  uint32 god_war_id = 1;
  repeated RewardData reward_list = 2;
}

// CmdID: 6177
message AddGodWarRoleRelationExpReq {
  uint32 god_war_id = 1;
  uint32 role_id = 2;
  uint32 exp_material_num = 3;
}

// CmdID: 6178
message AddGodWarRoleRelationExpRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ROLE_ERROR = 2;
    MATERIAL_LACK = 3;
    EXP_FULL = 4;
    FEATURE_CLOSE = 5;
  }

  AddGodWarRoleRelationExpRsp.Retcode retcode = 1;
  uint32 god_war_id = 2;
}

// CmdID: 6179
message LevelUpGodWarRoleRelationReq {
  uint32 god_war_id = 1;
  uint32 role_id = 2;
}

// CmdID: 6180
message LevelUpGodWarRoleRelationRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ROLE_ERROR = 2;
    MATERIAL_LACK = 3;
    EXP_LACK = 4;
    FEATURE_CLOSE = 5;
  }

  LevelUpGodWarRoleRelationRsp.Retcode retcode = 1;
  uint32 god_war_id = 2;
}

// CmdID: 6181
message TakeGodWarRoleRelationLevelRewardReq {
  uint32 god_war_id = 1;
  uint32 role_id = 2;
}

// CmdID: 6182
message TakeGodWarRoleRelationLevelRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ROLE_ERROR = 2;
    NO_REWARD = 3;
    FEATURE_CLOSE = 4;
  }

  TakeGodWarRoleRelationLevelRewardRsp.Retcode retcode = 1;
  uint32 god_war_id = 2;
  repeated RewardData reward_list = 3;
}

message GodWarGoods {
  message BuffGoods {
    uint32 buff_id = 1;
    uint32 buff_init_level = 2;
  }

  message LevelUpBuffGoods {
    uint32 buff_id = 1;
    uint32 buff_cur_level = 2;
  }

  enum GoodsType {
    GOODS_TYPE_NONE = 0;
    GOODS_TYPE_BUFF = 1;
    GOODS_TYPE_LEVEL_UP_BUFF = 2;
  }

  GodWarGoods.GoodsType goods_type = 1;
  uint32 goods_num = 2;
  uint32 goods_idx = 3;
  uint32 coin_cost = 4;
  GodWarGoods.BuffGoods buff_goods = 21;
  GodWarGoods.LevelUpBuffGoods levelup_buff_goods = 22;
}

message GodWarShop {
  repeated GodWarGoods goods_list = 1;
  bool is_can_change_state = 2;
  bool is_can_recover = 3;
  uint32 change_state_event_id = 4;
  uint32 recover_event_id = 5;
  uint32 special_discount = 6;
  uint32 refresh_shop_cost = 7;
  uint32 refresh_shop_random = 8;
  uint32 shopping_cost = 9;
}

// CmdID: 6183
message GetGodWarTaleShopReq {
  uint32 god_war_id = 1;
  uint32 tale_id = 2;
}

// CmdID: 6184
message GetGodWarTaleShopRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NO_SHOP = 2;
    FEATURE_CLOSE = 3;
    NOT_OPEN = 4;
  }

  GetGodWarTaleShopRsp.Retcode retcode = 1;
  uint32 god_war_id = 2;
  uint32 tale_id = 3;
  GodWarShop shop = 4;
}

// CmdID: 6185
message BuyGodWarShopGoodsReq {
  uint32 god_war_id = 1;
  uint32 tale_id = 2;
  uint32 goods_idx = 3;
}

// CmdID: 6186
message BuyGodWarShopGoodsRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    GOODS_ERROR = 2;
    MATERIAL_LACK = 3;
    FEATURE_CLOSE = 4;
    NOT_OPEN = 5;
  }

  BuyGodWarShopGoodsRsp.Retcode retcode = 1;
  uint32 god_war_id = 2;
  uint32 tale_id = 3;
  uint32 goods_idx = 4;
}

// CmdID: 6187
message TakeGodWarRoleStoryRewardReq {
  uint32 god_war_id = 1;
  uint32 story_id = 2;
}

// CmdID: 6188
message TakeGodWarRoleStoryRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    RELATION_LEVEL_LACK = 2;
    MISSION_UNFINISH = 3;
    HAS_TAKE = 4;
    FEATURE_CLOSE = 5;
  }

  TakeGodWarRoleStoryRewardRsp.Retcode retcode = 1;
  uint32 god_war_id = 2;
  uint32 story_id = 3;
  RewardData reward = 4;
}

// CmdID: 6189
message RefreshGodWarTicketReq {
  uint32 god_war_id = 1;
}

message RefreshGodWarTicketInfo {
  uint32 ticket_id = 1;
  uint32 material_id = 2;
  uint32 add_num = 3;
}

// CmdID: 6190
message RefreshGodWarTicketRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    FEATURE_CLOSE = 2;
  }

  RefreshGodWarTicketRsp.Retcode retcode = 1;
  uint32 god_war_id = 2;
  repeated RefreshGodWarTicketInfo ticket_refresh_list = 3;
}

// CmdID: 6191
message PredictGodWarEventReq {
  uint32 god_war_id = 1;
  uint32 tale_id = 2;
  repeated uint32 event_id_list = 3;
}

// CmdID: 6192
message PredictGodWarEventRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    FEATURE_CLOSE = 2;
  }

  PredictGodWarEventRsp.Retcode retcode = 1;
  uint32 god_war_id = 2;
  uint32 tale_id = 3;
  repeated uint32 event_id_list = 4;
}

// CmdID: 6193
message RefreshGodWarBuffEventReq {
  uint32 god_war_id = 1;
  uint32 tale_id = 2;
}

// CmdID: 6194
message RefreshGodWarBuffEventRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    FEATURE_CLOSE = 2;
  }

  RefreshGodWarBuffEventRsp.Retcode retcode = 1;
  uint32 god_war_id = 2;
  uint32 tale_id = 3;
}

// CmdID: 6195
message GetGodWarRoleReq {
  uint32 god_war_id = 1;
}

// CmdID: 6196
message GetGodWarRoleRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  GetGodWarRoleRsp.Retcode retcode = 1;
  uint32 god_war_id = 2;
  GodWarRoleInfo role_info = 7;
}

// CmdID: 6197
message GetGodWarTeleportEventReq {
  uint32 god_war_id = 1;
  uint32 tale_id = 2;
}

// CmdID: 6198
message GetGodWarTeleportEventRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    FEATURE_CLOSE = 2;
    NOT_OPEN = 3;
    FORCE_SETTLE = 4;
  }

  GetGodWarTeleportEventRsp.Retcode retcode = 1;
  uint32 god_war_id = 2;
  uint32 tale_id = 3;
  repeated uint32 teleport_id_list = 4;
}

// CmdID: 6199
message SwitchGodWarChapterReq {
  uint32 god_war_id = 1;
  uint32 chapter_id = 2;
}

// CmdID: 6200
message SwitchGodWarChapterRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    FEATURE_CLOSE = 3;
    LOCKED = 4;
    IN_KEY_MISSION = 5;
  }

  SwitchGodWarChapterRsp.Retcode retcode = 1;
  uint32 god_war_id = 2;
  uint32 chapter_id = 3;
}

// CmdID: 6201
message GetGodWarLobbyReq {
  uint32 god_war_id = 1;
  uint32 lobby_id = 2;
}

message GodWarNpc {
  uint32 npc_id = 1;
  repeated uint32 action_list = 2;
}

// CmdID: 6202
message GetGodWarLobbyRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    FEATURE_CLOSE = 3;
  }

  GetGodWarLobbyRsp.Retcode retcode = 1;
  uint32 god_war_id = 2;
  uint32 lobby_id = 3;
  repeated GodWarNpc npc_list = 4;
}

// CmdID: 6203
message FinishGodWarLobbyActionReq {
  uint32 god_war_id = 1;
  uint32 lobby_id = 2;
  uint32 action_id = 3;
}

// CmdID: 6204
message FinishGodWarLobbyActionRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    FEATURE_CLOSE = 3;
  }

  FinishGodWarLobbyActionRsp.Retcode retcode = 1;
  uint32 god_war_id = 2;
  uint32 lobby_id = 3;
  uint32 action_id = 4;
}

// CmdID: 6205
message RefreshGodWarShopGoodsReq {
  uint32 god_war_id = 1;
  uint32 tale_id = 2;
  uint32 random = 3;
}

// CmdID: 6206
message RefreshGodWarShopGoodsRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    GOODS_ERROR = 2;
    MATERIAL_LACK = 3;
    FEATURE_CLOSE = 4;
    NOT_OPEN = 5;
    RANDOM_INVALID = 6;
  }

  RefreshGodWarShopGoodsRsp.Retcode retcode = 1;
  uint32 god_war_id = 2;
  uint32 tale_id = 3;
  uint32 random = 4;
}

// CmdID: 6207
message SkipGodWarStoryNodeReq {
  uint32 god_war_id = 1;
  uint32 node_id = 2;
}

// CmdID: 6208
message SkipGodWarStoryNodeRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    FEATURE_CLOSE = 2;
    NODE_NOT_EXIST = 3;
    CHAPTER_MISMATCH = 4;
    MATERIAL_LACK = 5;
    NODE_SKIP_INVALID = 6;
    MISSION_STATUS_ERROR = 7;
  }

  SkipGodWarStoryNodeRsp.Retcode retcode = 1;
  uint32 god_war_id = 2;
  uint32 node_id = 3;
}

// CmdID: 6209
message RefreshGodWarGachaReq {
  uint32 god_war_id = 1;
  uint32 tale_id = 2;
  uint32 random = 3;
}

// CmdID: 6210
message RefreshGodWarGachaRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    FEATURE_CLOSE = 2;
    GACHA_TIMES_LACK = 3;
    NOT_OPEN = 4;
    RANDOM_INVALID = 5;
  }

  RefreshGodWarGachaRsp.Retcode retcode = 1;
  uint32 god_war_id = 2;
  uint32 tale_id = 3;
  uint32 random = 4;
}

enum CmdTypeGodwar {
  CMD_TYPE_GODWAR_NONE = 0;
  CMD_GET_GOD_WAR_REQ = 6150;
  CMD_GET_GOD_WAR_RSP = 6151;
  CMD_SELECT_GOD_WAR_CHALLENGE_AVATAR_REQ = 6152;
  CMD_SELECT_GOD_WAR_CHALLENGE_AVATAR_RSP = 6153;
  CMD_CHANGE_GOD_WAR_CHALLENGE_SUPPORT_AVATAR_REQ = 6154;
  CMD_CHANGE_GOD_WAR_CHALLENGE_SUPPORT_AVATAR_RSP = 6155;
  CMD_SYNC_GOD_WAR_TALE_NOTIFY = 6156;
  CMD_RESET_GOD_WAR_CHALLENGE_REQ = 6157;
  CMD_RESET_GOD_WAR_CHALLENGE_RSP = 6158;
  CMD_GOD_WAR_EVENT_NOTIFY = 6160;
  CMD_TRIGGER_GOD_WAR_EVENT_REQ = 6161;
  CMD_TRIGGER_GOD_WAR_EVENT_RSP = 6162;
  CMD_REFRESH_GOD_WAR_TELEPORT_EVENT_REQ = 6163;
  CMD_REFRESH_GOD_WAR_TELEPORT_EVENT_RSP = 6164;
  CMD_SELECT_GOD_WAR_BUFF_REQ = 6170;
  CMD_SELECT_GOD_WAR_BUFF_RSP = 6171;
  CMD_LEVELUP_GOD_WAR_TALENT_REQ = 6172;
  CMD_LEVELUP_GOD_WAR_TALENT_RSP = 6173;
  CMD_TAKE_GOD_WAR_TALENT_SUPPORT_LEVEL_REWARD_NOTIFY = 6176;
  CMD_ADD_GOD_WAR_ROLE_RELATION_EXP_REQ = 6177;
  CMD_ADD_GOD_WAR_ROLE_RELATION_EXP_RSP = 6178;
  CMD_LEVELUP_GOD_WAR_ROLE_RELATION_REQ = 6179;
  CMD_LEVELUP_GOD_WAR_ROLE_RELATION_RSP = 6180;
  CMD_TAKE_GOD_WAR_ROLE_RELATION_LEVEL_REWARD_REQ = 6181;
  CMD_TAKE_GOD_WAR_ROLE_RELATION_LEVEL_REWARD_RSP = 6182;
  CMD_GET_GOD_WAR_TALE_SHOP_REQ = 6183;
  CMD_GET_GOD_WAR_TALE_SHOP_RSP = 6184;
  CMD_BUY_GOD_WAR_SHOP_GOODS_REQ = 6185;
  CMD_BUY_GOD_WAR_SHOP_GOODS_RSP = 6186;
  CMD_TAKE_GOD_WAR_ROLE_STORY_REWARD_REQ = 6187;
  CMD_TAKE_GOD_WAR_ROLE_STORY_REWARD_RSP = 6188;
  CMD_REFRESH_GOD_WAR_TICKET_REQ = 6189;
  CMD_REFRESH_GOD_WAR_TICKET_RSP = 6190;
  CMD_PREDICT_GOD_WAR_EVENT_REQ = 6191;
  CMD_PREDICT_GOD_WAR_EVENT_RSP = 6192;
  CMD_REFRESH_GOD_WAR_BUFF_EVENT_REQ = 6193;
  CMD_REFRESH_GOD_WAR_BUFF_EVENT_RSP = 6194;
  CMD_GET_GOD_WAR_ROLE_REQ = 6195;
  CMD_GET_GOD_WAR_ROLE_RSP = 6196;
  CMD_GET_GOD_WAR_TELEPORT_EVENT_REQ = 6197;
  CMD_GET_GOD_WAR_TELEPORT_EVENT_RSP = 6198;
  CMD_SWITCH_GOD_WAR_CHAPTER_REQ = 6199;
  CMD_SWITCH_GOD_WAR_CHAPTER_RSP = 6200;
  CMD_GET_GOD_WAR_LOBBY_REQ = 6201;
  CMD_GET_GOD_WAR_LOBBY_RSP = 6202;
  CMD_FINISH_GOD_WAR_LOBBY_ACTION_REQ = 6203;
  CMD_FINISH_GOD_WAR_LOBBY_ACTION_RSP = 6204;
  CMD_REFRESH_GOD_WAR_SHOP_GOODS_REQ = 6205;
  CMD_REFRESH_GOD_WAR_SHOP_GOODS_RSP = 6206;
  CMD_SKIP_GOD_WAR_STORY_NODE_REQ = 6207;
  CMD_SKIP_GOD_WAR_STORY_NODE_RSP = 6208;
  CMD_REFRESH_GOD_WAR_GACHA_REQ = 6209;
  CMD_REFRESH_GOD_WAR_GACHA_RSP = 6210;
  CMD_GOD_WAR_DUMMY = 6299;
}

enum GodWarEffectConditionType {
  GOD_WAR_EFFECT_CONDITION_TYPE_NONE = 0;
  GOD_WAR_EFFECT_CONDITION_CURRENT = 1;
  GOD_WAR_EFFECT_CONDITION_SNAPSHOT_SHOP = 2;
}

enum GodWarInitBuffLevelType {
  GOD_WAR_INIT_BUFF_LEVEL_NONE = 0;
  GOD_WAR_INIT_BUFF_LEVEL_SETTLED = 1;
  GOD_WAR_INIT_BUFF_LEVEL_ALL = 2;
}

enum GodWarEffectType {
  GOD_WAR_EFFECT_TYPE_NONE = 0;
  GOD_WAR_EFFECT_ABILITY = 1;
  GOD_WAR_EFFECT_ADD_TELEPORT_REFRESH_TIMES = 3;
  GOD_WAR_EFFECT_MATERIAL_EVENT_ADD_RATIO = 4;
  GOD_WAR_EFFECT_ADD_INIT_COIN_NUM = 5;
  GOD_WAR_EFFECT_BUFF_GOODS_DISCOUNT = 6;
  GOD_WAR_EFFECT_LEVELUP_BUFF_GOODS_DISCOUNT = 7;
  GOD_WAR_EFFECT_ADD_BUFF_POOL_QUALITY = 10;
  GOD_WAR_EFFECT_ADD_SHOP_BUFF_GOODS_NUM = 11;
  GOD_WAR_EFFECT_ADD_SHOP_LEVELUP_BUFF_GOODS_NUM = 12;
  GOD_WAR_EFFECT_ADD_REVIVE_TIMES = 13;
  GOD_WAR_EFFECT_REVIVE_HP_SP_PERCENT = 14;
  GOD_WAR_EFFECT_ADD_BUFF_SUIT_INIT_LEVEL = 15;
  GOD_WAR_EFFECT_SHOP_SPECIAL_DISCOUNT = 16;
  GOD_WAR_EFFECT_MATERIAL_EVENT_SUB_RATIO = 17;
  GOD_WAR_EFFECT_ADD_SPECIFIED_NUM_BUFF_INIT_LEVEL = 18;
  GOD_WAR_EFFECT_SPECIFIED_QUALITY_BUFF_GOODS_DISCOUNT = 19;
  GOD_WAR_EFFECT_SPECIFIED_QUALITY_LEVEL_UP_BUFF_GOODS_DISCOUNT = 20;
  GOD_WAR_EFFECT_ADD_TELEPORT_REFRESH_TIMES_BY_OVERALL = 21;
  GOD_WAR_EFFECT_ADD_GACHA_REFRESH_TIMES_BY_OVERALL = 22;
  GOD_WAR_EFFECT_ADD_BUFF_REFRESH_TIMES = 23;
}

enum GodWarBuffQualityType {
  GOD_WAR_BUFF_QUALITY_TYPE_NONE = 0;
  GOD_WAR_BUFF_QUALITY_BASE = 1;
  GOD_WAR_BUFF_QUALITY_CORE_ARTIFACT = 2;
  GOD_WAR_BUFF_QUALITY_CORE = 3;
  GOD_WAR_BUFF_QUALITY_AVATAR_SPECIAL = 4;
}

enum GodWarSiteStatus {
  GOD_WAR_SITE_STATUS_INVALID = 0;
  GOD_WAR_SITE_STATUS_HIDE = 1;
  GOD_WAR_SITE_STATUS_SHOW = 2;
  GOD_WAR_SITE_STATUS_UNLOCKED = 3;
  GOD_WAR_SITE_STATUS_CLOSED = 4;
}

enum GodWarSiteType {
  GOD_WAR_SITE_TYPE_NONE = 0;
  GOD_WAR_SITE_TYPE_NORMAL = 1;
  GOD_WAR_SITE_TYPE_REST = 2;
  GOD_WAR_SITE_TYPE_BOSS = 3;
  GOD_WAR_SITE_TYPE_FINAL_BOSS = 4;
  GOD_WAR_SITE_TYPE_ALLEVIATION = 5;
}

enum GodWarOverallRefreshType {
  GOD_WAR_OVERALL_REFRESH_NONE = 0;
  GOD_WAR_OVERALL_REFRESH_DAILY = 1;
  GOD_WAR_OVERALL_REFRESH_WEEKLY = 2;
}

enum GodWarBitmapType {
  GOD_WAR_BITMAP_TYPE_NONE = 0;
  GOD_WAR_BITMAP_EVENT = 1;
  GOD_WAR_BITMAP_NO_REPEAT_SETTLE_EVENT = 2;
}

enum GodWarBonusType {
  GOD_WAR_BONUS_TYPE_NONE = 0;
  GOD_WAR_BONUS_APPEND = 1;
  GOD_WAR_BONUS_ADD = 2;
  GOD_WAR_BONUS_REFRESH = 3;
}

enum GodWarRoleType {
  GOD_WAR_ROLE_NONE = 0;
  GOD_WAR_ROLE_MEMORY_DEPRECATED = 1;
  GOD_WAR_ROLE_AVATAR = 2;
  GOD_WAR_ROLE_MEMORY = 3;
}

enum GodWarFlagOperator {
  GOD_WAR_FLAG_OPERATOR_INVALID = 0;
  GOD_WAR_FLAG_OPERATOR_AND = 1;
  GOD_WAR_FLAG_OPERATOR_OR = 2;
  GOD_WAR_FLAG_OPERATOR_NOT = 3;
  GOD_WAR_FLAG_OPERATOR_EQ = 4;
  GOD_WAR_FLAG_OPERATOR_GT = 5;
  GOD_WAR_FLAG_OPERATOR_LT = 6;
  GOD_WAR_FLAG_OPERATOR_COUNT_GE = 7;
  GOD_WAR_FLAG_OPERATOR_SUM_GE = 8;
  GOD_WAR_FLAG_OPERATOR_COUNT_LT = 9;
  GOD_WAR_FLAG_OPERATOR_SUM_LT = 10;
  GOD_WAR_FLAG_OPERATOR_COUNT_EQ = 11;
  GOD_WAR_FLAG_OPERATOR_SUM_EQ = 12;
}

enum GodWarFlagType {
  GOD_WAR_FLAG_TYPE_NONE = 0;
  GOD_WAR_FLAG_GROUP = 1;
  GOD_WAR_FLAG_OVERALL = 2;
  GOD_WAR_FLAG_AVATAR = 3;
  GOD_WAR_FLAG_BUFF = 4;
  GOD_WAR_FLAG_CUR_SITE = 5;
  GOD_WAR_FLAG_CUR_SITE_TYPE = 6;
  GOD_WAR_FLAG_EXTRA_ITEM = 7;
  GOD_WAR_FLAG_SETTLE_EVENT = 8;
  GOD_WAR_FLAG_PUNISH_LEVEL = 9;
  GOD_WAR_FLAG_PUNISH_BUFF = 10;
  GOD_WAR_FLAG_MISSION_FINISH = 11;
  GOD_WAR_FLAG_LOBBY_NPC = 12;
  GOD_WAR_FLAG_BITMAP = 13;
  GOD_WAR_FLAG_CUR_TALE = 14;
  GOD_WAR_FLAG_STAGE_TAG = 15;
  GOD_WAR_FLAG_MISSION_STATUS = 16;
  GOD_WAR_FLAG_SHOPPING_COST = 17;
  GOD_WAR_FLAG_BUFF_LEVEL = 18;
  GOD_WAR_FLAG_ALLEVIATION = 19;
  GOD_WAR_FLAG_MATERIAL_NUM = 1002;
  GOD_WAR_FLAG_TALENT_LEVEL = 1003;
  GOD_WAR_FLAG_TALENT_TOTAL_LEVEL = 1004;
  GOD_WAR_FLAG_TALENT_UNLOCK_NUM = 1005;
  GOD_WAR_FLAG_ROLE_RELATION_LEVEL = 1006;
  GOD_WAR_FLAG_SUPPORT_LEVEL = 1007;
}

enum GodWarEventSourceType {
  GOD_WAR_EVENT_SOURCE_TYPE_NONE = 0;
  GOD_WAR_EVENT_SOURCE_NORMAL = 1;
  GOD_WAR_EVENT_SOURCE_SITE_ENTER = 2;
  GOD_WAR_EVENT_SOURCE_SITE_BUFF = 3;
  GOD_WAR_EVENT_SOURCE_SHOP_RECOVER = 4;
  GOD_WAR_EVENT_SOURCE_SHOP_CHANGE_STATE = 5;
}

enum GodWarWeightType {
  GOD_WAR_WEIGHT_TYPE_NONE = 0;
  GOD_WAR_WEIGHT_NUM = 1;
  GOD_WAR_WEIGHT_OVERALL = 2;
}

enum GodWarEventType {
  GOD_WAR_EVENT_TYPE_NONE = 0;
  GOD_WAR_EVENT_RANDOM_STAGE_ONCE = 1;
  GOD_WAR_EVENT_RANDOM_PLOT_ONCE = 2;
  GOD_WAR_EVENT_RANDOM_REWARD_ONCE = 3;
  GOD_WAR_EVENT_BUFF = 4;
  GOD_WAR_EVENT_ENTER_SITE = 5;
  GOD_WAR_EVENT_TELEPORT = 6;
  GOD_WAR_EVENT_FIXED_STAGE = 7;
  GOD_WAR_EVENT_FIXED_PLOT = 8;
  GOD_WAR_EVENT_FIXED_REWARD = 9;
  GOD_WAR_EVENT_SAVE = 10;
  GOD_WAR_EVENT_OVERALL_ADD = 11;
  GOD_WAR_EVENT_OVERALL_SUB = 12;
  GOD_WAR_EVENT_OVERALL_SET = 13;
  GOD_WAR_EVENT_PREDICT = 14;
  GOD_WAR_EVENT_SHOP = 15;
  GOD_WAR_EVENT_DROP_MATERIAL = 16;
  GOD_WAR_EVENT_UNLOCK_COLLECTION = 17;
  GOD_WAR_EVENT_STAGE_EXIT = 18;
  GOD_WAR_EVENT_DROP_EFFECT_MATERIAL = 19;
  GOD_WAR_EVENT_SYNC_LOBBY = 20;
  GOD_WAR_EVENT_REFRESH_LOBBY = 21;
  GOD_WAR_EVENT_CHANGE_STATE = 22;
  GOD_WAR_EVENT_SCORE = 23;
  GOD_WAR_EVENT_PANEL = 24;
  GOD_WAR_EVENT_DROP_SCORE_COIN = 25;
  GOD_WAR_EVENT_RANDOM_PLOT_REPLACEMENT = 26;
  GOD_WAR_EVENT_TELEPORT_OVERALL = 27;
  GOD_WAR_EVENT_OVERALL_ADD_IMMEDIATE = 28;
  GOD_WAR_EVENT_OVERALL_SUB_IMMEDIATE = 29;
  GOD_WAR_EVENT_OVERALL_SET_IMMEDIATE = 30;
  GOD_WAR_EVENT_OVERALL_ADD_LOBBY = 31;
  GOD_WAR_EVENT_OVERALL_SUB_LOBBY = 32;
  GOD_WAR_EVENT_OVERALL_SET_LOBBY = 33;
  GOD_WAR_EVENT_AVATAR_HP_ADD = 34;
  GOD_WAR_EVENT_AVATAR_HP_SUB = 35;
  GOD_WAR_EVENT_AVATAR_HP_SET = 36;
  GOD_WAR_EVENT_CREATE_LOBBY_NPC = 37;
  GOD_WAR_EVENT_TELEPORT_GROUP = 38;
  GOD_WAR_EVENT_FORCE_END = 39;
  GOD_WAR_EVENT_FORK = 40;
  GOD_WAR_EVENT_APPEND_NPC_ACTION = 41;
  GOD_WAR_EVENT_REMOVE_NPC = 42;
  GOD_WAR_EVENT_DROP_COIN = 43;
  GOD_WAR_EVENT_DROP_EFFECT_COIN = 44;
  GOD_WAR_EVENT_OVERALL_SET_CLIENT = 45;
  GOD_WAR_EVENT_OVERALL_SET_CLIENT_IMMEDIATE = 46;
  GOD_WAR_EVENT_COST_COIN = 47;
  GOD_WAR_EVENT_COST_EFFECT_COIN = 48;
  GOD_WAR_EVENT_TALE_OVERALL_ADD_IMMEDIATE = 49;
  GOD_WAR_EVENT_TALE_OVERALL_SUB_IMMEDIATE = 50;
  GOD_WAR_EVENT_TALE_OVERALL_SET_IMMEDIATE = 51;
  GOD_WAR_EVENT_BONUS = 52;
  GOD_WAR_EVENT_TELEPORT_RECOVER = 53;
  GOD_WAR_EVENT_ALLEVIATION_BUFF = 54;
  GOD_WAR_EVENT_ALLEVIATION_ENTER_FLOOR = 55;
  GOD_WAR_EVENT_ALLEVIATION_TELEPORT = 56;
  GOD_WAR_EVENT_TRIGGER_EVENT_GROUP = 99;
  GOD_WAR_EVENT_TRIGGER_EVENT_GROUP_UNIQUE = 100;
  GOD_WAR_EVENT_RANDOM_TRIGGER_EVENT_ONCE = 101;
  GOD_WAR_EVENT_RANDOM_TRIGGER_EVENT_REPLACEMENT = 102;
  GOD_WAR_EVENT_RANDOM_TRIGGER_EVENT_WITHOUT_REPLACEMENT = 103;
  GOD_WAR_EVENT_GACHA_RANDOM_SEED_TRIGGER_EVENT_REPLACEMENT = 104;
}

enum GodWarEventRandomType {
  GOD_WAR_EVENT_RANDOM_TYPE_NONE = 0;
  GOD_WAR_EVENT_RANDOM_STAGE = 1;
  GOD_WAR_EVENT_RANDOM_PLOT = 2;
  GOD_WAR_EVENT_RANDOM_REWARD = 3;
  GOD_WAR_EVENT_RANDOM_BUFF = 4;
  GOD_WAR_EVENT_RANDOM_TELEPORT = 5;
  GOD_WAR_EVENT_RANDOM_LOBBY = 6;
  GOD_WAR_EVENT_RANDOM_MATERIAL = 7;
  GOD_WAR_EVENT_RANDOM_TRIGGER = 8;
}

enum GodWarEventCacheType {
  GOD_WAR_EVENT_CACHE_TYPE_NONE = 0;
  GOD_WAR_EVENT_CACHE_REWARD = 1;
  GOD_WAR_EVENT_CACHE_OVERALL = 2;
  GOD_WAR_EVENT_CACHE_MATERIAL = 3;
  GOD_WAR_EVENT_CACHE_SCORE = 4;
  GOD_WAR_EVENT_CACHE_LOBBY_NPC = 5;
  GOD_WAR_EVENT_CACHE_COIN = 6;
}

enum GodWarTriggerType {
  GOD_WAR_TRIGGER_NORMAL = 0;
  GOD_WAR_TRIGGER_STAGE_REPORT = 1;
  GOD_WAR_TRIGGER_NPC_ACTION = 2;
  GOD_WAR_TRIGGER_OVERALL_REPORT = 3;
  GOD_WAR_TRIGGER_ALLEVIATION_TELEPORT = 4;
}

enum GodWarMaterialType {
  GOD_WAR_MATERIAL_TYPE_NONE = 0;
  GOD_WAR_MATERIAL_CHALLENGE_COIN = 1;
  GOD_WAR_MATERIAL_AVATAR_EXP = 2;
  GOD_WAR_MATERIAL_ROLE_GIFT = 3;
  GOD_WAR_MATERIAL_TALENT_POINT = 4;
  GOD_WAR_MATERIAL_AVATAR_UNLOCK = 5;
  GOD_WAR_MATERIAL_SUPPORT_AVATAR_UNLOCK = 6;
  GOD_WAR_MATERIAL_DECORATION_UNLOCK = 7;
  GOD_WAR_MATERIAL_ROLE_UPGRADE = 8;
  GOD_WAR_MATERIAL_AVATAR_UPGRADE = 9;
}

enum GodWarRefreshTicketType {
  GOD_WAR_REFRESH_TICKET_TYPE_NONE = 0;
  GOD_WAR_REFRESH_TICKET_WEEK_DAY = 1;
}

enum GodWarTaleType {
  GOD_WAR_TALE_TYPE_NONE = 0;
  GOD_WAR_TALE_STORY_CHALLENGE = 1;
  GOD_WAR_TALE_AVATAR_CHALLENGE = 2;
  GOD_WAR_TALE_WEEKLY_CHALLENGE = 3;
  GOD_WAR_TALE_LOBBY = 4;
}

enum GodWarNpcType {
  GOD_WAR_NPC_NONE = 0;
  GOD_WAR_NPC_MAIN_LINE = 1;
  GOD_WAR_NPC_BRANCH_LINE = 2;
}

enum GodWarSupportAvatarSlotLimitLevel {
  GOD_WAR_SUPPORT_AVATAR_SLOT_LIMIT_LEVEL_NONE = 0;
  GOD_WAR_SUPPORT_AVATAR_SLOT_SPECIFIC = 1;
  GOD_WAR_SUPPORT_AVATAR_SLOT_NORMAL = 2;
  GOD_WAR_SUPPORT_AVATAR_SLOT_LOCK = 3;
}

enum GodWarDataSourceType {
  GOD_WAR_DATA_SOURCE_TYPE_NONE = 0;
  GOD_WAR_DATA_SOURCE_CUR_TALE = 1;
  GOD_WAR_DATA_SOURCE_SPECIFIC_TALE = 2;
}

// CmdID: 8150
message GourmetHuntGetActivityReq {
  uint32 activity_id = 1;
}

message GourmetHuntWeapon {
  uint32 weapon_id = 1;
  repeated uint32 unlocked_module_list = 2;
}

message GourmetHuntClearableArchive {
  uint32 map_id = 1;
  uint32 room_id = 2;
  uint32 hp = 3;
  uint32 sp = 4;
  uint32 explore_buff_id = 5;
  repeated GourmetHuntIngredient collect_ingredient_list = 6;
  repeated uint32 killed_monster_list = 7;
  repeated uint32 destroyed_entity_list = 8;
  string transaction_str = 9;
  repeated uint32 secondary_weapon_list = 10;
  uint32 room_pos_x = 11;
  uint32 room_pos_y = 12;
}

message GourmetHuntUnlockedMapRoom {
  uint32 map_id = 1;
  repeated uint32 room_id_list = 2;
}

message GourmetHuntExploreArchive {
  GourmetHuntClearableArchive clearable_archive = 1;
  repeated uint32 unlocked_map_list = 2;
  repeated uint32 unlocked_teleport_list = 3;
  repeated uint32 opened_treasure_list = 4;
  repeated uint32 killed_boss_list = 5;
  repeated GourmetHuntUnlockedMapRoom unlocked_map_room_list = 6;
  repeated uint32 triggered_entity_list = 7;
}

message GourmetHuntIngredient {
  uint32 id = 1;
  uint32 num = 2;
}

message GourmetHuntActivity {
  uint32 activity_id = 1;
  uint32 level = 2;
  uint32 total_revenue = 3;
  uint32 total_praise = 4;
  repeated uint32 recipe_list = 5;
  repeated uint32 furniture_list = 6;
  repeated GourmetHuntWeapon weapon_list = 7;
  GourmetHuntExploreArchive explore_archive = 8;
  repeated GourmetHuntIngredient ingredient_list = 9;
  repeated uint32 unlocked_ingredient_list = 10;
  uint32 cur_rating = 11;
  repeated GourmetHuntManagementMenu menu_list = 12;
  uint32 hot_ingredient_id = 13;
  repeated GourmetHuntManagementMenu sold_menu_list = 14;
  uint32 max_revenue_in_one_management = 15;
  uint32 max_praise_in_one_management = 16;
  uint32 total_management_times = 17;
  uint32 cur_daily_mission_group_id = 18;
  uint32 management_weather_id = 19;
  repeated CommonUintKVStruct challenge_map_score_list = 20;
  uint32 opened_branch_store_num = 21;
}

// CmdID: 8151
message GourmetHuntGetActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  GourmetHuntGetActivityRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  GourmetHuntActivity activity = 3;
}

// CmdID: 8152
message GourmetHuntLevelUpReq {
  uint32 activity_id = 1;
  uint32 target_level = 2;
}

// CmdID: 8153
message GourmetHuntLevelUpRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    TARGET_LEVEL_ERROR = 3;
    PRE_MISSION_UNFINISHED = 4;
    GOLD_LACK = 5;
    IN_EXPLORE = 6;
  }

  GourmetHuntLevelUpRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 target_level = 3;
}

// CmdID: 8154
message GourmetHuntUnlockWeaponModuleReq {
  uint32 activity_id = 1;
  uint32 weapon_id = 2;
  uint32 module_id = 3;
}

// CmdID: 8155
message GourmetHuntUnlockWeaponModuleRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    WEAPON_LOCKED = 3;
    PRE_MODULE_LIMIT = 4;
    MODULE_ERROR = 5;
    COST_LIMIT = 6;
    LEVEL_LIMIT = 7;
  }

  GourmetHuntUnlockWeaponModuleRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 weapon_id = 3;
  uint32 module_id = 4;
}

// CmdID: 8156
message GourmetHuntUnlockFurnitureReq {
  uint32 activity_id = 1;
  uint32 furniture_id = 2;
}

// CmdID: 8157
message GourmetHuntUnlockFurnitureRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    RATING_LIMIT = 3;
    COST_LIMIT = 4;
    ALREADY_UNLOCKED = 5;
    FURNITURE_ID_ERROR = 6;
  }

  GourmetHuntUnlockFurnitureRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 furniture_id = 3;
}

message GourmetHuntManagementMenu {
  uint32 recipe_id = 1;
  uint32 cook_num = 2;
}

// CmdID: 8158
message GourmetHuntStartManagementReq {
  uint32 activity_id = 1;
  repeated GourmetHuntManagementMenu menu_list = 2;
  GourmetHuntIdentityType management_identity_type = 3;
}

// CmdID: 8159
message GourmetHuntStartManagementRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    RECIPE_ERROR = 3;
    INGREDIENT_LACK = 4;
    IN_OTHER_MANAGEMENT = 5;
    IN_EXPLORE = 6;
    INVALID_IDENTITY = 7;
  }

  GourmetHuntStartManagementRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  string transaction_str = 3;
}

// CmdID: 8160
message GourmetHuntStopManagementReq {
  uint32 activity_id = 1;
  repeated GourmetHuntManagementMenu settled_menu_list = 2;
  uint32 gold_earned = 3;
  uint32 praise = 4;
  uint32 rank_value = 5;
  uint32 finished_special_mission_npc_id = 6;
}

// CmdID: 8161
message GourmetHuntStopManagementRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    MENU_MISMATCH = 3;
    NOT_IN_MANAGEMENT = 4;
    GOLD_ERROR = 5;
    INGREDIENT_LACK = 6;
  }

  GourmetHuntStopManagementRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 hot_ingredient_id = 3;
  uint32 buff_id = 4;
}

// CmdID: 8162
message GourmetHuntStartExploreReq {
  uint32 activity_id = 1;
  string transaction_str = 2;
  uint32 map_id = 3;
  uint32 teleport_id = 4;
  uint32 room_pos_x = 5;
  uint32 room_pos_y = 6;
  repeated uint32 secondary_weapon_list = 7;
}

// CmdID: 8163
message GourmetHuntStartExploreRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    TRANSACTION_MISMATCH = 3;
    MAP_IS_LOCKED = 4;
    TELEPORT_ERROR = 5;
    IN_MANAGEMENT = 6;
    SECONDARY_WEAPON_SIZE_ERROR = 7;
    SECONDARY_WEAPON_ERROR = 8;
  }

  GourmetHuntStartExploreRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  GourmetHuntExploreArchive archive = 3;
}

// CmdID: 8164
message GourmetHuntStopExploreReq {
  enum EndStatus {
    WIN = 0;
    TIMEOUT = 1;
    DEAD = 2;
    EXIT = 3;
  }

  uint32 activity_id = 1;
  string transaction_str = 2;
  repeated GourmetHuntIngredient take_out_ingredient_list = 3;
  GourmetHuntClearableArchive report_archive = 4;
  uint32 score = 5;
  GourmetHuntStopExploreReq.EndStatus end_status = 6;
}

// CmdID: 8165
message GourmetHuntStopExploreRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    TRANSACTION_MISMATCH = 3;
    STAMINA_LACK = 4;
    NOT_IN_EXPLORE = 5;
    INGREDIENT_ID_ERROR = 6;
    INGREDIENT_NUM_ERROR = 7;
    STAMINA_LIMIT = 8;
    ARCHIVE_MISMATCH = 9;
  }

  GourmetHuntStopExploreRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
}

// CmdID: 8166
message GourmetHuntOpenTreasureReq {
  uint32 activity_id = 1;
  string transaction_str = 2;
  uint32 treasure_id = 3;
}

// CmdID: 8167
message GourmetHuntOpenTreasureRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    TRANSACTION_MISMATCH = 3;
    TREASURE_IS_OPENED = 4;
    TREASURE_ID_ERROR = 5;
    MAP_MISMATCH = 6;
    NOT_IN_EXPLORE = 7;
    ROOM_MISMATCH = 8;
    MAP_TYPE_ERROR = 9;
  }

  GourmetHuntOpenTreasureRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 treasure_id = 3;
  RewardData reward = 4;
}

// CmdID: 8168
message GourmetHuntTriggerTeleportReq {
  uint32 activity_id = 1;
  string transaction_str = 2;
  uint32 map_id = 3;
  uint32 teleport_id = 4;
  GourmetHuntClearableArchive report_archive = 5;
}

// CmdID: 8169
message GourmetHuntTriggerTeleportRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    TRANSACTION_MISMATCH = 3;
    TELEPORT_ID_ERROR = 4;
    NOT_IN_EXPLORE = 5;
    ARCHIVE_MISMATCH = 6;
    MAP_IS_LOCKED = 7;
    ROOM_IS_LOCKED = 8;
    SECONDARY_WEAPON_SIZE_ERROR = 9;
    SECONDARY_WEAPON_ERROR = 10;
    MAP_TYPE_ERROR = 11;
  }

  GourmetHuntTriggerTeleportRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  GourmetHuntExploreArchive archive = 3;
}

// CmdID: 8170
message GourmetHuntKillBossReq {
  uint32 activity_id = 1;
  string transaction_str = 2;
  uint32 boss_id = 3;
}

// CmdID: 8171
message GourmetHuntKillBossRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    TRANSACTION_MISMATCH = 3;
    ALREADY_DEAD = 4;
    NOT_IN_EXPLORE = 5;
    BOSS_ID_ERROR = 6;
    ROOM_MISMATCH = 7;
    MAP_TYPE_ERROR = 8;
  }

  GourmetHuntKillBossRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 boss_id = 3;
}

// CmdID: 8172
message GourmetHuntEnterRoomReq {
  uint32 activity_id = 1;
  string transaction_str = 2;
  uint32 room_id = 3;
  GourmetHuntClearableArchive report_archive = 4;
}

// CmdID: 8173
message GourmetHuntEnterRoomRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    TRANSACTION_MISMATCH = 3;
    NOT_IN_EXPLORE = 4;
    MAP_MISMATCH = 5;
    COLLECTED_INGREDIENT_ERROR = 6;
    ROOM_ID_ERROR = 7;
    ARCHIVE_MISMATCH = 8;
    SECONDARY_WEAPON_SIZE_ERROR = 9;
    SECONDARY_WEAPON_ERROR = 10;
    MAP_TYPE_ERROR = 11;
  }

  GourmetHuntEnterRoomRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  GourmetHuntExploreArchive archive = 3;
}

// CmdID: 8174
message GourmetHuntGetRankReq {
  uint32 activity_id = 1;
  uint32 map_id = 2;
}

// CmdID: 8175
message GourmetHuntGetRankRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    NO_RANK = 3;
  }

  GourmetHuntGetRankRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 map_id = 3;
  uint32 rank = 4;
  uint32 rank_percent = 5;
  RankShowData rank_data = 6;
}

// CmdID: 8176
message GourmetHuntTriggerEntityReq {
  uint32 activity_id = 1;
  string transaction_str = 2;
  uint32 entity_id = 3;
}

// CmdID: 8177
message GourmetHuntTriggerEntityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    TRANSACTION_MISMATCH = 3;
    NOT_IN_EXPLORE = 4;
    MAP_TYPE_ERROR = 5;
  }

  GourmetHuntTriggerEntityRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 entity_id = 3;
}

// CmdID: 8178
message GourmetHuntDailyStaminaRecoveryNotify {
  uint32 activity_id = 1;
  uint32 recovery_num = 2;
}

// CmdID: 8179
message GourmetHuntBuildBranchStoreReq {
  uint32 activity_id = 1;
  uint32 branch_store_id = 2;
}

// CmdID: 8180
message GourmetHuntBuildBranchStoreRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    BRANCH_STORE_ID_ERROR = 3;
    PRE_MISSION_LIMIT = 4;
    GOLD_LIMIT = 5;
  }

  GourmetHuntBuildBranchStoreRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 branch_store_id = 3;
}

// CmdID: 8181
message GourmetHuntOpenBranchStoreReq {
  uint32 activity_id = 1;
  uint32 branch_store_id = 2;
}

// CmdID: 8182
message GourmetHuntOpenBranchStoreRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    BRANCH_STORE_ID_ERROR = 3;
    NEED_BUILD = 4;
  }

  GourmetHuntOpenBranchStoreRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 opened_branch_store_num = 3;
}

enum CmdTypeGourmethunt {
  CMD_TYPE_GOURMETHUNT_NONE = 0;
  CMD_GOURMET_HUNT_GET_ACTIVITY_REQ = 8150;
  CMD_GOURMET_HUNT_GET_ACTIVITY_RSP = 8151;
  CMD_GOURMET_HUNT_LEVEL_UP_REQ = 8152;
  CMD_GOURMET_HUNT_LEVEL_UP_RSP = 8153;
  CMD_GOURMET_HUNT_UNLOCK_WEAPON_MODULE_REQ = 8154;
  CMD_GOURMET_HUNT_UNLOCK_WEAPON_MODULE_RSP = 8155;
  CMD_GOURMET_HUNT_UNLOCK_FURNITURE_REQ = 8156;
  CMD_GOURMET_HUNT_UNLOCK_FURNITURE_RSP = 8157;
  CMD_GOURMET_HUNT_START_MANAGEMENT_REQ = 8158;
  CMD_GOURMET_HUNT_START_MANAGEMENT_RSP = 8159;
  CMD_GOURMET_HUNT_STOP_MANAGEMENT_REQ = 8160;
  CMD_GOURMET_HUNT_STOP_MANAGEMENT_RSP = 8161;
  CMD_GOURMET_HUNT_START_EXPLORE_REQ = 8162;
  CMD_GOURMET_HUNT_START_EXPLORE_RSP = 8163;
  CMD_GOURMET_HUNT_STOP_EXPLORE_REQ = 8164;
  CMD_GOURMET_HUNT_STOP_EXPLORE_RSP = 8165;
  CMD_GOURMET_HUNT_OPEN_TREASURE_REQ = 8166;
  CMD_GOURMET_HUNT_OPEN_TREASURE_RSP = 8167;
  CMD_GOURMET_HUNT_TRIGGER_TELEPORT_REQ = 8168;
  CMD_GOURMET_HUNT_TRIGGER_TELEPORT_RSP = 8169;
  CMD_GOURMET_HUNT_KILL_BOSS_REQ = 8170;
  CMD_GOURMET_HUNT_KILL_BOSS_RSP = 8171;
  CMD_GOURMET_HUNT_ENTER_ROOM_REQ = 8172;
  CMD_GOURMET_HUNT_ENTER_ROOM_RSP = 8173;
  CMD_GOURMET_HUNT_GET_RANK_REQ = 8174;
  CMD_GOURMET_HUNT_GET_RANK_RSP = 8175;
  CMD_GOURMET_HUNT_TRIGGER_ENTITY_REQ = 8176;
  CMD_GOURMET_HUNT_TRIGGER_ENTITY_RSP = 8177;
  CMD_GOURMET_HUNT_DAILY_STAMINA_RECOVERY_NOTIFY = 8178;
  CMD_GOURMET_HUNT_BUILD_BRANCH_STORE_REQ = 8179;
  CMD_GOURMET_HUNT_BUILD_BRANCH_STORE_RSP = 8180;
  CMD_GOURMET_HUNT_OPEN_BRANCH_STORE_REQ = 8181;
  CMD_GOURMET_HUNT_OPEN_BRANCH_STORE_RSP = 8182;
}

enum GourmetHuntFurnitureType {
  GOURMET_HUNT_FURNITURE_TYPE_NONE = 0;
  GOURMET_HUNT_FURNITURE_TYPE_NORMAL = 1;
  GOURMET_HUNT_FURNITURE_TYPE_TABLE = 2;
  GOURMET_HUNT_FURNITURE_TYPE_INGREDIENT_BOX = 3;
  GOURMET_HUNT_FURNITURE_TYPE_STAMINA_BOX = 4;
}

enum GourmetHuntEntityType {
  GOURMET_HUNT_ENTITY_TYPE_NONE = 0;
  GOURMET_HUNT_ENTITY_TYPE_ENV_DESTRUCTIBLE = 1;
  GOURMET_HUNT_ENTITY_TYPE_TREASURE_BOX = 2;
  GOURMET_HUNT_ENTITY_TYPE_TELEPORT = 3;
  GOURMET_HUNT_ENTITY_TYPE_MONSTER_ALTAR = 4;
  GOURMET_HUNT_ENTITY_TYPE_HIDDEN_WALL = 5;
  GOURMET_HUNT_ENTITY_TYPE_OPTICAL_CABLE = 6;
  GOURMET_HUNT_ENTITY_TYPE_CONTROLLER = 7;
}

enum GourmetHuntMonsterType {
  GOURMET_HUNT_MONSTER_TYPE_NONE = 0;
  GOURMET_HUNT_MONSTER_TYPE_NORMAL_MONSTER = 1;
  GOURMET_HUNT_MONSTER_TYPE_BOSS = 2;
  GOURMET_HUNT_MONSTER_TYPE_ALTAR_TOKEN = 3;
  GOURMET_HUNT_MONSTER_TYPE_CHALLENGE_MONSTER = 4;
}

enum GourmetHuntMapType {
  GOURMET_HUNT_MAP_TYPE_NONE = 0;
  GOURMET_HUNT_MAP_TYPE_STORE = 1;
  GOURMET_HUNT_MAP_TYPE_EXPLORE = 2;
  GOURMET_HUNT_MAP_TYPE_CHALLENGE = 3;
}

enum GourmetHuntIdentityType {
  GOURMET_HUNT_IDENTITY_TYPE_NONE = 0;
  GOURMET_HUNT_IDENTITY_TYPE_WAITER = 1;
  GOURMET_HUNT_IDENTITY_TYPE_CHEF = 2;
  GOURMET_HUNT_IDENTITY_TYPE_MANAGER = 3;
}

// CmdID: 8500
message KianaAutoChessGetActivityReq {
  uint32 activity_id = 1;
}

message KianaAutoChessActivity {
  uint32 activity_id = 1;
  KianaAutoChessStage cur_story_stage = 2;
  uint32 lobby_id = 3;
  uint32 rank_score = 4;
  uint32 highest_rank_score = 5;
  uint32 daily_pvp_material_drop_num = 6;
  uint32 max_daily_pvp_material_drop_num = 7;
  KianaAutoChessStage cur_challenge_stage = 8;
}

message KianaAutoChessStageTurn {
  uint32 turn = 1;
  bytes client_ext = 2;
}

message KianaAutoChessStage {
  uint32 stage_id = 1;
  repeated KianaAutoChessStageTurn saved_turn_list = 2;
  string transaction_str = 3;
}

// CmdID: 8501
message KianaAutoChessGetActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  KianaAutoChessGetActivityRsp.Retcode retcode = 1;
  KianaAutoChessActivity activity = 2;
  uint32 activity_id = 3;
}

// CmdID: 8502
message KianaAutoChessSaveTurnReq {
  uint32 activity_id = 1;
  uint32 stage_id = 2;
  uint32 turn = 3;
  bytes client_ext = 4;
}

// CmdID: 8503
message KianaAutoChessSaveTurnRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    SIZE_LIMIT = 3;
  }

  KianaAutoChessSaveTurnRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
}

// CmdID: 8504
message KianaAutoChessPvpBeginBattleNotify {
  uint32 activity_id = 1;
  uint32 lobby_id = 2;
  uint32 battle_id = 3;
  string fightserver_ip_v4 = 4;
  string fightserver_ip_v6 = 5;
  uint32 fightserver_port = 6;
}

// CmdID: 8505
message KianaAutoChessPvpPlayerSettleNotify {
  uint32 rank = 1;
  bool is_abandon = 2;
  uint32 celebrate_material_num = 3;
}

// CmdID: 8506
message KianaAutoChessPvpEnterBattleReq {
  uint32 battle_id = 1;
}

message KianaAutoChessPvpCombo {
  uint32 combo_id = 1;
  uint32 card_num = 2;
}

message KianaAutoChessPvpTurnRecord {
  uint32 turn = 1;
  uint32 opponent_uid = 2;
  uint32 sub_hp = 3;
  uint32 opponent_sub_hp = 4;
  bool is_opponent_mirrored = 5;
}

message KianaAutoChessPvpPlayer {
  uint32 uid = 1;
  string nickname = 2;
  uint32 custom_head_id = 3;
  uint32 frame_id = 4;
  uint32 rank = 5;
  int32 hp = 6;
  uint32 need_robot_num = 7;
  uint32 bag_level = 8;
  repeated uint32 max_rarity_card_id_list = 9;
  repeated KianaAutoChessPvpCombo combo_list = 10;
  repeated KianaAutoChessPvpTurnRecord turn_record_list = 11;
  bool is_online = 12;
}

message KianaAutoChessPvpOpponent {
  uint32 uid = 1;
  repeated uint32 use_item_list = 2;
  bool is_mirrored = 3;
  repeated uint32 round_score_list = 4;
  uint32 enemy_remain_hp = 5;
  bool is_item_high_level = 6;
  uint32 monster_conquered_ratio = 7;
}

message KianaAutoChessPvpCard {
  uint32 unique_id = 1;
  uint32 card_id = 2;
  uint32 progress = 3;
  bool is_selected = 4;
  bool is_overflow = 5;
}

message KianaAutoChessPvpBag {
  uint32 level = 1;
  uint32 coin = 2;
  repeated KianaAutoChessPvpCard card_list = 3;
  repeated uint32 rune_list = 4;
  repeated uint32 item_list = 5;
  uint32 level_up_cost_reduce = 6;
  uint32 max_card_num = 7;
}

message KianaAutoChessPvpBattleShop {
  uint32 refresh_times = 1;
  repeated KianaAutoChessPvpCard card_list = 2;
  bool is_locked = 3;
  uint32 free_refresh_times = 4;
  uint32 free_buy_card_times = 5;
  uint32 refresh_cost = 6;
}

message KianaAutoChessPvpBattleWaitSelectRune {
  uint32 left_refresh_times = 1;
  repeated uint32 rune_list = 2;
}

message KianaAutoChessPvpCardBattleInfo {
  uint32 damage = 3;
  uint32 card_main_id = 4;
}

message KianaAutoChessPvpBattleTurn {
  uint32 turn = 1;
  KianaAutoChessPvpBattleStatus status = 2;
  KianaAutoChessPvpBattleShop shop = 3;
  KianaAutoChessPvpBattleWaitSelectRune wait_select_rune = 4;
  repeated KianaAutoChessPvpCardBattleInfo card_battle_info_list = 5;
  KianaAutoChessPvpOpponent opponent = 6;
  repeated uint32 use_item_list = 7;
  uint32 turn_begin_time = 8;
  uint32 turn_end_time = 9;
}

message KianaAutoChessPvpBattle {
  uint32 battle_id = 1;
  KianaAutoChessPvpBattleTurn turn = 2;
  repeated KianaAutoChessPvpPlayer player_list = 3;
  KianaAutoChessPvpBag bag = 4;
  uint32 total_got_item_num = 5;
  uint32 total_use_item_num = 6;
  uint32 shop_refresh_times = 7;
  uint32 total_got_coin_num = 8;
  uint32 total_win_times = 9;
  bool is_prevent_death = 10;
  repeated KianaAutoChessPvpOverall overall_list = 11;
  string transaction_str = 12;
}

// CmdID: 8507
message KianaAutoChessPvpEnterBattleRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_BATTLE = 2;
  }

  KianaAutoChessPvpEnterBattleRsp.Retcode retcode = 1;
  KianaAutoChessPvpBattle battle = 2;
  uint32 battle_id = 3;
}

// CmdID: 8508
message KianaAutoChessPvpGetBattleReq {
  uint32 battle_id = 1;
}

// CmdID: 8509
message KianaAutoChessPvpGetBattleRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  KianaAutoChessPvpGetBattleRsp.Retcode retcode = 1;
  KianaAutoChessPvpBattle battle = 2;
  uint32 battle_id = 3;
}

// CmdID: 8510
message KianaAutoChessPvpAbandonBattleReq {
  uint32 battle_id = 1;
}

// CmdID: 8511
message KianaAutoChessPvpAbandonBattleRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  KianaAutoChessPvpAbandonBattleRsp.Retcode retcode = 1;
  uint32 battle_id = 2;
}

// CmdID: 8512
message KianaAutoChessPvpEndBattleNotify {
  uint32 battle_id = 1;
}

// CmdID: 8513
message KianaAutoChessPvpSyncOpponentNotify {
  uint32 battle_id = 1;
  uint32 turn = 2;
  KianaAutoChessPvpOpponent opponent = 3;
  uint32 sub_hp = 4;
  uint32 opponent_sub_hp = 5;
  uint32 turn_score = 6;
  uint32 opponent_turn_score = 7;
}

// CmdID: 8514
message KianaAutoChessPvpSyncActionNotify {
  uint32 battle_id = 1;
  uint32 uid = 2;
  KianaAutoChessPvpActionType action_type = 3;
  repeated uint32 action_param_list = 4;
}

// CmdID: 8515
message KianaAutoChessPvpUseItemReq {
  uint32 battle_id = 1;
  uint32 item_idx = 2;
  uint32 item_id = 3;
  uint32 got_num = 4;
}

// CmdID: 8516
message KianaAutoChessPvpUseItemRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    STATUS_ERROR = 2;
    ITEM_ERROR = 3;
  }

  KianaAutoChessPvpUseItemRsp.Retcode retcode = 1;
  uint32 battle_id = 2;
}

// CmdID: 8517
message KianaAutoChessPvpSellCardReq {
  uint32 battle_id = 1;
  repeated uint32 card_unique_id_list = 2;
}

// CmdID: 8518
message KianaAutoChessPvpSellCardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    STATUS_ERROR = 2;
    CARD_ERROR = 3;
  }

  KianaAutoChessPvpSellCardRsp.Retcode retcode = 1;
  uint32 battle_id = 2;
}

// CmdID: 8519
message KianaAutoChessPvpBuyCardReq {
  uint32 battle_id = 1;
  uint32 card_idx = 2;
}

// CmdID: 8520
message KianaAutoChessPvpBuyCardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    STATUS_ERROR = 2;
    LACK_COIN = 3;
    BAG_FULL = 4;
  }

  KianaAutoChessPvpBuyCardRsp.Retcode retcode = 1;
  uint32 battle_id = 2;
}

// CmdID: 8521
message KianaAutoChessPvpRefreshShopReq {
  uint32 battle_id = 1;
  uint32 refresh_times = 2;
}

// CmdID: 8522
message KianaAutoChessPvpRefreshShopRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    STATUS_ERROR = 2;
    LACK_COIN = 3;
  }

  KianaAutoChessPvpRefreshShopRsp.Retcode retcode = 1;
  uint32 battle_id = 2;
}

// CmdID: 8523
message KianaAutoChessPvpLockShopReq {
  uint32 battle_id = 1;
  bool is_locked = 2;
}

// CmdID: 8524
message KianaAutoChessPvpLockShopRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    STATUS_ERROR = 2;
  }

  KianaAutoChessPvpLockShopRsp.Retcode retcode = 1;
  uint32 battle_id = 2;
  bool is_locked = 3;
}

// CmdID: 8525
message KianaAutoChessPvpSendEmojiReq {
  uint32 battle_id = 1;
  uint32 emoji_id = 2;
}

// CmdID: 8526
message KianaAutoChessPvpSendEmojiRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    IN_CD = 2;
  }

  KianaAutoChessPvpSendEmojiRsp.Retcode retcode = 1;
  uint32 battle_id = 2;
  uint32 emoji_id = 3;
  uint32 next_can_send_time = 4;
}

// CmdID: 8527
message KianaAutoChessPvpSelectRuneReq {
  uint32 battle_id = 1;
  uint32 rune_idx = 2;
}

// CmdID: 8528
message KianaAutoChessPvpSelectRuneRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    STATUS_ERROR = 2;
    RUNE_ERROR = 3;
  }

  KianaAutoChessPvpSelectRuneRsp.Retcode retcode = 1;
  uint32 battle_id = 2;
  uint32 rune_idx = 3;
}

// CmdID: 8529
message KianaAutoChessPvpRefreshRuneReq {
  uint32 battle_id = 1;
  uint32 left_refresh_times = 2;
  uint32 idx = 3;
}

// CmdID: 8530
message KianaAutoChessPvpRefreshRuneRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    STATUS_ERROR = 2;
    RUNE_ERROR = 3;
  }

  KianaAutoChessPvpRefreshRuneRsp.Retcode retcode = 1;
  uint32 battle_id = 2;
  uint32 left_refresh_times = 3;
  uint32 idx = 4;
}

// CmdID: 8531
message KianaAutoChessPvpUpgradeBagReq {
  uint32 battle_id = 1;
  uint32 target_level = 2;
}

// CmdID: 8532
message KianaAutoChessPvpUpgradeBagRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    STATUS_ERROR = 2;
    LACK_COIN = 3;
    TARGET_LEVEL_ERROR = 4;
  }

  KianaAutoChessPvpUpgradeBagRsp.Retcode retcode = 1;
  uint32 battle_id = 2;
  uint32 target_level = 3;
}

message KianaAutoChessPvpOverall {
  uint32 id = 1;
  uint32 value = 2;
}

// CmdID: 8533
message KianaAutoChessPvpReportTurnReq {
  uint32 battle_id = 1;
  uint32 turn = 2;
  repeated uint32 round_score_list = 3;
  repeated KianaAutoChessPvpCardBattleInfo card_battle_info_list = 4;
  uint32 enemy_remain_hp = 5;
  uint32 got_coin_num = 6;
  uint32 get_item_num = 7;
  uint32 monster_conquered_ratio = 8;
  repeated KianaAutoChessPvpOverall overall_list = 9;
  int32 add_hp = 10;
  uint32 lineup_id = 11;
  uint32 honkai_disaster_damage = 12;
  uint32 coin_num_got_by_combo = 13;
}

// CmdID: 8534
message KianaAutoChessPvpReportTurnRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    STATUS_ERROR = 2;
    HP_ERROR = 3;
  }

  KianaAutoChessPvpReportTurnRsp.Retcode retcode = 1;
  uint32 battle_id = 2;
  uint32 turn = 3;
}

message KianaAutoChessBattleMember {
  uint32 uid = 1;
  string nickname = 2;
  uint32 custom_head_id = 3;
  uint32 frame_id = 4;
  uint32 rank_score = 5;
  uint32 need_robot_num = 6;
}

// CmdID: 8535
message KianaAutoChessGetLobbyStatusReq {
  uint32 activity_id = 1;
  uint32 lobby_id = 2;
}

// CmdID: 8536
message KianaAutoChessGetLobbyStatusRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    NO_LOBBY = 3;
    TOO_OFTEN = 4;
  }

  KianaAutoChessGetLobbyStatusRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 battle_id = 3;
  uint32 lobby_id = 4;
  string fightserver_ip_v4 = 5;
  string fightserver_ip_v6 = 6;
  uint32 fightserver_port = 7;
}

// CmdID: 8537
message KianaAutoChessClearStageRecordReq {
  uint32 activity_id = 1;
  uint32 stage_id = 2;
}

// CmdID: 8538
message KianaAutoChessClearStageRecordRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    STAGE_ERROR = 3;
  }

  KianaAutoChessClearStageRecordRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 stage_id = 3;
}

// CmdID: 8539
message KianaAutoChessStoryStageBeginReq {
  uint32 activity_id = 1;
  uint32 stage_id = 2;
  uint32 turn = 3;
  bool is_new_stage = 4;
}

// CmdID: 8540
message KianaAutoChessStoryStageBeginRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    STAGE_ERROR = 3;
  }

  KianaAutoChessStoryStageBeginRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 stage_id = 3;
  uint32 turn = 4;
}

message KianaAutoChessPvpPlayerSettleInfo {
  uint32 uid = 1;
  uint32 rank = 2;
  repeated KianaAutoChessPvpCardBattleInfo card_battle_info_list = 3;
  repeated KianaAutoChessPvpOverall overall_list = 4;
  uint32 honkai_disaster_damage = 5;
  uint32 coin_num_got_by_combo = 6;
  repeated KianaAutoChessPvpCombo combo_list = 7;
  uint32 turn = 8;
  bool is_abandon = 9;
}

// CmdID: 8541
message KianaAutoChessStoryStageEndReq {
  uint32 activity_id = 1;
  uint32 stage_id = 2;
  StageEndStatus end_status = 3;
  KianaAutoChessPvpPlayerSettleInfo settle_info = 4;
}

// CmdID: 8542
message KianaAutoChessStoryStageEndRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    STAGE_ERROR = 3;
  }

  KianaAutoChessStoryStageEndRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 stage_id = 3;
}

// CmdID: 8543
message KianaAutoChessPvpFightEndNotify {
  uint32 battle_id = 1;
  uint32 turn = 2;
}

enum CmdTypeKianaautochess {
  CMD_TYPE_KIANAAUTOCHESS_NONE = 0;
  CMD_KIANA_AUTO_CHESS_GET_ACTIVITY_REQ = 8500;
  CMD_KIANA_AUTO_CHESS_GET_ACTIVITY_RSP = 8501;
  CMD_KIANA_AUTO_CHESS_SAVE_TURN_REQ = 8502;
  CMD_KIANA_AUTO_CHESS_SAVE_TURN_RSP = 8503;
  CMD_KIANA_AUTO_CHESS_PVP_BEGIN_BATTLE_NOTIFY = 8504;
  CMD_KIANA_AUTO_CHESS_PVP_PLAYER_SETTLE_NOTIFY = 8505;
  CMD_KIANA_AUTO_CHESS_PVP_ENTER_BATTLE_REQ = 8506;
  CMD_KIANA_AUTO_CHESS_PVP_ENTER_BATTLE_RSP = 8507;
  CMD_KIANA_AUTO_CHESS_PVP_GET_BATTLE_REQ = 8508;
  CMD_KIANA_AUTO_CHESS_PVP_GET_BATTLE_RSP = 8509;
  CMD_KIANA_AUTO_CHESS_PVP_ABANDON_BATTLE_REQ = 8510;
  CMD_KIANA_AUTO_CHESS_PVP_ABANDON_BATTLE_RSP = 8511;
  CMD_KIANA_AUTO_CHESS_PVP_END_BATTLE_NOTIFY = 8512;
  CMD_KIANA_AUTO_CHESS_PVP_SYNC_OPPONENT_NOTIFY = 8513;
  CMD_KIANA_AUTO_CHESS_PVP_SYNC_ACTION_NOTIFY = 8514;
  CMD_KIANA_AUTO_CHESS_PVP_USE_ITEM_REQ = 8515;
  CMD_KIANA_AUTO_CHESS_PVP_USE_ITEM_RSP = 8516;
  CMD_KIANA_AUTO_CHESS_PVP_SELL_CARD_REQ = 8517;
  CMD_KIANA_AUTO_CHESS_PVP_SELL_CARD_RSP = 8518;
  CMD_KIANA_AUTO_CHESS_PVP_BUY_CARD_REQ = 8519;
  CMD_KIANA_AUTO_CHESS_PVP_BUY_CARD_RSP = 8520;
  CMD_KIANA_AUTO_CHESS_PVP_REFRESH_SHOP_REQ = 8521;
  CMD_KIANA_AUTO_CHESS_PVP_REFRESH_SHOP_RSP = 8522;
  CMD_KIANA_AUTO_CHESS_PVP_LOCK_SHOP_REQ = 8523;
  CMD_KIANA_AUTO_CHESS_PVP_LOCK_SHOP_RSP = 8524;
  CMD_KIANA_AUTO_CHESS_PVP_SEND_EMOJI_REQ = 8525;
  CMD_KIANA_AUTO_CHESS_PVP_SEND_EMOJI_RSP = 8526;
  CMD_KIANA_AUTO_CHESS_PVP_SELECT_RUNE_REQ = 8527;
  CMD_KIANA_AUTO_CHESS_PVP_SELECT_RUNE_RSP = 8528;
  CMD_KIANA_AUTO_CHESS_PVP_REFRESH_RUNE_REQ = 8529;
  CMD_KIANA_AUTO_CHESS_PVP_REFRESH_RUNE_RSP = 8530;
  CMD_KIANA_AUTO_CHESS_PVP_UPGRADE_BAG_REQ = 8531;
  CMD_KIANA_AUTO_CHESS_PVP_UPGRADE_BAG_RSP = 8532;
  CMD_KIANA_AUTO_CHESS_PVP_REPORT_TURN_REQ = 8533;
  CMD_KIANA_AUTO_CHESS_PVP_REPORT_TURN_RSP = 8534;
  CMD_KIANA_AUTO_CHESS_GET_LOBBY_STATUS_REQ = 8535;
  CMD_KIANA_AUTO_CHESS_GET_LOBBY_STATUS_RSP = 8536;
  CMD_KIANA_AUTO_CHESS_CLEAR_STAGE_RECORD_REQ = 8537;
  CMD_KIANA_AUTO_CHESS_CLEAR_STAGE_RECORD_RSP = 8538;
  CMD_KIANA_AUTO_CHESS_STORY_STAGE_BEGIN_REQ = 8539;
  CMD_KIANA_AUTO_CHESS_STORY_STAGE_BEGIN_RSP = 8540;
  CMD_KIANA_AUTO_CHESS_STORY_STAGE_END_REQ = 8541;
  CMD_KIANA_AUTO_CHESS_STORY_STAGE_END_RSP = 8542;
  CMD_KIANA_AUTO_CHESS_PVP_FIGHT_END_NOTIFY = 8543;
}

enum KianaAutoChessStageType {
  KIANA_AUTO_CHESS_STAGE_TYPE_NONE = 0;
  KIANA_AUTO_CHESS_STAGE_STORY = 1;
  KIANA_AUTO_CHESS_STAGE_PVP = 2;
  KIANA_AUTO_CHESS_STAGE_AVATAR = 3;
  KIANA_AUTO_CHESS_STAGE_CHALLENGE = 4;
}

enum KianaAutoChessPvpItemType {
  KIANA_AUTO_CHESS_PVP_ITEM_TYPE_NONE = 0;
  KIANA_AUTO_CHESS_PVP_ITEM_CLIENT = 1;
  KIANA_AUTO_CHESS_PVP_ITEM_GET_COIN_AND_SHOP_REFRESH_TIMES = 2;
  KIANA_AUTO_CHESS_PVP_ITEM_RANDOM_CARD_STAR_UP = 3;
  KIANA_AUTO_CHESS_PVP_ITEM_BUY_CARD_FOR_FREE = 4;
  KIANA_AUTO_CHESS_PVP_ITEM_REFRESH_SHOP_HIGHER_RARITY = 5;
  KIANA_AUTO_CHESS_PVP_ITEM_REFRESH_SHOP_HIGHEST_COMBO = 6;
  KIANA_AUTO_CHESS_PVP_ITEM_ADD_PLAYER_HP = 7;
  KIANA_AUTO_CHESS_PVP_ITEM_RANDOM_USE_ITEM = 8;
  KIANA_AUTO_CHESS_PVP_ITEM_RETURN_OPPONENT_ITEM = 9;
  KIANA_AUTO_CHESS_PVP_ITEM_LOWER_OPPONENT_SCORE = 10;
  KIANA_AUTO_CHESS_PVP_ITEM_SUB_PLAYER_HP = 11;
}

enum KianaAutoChessPvpRuneEffectType {
  KIANA_AUTO_CHESS_PVP_RUNE_EFFECT_TYPE_NONE = 0;
  KIANA_AUTO_CHESS_EFFECT_CLIENT = 1;
  KIANA_AUTO_CHESS_PVP_RUNE_EFFECT_GOT_RUNE_ADD_COIN_WITH_ITEM_NUM = 2;
  KIANA_AUTO_CHESS_PVP_RUNE_EFFECT_GOT_RUNE_ADD_CARD = 3;
  KIANA_AUTO_CHESS_PVP_RUNE_EFFECT_GOT_RUNE_PREVENT_DEATH = 4;
  KIANA_AUTO_CHESS_PVP_RUNE_EFFECT_GOT_RUNE_BAG_UPGRADE = 5;
  KIANA_AUTO_CHESS_PVP_RUNE_EFFECT_GOT_RUNE_RANDOM_CARD_STAR_UP = 6;
  KIANA_AUTO_CHESS_PVP_RUNE_EFFECT_GOT_RUNE_CARD_TO_HIGHER_RARITY = 7;
  KIANA_AUTO_CHESS_PVP_RUNE_EFFECT_GOT_RUNE_SUB_HP = 8;
  KIANA_AUTO_CHESS_PVP_RUNE_EFFECT_GOT_RUNE_CONVERT_TO_OTHER = 9;
  KIANA_AUTO_CHESS_PVP_RUNE_EFFECT_GOT_RUNE_ADD_COIN = 10;
  KIANA_AUTO_CHESS_PVP_RUNE_EFFECT_GOT_RUNE_ADD_SHOP_REFRESH_TIMES = 11;
  KIANA_AUTO_CHESS_PVP_RUNE_EFFECT_GOT_RUNE_ADD_RANDOM_ITEM = 12;
  KIANA_AUTO_CHESS_PVP_RUNE_EFFECT_TURN_INIT_ADD_RANDOM_ITEM = 13;
  KIANA_AUTO_CHESS_PVP_RUNE_EFFECT_TURN_INIT_ADD_COIN_WITH_COMBO_STAR_NUM = 14;
  KIANA_AUTO_CHESS_PVP_RUNE_EFFECT_SETTLE_TURN_ADD_COIN = 15;
  KIANA_AUTO_CHESS_PVP_RUNE_EFFECT_SETTLE_TURN_ADD_COIN_WITH_DAMAGE = 16;
  KIANA_AUTO_CHESS_PVP_RUNE_EFFECT_SETTLE_TURN_ADD_COIN_IF_LOSE = 17;
  KIANA_AUTO_CHESS_PVP_RUNE_EFFECT_SETTLE_TURN_ADD_COIN_WITH_SELF_COIN = 22;
  KIANA_AUTO_CHESS_PVP_RUNE_EFFECT_CAL_ITEM_LEVEL_AS_HIGH = 18;
  KIANA_AUTO_CHESS_PVP_RUNE_EFFECT_CAL_CARD_COMBO_ADD = 19;
  KIANA_AUTO_CHESS_PVP_RUNE_EFFECT_CAL_BAG_CARD_NUM_ADD = 20;
  KIANA_AUTO_CHESS_PVP_RUNE_EFFECT_CAL_TOTAL_COIN_NUM_ADD_CARD = 21;
  KIANA_AUTO_CHESS_PVP_RUNE_EFFECT_ENTER_SHOP_REFRESH_WITH_MOST_COMBO_CARD_IF_NOT_BUY_CARD_IN_LAST_SHOP = 23;
  KIANA_AUTO_CHESS_PVP_RUNE_EFFECT_ENTER_SHOP_ADD_COIN_IF_HP_LOWER_THAN = 24;
  KIANA_AUTO_CHESS_PVP_RUNE_EFFECT_ENTER_SHOP_ADD_RANDOM_ITEM_IF_HP_LOWER_THAN = 25;
  KIANA_AUTO_CHESS_PVP_RUNE_EFFECT_ENTER_SHOP_ADD_CARD_FREE_BUY_TIMES = 26;
  KIANA_AUTO_CHESS_PVP_RUNE_EFFECT_ENTER_SHOP_ADD_BUY_ONE_GET_ONE_FREE_TIMES = 27;
  KIANA_AUTO_CHESS_PVP_RUNE_EFFECT_UPGRADE_BAG_ADD_MOST_RARITY_CARD = 28;
  KIANA_AUTO_CHESS_PVP_RUNE_EFFECT_UPGRADE_BAG_LOWER_COST = 29;
  KIANA_AUTO_CHESS_PVP_RUNE_EFFECT_UPGRADE_BAG_ADD_BAG_LEVEL_CARD = 35;
  KIANA_AUTO_CHESS_PVP_RUNE_EFFECT_CARD_LEVEL_UP_ADD_COIN = 30;
  KIANA_AUTO_CHESS_PVP_RUNE_EFFECT_CARD_LEVEL_UP_ADD_SHOP_REFRESH_TIMES = 31;
  KIANA_AUTO_CHESS_PVP_RUNE_EFFECT_REFRESH_SHOP_LOWER_COST = 32;
  KIANA_AUTO_CHESS_PVP_RUNE_EFFECT_REFRESH_SHOP_HIGHER_BAG_LEVEL = 33;
  KIANA_AUTO_CHESS_PVP_RUNE_EFFECT_GOT_ITEM_ADD_COIN = 34;
}

enum KianaAutoChessPvpRobotType {
  KIANA_AUTO_CHESS_PVP_ROBOT_TYPE_NONE = 0;
  KIANA_AUTO_CHESS_PVP_ROBOT_NPC = 1;
  KIANA_AUTO_CHESS_PVP_ROBOT_SIMPLE = 2;
  KIANA_AUTO_CHESS_PVP_ROBOT_ELITE = 3;
}

enum KianaAutoChessPvpActionType {
  KIANA_AUTO_CHESS_PVP_ACTION_TYPE_NONE = 0;
  KIANA_AUTO_CHESS_PVP_ACTION_SEND_EMOJI = 1;
  KIANA_AUTO_CHESS_PVP_ACTION_USE_ITEM = 2;
  KIANA_AUTO_CHESS_PVP_ACTION_STAR_UP_CARD = 3;
  KIANA_AUTO_CHESS_PVP_ACTION_UPGRADE_BAG = 4;
}

enum KianaAutoChessPvpBattleStatus {
  KIANA_AUTO_CHESS_PVP_BATTLE_STATUS_NONE = 0;
  KIANA_AUTO_CHESS_PVP_BATTLE_STATUS_FIGHT = 1;
  KIANA_AUTO_CHESS_PVP_BATTLE_STATUS_SHOP = 2;
  KIANA_AUTO_CHESS_PVP_BATTLE_STATUS_SELECT_RUNE = 3;
  KIANA_AUTO_CHESS_PVP_BATTLE_STATUS_SETTLED = 4;
  KIANA_AUTO_CHESS_PVP_BATTLE_STATUS_ABANDON = 5;
}

// CmdID: 7900
message MahouCardGetActivityReq {
  uint32 activity_id = 1;
}

message MahouCardAreaDropRecord {
  uint32 area_id = 1;
  uint32 cur_drop_num = 2;
  uint32 cur_site_id = 3;
  bool is_unlocked_today = 4;
  uint32 unlocked_times = 5;
}

message MahouCardSite {
  uint32 site_id = 1;
  repeated uint32 passed_floor_list = 2;
}

message MahouCardRole {
  uint32 role_id = 1;
  uint32 level = 2;
}

message MahouCardBuff {
  uint32 buff_id = 1;
  uint32 remain_room_cnt = 2;
  uint32 remain_battle_cnt = 3;
}

message MahouCardSiteRecord {
  uint32 site_type = 1;
  uint32 site_id = 2;
}

message MahouCardActivity {
  uint32 activity_id = 1;
  repeated MahouCardAreaDropRecord area_daily_drop_record_list = 2;
  repeated MahouCardSite site_list = 3;
  repeated MahouCardRole role_list = 4;
  repeated uint32 has_got_card_id_list = 5;
  uint32 cur_site_id = 6;
  repeated MahouCardSiteRecord site_record_list = 7;
}

// CmdID: 7901
message MahouCardGetActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  MahouCardGetActivityRsp.Retcode retcode = 1;
  MahouCardActivity activity = 2;
}

// CmdID: 7902
message MahouCardRoleLevelUpReq {
  uint32 activity_id = 1;
  uint32 role_id = 2;
  uint32 target_level = 3;
}

// CmdID: 7903
message MahouCardRoleLevelUpRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    ROLE_ERROR = 3;
    MATERIAL_LACK = 4;
    TARGET_LEVEL_ERROR = 5;
    REQUIRED_PASS_SITE = 6;
  }

  MahouCardRoleLevelUpRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 role_id = 3;
  uint32 target_level = 4;
}

// CmdID: 7904
message MahouCardEnterSiteReq {
  uint32 activity_id = 1;
  uint32 site_id = 2;
  uint32 role_id = 3;
  bool is_force = 4;
}

message MahouCardBattleCard {
  uint32 slot = 1;
  uint32 card_id = 2;
  uint32 unique_id = 3;
  repeated uint32 tag_list = 4;
}

message MahouCardHandCard {
  uint32 card_id = 1;
  uint32 unique_id = 2;
  repeated uint32 tag_list = 3;
}

message MahouCardRoomInfo {
  uint32 room_id = 1;
  uint32 battle_random_seed = 2;
  string transaction_str = 3;
  uint32 retry_times = 4;
  bool is_done = 5;
  bool is_in_battle = 6;
}

message MahouCardNumInfo {
  uint32 card_id = 1;
  uint32 card_num = 2;
}

message MahouCardSiteInfo {
  uint32 site_id = 1;
  uint32 role_id = 2;
  uint32 role_level = 3;
  MahouCardRoomInfo room_info = 4;
  repeated uint32 passed_room_id_list = 5;
  string transaction_str = 6;
  repeated MahouCardHandCard hand_card_list = 11;
  repeated MahouCardBattleCard battle_card_list = 12;
  uint32 battle_hp = 21;
  uint32 remain_exchange_times = 22;
  uint32 discard_times = 23;
  uint32 discard_goal = 24;
  uint32 discard_trigger_times = 25;
  uint32 exchange_trigger_times = 26;
  repeated uint32 wait_select_prophesy_list = 31;
  repeated uint32 prophesy_list = 32;
  repeated uint32 role_prophesy_list = 33;
  repeated MahouCardBuff buff_list = 41;
  uint32 cur_event_id = 51;
  repeated uint32 option_list = 52;
  repeated uint32 invalid_option_list = 53;
  repeated MahouCardNumInfo candidate_card_num_list = 54;
}

// CmdID: 7905
message MahouCardEnterSiteRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    IN_OTHER_SITE = 3;
    ROLE_ERROR = 4;
  }

  MahouCardEnterSiteRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 site_id = 3;
  MahouCardSiteInfo cur_site = 4;
}

// CmdID: 7906
message MahouCardEnterRoomReq {
  uint32 activity_id = 1;
  uint32 site_id = 2;
  uint32 room_id = 3;
}

// CmdID: 7907
message MahouCardEnterRoomRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 3;
    NOT_IN_SITE = 4;
    UNFINISHED_ROOM = 5;
    ROOM_ERROR = 6;
    ALREADY_DEAD = 7;
    WAIT_SELECT_EVENT_OPTION = 8;
  }

  MahouCardEnterRoomRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 site_id = 3;
  MahouCardSiteInfo cur_site = 4;
}

// CmdID: 7908
message MahouCardExitRoomReq {
  uint32 activity_id = 1;
  uint32 site_id = 2;
  uint32 room_id = 3;
}

// CmdID: 7909
message MahouCardExitRoomRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    NOT_IN_SITE = 3;
    ROOM_ERROR = 4;
    NO_BATTLE_HP = 5;
    WAIT_SELECT_PROPHESY = 6;
    WAIT_CHOOSE_OPTION_EVENT = 7;
    WAIT_FINISH_BATTLE = 8;
  }

  MahouCardExitRoomRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  MahouCardSiteInfo cur_site = 3;
}

// CmdID: 7925
message MahouCardExitSiteReq {
  uint32 activity_id = 1;
  uint32 site_id = 2;
}

// CmdID: 7926
message MahouCardExitSiteRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    NOT_IN_SITE = 3;
  }

  MahouCardExitSiteRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 site_id = 3;
  RewardData reward = 4;
  uint32 daily_site_drop_num = 5;
}

// CmdID: 7910
message MahouCardGetCurSiteInfoReq {
  uint32 activity_id = 1;
  uint32 site_type = 2;
}

// CmdID: 7911
message MahouCardGetCurSiteInfoRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    NOT_IN_SITE = 3;
  }

  MahouCardGetCurSiteInfoRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  MahouCardSiteInfo cur_site = 3;
  uint32 site_type = 4;
}

// CmdID: 7912
message MahouCardHandCardChangeNotify {
  enum Reason {
    NONE = 0;
    DRAW = 1;
    EXCHANGE = 2;
    DISCARD = 3;
    CARD_LEVEL_UP = 4;
    SET_TO_BATTLE = 5;
    RECALL_FROM_BATTLE = 6;
    EVENT = 7;
    GROWTH = 8;
  }

  uint32 activity_id = 1;
  uint32 site_id = 2;
  uint32 room_id = 3;
  MahouCardHandCardChangeNotify.Reason reason = 4;
  repeated MahouCardHandCard lost_hand_card_list = 5;
  repeated MahouCardHandCard add_hand_card_list = 6;
  repeated MahouCardBattleCard lost_battle_card_list = 7;
  repeated MahouCardBattleCard add_battle_card_list = 8;
  uint32 event_id = 9;
  bool is_need_sync = 99;
}

// CmdID: 7913
message MahouCardExchangeCardReq {
  uint32 activity_id = 1;
  uint32 site_id = 2;
  uint32 room_id = 3;
  uint32 unique_id = 4;
}

// CmdID: 7914
message MahouCardExchangeCardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    NOT_IN_SITE = 3;
    NOT_IN_ROOM = 4;
    EXCHANGE_LIMIT = 5;
    UNIQUE_ID_ERROR = 6;
  }

  MahouCardExchangeCardRsp.Retcode retcode = 1;
}

// CmdID: 7915
message MahouCardDiscardCardReq {
  uint32 activity_id = 1;
  uint32 site_id = 2;
  uint32 room_id = 3;
  uint32 unique_id = 4;
}

// CmdID: 7916
message MahouCardDiscardCardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    NOT_IN_SITE = 3;
    NOT_IN_ROOM = 4;
    UNIQUE_ID_ERROR = 5;
  }

  MahouCardDiscardCardRsp.Retcode retcode = 1;
}

// CmdID: 7917
message MahouCardLevelUpCardReq {
  uint32 activity_id = 1;
  uint32 site_id = 2;
  uint32 room_id = 3;
  uint32 cost_unique_id = 4;
  uint32 target_unique_id = 5;
}

// CmdID: 7918
message MahouCardLevelUpCardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    NOT_IN_SITE = 3;
    NOT_IN_ROOM = 4;
    LEVEL_LIMIT = 5;
    COST_ERROR = 6;
    TARGET_ERROR = 7;
    DAILY_SITE_FORBIDDEN = 8;
  }

  MahouCardLevelUpCardRsp.Retcode retcode = 1;
  uint32 cost_unique_id = 4;
  uint32 target_unique_id = 5;
}

// CmdID: 7919
message MahouCardSetBattleCardReq {
  enum Direction {
    NONE = 0;
    LEFT = 1;
    RIGHT = 2;
  }

  uint32 activity_id = 1;
  uint32 site_id = 2;
  uint32 room_id = 3;
  uint32 unique_id = 4;
  uint32 slot = 5;
  MahouCardSetBattleCardReq.Direction direction = 6;
}

// CmdID: 7920
message MahouCardSetBattleCardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    NOT_IN_SITE = 3;
    NOT_IN_ROOM = 4;
    UNIQUE_ID_ERROR = 5;
    SLOT_LOCKED = 6;
    SELF_SWAP = 7;
    ONLY_IN_HAND = 8;
  }

  MahouCardSetBattleCardRsp.Retcode retcode = 1;
}

// CmdID: 7921
message MahouCardRecallBattleCardReq {
  uint32 activity_id = 1;
  uint32 site_id = 2;
  uint32 room_id = 3;
  uint32 unique_id = 4;
  uint32 slot = 5;
}

// CmdID: 7922
message MahouCardRecallBattleCardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    NOT_IN_SITE = 3;
    NOT_IN_ROOM = 4;
    UNIQUE_ID_ERROR = 5;
    FULL_HAND = 6;
  }

  MahouCardRecallBattleCardRsp.Retcode retcode = 1;
}

// CmdID: 7923
message MahouCardSelectProphesyReq {
  uint32 activity_id = 1;
  uint32 site_id = 2;
  uint32 room_id = 3;
  uint32 prophesy_id = 4;
}

// CmdID: 7924
message MahouCardSelectProphesyRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    NOT_IN_SITE = 3;
    NOT_IN_ROOM = 4;
    NO_PROPHESY_TO_SELECT = 5;
    PROPHESY_ID_ERROR = 6;
  }

  MahouCardSelectProphesyRsp.Retcode retcode = 1;
}

// CmdID: 7927
message MahouCardChooseEventOptionReq {
  uint32 activity_id = 1;
  uint32 site_id = 2;
  uint32 room_id = 3;
  uint32 event_id = 4;
  repeated uint32 option_list = 5;
}

// CmdID: 7928
message MahouCardChooseEventOptionRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    NOT_IN_SITE = 3;
    NOT_IN_ROOM = 4;
    EVENT_ERROR = 5;
    OPTION_ERROR = 6;
  }

  MahouCardChooseEventOptionRsp.Retcode retcode = 1;
}

// CmdID: 7929
message MahouCardEventNotify {
  uint32 activity_id = 1;
  uint32 site_id = 2;
  uint32 room_id = 3;
  uint32 event_id = 4;
  repeated uint32 option_list = 5;
  repeated uint32 invalid_option_list = 6;
}

// CmdID: 7930
message MahouCardBattleBeginReq {
  uint32 activity_id = 1;
  uint32 site_id = 2;
  uint32 room_id = 3;
}

// CmdID: 7931
message MahouCardBattleBeginRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    NOT_IN_SITE = 3;
    NOT_IN_ROOM = 4;
    NO_NEED_TO_BATTLE = 5;
    NO_BATTLE_HP = 6;
    RETRY_TIMES_LIMIT = 7;
    WAIT_CHOOSE_OPTION_EVENT = 8;
  }

  MahouCardBattleBeginRsp.Retcode retcode = 1;
}

// CmdID: 7932
message MahouCardBattleEndReq {
  enum Status {
    BATTLE_LOSE = 0;
    BATTLE_WIN = 1;
    BATTLE_LOSE_AND_RETRY = 2;
  }

  uint32 activity_id = 1;
  uint32 site_id = 2;
  uint32 room_id = 3;
  uint32 score = 4;
  MahouCardBattleEndReq.Status end_status = 5;
}

// CmdID: 7933
message MahouCardBattleEndRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    NOT_IN_SITE = 3;
    NOT_IN_ROOM = 4;
    NOT_IN_BATTLE = 5;
  }

  MahouCardBattleEndRsp.Retcode retcode = 1;
}

// CmdID: 7934
message MahouCardUnlockDailySiteReq {
  uint32 activity_id = 1;
  uint32 area_id = 2;
}

// CmdID: 7935
message MahouCardUnlockDailySiteRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    AREA_LOCKED = 3;
    ALREADY_UNLOCKED = 4;
    MATERIAL_LACK = 5;
  }

  MahouCardUnlockDailySiteRsp.Retcode retcode = 1;
}

// CmdID: 7936
message MahouCardGetDailySiteRankReq {
  uint32 activity_id = 1;
  uint32 area_id = 2;
}

// CmdID: 7937
message MahouCardGetDailySiteRankRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  MahouCardGetDailySiteRankRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 area_id = 3;
  uint32 rank = 4;
  uint32 rank_percent = 5;
  RankShowData rank_data = 6;
}

// CmdID: 7938
message MahouCardOverdrawnNotify {
  uint32 activity_id = 1;
  uint32 site_id = 2;
  repeated uint32 overdrawn_card_list = 3;
}

enum CmdTypeMahoucard {
  CMD_TYPE_MAHOUCARD_NONE = 0;
  CMD_MAHOU_CARD_GET_ACTIVITY_REQ = 7900;
  CMD_MAHOU_CARD_GET_ACTIVITY_RSP = 7901;
  CMD_MAHOU_CARD_ROLE_LEVEL_UP_REQ = 7902;
  CMD_MAHOU_CARD_ROLE_LEVEL_UP_RSP = 7903;
  CMD_MAHOU_CARD_ENTER_SITE_REQ = 7904;
  CMD_MAHOU_CARD_ENTER_SITE_RSP = 7905;
  CMD_MAHOU_CARD_ENTER_ROOM_REQ = 7906;
  CMD_MAHOU_CARD_ENTER_ROOM_RSP = 7907;
  CMD_MAHOU_CARD_EXIT_ROOM_REQ = 7908;
  CMD_MAHOU_CARD_EXIT_ROOM_RSP = 7909;
  CMD_MAHOU_CARD_GET_CUR_SITE_INFO_REQ = 7910;
  CMD_MAHOU_CARD_GET_CUR_SITE_INFO_RSP = 7911;
  CMD_MAHOU_CARD_HAND_CARD_CHANGE_NOTIFY = 7912;
  CMD_MAHOU_CARD_EXCHANGE_CARD_REQ = 7913;
  CMD_MAHOU_CARD_EXCHANGE_CARD_RSP = 7914;
  CMD_MAHOU_CARD_DISCARD_CARD_REQ = 7915;
  CMD_MAHOU_CARD_DISCARD_CARD_RSP = 7916;
  CMD_MAHOU_CARD_LEVEL_UP_CARD_REQ = 7917;
  CMD_MAHOU_CARD_LEVEL_UP_CARD_RSP = 7918;
  CMD_MAHOU_CARD_SET_BATTLE_CARD_REQ = 7919;
  CMD_MAHOU_CARD_SET_BATTLE_CARD_RSP = 7920;
  CMD_MAHOU_CARD_RECALL_BATTLE_CARD_REQ = 7921;
  CMD_MAHOU_CARD_RECALL_BATTLE_CARD_RSP = 7922;
  CMD_MAHOU_CARD_SELECT_PROPHESY_REQ = 7923;
  CMD_MAHOU_CARD_SELECT_PROPHESY_RSP = 7924;
  CMD_MAHOU_CARD_EXIT_SITE_REQ = 7925;
  CMD_MAHOU_CARD_EXIT_SITE_RSP = 7926;
  CMD_MAHOU_CARD_CHOOSE_EVENT_OPTION_REQ = 7927;
  CMD_MAHOU_CARD_CHOOSE_EVENT_OPTION_RSP = 7928;
  CMD_MAHOU_CARD_EVENT_NOTIFY = 7929;
  CMD_MAHOU_CARD_BATTLE_BEGIN_REQ = 7930;
  CMD_MAHOU_CARD_BATTLE_BEGIN_RSP = 7931;
  CMD_MAHOU_CARD_BATTLE_END_REQ = 7932;
  CMD_MAHOU_CARD_BATTLE_END_RSP = 7933;
  CMD_MAHOU_CARD_UNLOCK_DAILY_SITE_REQ = 7934;
  CMD_MAHOU_CARD_UNLOCK_DAILY_SITE_RSP = 7935;
  CMD_MAHOU_CARD_GET_DAILY_SITE_RANK_REQ = 7936;
  CMD_MAHOU_CARD_GET_DAILY_SITE_RANK_RSP = 7937;
  CMD_MAHOU_CARD_OVERDRAWN_NOTIFY = 7938;
}

enum MahouCardSiteType {
  MAHOU_CARD_SITE_TYPE_NONE = 0;
  MAHOU_CARD_SITE_TYPE_TUTORIAL = 1;
  MAHOU_CARD_SITE_TYPE_NORMAL = 2;
  MAHOU_CARD_SITE_TYPE_TOWER = 3;
  MAHOU_CARD_SITE_TYPE_DAILY = 4;
  MAHOU_CARD_SITE_TYPE_ENTRY = 5;
}

enum MahouCardRoomType {
  MAHOU_CARD_ROOM_TYPE_NONE = 0;
  MAHOU_CARD_ROOM_TYPE_NORMAL = 1;
  MAHOU_CARD_ROOM_TYPE_BOSS = 2;
  MAHOU_CARD_ROOM_TYPE_EVENT = 3;
  MAHOU_CARD_ROOM_TYPE_REWARD = 4;
}

enum MahouCardEventType {
  MAHOU_CARD_EVENT_TYPE_NONE = 0;
  MAHOU_CARD_EVENT_TYPE_BATTLE = 1;
  MAHOU_CARD_EVENT_TYPE_DRAW = 2;
  MAHOU_CARD_EVENT_TYPE_LEVEL_UP_RANDOM_BATTLE_CARD = 6;
  MAHOU_CARD_EVENT_TYPE_ADD_EXCHANGE_TIMES = 9;
  MAHOU_CARD_EVENT_TYPE_DECREASE_EXCHANGE_TIMES = 10;
  MAHOU_CARD_EVENT_TYPE_COPY_FIRST_BATTLE_CARD = 11;
  MAHOU_CARD_EVENT_TYPE_COPY_LAST_BATTLE_CARD = 12;
  MAHOU_CARD_EVENT_TYPE_LEVEL_UP_RANDOM_CARD = 13;
  MAHOU_CARD_EVENT_TYPE_CHANGE_ALL_CARD_BY_LEVEL = 14;
  MAHOU_CARD_EVENT_TYPE_CHANGE_ALL_CARD_RANDOM = 15;
  MAHOU_CARD_EVENT_TYPE_SET_BATTLE_HP = 16;
  MAHOU_CARD_EVENT_TYPE_ADD_BATTLE_HP = 17;
  MAHOU_CARD_EVENT_TYPE_DECREASE_BATTLE_HP = 18;
  MAHOU_CARD_EVENT_TYPE_ADD_SPECIFY_CARD = 19;
  MAHOU_CARD_EVENT_TYPE_TRIGGER_GROWTH = 20;
  MAHOU_CARD_EVENT_TYPE_ADD_TAG_TO_ALL_CARD = 21;
  MAHOU_CARD_EVENT_TYPE_ADD_CARD_POOL = 23;
  MAHOU_CARD_EVENT_TYPE_TRIGGER_PROPHESY_POOL = 25;
  MAHOU_CARD_EVENT_TYPE_CLEAR_CUR_EVENT = 100;
  MAHOU_CARD_EVENT_TYPE_ADD_BUFF = 3;
  MAHOU_CARD_EVENT_TYPE_ADD_ROOM_SUCC_EVENT = 7;
  MAHOU_CARD_EVENT_TYPE_ADD_ROOM_FAIL_EVENT = 8;
  MAHOU_CARD_EVENT_TYPE_GET_ALL_ROLE_PROPHESY = 24;
  MAHOU_CARD_EVENT_TYPE_ADD_DISCARD_TIMES = 26;
  MAHOU_CARD_EVENT_TYPE_JUDGE_AND_TRIGGER_DISCARD_EVENT = 27;
  MAHOU_CARD_EVENT_TYPE_JUDGE_AND_TRIGGER_EXCHANGE_EVENT = 28;
  MAHOU_CARD_EVENT_TYPE_ADD_DISCARD_EVENT = 29;
  MAHOU_CARD_EVENT_TYPE_ADD_EXCHANGE_EVENT = 30;
  MAHOU_CARD_EVENT_TYPE_EVENT_GROUP = 101;
  MAHOU_CARD_EVENT_TYPE_TRIGGER_RANDOM_EVENT = 22;
  MAHOU_CARD_EVENT_TYPE_DRAW_AND_SELECT = 5;
  MAHOU_CARD_EVENT_TYPE_OPTIONAL_EVENT = 102;
  MAHOU_CARD_EVENT_TYPE_LOST_CARD_WITH_TAG = 201;
  MAHOU_CARD_EVENT_TYPE_LOST_CARD_AND_TRIGGER_EVENT = 202;
  MAHOU_CARD_EVENT_TYPE_DRAW_SPECIFY_QUALITY_AND_SELECT_FROM_CUR_POOL = 203;
  MAHOU_CARD_EVENT_TYPE_DRAW_MAX_QUALITY_AND_SELECT_FROM_CUR_POOL = 204;
  MAHOU_CARD_EVENT_TYPE_DAILY_SITE_DRAW = 205;
  MAHOU_CARD_EVENT_TYPE_COPY_CHOSEN_CARD = 206;
  MAHOU_CARD_EVENT_TYPE_TAKE_FROM_AREA_STORAGE = 207;
  MAHOU_CARD_EVENT_TYPE_SAVE_TO_AREA_STORAGE = 208;
}

enum MahouCardBuffType {
  MAHOU_CARD_BUFF_TYPE_NONE = 0;
  MAHOU_CARD_BUFF_TYPE_ADD_BATTLE_HP = 1;
  MAHOU_CARD_BUFF_TYPE_ADD_DRAW_NUM = 2;
  MAHOU_CARD_BUFF_TYPE_ADD_EXCHANGE_TIMES = 3;
  MAHOU_CARD_BUFF_TYPE_ADD_HP = 4;
  MAHOU_CARD_BUFF_TYPE_GOING_SECOND = 5;
  MAHOU_CARD_BUFF_TYPE_ADD_PROPHESY_CHOICE_NUM = 6;
  MAHOU_CARD_BUFF_TYPE_ADDITIONAL_CARD_POOL = 7;
  MAHOU_CARD_BUFF_TYPE_EVENT_TRIGGER = 8;
  MAHOU_CARD_BUFF_TYPE_DECREASE_HP = 9;
  MAHOU_CARD_BUFF_TYPE_ADD_MP = 10;
  MAHOU_CARD_BUFF_TYPE_DECREASE_DISCARD_GOAL = 11;
  MAHOU_CARD_BUFF_TYPE_DECREASE_BATTLE_HP = 12;
  MAHOU_CARD_BUFF_TYPE_CLIENT_BUFF_1001 = 1001;
  MAHOU_CARD_BUFF_TYPE_CLIENT_BUFF_1002 = 1002;
  MAHOU_CARD_BUFF_TYPE_CLIENT_BUFF_1003 = 1003;
  MAHOU_CARD_BUFF_TYPE_CLIENT_BUFF_1004 = 1004;
  MAHOU_CARD_BUFF_TYPE_CLIENT_BUFF_1005 = 1005;
}

enum MahouCardConditionType {
  MAHOU_CARD_CONDITION_TYPE_NONE = 0;
  MAHOU_CARD_CONDITION_TYPE_EXCHANGE_TIMES_GT = 1;
  MAHOU_CARD_CONDITION_TYPE_BATTLE_HP_GT = 2;
  MAHOU_CARD_CONDITION_TYPE_HAS_CARD_ID = 3;
  MAHOU_CARD_CONDITION_TYPE_HAS_CARD_TAG = 4;
  MAHOU_CARD_CONDITION_TYPE_HAS_ANY_CARD = 5;
}

enum MahouCardTiming {
  MAHOU_CARD_TIMING_NONE = 0;
  MAHOU_CARD_TIMING_ON_EXCHANGE = 2;
  MAHOU_CARD_TIMING_ON_DISCARD = 3;
}

enum MahouCardTag {
  MAHOU_CARD_TAG_NONE = 0;
  MAHOU_CARD_TAG_1 = 1;
  MAHOU_CARD_TAG_2 = 2;
  MAHOU_CARD_TAG_3 = 3;
  MAHOU_CARD_TAG_4 = 4;
  MAHOU_CARD_TAG_5 = 5;
  MAHOU_CARD_TAG_6 = 6;
  MAHOU_CARD_TAG_7 = 7;
  MAHOU_CARD_TAG_8 = 8;
  MAHOU_CARD_TAG_ODD = 9;
  MAHOU_CARD_TAG_EVEN = 10;
  MAHOU_CARD_TAG_11 = 11;
  MAHOU_CARD_TAG_12 = 12;
  MAHOU_CARD_TAG_13 = 13;
  MAHOU_CARD_TAG_14 = 14;
  MAHOU_CARD_TAG_15 = 15;
  MAHOU_CARD_TAG_16 = 16;
  MAHOU_CARD_TAG_17 = 17;
  MAHOU_CARD_TAG_GROWTH = 21;
  MAHOU_CARD_TAG_WILD = 22;
  MAHOU_CARD_TAG_ONLY_IN_HAND = 23;
}

message ClientMailKey {
  ClientMailType type = 1;
  uint32 id = 2;
}

message ClientMailAttachmentItem {
  ClientMailKey key = 1;
  uint32 item_id = 2;
}

message ClientMail {
  ClientMailKey key = 1;
  string title = 2;
  string content = 3;
  string sender = 4;
  uint32 time = 5;
  MailAttachment attachment = 6;
  bool is_attachment_got = 7;
  uint32 expire_time = 8;
  repeated string content_param_list = 9;
  uint32 template_id = 10;
  bool is_read = 11;
  uint32 mail_style = 12;
  string img_path = 13;
  bool is_favorite = 14;
}

// CmdID: 3800
message GetClientMailDataReq {
  uint32 start = 1;
  uint32 stop = 2;
  ClientMailFilterType filter_type = 3;
}

message ClientMailStyleInfo {
  uint32 mail_style = 1;
  uint32 untaken_num = 2;
}

message ClientMailInfo {
  uint32 total_num = 1;
  uint32 can_fast_delete_num = 2;
  repeated ClientMailStyleInfo mail_style_info_list = 3;
}

// CmdID: 3801
message GetClientMailDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    POS_INVALID = 2;
    REPEATED_REQ = 3;
  }

  GetClientMailDataRsp.Retcode retcode = 1;
  repeated ClientMail mail_list = 2;
  bool is_end = 3;
  uint32 start = 5;
  repeated ClientMail notice_mail_list = 6;
  ClientMailFilterType filter_type = 7;
  ClientMailInfo client_mail_info = 8;
}

// CmdID: 3802
message TakeClientMailAttachmentReq {
  repeated ClientMailKey mail_key_list = 1;
  bool is_show_attachment = 2;
}

// CmdID: 3803
message TakeClientMailAttachmentRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    REPEATED_REQ = 2;
    PART_FAIL = 3;
    FEATURE_CLOSE = 4;
  }

  TakeClientMailAttachmentRsp.Retcode retcode = 1;
  repeated ClientMailKey succ_mail_key_list = 2;
  bool is_show_attachment = 3;
  MailAttachment mail_attachment = 4;
  bool is_take_all = 5;
  repeated ClientMailAttachmentItem fail_mail_list = 6;
}

// CmdID: 3804
message MarkReadClientMailReq {
  ClientMailKey mail_key = 1;
}

// CmdID: 3805
message MarkReadClientMailRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  MarkReadClientMailRsp.Retcode retcode = 1;
  ClientMailKey mail_key = 2;
}

// CmdID: 3806
message DelClientMailReq {
  ClientMailKey mail_key = 1;
  bool is_one_click_delete = 2;
}

// CmdID: 3807
message DelClientMailRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MAIL_NOT_EXIST = 2;
    MAIL_NOT_DELETE = 3;
  }

  DelClientMailRsp.Retcode retcode = 1;
  ClientMailKey mail_key = 2;
  bool is_one_click_delete = 3;
}

// CmdID: 3808
message NewClientMailNotify {
  ClientMailType type = 1;
}

// CmdID: 3809
message SetClientMailFavoriteReq {
  ClientMailKey mail_key = 1;
  bool is_favorite = 2;
}

// CmdID: 3810
message SetClientMailFavoriteRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    DAILY_LIMIT = 2;
  }

  SetClientMailFavoriteRsp.Retcode retcode = 1;
  ClientMailKey mail_key = 2;
  bool is_favorite = 3;
}

enum CmdTypeMail {
  CMD_TYPE_MAIL_NONE = 0;
  CMD_GET_CLIENT_MAIL_DATA_REQ = 3800;
  CMD_GET_CLIENT_MAIL_DATA_RSP = 3801;
  CMD_TAKE_CLIENT_MAIL_ATTACHMENT_REQ = 3802;
  CMD_TAKE_CLIENT_MAIL_ATTACHMENT_RSP = 3803;
  CMD_MARK_CLIENT_MAIL_READ_REQ = 3804;
  CMD_MARK_CLIENT_MAIL_READ_RSP = 3805;
  CMD_DEL_CLIENT_MAIL_REQ = 3806;
  CMD_DEL_CLIENT_MAIL_RSP = 3807;
  CMD_NEW_CLIENT_MAIL_NOTIFY = 3808;
  CMD_SET_CLIENT_MAIL_FAVORITE_REQ = 3809;
  CMD_SET_CLIENT_MAIL_FAVORITE_RSP = 3810;
}

enum ClientMailType {
  CLIENT_MAIL_NONE = 0;
  CLIENT_MAIL_MAIL = 1;
  CLIENT_MAIL_NOTICE = 2;
}

enum ClientMailFilterType {
  CLIENT_MAIL_FILTER_TYPE_ALL = 0;
  CLIENT_MAIL_FILTER_TYPE_IMPORTANT = 1;
  CLIENT_MAIL_FILTER_TYPE_FAVORITE = 2;
}

// CmdID: 8050
message MarblesShootGetActivityReq {
  uint32 activity_id = 1;
}

message MarblesShootActivity {
  uint32 activity_id = 1;
  repeated MarblesShootAvatar avatar_list = 2;
  MarblesShootGame story_game = 3;
  MarblesShootGame daily_game = 4;
  MarblesShootGame challenge_game = 5;
  repeated MarblesShootGameSettleInfo game_settle_info_list = 6;
  uint32 daily_game_config_id = 7;
  repeated Material daily_game_has_drop_material_list = 8;
  MarblesShootWiki wiki = 9;
}

// CmdID: 8051
message MarblesShootGetActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  MarblesShootGetActivityRsp.Retcode retcode = 1;
  MarblesShootActivity activity = 2;
  uint32 activity_id = 3;
}

message MarblesShootGameSettleInfo {
  uint32 game_id = 1;
  uint32 last_fail_room_id = 2;
  repeated Material has_drop_material_list = 3;
}

message MarblesShootAvatar {
  uint32 avatar_id = 1;
  uint32 level = 2;
}

message MarblesShootWiki {
  repeated uint32 ball_list = 1;
  repeated uint32 peg_list = 2;
  repeated uint32 treasure_list = 3;
}

message MarblesShootBall {
  uint32 unique_id = 1;
  uint32 ball_id = 2;
  uint32 level = 3;
}

message MarblesShootTreasure {
  uint32 treasure_id = 1;
  uint32 effect_times = 2;
}

message MarblesShootGameRewardItem {
  uint32 treasure_id = 1;
  uint32 coin_num = 2;
}

message MarblesShootGameCurRoomInfo {
  uint32 cur_room_id = 1;
  MarblesShootRoomType room_type = 2;
  MarblesShootRoomStatus room_status = 3;
  uint32 battle_id = 4;
  uint32 shop_operate_times = 5;
  repeated MarblesShootBall can_buy_ball_list = 6;
  repeated uint32 bought_ball_idx_list = 7;
  repeated uint32 can_select_treasure_list = 8;
  repeated MarblesShootGameRewardItem can_select_reward_item_list = 9;
  uint32 event_group_id = 10;
  repeated uint32 can_trigger_event_id_list = 11;
  repeated MarblesShootInitItem init_ball_list = 12;
  repeated MarblesShootInitItem init_treasure_list = 13;
  uint32 init_ball_select_num = 14;
  uint32 init_treasure_select_num = 15;
}

message MarblesShootInitItem {
  MarblesShootBall ball = 1;
  uint32 treasure_id = 2;
  uint32 weight = 3;
}

message MarblesShootGame {
  uint32 game_id = 1;
  MarblesShootAvatar avatar = 2;
  uint32 avatar_hp = 3;
  uint32 coin_num = 4;
  repeated MarblesShootTreasure treasure_list = 5;
  repeated MarblesShootBall ball_list = 6;
  MarblesShootGameCurRoomInfo cur_room_info = 7;
  repeated uint32 passed_room_id_list = 8;
  uint32 shop_action_random = 9;
  uint32 daily_game_config_id = 10;
  string game_transaction_str = 11;
  uint32 total_add_coin_num = 12;
}

// CmdID: 8052
message MarblesShootAvatarLevelUpReq {
  uint32 activity_id = 1;
  uint32 avatar_id = 2;
  uint32 target_level = 3;
}

// CmdID: 8053
message MarblesShootAvatarLevelUpRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    MATERIAL_LACK = 3;
    TARGET_LEVEL_ERROR = 4;
    PRE_SITE_ERROR = 5;
  }

  MarblesShootAvatarLevelUpRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  MarblesShootAvatar avatar = 3;
}

// CmdID: 8054
message MarblesShootGetGameReq {
  uint32 activity_id = 1;
  uint32 game_id = 2;
}

// CmdID: 8055
message MarblesShootGetGameRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    NOT_IN_GAME = 3;
  }

  MarblesShootGetGameRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  MarblesShootGame game = 3;
}

// CmdID: 8056
message MarblesShootBeginGameReq {
  uint32 activity_id = 1;
  uint32 game_id = 2;
  bool is_from_last_fail_room = 3;
  uint32 avatar_id = 4;
}

// CmdID: 8057
message MarblesShootBeginGameRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    SITE_MISMATCH = 3;
    IN_OTHER_GAME = 4;
    AVATAR_ERROR = 5;
    IN_CD = 6;
  }

  MarblesShootBeginGameRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  MarblesShootGame game = 3;
}

// CmdID: 8058
message MarblesShootEndGameReq {
  uint32 activity_id = 1;
  uint32 game_id = 2;
}

message MarblesShootGameStatistics {
  uint32 total_round = 1;
  uint32 max_round_damage = 2;
  MarblesShootBall mvp_ball = 3;
  uint32 max_hit_combo = 4;
  uint32 total_score = 5;
}

// CmdID: 8059
message MarblesShootEndGameRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  MarblesShootEndGameRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  repeated Material drop_material_list = 3;
  MarblesShootGameStatistics statistics = 4;
  StageEndStatus end_status = 5;
  uint32 ball_num = 6;
}

// CmdID: 8060
message MarblesShootFinishRoomReq {
  uint32 activity_id = 1;
  uint32 game_id = 2;
  uint32 next_room_id = 3;
  uint32 avatar_hp = 4;
  uint32 cur_coin_num = 5;
}

// CmdID: 8061
message MarblesShootFinishRoomRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    ROOM_ERROR = 3;
    GAME_ERROR = 4;
    ROOM_STATUS_ERROR = 5;
  }

  MarblesShootFinishRoomRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
}

// CmdID: 8062
message MarblesShootTriggerEventReq {
  uint32 activity_id = 1;
  uint32 game_id = 2;
  uint32 event_id = 3;
}

// CmdID: 8063
message MarblesShootTriggerEventRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    ROOM_STATUS_ERROR = 3;
    CONDITION_ERROR = 4;
  }

  MarblesShootTriggerEventRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 event_id = 3;
  repeated MarblesShootBall add_ball_list = 4;
  repeated MarblesShootTreasure add_treasure_list = 5;
  repeated MarblesShootBall del_ball_list = 6;
  repeated MarblesShootTreasure del_treasure_list = 7;
  repeated MarblesShootBall level_up_ball_list = 8;
}

// CmdID: 8064
message MarblesShootFinishBattleReq {
  uint32 activity_id = 1;
  uint32 game_id = 2;
  uint32 avatar_hp = 3;
  uint32 room_round = 4;
  uint32 max_round_damage = 5;
  uint32 mvp_ball_unique_id = 6;
  uint32 max_hit_combo = 7;
  uint32 battle_score = 8;
  uint32 cur_coin_num = 9;
}

// CmdID: 8065
message MarblesShootFinishBattleRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    ROOM_STATUS_ERROR = 3;
  }

  MarblesShootFinishBattleRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
}

// CmdID: 8066
message MarblesShootSelectRewardReq {
  uint32 activity_id = 1;
  uint32 game_id = 2;
  uint32 reward_idx = 3;
  uint32 cur_coin_num = 4;
}

// CmdID: 8067
message MarblesShootSelectRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    ROOM_STATUS_ERROR = 3;
  }

  MarblesShootSelectRewardRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
}

// CmdID: 8068
message MarblesShootShopOperateReq {
  enum OperateType {
    OPERATE_NONE = 0;
    OPERATE_BUY_BALL = 1;
    OPERATE_LEVEL_UP_BALL = 2;
    OPERATE_DEL_BALL = 3;
    OPERATE_ADD_HP = 4;
    OPERATE_CHOOSE_TREASURE = 5;
  }

  uint32 activity_id = 1;
  uint32 game_id = 2;
  MarblesShootShopOperateReq.OperateType operate_type = 3;
  uint32 operate_param = 4;
  uint32 shop_action_random = 5;
}

// CmdID: 8069
message MarblesShootShopOperateRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    ITEM_NOT_FOUND = 3;
    LACK_COIN = 4;
    BALL_NUM_ERROR = 5;
    ACTION_RANDOM_ERROR = 6;
    ROOM_STATUS_ERROR = 7;
  }

  MarblesShootShopOperateRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 shop_action_random = 3;
}

// CmdID: 8070
message MarblesShootGetRankReq {
  uint32 activity_id = 1;
}

// CmdID: 8071
message MarblesShootGetRankRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 3;
    NO_RANK = 4;
  }

  MarblesShootGetRankRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  RankShowData rank_data = 3;
  uint32 rank_percent = 4;
  uint32 rank = 5;
}

// CmdID: 8072
message MarblesShootSelectInitItemReq {
  uint32 activity_id = 1;
  uint32 game_id = 2;
  repeated MarblesShootBall ball_list = 3;
  repeated uint32 treasure_list = 4;
}

// CmdID: 8073
message MarblesShootSelectInitItemRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 3;
    ROOM_STATUS_ERROR = 4;
    SELECT_ITEM_ERROR = 5;
  }

  MarblesShootSelectInitItemRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
}

// CmdID: 8074
message MarblesShootGetWikiReq {
  uint32 activity_id = 1;
}

// CmdID: 8075
message MarblesShootGetWikiRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 3;
  }

  MarblesShootGetWikiRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  MarblesShootWiki wiki = 3;
}

enum CmdTypeMarblesshoot {
  CMD_TYPE_MARBLESSHOOT_NONE = 0;
  CMD_MARBLES_SHOOT_GET_ACTIVITY_REQ = 8050;
  CMD_MARBLES_SHOOT_GET_ACTIVITY_RSP = 8051;
  CMD_MARBLES_SHOOT_AVATAR_LEVEL_UP_REQ = 8052;
  CMD_MARBLES_SHOOT_AVATAR_LEVEL_UP_RSP = 8053;
  CMD_MARBLES_SHOOT_GET_GAME_REQ = 8054;
  CMD_MARBLES_SHOOT_GET_GAME_RSP = 8055;
  CMD_MARBLES_SHOOT_BEGIN_GAME_REQ = 8056;
  CMD_MARBLES_SHOOT_BEGIN_GAME_RSP = 8057;
  CMD_MARBLES_SHOOT_END_GAME_REQ = 8058;
  CMD_MARBLES_SHOOT_END_GAME_RSP = 8059;
  CMD_MARBLES_SHOOT_FINISH_ROOM_REQ = 8060;
  CMD_MARBLES_SHOOT_FINISH_ROOM_RSP = 8061;
  CMD_MARBLES_SHOOT_TRIGGER_EVENT_REQ = 8062;
  CMD_MARBLES_SHOOT_TRIGGER_EVENT_RSP = 8063;
  CMD_MARBLES_SHOOT_FINISH_BATTLE_REQ = 8064;
  CMD_MARBLES_SHOOT_FINISH_BATTLE_RSP = 8065;
  CMD_MARBLES_SHOOT_SELECT_REWARD_REQ = 8066;
  CMD_MARBLES_SHOOT_SELECT_REWARD_RSP = 8067;
  CMD_MARBLES_SHOOT_SHOP_OPERATE_REQ = 8068;
  CMD_MARBLES_SHOOT_SHOP_OPERATE_RSP = 8069;
  CMD_MARBLES_SHOOT_GET_RANK_REQ = 8070;
  CMD_MARBLES_SHOOT_GET_RANK_RSP = 8071;
  CMD_MARBLES_SHOOT_SELECT_INIT_ITEM_REQ = 8072;
  CMD_MARBLES_SHOOT_SELECT_INIT_ITEM_RSP = 8073;
  CMD_MARBLES_SHOOT_GET_WIKI_REQ = 8074;
  CMD_MARBLES_SHOOT_GET_WIKI_RSP = 8075;
}

enum MarblesShootGameType {
  MARBLES_SHOOT_GAME_TYPE_NONE = 0;
  MARBLES_SHOOT_GAME_TYPE_STORY = 1;
  MARBLES_SHOOT_GAME_TYPE_CHALLENGE = 2;
  MARBLES_SHOOT_GAME_TYPE_DAILY = 3;
}

enum MarblesShootEventChangeType {
  MARBLES_SHOOT_EVENT_CHANGE_DEL = 0;
  MARBLES_SHOOT_EVENT_CHANGE_ADD = 1;
}

enum MarblesShootEventType {
  MARBLES_SHOOT_EVENT_TYPE_NONE = 0;
  MARBLES_SHOOT_EVENT_EMPTY = 1;
  MARBLES_SHOOT_EVENT_AND = 2;
  MARBLES_SHOOT_EVENT_WEIGHT_OR = 3;
  MARBLES_SHOOT_EVENT_CHANGE_HP_BY_VALUE = 4;
  MARBLES_SHOOT_EVENT_CHANGE_HP_BY_PERCENT = 5;
  MARBLES_SHOOT_EVENT_CHANGE_COIN_BY_VALUE = 6;
  MARBLES_SHOOT_EVENT_ADD_BALL = 7;
  MARBLES_SHOOT_EVENT_DEL_BALL = 8;
  MARBLES_SHOOT_EVENT_ADD_TREASURE = 9;
  MARBLES_SHOOT_EVENT_DEL_TREASURE = 10;
  MARBLES_SHOOT_EVENT_ENTER_BATTLE = 11;
  MARBLES_SHOOT_EVENT_RECOVER_TREASURE_EFFECT_TIMES = 12;
  MARBLES_SHOOT_EVENT_RANDOM_ADD_BALL = 13;
  MARBLES_SHOOT_EVENT_RANDOM_LEVEL_UP_BALL = 14;
}

enum MarblesShootEventConditionType {
  MARBLES_SHOOT_EVENT_CONDITION_TYPE_NONE = 0;
  MARBLES_SHOOT_EVENT_CONDITION_USE_AVATAR = 1;
  MARBLES_SHOOT_EVENT_CONDITION_HAS_BALL = 2;
  MARBLES_SHOOT_EVENT_CONDITION_COIN_GREATER_EQUAL = 3;
  MARBLES_SHOOT_EVENT_CONDITION_HAS_TREASURE = 4;
  MARBLES_SHOOT_EVENT_CONDITION_NOT_HAS_TREASURE = 5;
  MARBLES_SHOOT_EVENT_CONDITION_HAS_TRIGGER_EVENT = 6;
  MARBLES_SHOOT_EVENT_CONDITION_HAS_FINISH_BATTLE = 7;
  MARBLES_SHOOT_EVENT_CONDITION_BALL_NUM_LESS_THAN = 8;
  MARBLES_SHOOT_EVENT_CONDITION_BALL_NUM_GREATER_THAN = 9;
}

enum MarblesShootRoomStatus {
  MARBLES_SHOOT_ROOM_STATUS_NONE = 0;
  MARBLES_SHOOT_ROOM_STATUS_IN_BATTLE = 1;
  MARBLES_SHOOT_ROOM_STATUS_END_BATTLE = 2;
  MARBLES_SHOOT_ROOM_STATUS_WAIT_TRIGGER_EVENT = 3;
  MARBLES_SHOOT_ROOM_STATUS_HAS_TRIGGER_EVENT = 4;
  MARBLES_SHOOT_ROOM_STATUS_WAIT_SELECT_REWARD = 5;
  MARBLES_SHOOT_ROOM_STATUS_HAS_SELECT_REWARD = 6;
  MARBLES_SHOOT_ROOM_STATUS_WAIT_SELECT_INIT_ITEM = 7;
}

enum MarblesShootRoomType {
  MARBLES_SHOOT_ROOM_TYPE_NONE = 0;
  MARBLES_SHOOT_ROOM_TYPE_BATTLE = 1;
  MARBLES_SHOOT_ROOM_TYPE_EVENT = 2;
  MARBLES_SHOOT_ROOM_TYPE_REWARD = 3;
}

message MatchThreeRole {
  uint32 role_id = 1;
  uint32 level = 2;
}

message MatchThreeGem {
  uint32 gem_id = 1;
  uint32 level = 2;
}

message MatchThreeGemGachaPool {
  uint32 gacha_pool_id = 1;
  MatchThreeGemGachaPoolStatus status = 2;
  repeated uint32 has_got_gem_list = 3;
}

// CmdID: 7601
message MatchThreeGetActivityReq {
  uint32 activity_id = 1;
}

message MatchThreeHasGotDailyMaterial {
  uint32 material_id = 1;
  uint32 num = 2;
}

message MatchThreeActivity {
  uint32 activity_id = 1;
  repeated MatchThreeRole role_list = 2;
  repeated MatchThreeGem gem_list = 3;
  repeated MatchThreeHasGotDailyMaterial has_got_daily_material_list = 4;
  repeated uint32 item_list = 5;
  uint32 cur_schedule_id = 6;
  repeated uint32 passed_room_id_list = 7;
  uint32 max_tower_floor = 8;
}

// CmdID: 7602
message MatchThreeGetActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  MatchThreeGetActivityRsp.Retcode retcode = 1;
  MatchThreeActivity activity = 2;
}

// CmdID: 7603
message MatchThreeRoleLevelUpReq {
  uint32 activity_id = 1;
  uint32 role_id = 2;
  uint32 target_level = 3;
}

// CmdID: 7604
message MatchThreeRoleLevelUpRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ROLE_NOT_FOUND = 2;
    TARGET_LEVEL_ERROR = 3;
    MATERIAL_LACK = 4;
  }

  MatchThreeRoleLevelUpRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  MatchThreeRole role = 3;
}

// CmdID: 7605
message MatchThreeGemGachaDisplayReq {
  uint32 activity_id = 1;
}

// CmdID: 7606
message MatchThreeGemGachaDisplayRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  MatchThreeGemGachaDisplayRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 gacha_random = 3;
  repeated MatchThreeGemGachaPool pool_list = 4;
}

// CmdID: 7607
message MatchThreeGemGachaReq {
  uint32 activity_id = 1;
  uint32 gacha_random = 2;
}

// CmdID: 7608
message MatchThreeGemGachaRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NO_POOL = 2;
    MATERIAL_LACK = 3;
    ACTION_RANDOM_ERROR = 4;
    GEM_ERROR = 5;
  }

  MatchThreeGemGachaRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 new_gacha_random = 3;
  uint32 pool_id = 4;
  MatchThreeGem gem = 5;
  repeated MatchThreeGemGachaPool pool_list = 6;
}

// CmdID: 7609
message MatchThreeGetRankReq {
  uint32 activity_id = 1;
  uint32 room_id = 2;
}

// CmdID: 7610
message MatchThreeGetRankRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    SCHEDULE_ERROR = 2;
  }

  MatchThreeGetRankRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  RankShowData rank_data = 3;
  uint32 rank_percent = 4;
  uint32 room_id = 5;
}

// CmdID: 7611
message MatchThreeRoomBeginReq {
  uint32 tale_id = 1;
  uint32 activity_id = 2;
  MatchThreeRoomType room_type = 3;
  uint32 room_id = 4;
  uint32 role_id = 5;
  repeated uint32 item_list = 6;
}

// CmdID: 7612
message MatchThreeRoomBeginRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ACTIVITY_NOT_EXIST = 2;
    ROLE_ERROR = 3;
    ITEM_ERROR = 4;
    ROOM_ERROR = 5;
  }

  MatchThreeRoomBeginRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 room_id = 3;
  string transaction_str = 4;
  uint32 dynamic_level = 5;
}

// CmdID: 7613
message MatchThreeRoomEndReq {
  enum Status {
    WIN = 0;
    LOSE = 1;
    ABANDON = 2;
  }

  uint32 tale_id = 1;
  uint32 activity_id = 2;
  MatchThreeRoomEndReq.Status status = 3;
  uint32 room_id = 4;
  MatchThreeRoomType room_type = 5;
  uint32 score = 6;
  uint32 battle_time = 7;
  uint32 floor_id = 8;
}

// CmdID: 7614
message MatchThreeRoomEndRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ACTIVITY_NOT_EXIST = 2;
    ROOM_NOT_BEGIN = 3;
    ROOM_ERROR = 4;
  }

  MatchThreeRoomEndRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 room_id = 3;
  repeated DropItem daily_drop_item_list = 4;
  bool is_first_win = 5;
  uint32 floor_id = 6;
  RewardData reward_data = 7;
}

enum CmdTypeMatchthree {
  CMD_TYPE_MATCHTHREE_NONE = 0;
  CMD_MATCH_THREE_GET_ACTIVITY_REQ = 7601;
  CMD_MATCH_THREE_GET_ACTIVITY_RSP = 7602;
  CMD_MATCH_THREE_ROLE_LEVEL_UP_REQ = 7603;
  CMD_MATCH_THREE_ROLE_LEVEL_UP_RSP = 7604;
  CMD_MATCH_THREE_GEM_GACHA_DISPLAY_REQ = 7605;
  CMD_MATCH_THREE_GEM_GACHA_DISPLAY_RSP = 7606;
  CMD_MATCH_THREE_GEM_GACHA_REQ = 7607;
  CMD_MATCH_THREE_GEM_GACHA_RSP = 7608;
  CMD_MATCH_THREE_GET_RANK_REQ = 7609;
  CMD_MATCH_THREE_GET_RANK_RSP = 7610;
  CMD_MATCH_THREE_ROOM_BEGIN_REQ = 7611;
  CMD_MATCH_THREE_ROOM_BEGIN_RSP = 7612;
  CMD_MATCH_THREE_ROOM_END_REQ = 7613;
  CMD_MATCH_THREE_ROOM_END_RSP = 7614;
}

enum MatchThreeGemGachaPoolStatus {
  MATCH_THREE_GEM_GACHA_POOL_STATUS_NONE = 0;
  MATCH_THREE_GEM_GACHA_POOL_LOCKED = 1;
  MATCH_THREE_GEM_GACHA_POOL_DOING = 2;
  MATCH_THREE_GEM_GACHA_POOL_FINISHED = 3;
}

enum MatchThreeRoomType {
  MATCH_THREE_ROOM_NONE = 0;
  MATCH_THREE_ROOM_MAIN = 1;
  MATCH_THREE_ROOM_SIDE = 2;
  MATCH_THREE_ROOM_DAILY = 3;
  MATCH_THREE_ROOM_TOWER = 4;
}

// CmdID: 7000
message MirageGetActivityReq {
}

message MirageTalent {
  uint32 talent_id = 1;
  uint32 level = 2;
}

message MirageChallengeStageRecord {
  uint32 stage_id = 1;
  uint32 max_score = 2;
  repeated uint32 core_skill_list = 3;
}

message MirageActivity {
  uint32 schedule_id = 1;
  uint32 daily_currency_drop_num = 2;
  repeated MirageTalent talent_list = 3;
  repeated MirageChallengeStageRecord challenge_record_list = 4;
  uint32 cur_rotate_index = 5;
  uint32 cur_rotate_close_time = 6;
  uint32 cur_daily_drop_limit_reset_times = 7;
}

// CmdID: 7001
message MirageGetActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  MirageGetActivityRsp.Retcode retcode = 1;
  MirageActivity activity = 2;
}

// CmdID: 7002
message MirageTalentLevelUpReq {
  uint32 schedule_id = 1;
  uint32 talent_id = 2;
}

// CmdID: 7003
message MirageTalentLevelUpRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    TALENT_NOT_EXIST = 3;
    TALENT_LOCKED = 4;
    MATERIAL_LACK = 5;
    LEVEL_LIMIT = 6;
  }

  MirageTalentLevelUpRsp.Retcode retcode = 1;
  uint32 talent_id = 2;
  uint32 cur_level = 3;
}

// CmdID: 7004
message MirageReportStageBeginReq {
  uint32 schedule_id = 1;
  uint32 stage_id = 2;
  uint32 battle_avatar_id = 3;
  repeated uint32 support_avatar_list = 4;
  repeated uint32 core_skill_list = 5;
  uint32 difficulty_id = 6;
}

// CmdID: 7005
message MirageReportStageBeginRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    STAGE_ERROR = 3;
    BATTLE_AVATAR_ERROR = 4;
    SUPPORT_AVATAR_ERROR = 5;
    CORE_SKILL_ERROR = 6;
  }

  MirageReportStageBeginRsp.Retcode retcode = 1;
  uint32 stage_id = 2;
  uint32 battle_avatar_id = 3;
}

// CmdID: 7006
message MirageResetDailyDropLimitReq {
  uint32 schedule_id = 1;
}

// CmdID: 7007
message MirageResetDailyDropLimitRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    RESET_NOT_OPEN = 3;
    HCOIN_LACK = 4;
    RESET_TIMES_LIMIT = 5;
  }

  MirageResetDailyDropLimitRsp.Retcode retcode = 1;
  uint32 schedule_id = 2;
}

enum CmdTypeMirage {
  CMD_TYPE_MIRAGE_NONE = 0;
  CMD_MIRAGE_GET_ACTIVITY_REQ = 7000;
  CMD_MIRAGE_GET_ACTIVITY_RSP = 7001;
  CMD_MIRAGE_TALENT_LEVEL_UP_REQ = 7002;
  CMD_MIRAGE_TALENT_LEVEL_UP_RSP = 7003;
  CMD_MIRAGE_REPORT_STAGE_BEGIN_REQ = 7004;
  CMD_MIRAGE_REPORT_STAGE_BEGIN_RSP = 7005;
  CMD_MIRAGE_RESET_DAILY_DROP_LIMIT_REQ = 7006;
  CMD_MIRAGE_RESET_DAILY_DROP_LIMIT_RSP = 7007;
}

enum MirageStageUnlockFlagType {
  MIRAGE_STAGE_UNLOCK_FLAG_TYPE_NONE = 0;
  MIRAGE_STAGE_UNLOCK_FLAG_TYPE_UNTIL_TIME = 1;
}

enum MirageStageType {
  MIRAGE_STAGE_TYPE_NONE = 0;
  MIRAGE_STAGE_TYPE_CHALLENGE = 1;
  MIRAGE_STAGE_TYPE_DAILY = 2;
  MIRAGE_STAGE_TYPE_TUTORIAL = 3;
}

// CmdID: 3850
message GetMonopolyActivityReq {
  uint32 monopoly_id = 1;
}

message MonopolyMonster {
  uint32 unique_id = 1;
  uint32 monster_id = 2;
}

message MonopolyFloor {
  message Building {
    uint32 location = 1;
    uint32 type = 2;
    uint32 level = 3;
    uint32 product_num = 4;
  }

  uint32 floor_id = 1;
  repeated MonopolyFloor.Building building_list = 2;
  repeated MonopolyMonster monster_list = 3;
  MonopolyRoundStatus round_status = 4;
}

message MonopolyArea {
  uint32 area_id = 1;
  MonopolyAreaStatus status = 2;
  repeated MonopolyFloor floor_list = 3;
}

message MonopolyShopGoods {
  uint32 goods_id = 1;
  uint32 buy_times = 2;
}

// CmdID: 3851
message GetMonopolyActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  GetMonopolyActivityRsp.Retcode retcode = 1;
  uint32 monopoly_id = 2;
  repeated MonopolyArea area_list = 3;
  repeated MonopolyShopGoods goods_list = 4;
}

// CmdID: 3852
message MonopolyThrowDiceReq {
  uint32 area_id = 1;
}

// CmdID: 3853
message MonopolyThrowDiceRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    WAIT_SELECT_PATH = 2;
    STATUS_ERROR = 3;
  }

  MonopolyThrowDiceRsp.Retcode retcode = 1;
  uint32 area_id = 2;
  uint32 dice_num = 3;
}

// CmdID: 3854
message MonopolyBuildingConstructReq {
  uint32 area_id = 1;
  uint32 building_type = 2;
}

// CmdID: 3855
message MonopolyBuildingConstructRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    LACK_MATERIAL = 2;
    ANOTHER_TYPE_EXIST = 3;
    NUM_LIMIT = 4;
    LEVEL_MAX = 5;
    NO_LOCATION = 6;
    WAIT_SELECT = 7;
    STATUS_ERROR = 8;
  }

  MonopolyBuildingConstructRsp.Retcode retcode = 1;
  uint32 area_id = 2;
  uint32 building_type = 3;
}

// CmdID: 3856
message MonopolyEndRoundReq {
  uint32 area_id = 1;
}

// CmdID: 3857
message MonopolyEndRoundRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    STATUS_ERROR = 2;
  }

  MonopolyEndRoundRsp.Retcode retcode = 1;
}

// CmdID: 3858
message MonopolyUseItemReq {
  uint32 area_id = 1;
  uint32 item_id = 2;
  uint32 para = 3;
}

// CmdID: 3859
message MonopolyUseItemRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    LACK_MATERIAL = 2;
    INVALID_AREA = 3;
  }

  MonopolyUseItemRsp.Retcode retcode = 1;
}

// CmdID: 3860
message MonopolyRewardNotify {
  uint32 behavior_id = 1;
  RewardData reward = 2;
}

// CmdID: 3861
message MonopolyBuyGoodsReq {
  uint32 area_id = 1;
  uint32 goods_id = 2;
}

// CmdID: 3862
message MonopolyBuyGoodsRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    LACK_MATERIAL = 2;
    BUY_TIMES_LACK = 3;
    INVALID_POSITION = 4;
    STATUS_ERROR = 5;
  }

  MonopolyBuyGoodsRsp.Retcode retcode = 1;
}

// CmdID: 3863
message MonopolySkipBattleReq {
  uint32 stage_id = 1;
}

// CmdID: 3864
message MonopolySkipBattleRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  MonopolySkipBattleRsp.Retcode retcode = 1;
}

// CmdID: 3865
message MonopolyResetFloorReq {
  uint32 area_id = 1;
  uint32 floor_id = 2;
}

// CmdID: 3866
message MonopolyResetFloorRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  MonopolyResetFloorRsp.Retcode retcode = 1;
  uint32 area_id = 2;
  uint32 floor_id = 3;
  uint32 tile_tower_id = 4;
}

// CmdID: 3867
message MonopolyAddMonsterReq {
  uint32 area_id = 1;
  uint32 floor_id = 2;
  uint32 monster_id = 3;
  uint32 position = 4;
  uint32 direction = 5;
}

// CmdID: 3868
message MonopolyAddMonsterRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ALREADY_ADD = 2;
  }

  MonopolyAddMonsterRsp.Retcode retcode = 1;
  uint32 monster_id = 2;
  uint32 position = 3;
  uint32 direction = 4;
  uint32 unique_id = 5;
  uint32 entity_type = 6;
  uint32 tile_entity_id = 7;
}

message RaffleTicket {
  uint32 ticket_num = 1;
  uint32 draw_idx = 2;
  RaffleRewardGrade reward_grade = 3;
  bool is_reward_taken = 4;
}

message Raffle {
  uint32 id = 1;
  uint32 draw_begin_time = 3;
  uint32 draw_end_time = 4;
  uint32 reward_begin_time = 5;
  uint32 mission_id = 6;
  uint32 total_ticket_num = 7;
  repeated RaffleTicket ticket_list = 8;
}

// CmdID: 3890
message ExchangeRaffleMaterialReq {
}

// CmdID: 3891
message ExchangeRaffleMaterialRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MATERIAL_NOT_ENOUGH = 2;
    NOT_OPEN = 3;
  }

  ExchangeRaffleMaterialRsp.Retcode retcode = 1;
  repeated Material get_material_list = 2;
}

// CmdID: 3894
message TakeRaffleRewardReq {
  repeated uint32 raffle_id_list = 1;
}

// CmdID: 3895
message TakeRaffleRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    HAVE_TAKEN = 2;
    NOT_OPEN = 3;
    NOT_DRAW = 4;
    NOT_EXIST = 5;
  }

  TakeRaffleRewardRsp.Retcode retcode = 1;
  repeated uint32 raffle_id_list = 2;
  RewardData reward_data = 3;
}

// CmdID: 3896
message DrawRaffleTicketReq {
  uint32 raffle_id = 1;
}

// CmdID: 3897
message DrawRaffleTicketRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 3;
    CANNOT_DRAW = 4;
    TIMES_LIMIT = 5;
    MATERIAL_NOT_ENOUGH = 6;
    TOO_FREQUENT = 7;
  }

  DrawRaffleTicketRsp.Retcode retcode = 1;
  uint32 raffle_id = 2;
  uint32 ticket = 3;
  uint32 draw_idx = 4;
}

message RaffleActivity {
  uint32 cur_schedule_id = 1;
  uint32 begin_time = 2;
  uint32 end_time = 3;
  repeated Raffle raffle_list = 4;
}

// CmdID: 3898
message GetRaffleActivityReq {
  repeated uint32 raffle_id_list = 1;
}

// CmdID: 3899
message GetRaffleActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NO_RAFFLE = 2;
    NOT_OPEN = 3;
  }

  GetRaffleActivityRsp.Retcode retcode = 1;
  RaffleActivity raffle_activity = 2;
}

enum CmdTypeMonopoly {
  CMD_TYPE_MONOPOLY_NONE = 0;
  CMD_GET_MONOPOLY_ACTIVITY_REQ = 3850;
  CMD_GET_MONOPOLY_ACTIVITY_RSP = 3851;
  CMD_MONOPOLY_THROW_DICE_REQ = 3852;
  CMD_MONOPOLY_THROW_DICE_RSP = 3853;
  CMD_MONOPOLY_BUILDING_CONSTRUCT_REQ = 3854;
  CMD_MONOPOLY_BUILDING_CONSTRUCT_RSP = 3855;
  CMD_MONOPOLY_END_ROUND_REQ = 3856;
  CMD_MONOPOLY_END_ROUND_RSP = 3857;
  CMD_MONOPOLY_USE_ITEM_REQ = 3858;
  CMD_MONOPOLY_USE_ITEM_RSP = 3859;
  CMD_MONOPOLY_REWARD_NOTIFY = 3860;
  CMD_MONOPOLY_BUY_GOODS_REQ = 3861;
  CMD_MONOPOLY_BUY_GOODS_RSP = 3862;
  CMD_MONOPOLY_SKIP_BATTLE_REQ = 3863;
  CMD_MONOPOLY_SKIP_BATTLE_RSP = 3864;
  CMD_MONOPOLY_RESET_FLOOR_REQ = 3865;
  CMD_MONOPOLY_RESET_FLOOR_RSP = 3866;
  CMD_MONOPOLY_ADD_MONSTER_REQ = 3867;
  CMD_MONOPOLY_ADD_MONSTER_RSP = 3868;
  CMD_EXCHANGE_RAFFLE_MATERIAL_REQ = 3890;
  CMD_EXCHANGE_RAFFLE_MATERIAL_RSP = 3891;
  CMD_TAKE_RAFFLE_REWARD_REQ = 3894;
  CMD_TAKE_RAFFLE_REWARD_RSP = 3895;
  CMD_DRAW_RAFFLE_TICKET_REQ = 3896;
  CMD_DRAW_RAFFLE_TICKET_RSP = 3897;
  CMD_GET_RAFFLE_ACTIVITY_REQ = 3898;
  CMD_GET_RAFFLE_ACTIVITY_RSP = 3899;
}

enum MonopolyRoundStatus {
  MONOPOLY_ROUND_STATUS_NONE = 0;
  MONOPOLY_ROUND_STATUS_START = 1;
  MONOPOLY_ROUND_STATUS_AFTER_DICE = 2;
  MONOPOLY_ROUND_STATUS_AFTER_CONSTRUCT = 3;
}

enum MonopolyBehaviorType {
  MONOPOLY_BEHAVIOR_TYPE_NONE = 0;
  MONOPOLY_BEHAVIOR_WALK = 1;
  MONOPOLY_BEHAVIOR_DEMOLISH_BUILDING = 2;
  MONOPOLY_BEHAVIOR_FREEZE_BUILDING = 3;
  MONOPOLY_BEHAVIOR_RANDOM_FREEZE = 4;
  MONOPOLY_BEHAVIOR_SUMMON = 5;
  MONOPOLY_BEHAVIOR_REPEL = 7;
  MONOPOLY_BEHAVIOR_DELELTE_SELF = 8;
  MONOPOLY_BEHAVIOR_TRIGGER_RPG_EVENT = 9;
}

enum MonopolyItemType {
  MONOPOLY_ITEM_TYPE_NONE = 0;
  MONOPOLY_ITEM_CONTROLABLE_DICE = 1;
  MONOPOLY_ITEM_ROADBLOCK = 2;
  MONOPOLY_ITEM_EXCHANGE_POSITION = 4;
  MONOPOLY_ITEM_LEVELUP_BUILDING = 7;
  MONOPOLY_ITEM_CHANGE_DIRECTION = 8;
}

enum MonopolyBuildingFuncType {
  MONOPOLY_BUILDING_FUNC_TYPE_NONE = 0;
  MONOPOLY_BUILDING_FUNC_PRODUCT = 1;
  MONOPOLY_BUILDING_FUNC_BUFF = 2;
}

enum MonopolyDiceType {
  MONOPOLY_DICE_NONE = 0;
  MONOPOLY_DICE_NORMAL = 1;
  MONOPOLY_DICE_BUILDING_PRIORITY = 2;
}

enum MonopolyAreaStatus {
  MONOPOLY_AREA_STATUS_NONE = 0;
  MONOPOLY_AREA_STATUS_LOCKED = 1;
  MONOPOLY_AREA_STATUS_UNLOCKED = 2;
}

enum RaffleRewardGrade {
  RAFFLE_REWARD_NONE = 0;
  RAFFLE_REWARD_FIRST = 1;
  RAFFLE_REWARD_SECOND = 2;
  RAFFLE_REWARD_THIRD = 3;
}

enum RaffleActivityType {
  RAFFLE_ACTIVITY_NONE = 0;
  RAFFLE_ACTIVITY_MONOPOLY = 1;
}

message NinjaSlot {
  uint32 slot_id = 1;
  uint32 level = 2;
  uint32 exp = 3;
  uint32 choosed_effect_id = 4;
}

message NinjaActivityData {
  uint32 ninja_id = 1;
  uint32 begin_time = 2;
  uint32 end_time = 3;
  repeated NinjaSlot slot_list = 4;
}

// CmdID: 4400
message GetNinjaActivityReq {
}

// CmdID: 4401
message GetNinjaActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  GetNinjaActivityRsp.Retcode retcode = 1;
  NinjaActivityData ninja_data = 2;
}

// CmdID: 4402
message NinjaSlotStrengthenReq {
  uint32 slot_id = 1;
  uint32 material_id = 2;
  uint32 cost_num = 3;
}

// CmdID: 4403
message NinjaSlotStrengthenRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MATERIAL_NOT_ENOUGH = 2;
    LOCKED = 3;
    NOT_OPEN = 4;
    LEVEL_MAX = 5;
  }

  NinjaSlotStrengthenRsp.Retcode retcode = 1;
  NinjaSlot slot = 2;
}

// CmdID: 4404
message NinjaActivityNotify {
  repeated NinjaSlot slot_list = 1;
}

// CmdID: 4405
message NinjaSlotChooseEffectReq {
  uint32 slot_id = 1;
  uint32 effect_id = 2;
}

// CmdID: 4406
message NinjaSlotChooseEffectRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    LOCKED = 2;
  }

  NinjaSlotChooseEffectRsp.Retcode retcode = 1;
  NinjaSlot slot = 2;
}

enum CmdTypeNinja {
  CMD_TYPE_NINJA_NONE = 0;
  CMD_GET_NINJA_ACTIVITY_REQ = 4400;
  CMD_GET_NINJA_ACTIVITY_RSP = 4401;
  CMD_NINJA_SLOT_STRENGTHEN_REQ = 4402;
  CMD_NINJA_SLOT_STRENGTHEN_RSP = 4403;
  CMD_NINJA_ACTIVITY_NOTIFY = 4404;
  CMD_NINJA_SLOT_CHOOSE_EFFECT_REQ = 4405;
  CMD_NINJA_SLOT_CHOOSE_EFFECT_RSP = 4406;
  CMD_NINJA_DUMMY = 4449;
}

enum NinjaSiteType {
  NINJA_SITE_TYPE_NONE = 0;
  NINJA_SITE_NORMAL = 1;
  NINJA_SITE_BOSS = 2;
  NINJA_SITE_CHALLENGE = 3;
}

// CmdID: 1
message KeepAliveNotify {
  repeated uint32 route_type_list = 1;
}

// CmdID: 2
message GetGameserverReq {
}

// CmdID: 3
message GetGameserverRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    SERVER_STOP = 2;
    VERSION_ERROR = 3;
    FORCE_UPDATE = 4;
    SEED_ERROR = 5;
  }

}

// CmdID: 4
message GetPlayerTokenReq {
  uint32 account_type = 1;
  string account_uid = 2;
  string account_token = 3;
  string account_ext = 4;
  string token = 5;
  string version = 6;
  string device = 7;
  int32 tag = 8;
  uint32 uid = 9;
  string system_info = 10;
  string ipv4_str = 11;
  string ipv6_str = 12;
  string cps = 13;
  string device_uuid = 14;
  string transfer_code = 15;
  string transfer_pwd = 16;
  string ip_info_str = 17;
  DeviceType device_type = 20;
  bool is_allow_device_register = 21;
  uint32 combo_channel_id = 22;
  string combo_token = 23;
  string ua_pc = 25;
  string device_fingerprint = 26;
}

// CmdID: 5
message GetPlayerTokenRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    REGISTER_CLOSED = 2;
    ACCOUNT_VERIFY_ERROR = 3;
    TOKEN_REPEAT = 4;
    ACCOUNT_TYPE_ERROR = 5;
    SERVER_FULL = 6;
    INVALID_APK = 7;
    TRANSFER_CODE_ERROR = 8;
    IN_BLACK_LIST = 9;
    SERVER_STOP = 10;
    ACCOUNT_LOCKED = 11;
    SERVER_BUSY = 12;
    DEVICE_TYPE_ERROR = 13;
    FORBID_VISITOR = 14;
    FORBID_TAG_SMURF_VISITOR = 15;
    ANTI_ADDICT_LOGIN = 16;
    GAME_NOT_AVAILABLE = 17;
    FORCE_UPDATE = 18;
  }

  GetPlayerTokenRsp.Retcode retcode = 1;
  uint32 uid = 2;
  string token = 3;
  uint32 account_type = 4;
  string account_uid = 5;
  int32 tag = 6;
  string transfer_code = 15;
  uint32 transfer_pwd_expire_time = 16;
  bool is_bind_access = 17;
  uint32 fightserver_ip = 18;
  uint32 fightserver_port = 19;
  string msg = 20;
  uint32 black_list_end_time = 21;
  uint32 user_type = 22;
  uint32 limit_level = 23;
  bytes security_cmd_buffer = 24;
  string hoyolab_account_uid = 26;
  string ua_pc = 27;
}

// CmdID: 6
message PlayerLoginReq {
  uint32 last_server_packet_id = 2;
  string cps = 3;
  string check_sum = 4;
  string device_uuid = 5;
  string android_signatures = 6;
  string language = 7;
  string advertiser_id = 8;
  bytes security_cmd_reply = 9;
  uint32 last_login_version = 10;
  uint32 account_type = 11;
  string account_uid = 12;
  DeviceType device_type = 13;
  uint32 user_type = 14;
  string user_ip = 15;
  uint32 tag = 16;
  string client_version = 17;
  string client_device = 18;
  string system_info = 19;
  string android_sign = 20;
  uint32 limit_level = 21;
  uint32 black_list_end_time = 22;
  bool is_bind_access = 23;
  uint32 login_session_token = 25;
  string hoyolab_account_uid = 26;
  uint32 user_port = 27;
  string ua_pc = 28;
  string device_fingerprint = 29;
}

// CmdID: 7
message PlayerLoginRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    REPEAT_LOGIN = 2;
    IN_BLACK_LIST = 3;
    WAIT_STOP_ANOTHER_LOGIN = 4;
    ANTI_ADDICT_LOGIN = 5;
    SQUEEZE_CD = 6;
    LOGIN_CONTROL = 7;
  }

  PlayerLoginRsp.Retcode retcode = 1;
  string msg = 2;
  bool is_first_login = 4;
  uint32 last_client_packet_id = 5;
  string region_name = 6;
  CGType cg_type = 9;
  uint32 last_logout_time = 10;
  uint32 region_id = 11;
  bool is_valid_reconnect = 12;
  uint32 account_type = 13;
  string account_uid = 14;
  uint32 login_session_token = 15;
  uint32 psycho_key = 16;
  bool is_packet_cache_empty = 17;
}

// CmdID: 8
message PlayerLogoutReq {
  bool is_kick = 1;
}

// CmdID: 10
message GetMainDataReq {
  enum DataType {
    ALL = 0;
    NICKNAME = 2;
    LEVEL = 3;
    EXP = 4;
    HCOIN = 5;
    SCOIN = 6;
    STAMINA = 7;
    STAMINA_RECOVER_LEFT_TIME = 8;
    STAMINA_RECOVER_CONFIG_TIME = 9;
    EQUIPMENT_SIZE_LIMIT = 14;
    SELF_DESC = 16;
    PAY_HCOIN = 17;
    FREE_HCOIN = 18;
    ASSISTANT_AVATAR_ID = 19;
    IS_ALLOW_COST_SENIOR_EQUIP_ON_CUR_DEVICE = 20;
    BIRTHDAY = 21;
    RECHARGE_PRICE = 22;
    WAIT_DEL_HCOIN = 23;
    ON_MEDAL_ID = 24;
    USE_FRAME_ID = 26;
    MCOIN = 27;
    PANEL_ACTIVITY = 28;
    VIDEO_POPUP = 29;
    ON_PHONE_PENDANT_ID = 30;
    STORE_EVALUATE = 31;
    CHATWORLD_ACTIVITY = 32;
    LEVEL_LOCK = 33;
    WARSHIP_AVATAR = 35;
    USE_CUSTOM_HEAD = 36;
    TOTAL_LOGIN_DAYS = 37;
    WARSHIP_THEME = 38;
    WAIT_DEL_MATERIAL = 39;
  }

  repeated GetMainDataReq.DataType type_list = 1;
}

message VideoPopupData {
  uint32 id = 1;
  uint32 begin_time = 2;
  uint32 end_time = 3;
  string middle_image_path = 4;
  string video_icon = 5;
  string video_link = 6;
  uint32 video_link_open_type = 7;
  uint32 max_times = 8;
}

message ChatworldActivityInfo {
  uint32 treasure_schedule_id = 1;
  bool is_has_npc_red_envelope = 2;
}

message WarshipAvatarData {
  uint32 warship_first_avatar_id = 1;
  uint32 warship_second_avatar_id = 2;
}

message WaitDelMaterialData {
  uint32 material_id = 1;
  uint32 num = 2;
}

// CmdID: 11
message GetMainDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetMainDataRsp.Retcode retcode = 1;
  string nickname = 2;
  uint32 level = 3;
  uint32 exp = 4;
  uint32 hcoin = 5;
  uint32 scoin = 6;
  uint32 stamina = 7;
  uint32 stamina_recover_left_time = 8;
  uint32 stamina_recover_config_time = 9;
  uint32 equipment_size_limit = 14;
  string self_desc = 16;
  uint32 pay_hcoin = 17;
  uint32 free_hcoin = 18;
  uint32 assistant_avatar_id = 19;
  bool is_allow_cost_senior_equip_on_cur_device = 20;
  uint32 birthday = 21;
  uint32 month_recharge_price = 22;
  uint32 wait_del_hcoin = 23;
  uint32 on_medal_id = 24;
  uint32 today_recharge_price = 26;
  uint32 use_frame_id = 27;
  bool is_all = 28;
  uint32 mcoin = 29;
  repeated uint32 open_panel_activity_list = 30;
  repeated VideoPopupData video_popup_list = 31;
  uint32 on_phone_pendant_id = 32;
  uint32 next_evaluate_time = 33;
  ChatworldActivityInfo chatworld_activity_info = 34;
  uint32 level_lock_id = 35;
  WarshipAvatarData warship_avatar = 37;
  uint32 custom_head_id = 38;
  uint32 total_login_days = 39;
  uint32 register_time = 40;
  WarshipThemeData warship_theme = 41;
  repeated WaitDelMaterialData wait_del_material_list = 42;
  uint32 on_medal = 43;
  repeated uint32 type_list = 44;
}

// CmdID: 12
message GetScoinExchangeInfoReq {
}

// CmdID: 13
message GetScoinExchangeInfoRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetScoinExchangeInfoRsp.Retcode retcode = 1;
  uint32 usable_times = 2;
  uint32 total_times = 3;
  uint32 hcoin_cost = 4;
  uint32 scoin_get = 5;
}

// CmdID: 14
message ScoinExchangeReq {
  uint32 purple_jade_num = 1;
}

// CmdID: 15
message ScoinExchangeRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    HCOIN_LACK = 2;
    TIMES_LACK = 3;
    LACK_PURPLE_JADE = 4;
  }

  ScoinExchangeRsp.Retcode retcode = 1;
  uint32 hcoin_cost = 2;
  uint32 scoin_get = 3;
  uint32 boost_rate = 4;
  uint32 purple_jade_cost = 5;
}

// CmdID: 16
message GetStaminaExchangeInfoReq {
}

// CmdID: 17
message GetStaminaExchangeInfoRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetStaminaExchangeInfoRsp.Retcode retcode = 1;
  uint32 usable_times = 2;
  uint32 total_times = 3;
  uint32 hcoin_cost = 4;
  uint32 stamina_get = 5;
}

// CmdID: 18
message StaminaExchangeReq {
}

// CmdID: 19
message StaminaExchangeRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    HCOIN_LACK = 2;
    TIMES_LACK = 3;
    STAMINA_FULL = 4;
  }

  StaminaExchangeRsp.Retcode retcode = 1;
  uint32 hcoin_cost = 2;
  uint32 stamina_get = 3;
}

// CmdID: 20
message NicknameModifyReq {
  string nickname = 1;
}

// CmdID: 21
message NicknameModifyRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    FORMAT_ERROR = 2;
    SENSITIVE_WORDS = 3;
    IN_AUDIT = 4;
    IN_CD = 5;
  }

  NicknameModifyRsp.Retcode retcode = 1;
  uint32 cd_end_time = 2;
}

// CmdID: 22
message GmTalkReq {
  string msg = 1;
  string cmd = 2;
  string sub_cmd = 3;
  repeated string param_list = 4;
}

// CmdID: 23
message GmTalkRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GmTalkRsp.Retcode retcode = 1;
  string msg = 2;
  string retmsg = 3;
}

// CmdID: 24
message GetAvatarDataReq {
  repeated uint32 avatar_id_list = 1;
}

// CmdID: 25
message GetAvatarDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    AVATAR_NOT_EXIST = 2;
  }

  GetAvatarDataRsp.Retcode retcode = 1;
  repeated Avatar avatar_list = 2;
  bool is_all = 3;
}

// CmdID: 26
message GetEquipmentDataReq {
  repeated uint32 weapon_unique_id_list = 1;
  repeated uint32 stigmata_unique_id_list = 2;
  repeated uint32 material_id_list = 3;
  repeated uint32 mecha_unique_id_list = 4;
}

// CmdID: 27
message GetEquipmentDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetEquipmentDataRsp.Retcode retcode = 1;
  repeated Weapon weapon_list = 2;
  repeated Stigmata stigmata_list = 3;
  repeated Material material_list = 4;
  bool is_all = 5;
  repeated Mecha mecha_list = 6;
  uint32 vitality_value = 7;
}

// CmdID: 28
message DelEquipmentNotify {
  repeated uint32 weapon_unique_id_list = 1;
  repeated uint32 stigmata_unique_id_list = 2;
  repeated uint32 mecha_unique_id_list = 3;
}

// CmdID: 29
message AvatarStarUpReq {
  uint32 avatar_id = 1;
}

// CmdID: 30
message AvatarStarUpRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    AVATAR_NOT_EXIST = 2;
    FRAGMENT_LACK = 3;
    STAR_FULL = 4;
    FEATURE_CLOSED = 5;
  }

  AvatarStarUpRsp.Retcode retcode = 1;
}

// CmdID: 31
message EquipmentPowerUpReq {
  EquipmentItem main_item = 1;
  EquipmentItemList consume_item_list = 2;
}

// CmdID: 32
message EquipmentPowerUpRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MAIN_ITEM_NOT_EXIST = 2;
    MAIN_ITEM_LEVEL_FULL = 3;
    CONSUME_ITEM_NOT_EXIST = 4;
    CONSUME_ITEM_IN_USE = 5;
    CONSUME_ITEM_REPEAT = 6;
    MAIN_ITEM_IN_CONSUME_ITEM_LIST = 7;
    SCOIN_LACK = 8;
    CONSUME_ITEM_PROTECTED = 9;
    MAIN_ITEM_AFFIX_NOT_IDENTIFY = 10;
    COST_GACHA_TICKET = 11;
    COST_SENIOR_EQUIP_FROM_NEW_DEVICE = 12;
    COST_SENIOR_EQUIP_CANCEL_PROTECT_TOO_SOON = 13;
    CONSUME_ITEM_IN_FACILITY = 14;
    CONSUME_ITEM_GRAND_KEY = 15;
    CONSUME_ITEM_PROTECTED_BY_SECURITY_PASSWORD = 16;
  }

  EquipmentPowerUpRsp.Retcode retcode = 1;
  EquipmentItem main_item = 2;
  uint32 boost_rate = 3;
  repeated Material return_material_list = 4;
}

// CmdID: 33
message EquipmentSellReq {
  EquipmentItemList sell_item_list = 1;
}

// CmdID: 34
message EquipmentSellRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    CONSUME_ITEM_NOT_EXIST = 2;
    CONSUME_ITEM_IN_USE = 3;
    CONSUME_ITEM_REPEAT = 4;
    CONSUME_ITEM_PROTECTED = 5;
    COST_GACHA_TICKET = 6;
    COST_SENIOR_EQUIP_FROM_NEW_DEVICE = 7;
    COST_SENIOR_EQUIP_CANCEL_PROTECT_TOO_SOON = 8;
    SELL_PRICE = 9;
    CONSUME_ITEM_GRAND_KEY = 10;
    CONSUME_ITEM_IN_FACILITY = 11;
    LACK_VITALITY = 12;
    CONTAINS_EQUIP_CAN_NOT_SELL = 13;
    GREEN_STONE_QUANTITY_LIMIT = 14;
    PURPLE_JADE_QUANTITY_LIMIT = 15;
    CONSUME_ITEM_PROTECTED_BY_SECURITY_PASSWORD = 16;
  }

  EquipmentSellRsp.Retcode retcode = 1;
  uint32 scoin_add = 2;
  uint32 purple_jade_add = 4;
  uint32 cost_vitality = 5;
}

// CmdID: 35
message AddAvatarExpByMaterialReq {
  uint32 avatar_id = 1;
  uint32 material_id = 2;
  uint32 material_num = 3;
}

// CmdID: 36
message AddAvatarExpByMaterialRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    AVATAR_NOT_EXIST = 2;
    AVATAR_LEVEL_FULL = 3;
    MATERAIL_NOT_ENOUGH = 4;
    MATERAIL_CAN_NOT_ADD_EXP = 5;
  }

  AddAvatarExpByMaterialRsp.Retcode retcode = 1;
}

// CmdID: 37
message EquipmentEvoReq {
  EquipmentItem main_item = 1;
  EquipmentItemList consume_item_list = 2;
}

// CmdID: 38
message EquipmentEvoRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MAIN_ITEM_NOT_EXIST = 2;
    MAIN_ITEM_LEVEL_NOT_FULL = 3;
    CONSUME_ITEM_NOT_EXIST = 4;
    CONSUME_ITEM_IN_USE = 5;
    CONSUME_ITEM_REPEAT = 6;
    CONSUME_ITEM_UN_NECESSARY = 7;
    CONSUME_ITEM_LACK = 8;
    MAIN_ITEM_IN_CONSUME_ITEM_LIST = 9;
    SCOIN_LACK = 10;
    CONSUME_ITEM_PROTECTED = 11;
    MAIN_ITEM_AFFIX_NOT_IDENTIFY = 12;
    COST_GACHA_TICKET = 13;
    COST_SENIOR_EQUIP_FROM_NEW_DEVICE = 14;
    COST_SENIOR_EQUIP_CANCEL_PROTECT_TOO_SOON = 15;
    CONSUME_ITEM_GRAND_KEY = 16;
    CONSUME_ITEM_IN_FACILITY = 17;
    MAIN_ITEM_IN_FACILITY = 18;
    CONSUME_ITEM_PROTECTED_BY_SECURITY_PASSWORD = 19;
  }

  EquipmentEvoRsp.Retcode retcode = 1;
  EquipmentItem new_item = 2;
}

// CmdID: 39
message DressEquipmentReq {
  uint32 avatar_id = 1;
  EquipmentSlot slot = 2;
  uint32 unique_id = 3;
}

// CmdID: 40
message DressEquipmentRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    AVATAR_NOT_EXIST = 2;
    EQUIPMENT_NOT_EXIST = 3;
    EQUIPMENT_DRESSED = 4;
    EQUIPMENT_SLOT_ERROR = 5;
    COST_LACK = 6;
    AFFIX_NOT_IDENTIFY = 7;
  }

  DressEquipmentRsp.Retcode retcode = 1;
  EquipmentSlot slot = 2;
  uint32 unique_id = 3;
}

// CmdID: 41
message GetStageDataReq {
  repeated uint32 stage_id_list = 1;
}

// CmdID: 42
message GetStageDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    STAGE_NOT_EXIST = 2;
  }

  GetStageDataRsp.Retcode retcode = 1;
  repeated Stage stage_list = 2;
  repeated uint32 finished_chapter_list = 3;
  repeated StageEventData event_data_list = 4;
  bool is_all = 5;
}

// CmdID: 43
message StageBeginReq {
  uint32 stage_id = 1;
  repeated uint32 avatar_id_list = 2;
  AvatarTeamType avatar_team_type = 3;
  uint32 assistant_uid = 4;
  bool is_speed_up_stage = 5;
  repeated uint32 avatar_trial_id_list = 6;
  repeated uint32 elf_id_list = 7;
  uint32 target_wave = 8;
  string mtp_report_type = 11;
  string mtp_report_value = 12;
  bool is_re_begin = 13;
  repeated uint32 avatar_restrict_list = 14;
  bool is_theme_wanted_mp_assist_mode = 15;
  uint32 sc_dlc_support_avatar_id = 16;
  uint32 stage_begin_floor = 17;
  repeated uint32 monster_card_unique_id_list = 18;
  repeated uint32 fake_avatar_id_list = 19;
  repeated uint32 extra_item_id_list = 20;
  uint32 step_level = 21;
  uint32 activity_id = 22;
  uint32 theme_wanted_multi_num = 23;
  bool is_theme_wanted_extra_drop = 24;
}

// CmdID: 44
message StageBeginRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    STAGE_NOT_EXIST = 2;
    LEVEL_LACK = 3;
    STAMINA_LACK = 4;
    AVATAR_ERROR = 5;
    EQUIPMENT_FULL = 6;
    ENTER_TIMES_LACK = 7;
    ASSISTANT_PLAYER_FROZEN = 8;
    ACTIVITY_LEVEL_LACK = 9;
    ACTIVITY_ENTER_TIMES_LACK = 10;
    ACTIVITY_NOT_BEGIN = 11;
    ACTIVITY_END = 12;
    AVATAR_NUM_ERROR = 13;
    CHALLENGE_NUM_LACK = 14;
    FRIEND_NUM_MAX = 15;
    EXTRA_STORY_LEVEL_LACK = 16;
    EXTRA_STORY_NOT_BEGIN = 17;
    EXTRA_STORY_END = 18;
    NOT_MEET_RESTRICT = 19;
    EQUIPMENT_MATERIAL_LIMIT = 20;
    EQUIPMENT_FRAGMENT_LIMIT = 21;
    NOT_MEET_FAST = 22;
    PRE_MP_STAGE_NOT_FINISH = 23;
    STAGE_TYPE_ERROR = 24;
    MP_LEVEL_LACK = 25;
    ACTIVITY_UNLOCK = 26;
    NOT_MEET_EXTRA_STORY_CHALLENGE_MODE = 28;
    EXTRA_STORY_EQUIPMENT_USED = 29;
    EXTRA_STORY_AVATAR_USED = 30;
    EXTRA_STORY_AVATAR_LIMIT = 31;
    STAGE_FINISH_ONCE = 32;
    SEASON_TICKET_LACK = 33;
    PRE_STAGE_NOT_FINISH = 34;
    CHALLENGE_MODE_NEED_RESET = 35;
    ALREADY_OPEN_DUNGEONS = 36;
    DUNGEONS_AREA_LOCKED = 37;
    DUNGEONS_TEST_STAGE_FIRST = 38;
    DUNGEONS_TEST_STAGE_DONE = 39;
    COST_MATERIAL_LACK = 40;
    WEEKLY_ENTER_TIMES_LACK = 41;
    RECLAIM_BOOM_ENERGY_LACK = 42;
    RECLAIM_LEVEL_LACK = 43;
    OPENWORLD_BOSS_MP_INVALID = 44;
    SCORE_LACK = 45;
    COUPLE_TOWER_FLOOR_LACK = 46;
    GENERAL_ACTIVITY_CONDITION_LIMIT = 47;
    EQUIPMENT_DISMATCH_LOCKED = 48;
    WEAPON_LOCKED = 49;
    STIGMATA_LOCKED = 50;
    ELF_ERROR = 51;
    NOT_IN_SQUAD = 52;
    ELF_CARRY_LEVEL_LIMIT = 53;
    CAMPAIGN_PHASE_ERROR = 54;
    MISSION_LOCKED = 55;
    HAS_TAKE_CAMPAIGN_REWARD = 56;
    FEATURE_CLOSED = 61;
    NOT_IN_TEAM = 62;
    EXTRA_MATERIAL_LACK = 63;
    FEATURE_LIMIT = 64;
    STAGE_MISMATCH = 65;
    NOT_IN_SAME_ARMADA = 67;
    ASSIST_STAMINA_LACK = 68;
    ARMADA_ACTIVITY_NOT_OPEN = 69;
    NOT_IN_ARMADA = 70;
    LOGIN_DAYS_LACK = 71;
    NOT_NEWBIE = 72;
    IN_CD = 73;
    DAILY_RAID_NOT_ACTIVE = 74;
    CHAPTER_PRE_ZONE_NOT_FINISHED = 75;
    BEAST_TIME_NOT_ENOUGH = 76;
    SINGLE_WANTED_BOX_UNPICK = 77;
    EXCLUSIVE_STAGE_CONFLICT = 78;
    THEME_WANTED_LEADER_TICKET_LACK = 79;
    THEME_WANTED_MEMBER_LOCKED = 80;
    THEME_WANTED_LOCK = 81;
    THEME_WANTED_TICKET_LACK = 82;
    SLG_BATTLE_NOT_OPEN = 83;
    SLG_BATTLE_POINT_ERROR = 84;
    SLG_BATTLE_POINT_NOT_OPEN = 85;
    UNLOCK_TIME_LIMIT = 86;
    BEGIN_FLOOR_ERROR = 87;
    OPENWORLD_STORY_NOT_FINISH = 88;
    MONSTER_CARD_MONSTER_ERROR = 89;
    MONSTER_CARD_COST_LIMIT = 90;
    CHAPTER_OW_FAME_LEVEL_LACK = 91;
    BUFF_ASSIST_STAGE_NOT_OPEN = 92;
    WAVE_RUSH_STAGE_NOT_OPEN = 93;
    WAVE_RUSH_PRE_SITE_NOT_FINISHED = 94;
    WAVE_RUSH_DAILY_STAGE_NOT_OPEN = 95;
    AI_CYBER_CONDITION_NOT_MEET = 96;
    AI_CYBER_AREA_ERROR = 97;
    AI_CYBER_DAILY_STAGE_NOT_MATCH = 98;
    FAKE_AVATAR_NUM_ERROR = 99;
    FAKE_AVATAR_ERROR = 100;
    PLATFORM_SHOOTER_DAILY_CHALLENGE_MISMATCH = 101;
    MIRAGE_STAGE_MISMATCH = 102;
    MIRAGE_NOT_OPEN = 103;
    EXTRA_ITEM_ERROR = 104;
    CHAPTER_BW_WORLD_EXP_MATERIAL_FULL = 105;
    CHAPTER_BW_WORLD_RUNE_FULL = 106;
    REWARD_LINE_ERROR = 107;
    CHAPTER_BW_WORLD_EQUIP_RUNE_ERROR = 108;
    THEME_TOWER_SECTION_ERROR = 109;
    THEME_TOWER_STAGE_NOT_MATCH = 110;
    CHAPTER_ARK_AVATAR_ATTRIBUTE_ERROR = 111;
    CHAPTER_ERROR = 112;
    CONDITION_MISMATCH = 113;
    MINION_CLASH_NOT_OPEN = 114;
    MINION_CLASH_STAGE_MISMATCH = 115;
    ARK_PLUS_IN_CHALLENGE = 116;
    ELF_SYSTEM_ERROR = 117;
    PJMS_AUXILIARY_UNIT_NUM_LIMIT = 118;
    THEME_WANTED_MATERIAL_LACK = 119;
    SIMPLIFIED_GOD_WAR_WEEKLY_CHALLENGE_LOCKED = 120;
    SIMPLIFIED_GOD_WAR_NOT_IN_CHALLENGE = 121;
    SIMPLIFIED_GOD_WAR_NOT_IN_SITE = 122;
    MONSTER_MORPH_MONSTER_LIMIT = 123;
    MONSTER_MORPH_MINION_LIMIT = 124;
    MONSTER_CARD_SUPPORT_ERROR = 125;
    MONSTER_CARD_SUPPORT_REPEAT = 126;
    MONSTER_CARD_REPEAT = 127;
    CONFIG_NOT_FOUND = 128;
  }

  StageBeginRsp.Retcode retcode = 1;
  uint32 stage_id = 2;
  uint32 progress = 3;
  repeated DropItem drop_item_list = 4;
  bool is_collect_cheat_data = 5;
  string sign_key = 6;
  uint32 tag = 7;
  repeated AvatarEquipBuff equip_buff_list = 8;
  repeated string battle_buff_list = 9;
  repeated string battle_attr_list = 10;
  bool is_trigger_baodi = 11;
  bytes security_cmd_buffer = 12;
  string stage_transaction_str = 13;
  uint32 god_war_skill_id = 14;
  uint32 ark_plus_room_event_id = 15;
  bytes game_data = 20;
}

// CmdID: 45
message StageEndReq {
  bytes body = 1;
  string sign = 2;
}

// CmdID: 46
message StageEndRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    STAGE_ERROR = 2;
    DROP_ERROR = 3;
    CHALLENGE_ERROR = 4;
    STAGE_TIME_ERROR = 5;
    ALREADY_OPEN_DUNGEONS = 6;
    NOT_MEET_FAST = 22;
    COST_MATERIAL_LACK = 40;
    NOT_IN_TEAM = 62;
    SLG_BATTLE_NOT_OPEN = 63;
    ACTIVITY_NOT_OPEN = 64;
    END_FLOOR_ERROR = 66;
  }

  StageEndRsp.Retcode retcode = 1;
  uint32 stage_id = 2;
  uint32 player_exp_reward = 3;
  uint32 avatar_exp_reward = 4;
  uint32 scoin_reward = 5;
  repeated StageChallengeData challenge_list = 6;
  uint32 friends_point_add = 7;
  uint32 progress = 8;
  repeated StageSpecialChallengeData special_challenge_list = 9;
  MpStageMvpReward mvp_reward = 10;
  repeated DropItem mp_drop_item_list = 11;
  uint32 mp_exp_reward = 12;
  uint32 exp_convert_scoin = 13;
  uint32 bond_add_friends_point = 14;
  AccountBuffReward buff_reward = 16;
  uint32 world_boss_score = 17;
  uint32 rank_scoin = 18;
  RewardData line_enhance_reward_data = 19;
  uint32 dungeons_evaluation = 20;
  repeated DropItem dungeons_drop_item_list = 21;
  StageEndStatus end_status = 22;
  uint32 bonus_score = 24;
  repeated DropItem bonus_drop_list = 25;
  repeated RewardData extra_reward_data_list = 27;
  repeated DropItem extra_drop_list = 28;
  bool is_new_max_score = 29;
  repeated DropItem theme_wanted_drop_item_list = 31;
  repeated DropItem theme_wanted_show_extra_drop_item_list = 32;
  bool is_theme_wanted_extra_drop_taken_by_first_pass = 33;
  uint32 god_war_challenge_score = 34;
  uint32 old_max_score = 35;
  uint32 stage_score = 36;
  bool is_first_win = 37;
  repeated RewardData bonus_reward_data_list = 38;
  repeated PjmsAuxiliaryUnit auxiliary_unit_list = 39;
  repeated DropItem pjms_resident_settle_pre_stage_drop_item_list = 40;
}

// CmdID: 47
message GetAvatarTeamDataReq {
}

// CmdID: 48
message GetAvatarTeamDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetAvatarTeamDataRsp.Retcode retcode = 1;
  repeated AvatarTeam avatar_team_list = 2;
  repeated CustomAvatarTeam custom_avatar_team_list = 3;
}

// CmdID: 49
message UpdateAvatarTeamNotify {
  AvatarTeam team = 1;
}

// CmdID: 50
message AvatarSubSkillLevelUpReq {
  uint32 avatar_id = 1;
  uint32 skill_id = 2;
  uint32 sub_skill_id = 3;
  bool is_level_up_all = 4;
}

// CmdID: 51
message AvatarSubSkillLevelUpRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    AVATAR_NOT_EXIST = 2;
    SKILL_NOT_EXIST = 3;
    SUB_SKILL_NOT_EXIST = 4;
    AVATAR_LEVEL_LACK = 5;
    AVATAR_STAR_LACK = 6;
    SCOIN_LACK = 7;
    SKILL_POINT_LACK = 8;
    MATERIAL_LACK = 9;
    LEVEL_FULL = 10;
  }

  AvatarSubSkillLevelUpRsp.Retcode retcode = 1;
}

// CmdID: 56
message MaterialEvoReq {
}

// CmdID: 57
message MaterialEvoRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  MaterialEvoRsp.Retcode retcode = 1;
}

// CmdID: 60
message GetStageDropDisplayReq {
  repeated uint32 stage_id_list = 1;
}

// CmdID: 61
message GetStageDropDisplayRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    STAGE_NOT_EXIST = 2;
    STAGE_TOO_MUCH = 3;
  }

  GetStageDropDisplayRsp.Retcode retcode = 1;
  repeated StageDropDisplayInfo stage_drop_list = 2;
}

// CmdID: 64
message GetFriendListReq {
}

// CmdID: 65
message GetFriendListRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetFriendListRsp.Retcode retcode = 1;
  repeated PlayerFriendBriefData friend_list = 2;
  bool is_whole_data = 3;
  uint32 assistant_num = 4;
}

// CmdID: 66
message AddFriendReq {
  AddFriendAction action = 1;
  repeated uint32 target_uid_list = 2;
}

// CmdID: 67
message AddFriendRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    TARGET_NOT_EXIST = 2;
    FRIEND_FULL = 3;
    TARGET_FRIEND_FULL = 4;
    IS_SELF = 5;
    IS_FRIEND = 6;
    ASK_TOO_OFTEN = 7;
    TARGET_ASK_LIST_FULL = 8;
    TARGET_IN_ASK_LIST = 9;
    REDIS_MULTI_ERROR = 10;
    NOT_ALLOW_CROSS_REGION_FRIEND = 11;
    CROSS_REGION_FRIEND_FULL = 12;
    FEATURE_LIMIT = 13;
    FORBIDDEN = 14;
    FEATURE_CLOSED = 15;
  }

  AddFriendRsp.Retcode retcode = 1;
  AddFriendAction action = 2;
  repeated uint32 target_uid_list = 3;
}

// CmdID: 68
message DelFriendReq {
  uint32 target_uid = 1;
}

// CmdID: 69
message DelFriendRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    TARGET_NOT_FRIEND = 2;
    REDIS_MULTI_ERROR = 3;
    MASTER_PUPIL = 4;
  }

  DelFriendRsp.Retcode retcode = 1;
  uint32 target_uid = 2;
}

// CmdID: 70
message GetAskAddFriendListReq {
}

message FriendAskAddData {
  PlayerFriendBriefData brief = 1;
  uint32 ask_time = 2;
}

// CmdID: 71
message GetAskAddFriendListRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetAskAddFriendListRsp.Retcode retcode = 1;
  repeated FriendAskAddData ask_list = 2;
}

// CmdID: 72
message GetPlayerDetailDataReq {
  uint32 target_uid = 1;
}

// CmdID: 73
message GetPlayerDetailDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    TARGET_NOT_EXIST = 2;
  }

  GetPlayerDetailDataRsp.Retcode retcode = 1;
  PlayerDetailData detail = 2;
}

// CmdID: 74
message UpdateEquipmentProtectedStatusReq {
  bool is_protected = 1;
  repeated uint32 weapon_unique_id_list = 2;
  repeated uint32 stigmata_unique_id_list = 3;
}

// CmdID: 75
message UpdateEquipmentProtectedStatusRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    EQUIPMENT_NOT_EXIST = 2;
  }

  UpdateEquipmentProtectedStatusRsp.Retcode retcode = 1;
}

// CmdID: 76
message GetRecommendFriendListReq {
  uint32 level = 1;
  repeated uint32 filter_uid_list = 2;
  repeated uint32 recommend_uid_list = 3;
  repeated uint32 mp_recommend_uid_list = 4;
}

// CmdID: 77
message GetRecommendFriendListRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    TOO_OFTEN = 2;
  }

  GetRecommendFriendListRsp.Retcode retcode = 1;
  repeated PlayerFriendBriefData recommend_list = 2;
}

// CmdID: 78
message SetSelfDescReq {
  string self_desc = 1;
}

// CmdID: 79
message SetSelfDescRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    FORMAT_ERROR = 2;
    SENSITIVE_WORDS = 3;
    IN_AUDIT = 4;
    IN_CD = 5;
  }

  SetSelfDescRsp.Retcode retcode = 1;
  uint32 cd_end_time = 2;
}

// CmdID: 80
message DelFriendNotify {
  uint32 target_uid = 1;
}

// CmdID: 81
message GetOfflineFriendsPointNotify {
  uint32 friends_point = 1;
}

// CmdID: 82
message VerifyItunesOrderNotify {
  string receipt_data = 1;
  string device_uuid = 2;
  bool is_auto_reissue = 3;
  string currency_code = 4;
  string price_amount = 5;
}

// CmdID: 84
message GetMailDataReq {
}

// CmdID: 85
message GetMailDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetMailDataRsp.Retcode retcode = 1;
  repeated Mail mail_list = 2;
  bool is_all = 3;
}

// CmdID: 86
message GetMailAttachmentReq {
  repeated MailKey mail_key_list = 1;
  bool is_show_attachment = 2;
}

// CmdID: 87
message GetMailAttachmentRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetMailAttachmentRsp.Retcode retcode = 1;
  repeated MailKey succ_mail_key_list = 2;
  bool is_show_attachment = 3;
  MailAttachment mail_attachment = 4;
}

// CmdID: 88
message UnlockAvatarSkillReq {
  uint32 avatar_id = 1;
  uint32 skill_id = 2;
}

// CmdID: 89
message UnlockAvatarSkillRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    AVATAR_NOT_EXIST = 2;
    HAS_UNLOCK = 3;
    AVATAR_LEVEL_LACK = 4;
    AVATAR_STAR_LACK = 5;
    MATERIAL_LACK = 6;
  }

  UnlockAvatarSkillRsp.Retcode retcode = 1;
}

// CmdID: 90
message EquipmentQuickLevelUpReq {
  EquipmentItem main_item = 1;
  EquipmentItemList power_up_consume_item_list = 2;
  EquipmentItemList evo_consume_item_list = 3;
  uint32 target_item_id = 4;
  uint32 target_level = 5;
}

// CmdID: 91
message EquipmentQuickLevelUpRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MAIN_ITEM_LEVEL_FULL = 2;
    MAIN_ITEM_NOT_EXIST = 3;
    CONSUME_ITEM_NOT_EXIST = 4;
    CONSUME_ITEM_IN_USE = 5;
    CONSUME_ITEM_REPEAT = 6;
    MAIN_ITEM_IN_CONSUME_ITEM_LIST = 7;
    SCOIN_LACK = 8;
    CONSUME_ITEM_PROTECTED = 9;
    MAIN_ITEM_AFFIX_NOT_IDENTIFY = 10;
    COST_GACHA_TICKET = 11;
    COST_SENIOR_EQUIP_FROM_NEW_DEVICE = 12;
    COST_SENIOR_EQUIP_CANCEL_PROTECT_TOO_SOON = 13;
    CONSUME_ITEM_GRAND_KEY = 14;
    CONSUME_ITEM_IN_FACILITY = 15;
    CONSUME_ITEM_PROTECTED_BY_SECURITY_PASSWORD = 16;
    CONSUME_ITEM_UN_NECESSARY = 17;
    CONSUME_ITEM_LACK = 18;
    FEATURE_CLOSED = 19;
  }

  EquipmentQuickLevelUpRsp.Retcode retcode = 1;
  EquipmentItem new_item = 2;
  repeated uint32 boost_rate_list = 3;
  repeated Material return_material_list = 4;
}

// CmdID: 92
message RefreshAvatarSkillReq {
  uint32 avatar_id = 1;
}

// CmdID: 93
message RefreshAvatarSkillRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    AVATAR_NOT_EXIST = 2;
  }

  RefreshAvatarSkillRsp.Retcode retcode = 1;
}

// CmdID: 100
message GetAssistantFrozenListReq {
}

// CmdID: 101
message GetAssistantFrozenListRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetAssistantFrozenListRsp.Retcode retcode = 1;
  repeated AssistantFrozen frozen_list = 2;
}

// CmdID: 102
message SellAvatarFragmentReq {
  repeated AvatarFragment fragment_list = 1;
}

// CmdID: 103
message SellAvatarFragmentRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    FRAGMENT_NOT_ENOUGH = 2;
  }

  SellAvatarFragmentRsp.Retcode retcode = 1;
  uint32 scoin_add = 2;
}

// CmdID: 104
message GetHasGotItemIdListReq {
}

message WeaponInfo {
  uint32 weapon_id = 1;
  uint32 sub_weapon_id = 2;
}

// CmdID: 105
message GetHasGotItemIdListRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetHasGotItemIdListRsp.Retcode retcode = 1;
  repeated uint32 item_id_list = 2;
}

// CmdID: 106
message AvatarReviveReq {
  bool is_retry = 1;
  uint32 revive_use_id = 2;
}

// CmdID: 107
message AvatarReviveRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    HCOIN_LACK = 2;
    TIMES_LACK = 3;
    NOT_IN_STAGE = 4;
    MATERIAL_LACK = 5;
  }

  AvatarReviveRsp.Retcode retcode = 1;
  uint32 revive_times = 2;
}

// CmdID: 108
message ResetStageEnterTimesReq {
  uint32 stage_id = 1;
}

// CmdID: 109
message ResetStageEnterTimesRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    HCOIN_LACK = 2;
    TIMES_LACK = 3;
    NOT_NEED_RESET = 4;
    STAGE_ID_ERROR = 5;
    MATERIAL_LACK = 6;
  }

  ResetStageEnterTimesRsp.Retcode retcode = 1;
}

// CmdID: 110
message GetConfigReq {
}

// CmdID: 111
message GetConfigRsp {
  message GachaTicket {
    uint32 material_id = 1;
    uint32 hcoin_cost = 2;
  }

  message DiscountScheduleConfig {
    uint32 type = 1;
    uint32 discount = 2;
    uint32 begin_time = 3;
    uint32 end_time = 4;
    repeated uint32 para_int_list = 5;
  }

  message FriendBondLevelConfig {
    uint32 level = 1;
    uint32 min_bond = 2;
    uint32 assist_cd_reduce_rate = 3;
    uint32 invite_add_friends_point = 4;
    uint32 extra_add_mp_exp_rate = 5;
    uint32 extra_mp_add_friends_point = 6;
  }

  message AntiCheatStageCheckConfig {
    repeated uint32 check_stage_id_list = 1;
    repeated uint32 check_stage_type_list = 2;
  }

  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetConfigRsp.Retcode retcode = 1;
  uint32 stamina_recover_config_time = 2;
  uint32 avatar_revive_hcoin_cost = 4;
  uint32 same_type_power_up_rate = 5;
  uint32 day_time_offset = 6;
  uint32 server_cur_time = 7;
  uint32 power_up_scoin_cost_rate = 8;
  uint32 max_friend_num = 9;
  uint32 avatar_max_add_goodfeel = 12;
  repeated AvatarCostPlusConfig avatar_cost_plus_config_list = 13;
  uint32 disjoin_equipment_back_exp_percent = 15;
  repeated GetConfigRsp.GachaTicket gacha_ticket_list = 31;
  string region_name = 32;
  uint32 min_invite_level = 33;
  repeated GetConfigRsp.DiscountScheduleConfig discount_schedule_config_list = 35;
  uint32 island_event_refresh_interval = 36;
  bool is_random_box_product_open = 40;
  uint32 scoin_limit = 41;
  uint32 friends_point_limit = 42;
  uint32 product_random_box_begin_time = 43;
  uint32 product_random_box_end_time = 44;
  uint32 week_day_activity_coin_item_id = 45;
  uint32 island_visit_max_help_num = 46;
  uint32 cost_senior_equip_after_cancel_protect_min_time_diff = 47;
  repeated BulletinActivityConfig bulletin_activity_list = 50;
  uint32 rogue_stage_open_level = 52;
  uint32 stigmata_rune_open_level = 56;
  uint32 stigmata_promote_max_times = 59;
  uint32 stigmata_rune_combat_ratio = 60;
  uint32 stigmata_disjoin_back_exp_percent = 61;
  uint32 stigmata_refine_value_back_percent = 62;
  uint32 scoin_convert_per_exp = 64;
  uint32 mp_reset_skill_hcoin_cost = 65;
  uint32 mp_member_max_times_for_all_act = 66;
  uint32 mp_member_exhausted_drop_ratio = 67;
  repeated GetConfigRsp.FriendBondLevelConfig friend_bond_level_config_list = 68;
  uint32 friend_assistant_add_bond = 70;
  uint32 armada_manage_mail_length = 72;
  uint32 armada_contact_length = 73;
  uint32 armada_manage_mail_cd = 74;
  uint32 armada_bulletin_length = 75;
  uint32 openworld_judge_para_type1 = 76;
  uint32 openworld_judge_para_type2 = 77;
  uint32 openworld_judge_para_type3 = 78;
  uint32 openworld_judge_para_type4 = 79;
  uint32 trial_avatar_player_min_level = 80;
  uint32 disjoin_equipment_max_batch_num = 81;
  uint32 equip_disjoint_unlock_level = 82;
  repeated uint32 stage_type_limit_avatar_fight_in_venture_list = 83;
  GetConfigRsp.AntiCheatStageCheckConfig anti_cheat_stage_check_config = 85;
  bool is_can_gal_touch = 87;
  bool is_resistance_open = 88;
  uint32 next_day_begin_time = 90;
}

// CmdID: 112
message GetMissionDataReq {
}

// CmdID: 113
message GetMissionDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetMissionDataRsp.Retcode retcode = 1;
  repeated Mission mission_list = 2;
  bool is_all = 7;
  bool is_in_activity = 8;
  ChallengeMissionData challenge_mission = 9;
  repeated uint32 close_mission_list = 10;
  MainlineStepMission mainline_step = 11;
}

// CmdID: 114
message GetMissionRewardReq {
  repeated uint32 mission_id_list = 1;
}

// CmdID: 115
message GetMissionRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MISSION_ID_ERROR = 2;
    MISSION_STATUS_ERROR = 3;
    EQUIPMENT_FULL = 4;
    EQUIPMENT_MATERIAL_LIMIT = 5;
    EQUIPMENT_FRAGMENT_LIMIT = 6;
    FEATURE_CLOSED = 7;
    EQUIPMENT_ELF_FRAGMENT_LIMIT = 8;
    TIME_LIMIT = 9;
  }

  GetMissionRewardRsp.Retcode retcode = 1;
  RewardData reward_data = 2;
  repeated uint32 mission_id_list = 3;
  uint32 reward_unlock_time = 4;
}

// CmdID: 116
message DelMissionNotify {
  uint32 mission_id = 1;
}

// CmdID: 117
message UpdateMissionProgressReq {
  MissionFinishWay finish_way = 1;
  uint32 finish_para = 2;
  string finish_para_str = 3;
  uint32 progress_add = 4;
  uint32 stage_id = 5;
}

// CmdID: 118
message UpdateMissionProgressRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    FINISH_WAY_ERROR = 2;
    PLAYER_STATUS_ERROR = 3;
  }

  UpdateMissionProgressRsp.Retcode retcode = 1;
}

// CmdID: 119
message BindAccountReq {
  uint32 account_type = 1;
  string account_uid = 2;
  string account_token = 3;
  string account_ext = 4;
}

// CmdID: 120
message BindAccountRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ACCOUNT_TYPE_ERROR = 2;
    ACCOUNT_VERIFY_FAILED = 3;
    ACCOUNT_BIND_TO_OTHER_UID = 4;
    REPEAT_BIND = 5;
  }

  BindAccountRsp.Retcode retcode = 1;
  uint32 account_type = 2;
  string account_uid = 3;
}

// CmdID: 121
message GetSignInRewardStatusReq {
}

// CmdID: 122
message GetSignInRewardStatusRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetSignInRewardStatusRsp.Retcode retcode = 1;
  bool is_need_sign_in = 2;
  uint32 next_sign_in_day = 3;
  uint32 next_sign_in_reward_id = 4;
}

// CmdID: 123
message GetSignInRewardReq {
}

// CmdID: 124
message GetSignInRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    REPEAT_SIGN_IN = 2;
  }

  GetSignInRewardRsp.Retcode retcode = 1;
  repeated RewardData reward_list = 2;
}

// CmdID: 125
message GetWeekDayActivityDataReq {
}

// CmdID: 126
message GetWeekDayActivityDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetWeekDayActivityDataRsp.Retcode retcode = 1;
  repeated WeekDayActivity activity_list = 2;
  bool is_whole_data = 3;
  repeated ActivitySeries series_list = 5;
}

// CmdID: 127
message GetFinishGuideDataReq {
}

// CmdID: 128
message GetFinishGuideDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetFinishGuideDataRsp.Retcode retcode = 1;
  repeated uint32 guide_id_list = 2;
}

// CmdID: 129
message FinishGuideReportReq {
  repeated uint32 guide_id_list = 1;
  bool is_force_finish = 2;
}

// CmdID: 130
message FinishGuideReportRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  FinishGuideReportRsp.Retcode retcode = 1;
  repeated uint32 guide_id_list = 2;
  bool is_finish = 3;
}

// CmdID: 131
message StageInnerDataReportReq {
  repeated StageInnerAvatarData avatar_list = 1;
  repeated StageInnerMonsterData monster_list = 2;
  uint32 rotate_camera_times = 3;
  repeated StageInnerElfData elf_list = 4;
  uint32 stage_id = 5;
}

// CmdID: 132
message StageInnerDataReportRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  StageInnerDataReportRsp.Retcode retcode = 1;
}

// CmdID: 133
message GetDispatchReq {
}

// CmdID: 134
message GetDispatchRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    CLIENT_VERSION_ERROR = 2;
  }

}

// CmdID: 135
message ExchangeAvatarWeaponReq {
  uint32 avatar_id_1 = 1;
  uint32 avatar_id_2 = 2;
}

// CmdID: 136
message ExchangeAvatarWeaponRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    AVATAR_ERROR = 2;
    WEAPON_TYPE_ERROR = 3;
    COST_LACK = 4;
  }

  ExchangeAvatarWeaponRsp.Retcode retcode = 1;
}

// CmdID: 137
message GetBulletinReq {
  enum ReqBulletinType {
    BULLETIN_ALL = 0;
    BULLETIN_UPDATE_TIME = 1;
    BULLETIN_TITLE = 2;
    BULLETIN_CONTENT = 3;
  }

  GetBulletinReq.ReqBulletinType type = 1;
  repeated uint32 bulletin_id_list = 2;
}

// CmdID: 138
message GetBulletinRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetBulletinRsp.Retcode retcode = 1;
  repeated Bulletin bulletin_list = 2;
  bool is_all = 3;
}

// CmdID: 154
message AddGoodfeelReq {
  enum AddGoodfeelType {
    ADD_GOODFEEL_TYPE_NONE = 0;
    TOUCH = 1;
    STAGE = 2;
    DORM = 3;
  }

  uint32 avatar_id = 1;
  int32 add_goodfeel = 2;
  uint32 add_goodfeel_type = 3;
}

// CmdID: 155
message AddGoodfeelRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    AVATAR_NOT_EXIST = 2;
  }

  AddGoodfeelRsp.Retcode retcode = 1;
}

// CmdID: 179
message IslandDisjoinEquipmentReq {
  EquipmentType type = 1;
  repeated uint32 unique_id_list = 2;
  DisjoinType disjoin_type = 3;
}

// CmdID: 180
message IslandDisjoinEquipmentRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    CABIN_TECH_NOT_ADD = 2;
    CONSUME_ITEM_NOT_EXIST = 3;
    CONSUME_ITEM_IN_USE = 4;
    CONSUME_ITEM_PROTECTED = 5;
    SCOIN_LACK = 6;
    EQUIPMENT_FULL = 7;
    COST_SENIOR_EQUIP_FROM_NEW_DEVICE = 8;
    COST_SENIOR_EQUIP_CANCEL_PROTECT_TOO_SOON = 9;
    TITLE_LEVEL_ERROR = 10;
    BATCH_NUM = 11;
    LEVEL_LACK = 12;
    CONSUME_ITEM_REPEAT = 13;
    COST_GACHA_TICKET = 14;
    CONSUME_ITEM_GRAND_KEY = 15;
    CONSUME_ITEM_IN_FACILITY = 16;
    EX_DISJOIN_CURRENCY_LACK = 17;
    CONSUME_ITEM_PROTECTED_BY_SECURITY_PASSWORD = 18;
    WEAPON_HOMOLOGIED = 19;
  }

  IslandDisjoinEquipmentRsp.Retcode retcode = 1;
  repeated uint32 disjoin_unique_id_list = 2;
}

// CmdID: 185
message GetGuideRewardReq {
  uint32 guide_id = 1;
}

// CmdID: 186
message GetGuideRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    GUIDE_ERROR = 2;
    REWARD_EMPTY = 3;
  }

  GetGuideRewardRsp.Retcode retcode = 1;
  repeated RewardData reward_list = 2;
}

// CmdID: 187
message UrgencyMsgNotify {
  string msg = 1;
  SettingDict client_setting = 2;
}

// CmdID: 193
message RefineStigmataRuneReq {
  StigmataRefineType type = 1;
  uint32 unique_id = 2;
  EquipmentItemList consume_item_list = 3;
  uint32 special_id = 4;
  uint32 lock_rune_index = 5;
  bool is_retry = 6;
  StigmataRefineTimesType times_type = 7;
}

// CmdID: 194
message RefineStigmataRuneRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    STIGMATA_NOT_EXIST = 2;
    STIGMATA_NOT_IDENTIFY = 3;
    STIGMATA_CAN_NOT_REFINE = 4;
    STIGMATA_WAIT_RUNE_EXIST = 5;
    CONSUME_ITEM_NOT_EXIST = 6;
    CONSUME_ITEM_IN_USE = 7;
    CONSUME_ITEM_REPEAT = 8;
    CONSUME_ITEM_UN_NECESSARY = 9;
    CONSUME_ITEM_LACK = 10;
    ITEM_IN_CONSUME_ITEM_LIST = 11;
    CONSUME_ITEM_PROTECTED = 12;
    COST_GACHA_TICKET = 13;
    COST_SENIOR_EQUIP_FROM_NEW_DEVICE = 14;
    COST_SENIOR_EQUIP_CANCEL_PROTECT_TOO_SOON = 15;
    LEVEL_LACK = 16;
    CONSUME_ITEM_IN_FACILITY = 17;
    CONSUME_ITEM_GRAND_KEY = 18;
    SLOT_LACK = 19;
    TRIGGER_MATERIAL_LACK = 20;
    LOCK_INDEX_ERROR = 21;
    CONSUME_ITEM_PROTECTED_BY_SECURITY_PASSWORD = 22;
    NOT_OPEN = 23;
    TOO_MANY_WAIT_RUNE = 24;
  }

  RefineStigmataRuneRsp.Retcode retcode = 1;
  repeated StigmataRune rune_list = 2;
  StigmataRefineTimesType times_type = 3;
  repeated StigmataRuneGroup rune_group_list = 4;
  repeated uint32 wait_select_stgimata_list = 5;
}

// CmdID: 195
message SelectNewStigmataRuneReq {
  uint32 unique_id = 1;
  bool is_select = 2;
  StigmataRefineTimesType times_type = 3;
  uint32 select_unique_id = 4;
}

// CmdID: 196
message SelectNewStigmataRuneRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    STIGMATA_NOT_EXIST = 2;
    NO_NEW_RUNE = 3;
    SELECT_EMPTY = 4;
    NOT_OPEN = 5;
    TOO_FAST = 6;
  }

  SelectNewStigmataRuneRsp.Retcode retcode = 1;
  uint32 select_unique_id = 2;
  bool is_select = 3;
}

// CmdID: 207
message CreateWeiXinOrderReq {
  enum TradeType {
    NONE = 0;
    APP = 1;
    NATIVE = 2;
  }

  string body = 1;
  string attach = 2;
  string total_fee = 3;
  string notify_url = 4;
  CreateWeiXinOrderReq.TradeType trade_type = 5;
}

// CmdID: 208
message CreateWeiXinOrderRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  CreateWeiXinOrderRsp.Retcode retcode = 1;
  string prepay_id = 2;
  string partner_id = 3;
  string nonce_str = 4;
  string timestamp = 5;
  string sign = 6;
  string qr_code_url = 7;
}

// CmdID: 229
message CommentReportReq {
  CommentType comment = 1;
  uint32 times = 2;
}

// CmdID: 230
message CommentReportRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  CommentReportRsp.Retcode retcode = 1;
  uint32 next_evaluate_time = 2;
}

// CmdID: 231
message GetExtraStoryDataReq {
}

// CmdID: 232
message GetExtraStoryDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetExtraStoryDataRsp.Retcode retcode = 1;
  repeated ExtraStoryChapter chapter_list = 2;
  bool is_dynamic_hard_lv = 3;
  repeated uint32 chapter_key_list = 4;
  repeated uint32 taken_reward_line_id_list = 5;
  bool is_open_enhance = 6;
  repeated uint32 taken_enhance_reward_act_id_list = 7;
}

// CmdID: 233
message GetExtraStoryActivityActReq {
  uint32 chapter_id = 1;
}

// CmdID: 234
message GetExtraStoryActivityActRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    CHAPTER_NOT_EXIST = 2;
  }

  GetExtraStoryActivityActRsp.Retcode retcode = 1;
  repeated ExtraStoryAct act_list = 2;
}

// CmdID: 235
message GetExtraStoryAchieveDataReq {
  uint32 chapter_id = 1;
}

// CmdID: 236
message GetExtraStoryAchieveDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    CHAPTER_NOT_EXIST = 2;
  }

  GetExtraStoryAchieveDataRsp.Retcode retcode = 1;
  repeated ExtraStoryAchieve achieve_list = 2;
}

// CmdID: 237
message GetExtraStoryAchieveRewardReq {
  uint32 achieve_id = 1;
}

// CmdID: 238
message GetExtraStoryAchieveRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ACHIEVE_NOT_EXIST = 2;
    ACHIEVE_NOT_FINISH = 3;
    ACHIEVE_HAS_TAKEN = 4;
  }

  GetExtraStoryAchieveRewardRsp.Retcode retcode = 1;
  uint32 achieve_id = 2;
  repeated RewardData reward_list = 3;
}

// CmdID: 239
message SwitchDynamicHardLvReq {
}

// CmdID: 240
message SwitchDynamicHardLvRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  SwitchDynamicHardLvRsp.Retcode retcode = 1;
  bool is_dynamic_hard_lv = 2;
}

// CmdID: 241
message GetIslandEventReq {
}

// CmdID: 242
message GetIslandEventRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetIslandEventRsp.Retcode retcode = 1;
  repeated IslandAvatarPos avatar_pos_list = 2;
}

// CmdID: 243
message FinishIslandEventReq {
  uint32 event_id = 1;
  uint32 node_num = 2;
  bool is_get_reward = 3;
}

// CmdID: 244
message FinishIslandEventRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  FinishIslandEventRsp.Retcode retcode = 1;
  repeated RewardData reward_list = 2;
}

// CmdID: 245
message SetTransferPwdReq {
  string transfer_pwd = 1;
}

// CmdID: 246
message SetTransferPwdRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    PWD_FORMAT_ERROR = 2;
  }

  SetTransferPwdRsp.Retcode retcode = 1;
  string transfer_code = 2;
  uint32 transfer_pwd_expire_time = 3;
}

// CmdID: 247
message VerifyGoogleOrderNotify {
  enum GoogleType {
    GOOGLE_TYPE_NONE = 0;
    GOOGLE_JAPAN = 1;
    GOOGLE_TW = 2;
    GOOGLE_KR = 3;
    GOOGLE_OVERSEAS = 4;
    GOOGLE_GLOBAL = 5;
  }

  VerifyGoogleOrderNotify.GoogleType channel = 1;
  string param = 2;
}

// CmdID: 248
message SetDressReq {
  uint32 avatar_id = 1;
  uint32 dress_id = 2;
}

// CmdID: 249
message SetDressRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    AVATAR_NOT_EXIST = 2;
    DRESS_NOT_EXIST = 3;
    DRESS_CAN_NOT_USE = 4;
    DRESS_IN_USE = 5;
  }

  SetDressRsp.Retcode retcode = 1;
}

// CmdID: 250
message DressToReturnMaterialNotify {
  uint32 dress_id = 1;
  uint32 num = 2;
  uint32 scoin = 3;
  uint32 return_material_id = 4;
  uint32 return_material_num = 5;
}

// CmdID: 251
message UseMaterialReq {
  uint32 material_id = 1;
  uint32 num = 2;
  uint32 parameter = 3;
  uint32 simulate_magic = 4;
  EquipmentItemList consume_item_list = 5;
}

// CmdID: 252
message UseMaterialRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MATERIAL_LACK = 2;
    EQUIPMENT_FULL = 3;
    EQUIPMENT_MATERIAL_LIMIT = 4;
    EQUIPMENT_FRAGMENT_LIMIT = 5;
    STAMINA_FULL = 6;
    LEVEL_LACK = 7;
    EXTRA_STORY_CLOSED = 8;
    EQUIPMENT_EXPIRE = 9;
    BUFF_MATERIAL_FAIL = 10;
    ACTIVATE_AVATAR_REPEATE_FAIL = 11;
    ACTIVATE_AVATAR_LEVEL_LIMIT = 12;
    NO_ARMADA = 13;
    MATRIX_CLOSE = 14;
    EXPLORE_POWER_LIMIT = 15;
    INVALID_NUM = 16;
    TEAM_NOT_EXIST = 17;
    TEAM_FULL_ENERGE = 18;
    VITALITY_FULL = 19;
    FEATURE_CLOSED = 20;
    ACTIVITY_NOT_OPEN = 21;
    AVATAR_NEED = 22;
    CONSUME_ITEM_NOT_EXIST = 23;
    CONSUME_ITEM_IN_USE = 24;
    CONSUME_ITEM_REPEAT = 25;
    CONSUME_ITEM_PROTECTED = 26;
    COST_GACHA_TICKET = 27;
    COST_SENIOR_EQUIP_FROM_NEW_DEVICE = 28;
    COST_SENIOR_EQUIP_CANCEL_PROTECT_TOO_SOON = 29;
    CONSUME_ITEM_IN_FACILITY = 30;
    CONSUME_ITEM_GRAND_KEY = 31;
    CONSUME_ITEM_PROTECTED_BY_SECURITY_PASSWORD = 32;
    CONDITION_NOT_MEET = 33;
    NOT_MATCH = 34;
  }

  UseMaterialRsp.Retcode retcode = 1;
  repeated RewardData gift_reward_list = 2;
  repeated DropItem drop_item_list = 3;
  uint32 material_id = 4;
  uint32 num = 5;
  uint32 overflow_item_id = 6;
}

// CmdID: 253
message SwitchAvatarSubSkillReq {
  uint32 avatar_id = 1;
  uint32 skill_id = 2;
  uint32 sub_skill_id = 3;
}

// CmdID: 254
message SwitchAvatarSubSkillRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    AVATAR_NOT_EXIST = 2;
    SKILL_NOT_EXIST = 3;
    SUB_SKILL_NOT_EXIST = 4;
    SUB_SKILL_CAN_NOT_SWITCH = 5;
  }

  SwitchAvatarSubSkillRsp.Retcode retcode = 1;
}

// CmdID: 259
message ExchangeWeekDayActivityTimesReq {
  uint32 activity_id = 1;
  uint32 activity_times = 2;
}

// CmdID: 260
message ExchangeWeekDayActivityTimesRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ACTIVITY_NOT_OPEN = 2;
    COIN_LACK = 3;
    TIMES_NOT_ZERO = 4;
  }

  ExchangeWeekDayActivityTimesRsp.Retcode retcode = 1;
  uint32 coin_cost = 2;
}

// CmdID: 269
message UpdateCustomAvatarTeamReq {
  CustomAvatarTeam team = 1;
}

// CmdID: 270
message UpdateCustomAvatarTeamRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    TEAM_ID_ERROR = 2;
    AVATAR_ID_ERROR = 3;
    AVATAR_NUM_ERROR = 4;
    SENSITIVE_WORDS = 5;
    NAME_LEN_ERROR = 6;
    ELF_ID_ERROR = 7;
    ASTRA_MATE_ID_ERROR = 8;
    ELF_SYSTEM_ERROR = 9;
  }

  UpdateCustomAvatarTeamRsp.Retcode retcode = 1;
}

// CmdID: 271
message UpdateAssistantAvatarIdReq {
  uint32 avatar_id = 1;
}

// CmdID: 272
message UpdateAssistantAvatarIdRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    AVATAR_NOT_EXIST = 2;
  }

  UpdateAssistantAvatarIdRsp.Retcode retcode = 1;
}

// CmdID: 288
message TakeDutyRewardReq {
  DutyType duty_type = 1;
  repeated uint32 duty_id_list = 2;
}

// CmdID: 289
message TakeDutyRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    HAS_TAKE = 2;
    LEVEL_LACK = 3;
    DUTY_POINT_LACK = 4;
  }

  TakeDutyRewardRsp.Retcode retcode = 1;
  DutyType duty_type = 2;
  repeated RewardData reward_list = 3;
  repeated uint32 duty_id_list = 4;
}

// CmdID: 299
message ReportBirthdayReq {
  uint32 birthday = 1;
}

// CmdID: 300
message ReportBirthdayRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ACCOUNT_ERROR = 2;
    INVALID_BIRTHDAY = 3;
  }

  ReportBirthdayRsp.Retcode retcode = 1;
}

// CmdID: 301
message CreateLobbyReq {
  uint32 stage_id = 1;
  uint32 min_level = 2;
  LobbyEnterType lobby_enter_type = 3;
  uint32 max_player_num = 4;
  repeated CabinTechAddAttr cabin_attr = 5;
  uint32 client_rtt = 6;
  MpTeamMember member = 7;
  repeated uint32 avatar_trial_list = 8;
  bool is_allow_cross_region = 10;
  string team_name = 11;
  bool is_team_name_default = 13;
  uint32 max_level = 14;
}

// CmdID: 302
message CreateLobbyRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    STAGE_ERROR = 2;
    SERVER_BUSY = 3;
    BAD_NETWORK = 4;
    CLIENT_VERSION_ERROR = 5;
    NOT_ALLOWED = 6;
    NO_AVAILABLE_AVATAR = 7;
    TEAM_NAME_ERROR = 8;
    IN_SQUAD = 9;
    IN_SQUAD_MATCH = 10;
    IN_ROOM = 12;
    FEATURE_LIMIT = 13;
    MEMBER_LIMIT = 14;
    DEFAULT_TEAM_NAME_ERROR = 15;
  }

  CreateLobbyRsp.Retcode retcode = 1;
  int32 sub_retcode = 2;
  uint32 lobby_id = 3;
  uint32 stage_id = 4;
  uint32 min_level = 5;
  LobbyEnterType lobby_enter_type = 6;
  uint32 max_level = 7;
  string team_name = 8;
}

// CmdID: 303
message EnterLobbyReq {
  uint32 stage_id = 1;
  uint32 lobby_id = 2;
  bool is_friend_invitation = 3;
  uint32 level = 4;
  uint32 client_rtt = 6;
  bool has_leader_stamina = 7;
  MpTeamMember member = 8;
  bool has_leader_enter_times = 9;
  uint32 device_score = 10;
  uint32 report_num = 11;
  bool has_leader_theme_wanted_ticket = 12;
}

// CmdID: 304
message EnterLobbyRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    LOBBY_FULL = 2;
    LEVEL_NOT_SATISFY = 3;
    ALREADY_IN_LOBBY = 4;
    LOBBY_FIGHTING = 5;
    LOBBY_NOT_EXIST = 6;
    NO_LOBBY = 7;
    STAGE_ERROR = 8;
    SERVER_BUSY = 9;
    BAD_NETWORK = 10;
    CLIENT_VERSION_ERROR = 11;
    IN_MATCH_QUEUE = 12;
    MATCH_STAGE_EXCEED_MAX = 13;
    ALREADY_IN_MATCH = 14;
    NO_AVAILABLE_AVATAR = 15;
    NOT_ALLOW_CROSS_REGION = 16;
    IN_SQUAD = 17;
    IN_SQUAD_MATCH = 18;
    IN_ROOM = 19;
    FEATURE_LIMIT = 20;
    NOT_IN_SAME_ARMADA = 21;
    DATA_VERSION_CONFLICT = 22;
    FEATURE_CLOSED = 23;
  }

  EnterLobbyRsp.Retcode retcode = 1;
  int32 sub_retcode = 2;
  uint32 lobby_id = 3;
  uint32 stage_id = 4;
  uint32 avatar_id = 5;
}

// CmdID: 305
message LeaveTeamReq {
  uint32 team_id = 1;
  bool is_logout = 2;
  bool is_squeeze = 3;
}

// CmdID: 306
message LeaveTeamRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_TEAM = 2;
  }

  LeaveTeamRsp.Retcode retcode = 1;
}

// CmdID: 307
message UpdateLobbyLineupReq {
  uint32 avatar_id = 1;
  MpTeamMemberInfo member_info = 2;
  uint32 avatar_trial_id = 4;
  uint32 reclaim_avatar_id = 5;
  uint32 elf_id = 7;
  repeated uint32 backup_avatar_id_list = 8;
}

// CmdID: 308
message UpdateLobbyLineupRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_LOBBY = 2;
    AVATAR_NOT_EXIST = 3;
    STATUS_ERROR = 4;
    SERVER_BUSY = 5;
    ELF_NOT_EXIST = 6;
  }

  UpdateLobbyLineupRsp.Retcode retcode = 1;
  uint32 avatar_id = 2;
  uint32 avatar_trial_id = 3;
  uint32 reclaim_avatar_id = 4;
  uint32 elf_id = 5;
  repeated uint32 backup_avatar_id_list = 6;
}

// CmdID: 309
message SwitchMemberStatusReq {
  LobbyMemberStatus status = 1;
}

// CmdID: 310
message SwitchMemberStatusRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_LOBBY = 2;
    STATUS_ERROR = 3;
    IS_LEADER = 4;
  }

  SwitchMemberStatusRsp.Retcode retcode = 1;
}

// CmdID: 311
message LobbyStageBeginReq {
}

// CmdID: 312
message LobbyStageBeginRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_LOBBY = 2;
    LOBBY_FIGHTING = 3;
    NOT_LEADER = 4;
    MEMBER_STATUS_ERROR = 5;
    SYSTEM_ERROR = 6;
    MEMBER_NOT_ENTER_LOBBY = 7;
    MEMBER_NOT_ONLINE = 8;
    MEMBER_DUPLICATE = 9;
    MEMBER_NOT_ENOUGH = 10;
  }

  LobbyStageBeginRsp.Retcode retcode = 1;
  string fight_server_ip = 2;
  uint32 fight_server_port = 3;
  uint32 lobby_id = 4;
  repeated uint32 uid_list = 5;
  uint32 leader_uid = 6;
}

// CmdID: 313
message LobbyStageEndReq {
  uint32 lobby_id = 1;
  uint32 client_data = 2;
}

// CmdID: 314
message LobbyStageEndRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_LOBBY = 2;
    LOBBY_NOT_FIGHTING = 3;
    NOT_LEADER = 4;
    SYSTEM_ERROR = 5;
  }

  LobbyStageEndRsp.Retcode retcode = 1;
  uint32 lobby_id = 2;
}

// CmdID: 317
message KickLobbyMemberReq {
  uint32 target_uid = 1;
}

// CmdID: 318
message KickLobbyMemberRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_LOBBY = 2;
    NOT_LEADER = 3;
    TARGET_NOT_EXIST = 4;
  }

  KickLobbyMemberRsp.Retcode retcode = 1;
}

// CmdID: 319
message SetLobbyFastEntranceReq {
  uint32 lobby_id = 1;
  bool is_open = 2;
}

// CmdID: 320
message SetLobbyFastEntranceRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  uint32 lobby_id = 1;
  SetLobbyFastEntranceRsp.Retcode retcode = 2;
  bool is_open = 3;
}

// CmdID: 321
message LobbyEnterFightErrorNotify {
  enum Retcode {
    SUCC = 0;
    CONNECT_TIMEOUT = 1;
    BEGIN_STAGE_FAIL = 2;
  }

  uint32 lobby_id = 1;
  LobbyEnterFightErrorNotify.Retcode retcode = 2;
  repeated uint32 uid_list = 3;
  uint32 sub_retcode = 4;
}

// CmdID: 332
message PromoteStigmataRuneReq {
  uint32 unique_id = 1;
}

// CmdID: 333
message PromoteStigmataRuneRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    STIGMATA_NOT_EXIST = 2;
    MATERIAL_LACK = 3;
    STIGMATA_NOT_IDENTIFY = 4;
    CAN_NOT_PROMOTE = 5;
    TIMES_LIMIT = 6;
    LEVEL_LACK = 7;
    TOO_MANY_WAIT_RUNE = 8;
  }

  PromoteStigmataRuneRsp.Retcode retcode = 1;
  repeated uint32 wait_select_stgimata_list = 5;
}

// CmdID: 340
message GetMpDataReq {
  MpDataType data_type = 1;
}

// CmdID: 341
message GetMpDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  enum OpType {
    INIT_DATA = 0;
    ADD_DATA = 1;
    UPDATE_DATA = 2;
  }

  GetMpDataRsp.Retcode retcode = 1;
  MpDataType data_type = 2;
  GetMpDataRsp.OpType op_type = 3;
  uint32 mp_level = 4;
  uint32 mp_exp = 5;
  repeated MpSkillPoint skill_point_list = 6;
  repeated MpSkill skill_list = 7;
  uint32 team_avatar_id = 8;
  uint32 punish_end_time = 9;
}

// CmdID: 342
message MpUpgradeSkillReq {
  uint32 skill_id = 1;
}

// CmdID: 343
message MpUpgradeSkillRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    POINT_NOT_ENOUGH = 2;
    IS_MAX_LEVEL = 3;
  }

  MpUpgradeSkillRsp.Retcode retcode = 1;
  uint32 skill_id = 2;
}

// CmdID: 344
message MpResetSkillPointReq {
  MpSkillType type = 1;
}

// CmdID: 345
message MpResetSkillPointRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    COIN_NOT_ENOUGH = 2;
  }

  MpResetSkillPointRsp.Retcode retcode = 1;
  MpSkillType type = 2;
}

// CmdID: 346
message MpGetTeamReq {
}

// CmdID: 347
message MpGetTeamRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_TEAM = 2;
    DISCONNECT = 3;
    KICK = 4;
  }

  MpGetTeamRsp.Retcode retcode = 1;
  MpTeamData team_data = 2;
}

// CmdID: 395
message MpTeamSyncNotify {
  MpTeamData team_data = 1;
}

// CmdID: 348
message MpCreateTeamReq {
  MpTeamMember member = 1;
}

// CmdID: 349
message MpCreateTeamRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ALREADY_IN_TEAM = 2;
    CLIENT_VERSION_ERROR = 3;
    SERVER_BUSY = 4;
    IN_SQUAD = 5;
    IN_SQUAD_MATCH = 6;
    IN_ROOM = 7;
    FEATURE_LIMIT = 8;
  }

  MpCreateTeamRsp.Retcode retcode = 1;
  uint32 team_id = 2;
}

// CmdID: 350
message MpEnterTeamReq {
  uint32 team_id = 1;
  MpTeamMember member = 2;
  uint32 uid = 3;
}

// CmdID: 351
message MpEnterTeamRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    TEAM_NOT_EXIST = 2;
    TEAM_FULL = 3;
    TEAM_ENTER_LOBBY = 4;
    TEAM_IN_LOBBY = 5;
    TEAM_IN_FIGHT = 6;
    ALREADY_IN_TEAM = 7;
    CLIENT_VERSION_ERROR = 8;
    SERVER_BUSY = 9;
    IN_SQUAD = 10;
    IN_SQUAD_MATCH = 11;
    IN_ROOM = 12;
    CONDITION_NOT_MEET = 13;
    FEATURE_LIMIT = 14;
    DATA_VERSION_CONFLICT = 15;
  }

  MpEnterTeamRsp.Retcode retcode = 1;
  uint32 team_id = 2;
  uint32 stage_id = 3;
}

// CmdID: 352
message GetTeamBriefInfoReq {
  uint32 team_id = 1;
  bool is_friend_invitation = 2;
}

// CmdID: 353
message GetTeamBriefInfoRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    TEAM_NOT_EXIST = 2;
  }

  GetTeamBriefInfoRsp.Retcode retcode = 1;
  uint32 team_id = 2;
  MpTeamStatus status = 3;
  uint32 stage_id = 4;
  bool is_friend_invitation = 5;
}

// CmdID: 354
message MpKickFromTeamReq {
  uint32 member_uid = 1;
}

// CmdID: 355
message MpKickFromTeamRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_TEAM = 2;
  }

  MpKickFromTeamRsp.Retcode retcode = 1;
  uint32 member_uid = 2;
}

// CmdID: 356
message MpTeamEnterLobbyReq {
  uint32 stage_id = 1;
  LobbyEnterType lobby_enter_type = 2;
  uint32 min_level = 3;
  string team_name = 4;
  bool is_team_name_default = 6;
  uint32 max_level = 7;
}

// CmdID: 357
message MpTeamEnterLobbyRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_TEAM = 2;
    MEMBER_EXCEED_MAX = 3;
    MEMBER_OFFLINE = 4;
    IN_ENTER_LOBBY = 5;
    ENTER_TIME_OUT = 6;
    STAGE_ERROR = 7;
    NOT_LEADER = 8;
    MEMBER_NOT_ENTER_TEAM_UI = 9;
    NO_AVAILABLE_AVATAR = 10;
    TEAM_NOT_SATIFY_RAID = 11;
    NOT_ALLOW_CROSS_REGION = 12;
    TEAM_NAME_ERROR = 13;
    DEFAULT_TEAM_NAME_ERROR = 14;
  }

  MpTeamEnterLobbyRsp.Retcode retcode = 1;
  int32 sub_retcode = 2;
  uint32 error_uid = 3;
  uint32 stage_id = 4;
  uint32 team_id = 5;
  string team_name = 6;
}

// CmdID: 362
message MpTeamChangeLeaderReq {
  uint32 new_leader_uid = 1;
}

// CmdID: 363
message MpTeamChangeLeaderRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_TEAM = 2;
    NOT_LEADER = 3;
    NOT_ENOUGH_STAMINA = 4;
    NOT_ENOUGH_ENTER_TIMES = 5;
    NOT_ALLOW_CHANGE_LEADER = 6;
  }

  MpTeamChangeLeaderRsp.Retcode retcode = 1;
}

// CmdID: 364
message GetGobackReq {
}

message GobackActivity {
  uint32 id = 1;
  uint32 end_time = 2;
}

message GobackActivityLoginReward {
  uint32 take_days = 1;
  repeated uint32 take_reward_list = 2;
  repeated uint32 take_bonus_reward_list = 3;
}

message GobackFund {
  uint32 id = 1;
  bool is_unlocked = 2;
  repeated uint32 has_take_reward_progress_list = 3;
}

message GobackGrowUpActivity {
  repeated uint32 joined_rank_id_list = 1;
}

message GobackSpecialBp {
  uint32 bp_id = 1;
  uint32 level = 2;
  uint32 exp = 3;
  bool is_purchased = 4;
  uint32 free_reward_max_take_level = 5;
  uint32 purchase_reward_max_take_level = 6;
}

message GobackSpecial {
  uint32 special_id = 1;
  GobackSpecialBp special_bp = 2;
}

// CmdID: 365
message GetGobackRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetGobackRsp.Retcode retcode = 1;
  uint32 goback_end_time = 2;
  uint32 login_days = 3;
  repeated uint32 has_take_days_reward_list = 4;
  repeated uint32 has_take_days_bonus_reward_list = 5;
  repeated GobackActivity goback_activity_list = 6;
  uint32 score = 7;
  repeated uint32 has_take_score_reward_list = 8;
  uint32 schedule_id = 9;
  repeated GobackActivityLoginReward login_reward_list = 10;
  GobackFund fund = 11;
  GobackGrowUpActivity goback_grow_up_activity = 12;
  GobackSpecial goback_special = 13;
  uint32 goback_level = 14;
  uint32 goback_newbie_level = 15;
}

// CmdID: 366
message TakeGobackLoginRewardReq {
  uint32 take_days = 1;
  uint32 reward_type = 2;
  repeated uint32 reward_list = 3;
}

// CmdID: 367
message TakeGobackLoginRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    HAS_TAKE = 2;
    LOGIN_DAYS_LACK = 3;
    NOT_GOBACK = 4;
    REWARD_TYPE_ERROR = 5;
    SELECT_REWARD_ERROR = 6;
  }

  TakeGobackLoginRewardRsp.Retcode retcode = 1;
  uint32 take_days = 2;
  repeated RewardData reward_list = 3;
  uint32 reward_type = 4;
  repeated uint32 reward_id_list = 5;
}

// CmdID: 371
message TeamLeaderChangeNotify {
  uint32 team_id = 1;
  uint32 old_leader = 2;
  uint32 new_leader = 3;
  bool is_timeout = 4;
}

// CmdID: 373
message MpTeamLeaveLobbyReq {
}

// CmdID: 374
message MpTeamLeaveLobbyRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_LEADER = 2;
    NOT_IN_TEAM = 3;
    NOT_IN_LOBBY = 4;
    LEADER_IS_WILD = 5;
  }

  MpTeamLeaveLobbyRsp.Retcode retcode = 1;
}

// CmdID: 375
message MpMemberSetClientStatusReq {
  MpMemberClientStatus status = 1;
}

// CmdID: 376
message MpMemberSetClientStatusRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_TEAM = 2;
  }

  MpMemberSetClientStatusRsp.Retcode retcode = 1;
}

// CmdID: 381
message MpReportPlayerReq {
  uint32 target_uid = 1;
}

// CmdID: 382
message MpReportPlayerRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_TEAM = 2;
    ALREADY_REPORT = 3;
  }

  MpReportPlayerRsp.Retcode retcode = 1;
  uint32 target_uid = 2;
  bool report_success = 3;
  uint32 judge_term = 4;
}

// CmdID: 391
message MpStageSettleNotify {
  uint32 team_id = 1;
  repeated MpStageSettle settle_list = 2;
}

// CmdID: 392
message MpLikePlayerReq {
  uint32 target_uid = 1;
}

// CmdID: 393
message MpLikePlayerRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_TEAM = 2;
    HAS_LIKE = 3;
  }

  MpLikePlayerRsp.Retcode retcode = 1;
  uint32 target_uid = 2;
  uint32 from_uid = 3;
  uint32 target_like_num = 4;
  uint32 add_friends_point = 5;
}

// CmdID: 394
message FriendBondNotify {
  uint32 friend_uid = 1;
  uint32 bond = 2;
}

// CmdID: 396
message MpTeamMemberSetVoiceIdReq {
  uint32 voice_id = 1;
}

// CmdID: 397
message MpTeamMemberSetVoiceIdRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_TEAM = 2;
  }

  MpTeamMemberSetVoiceIdRsp.Retcode retcode = 1;
  uint32 uid = 2;
  uint32 voice_id = 3;
}

// CmdID: 398
message ReportClientDataVersionReq {
  uint32 version = 1;
}

// CmdID: 399
message ReportClientDataVersionRsp {
  uint32 server_version = 1;
}

enum CmdTypeOne {
  CMD_TYPE_ONE_NONE = 0;
  CMD_KEEP_ALIVE_NOTIFY = 1;
  CMD_GET_GAMESERVER_REQ = 2;
  CMD_GET_GAMESERVER_RSP = 3;
  CMD_GET_PLAYER_TOKEN_REQ = 4;
  CMD_GET_PLAYER_TOKEN_RSP = 5;
  CMD_PLAYER_LOGIN_REQ = 6;
  CMD_PLAYER_LOGIN_RSP = 7;
  CMD_PLAYER_LOGOUT_REQ = 8;
  CMD_PLAYER_LOGOUT_RSP = 9;
  CMD_GET_MAIN_DATA_REQ = 10;
  CMD_GET_MAIN_DATA_RSP = 11;
  CMD_GET_SCOIN_EXCHANGE_INFO_REQ = 12;
  CMD_GET_SCOIN_EXCHANGE_INFO_RSP = 13;
  CMD_SCOIN_EXCHANGE_REQ = 14;
  CMD_SCOIN_EXCHANGE_RSP = 15;
  CMD_GET_STAMINA_EXCHANGE_INFO_REQ = 16;
  CMD_GET_STAMINA_EXCHANGE_INFO_RSP = 17;
  CMD_STAMINA_EXCHANGE_REQ = 18;
  CMD_STAMINA_EXCHANGE_RSP = 19;
  CMD_NICKNAME_MODIFY_REQ = 20;
  CMD_NICKNAME_MODIFY_RSP = 21;
  CMD_GM_TALK_REQ = 22;
  CMD_GM_TALK_RSP = 23;
  CMD_GET_AVATAR_DATA_REQ = 24;
  CMD_GET_AVATAR_DATA_RSP = 25;
  CMD_GET_EQUIPMENT_DATA_REQ = 26;
  CMD_GET_EQUIPMENT_DATA_RSP = 27;
  CMD_DEL_EQUIPMENT_NOTIFY = 28;
  CMD_AVATAR_STAR_UP_REQ = 29;
  CMD_AVATAR_STAR_UP_RSP = 30;
  CMD_EQUIPMENT_POWER_UP_REQ = 31;
  CMD_EQUIPMENT_POWER_UP_RSP = 32;
  CMD_EQUIPMENT_SELL_REQ = 33;
  CMD_EQUIPMENT_SELL_RSP = 34;
  CMD_ADD_AVATAR_EXP_BY_MATERIAL_REQ = 35;
  CMD_ADD_AVATAR_EXP_BY_MATERIAL_RSP = 36;
  CMD_EQUIPMENT_EVO_REQ = 37;
  CMD_EQUIPMENT_EVO_RSP = 38;
  CMD_DRESS_EQUIPMENT_REQ = 39;
  CMD_DRESS_EQUIPMENT_RSP = 40;
  CMD_GET_STAGE_DATA_REQ = 41;
  CMD_GET_STAGE_DATA_RSP = 42;
  CMD_STAGE_BEGIN_REQ = 43;
  CMD_STAGE_BEGIN_RSP = 44;
  CMD_STAGE_END_REQ = 45;
  CMD_STAGE_END_RSP = 46;
  CMD_GET_AVATAR_TEAM_DATA_REQ = 47;
  CMD_GET_AVATAR_TEAM_DATA_RSP = 48;
  CMD_UPDATE_AVATAR_TEAM_NOTIFY = 49;
  CMD_AVATAR_SUB_SKILL_LEVEL_UP_REQ = 50;
  CMD_AVATAR_SUB_SKILL_LEVEL_UP_RSP = 51;
  CMD_MATERIAL_EVO_REQ = 56;
  CMD_MATERIAL_EVO_RSP = 57;
  CMD_GET_STAGE_DROP_DISPLAY_REQ = 60;
  CMD_GET_STAGE_DROP_DISPLAY_RSP = 61;
  CMD_GET_FRIEND_LIST_REQ = 64;
  CMD_GET_FRIEND_LIST_RSP = 65;
  CMD_ADD_FRIEND_REQ = 66;
  CMD_ADD_FRIEND_RSP = 67;
  CMD_DEL_FRIEND_REQ = 68;
  CMD_DEL_FRIEND_RSP = 69;
  CMD_GET_ASK_ADD_FRIEND_LIST_REQ = 70;
  CMD_GET_ASK_ADD_FRIEND_LIST_RSP = 71;
  CMD_GET_PLAYER_DETAIL_DATA_REQ = 72;
  CMD_GET_PLAYER_DETAIL_DATA_RSP = 73;
  CMD_UPDATE_EQUIPMENT_PROTECTED_STATUS_REQ = 74;
  CMD_UPDATE_EQUIPMENT_PROTECTED_STATUS_RSP = 75;
  CMD_GET_RECOMMEND_FRIEND_LIST_REQ = 76;
  CMD_GET_RECOMMEND_FRIEND_LIST_RSP = 77;
  CMD_SET_SELF_DESC_REQ = 78;
  CMD_SET_SELF_DESC_RSP = 79;
  CMD_DEL_FRIEND_NOTIFY = 80;
  CMD_GET_OFFLINE_FRIENDS_POINT_NOTIFY = 81;
  CMD_VERIFY_ITUNES_ORDER_NOTIFY = 82;
  CMD_GET_MAIL_DATA_REQ = 84;
  CMD_GET_MAIL_DATA_RSP = 85;
  CMD_GET_MAIL_ATTACHMENT_REQ = 86;
  CMD_GET_MAIL_ATTACHMENT_RSP = 87;
  CMD_UNLOCK_AVATAR_SKILL_REQ = 88;
  CMD_UNLOCK_AVATAR_SKILL_RSP = 89;
  CMD_EQUIPMENT_QUICK_LEVEL_UP_REQ = 90;
  CMD_EQUIPMENT_QUICK_LEVEL_UP_RSP = 91;
  CMD_REFRESH_AVATAR_SKILL_REQ = 92;
  CMD_REFRESH_AVATAR_SKILL_RSP = 93;
  CMD_GET_ASSISTANT_FROZEN_LIST_REQ = 100;
  CMD_GET_ASSISTANT_FROZEN_LIST_RSP = 101;
  CMD_SELL_AVATAR_FRAGMENT_REQ = 102;
  CMD_SELL_AVATAR_FRAGMENT_RSP = 103;
  CMD_GET_HAS_GOT_ITEM_ID_LIST_REQ = 104;
  CMD_GET_HAS_GOT_ITEM_ID_LIST_RSP = 105;
  CMD_AVATAR_REVIVE_REQ = 106;
  CMD_AVATAR_REVIVE_RSP = 107;
  CMD_RESET_STAGE_ENTER_TIMES_REQ = 108;
  CMD_RESET_STAGE_ENTER_TIMES_RSP = 109;
  CMD_GET_CONFIG_REQ = 110;
  CMD_GET_CONFIG_RSP = 111;
  CMD_GET_MISSION_DATA_REQ = 112;
  CMD_GET_MISSION_DATA_RSP = 113;
  CMD_GET_MISSION_REWARD_REQ = 114;
  CMD_GET_MISSION_REWARD_RSP = 115;
  CMD_DEL_MISSION_NOTIFY = 116;
  CMD_UPDATE_MISSION_PROGRESS_REQ = 117;
  CMD_UPDATE_MISSION_PROGRESS_RSP = 118;
  CMD_BIND_ACCOUNT_REQ = 119;
  CMD_BIND_ACCOUNT_RSP = 120;
  CMD_GET_SIGN_IN_REWARD_STATUS_REQ = 121;
  CMD_GET_SIGN_IN_REWARD_STATUS_RSP = 122;
  CMD_GET_SIGN_IN_REWARD_REQ = 123;
  CMD_GET_SIGN_IN_REWARD_RSP = 124;
  CMD_GET_WEEK_DAY_ACTIVITY_DATA_REQ = 125;
  CMD_GET_WEEK_DAY_ACTIVITY_DATA_RSP = 126;
  CMD_GET_FINISH_GUIDE_DATA_REQ = 127;
  CMD_GET_FINISH_GUIDE_DATA_RSP = 128;
  CMD_FINISH_GUIDE_REPORT_REQ = 129;
  CMD_FINISH_GUIDE_REPORT_RSP = 130;
  CMD_STAGE_INNER_DATA_REPORT_REQ = 131;
  CMD_STAGE_INNER_DATA_REPORT_RSP = 132;
  CMD_GET_DISPATCH_REQ = 133;
  CMD_GET_DISPATCH_RSP = 134;
  CMD_EXCHANGE_AVATAR_WEAPON_REQ = 135;
  CMD_EXCHANGE_AVATAR_WEAPON_RSP = 136;
  CMD_GET_BULLETIN_REQ = 137;
  CMD_GET_BULLETIN_RSP = 138;
  CMD_ADD_GOODFEEL_REQ = 154;
  CMD_ADD_GOODFEEL_RSP = 155;
  CMD_ISLAND_DISJOIN_EQUIPMENT_REQ = 179;
  CMD_ISLAND_DISJOIN_EQUIPMENT_RSP = 180;
  CMD_GET_GUIDE_REWARD_REQ = 185;
  CMD_GET_GUIDE_REWARD_RSP = 186;
  CMD_URGENCY_MSG_NOTIFY = 187;
  CMD_REFINE_STIGMATA_RUNE_REQ = 193;
  CMD_REFINE_STIGMATA_RUNE_RSP = 194;
  CMD_SELECT_NEW_STIGMATA_RUNE_REQ = 195;
  CMD_SELECT_NEW_STIGMATA_RUNE_RSP = 196;
  CMD_CREATE_WEIXIN_ORDER_REQ = 207;
  CMD_CREATE_WEIXIN_ORDER_RSP = 208;
  CMD_COMMENT_REPORT_REQ = 229;
  CMD_COMMENT_REPORT_RSP = 230;
  CMD_GET_EXTRA_STORY_DATA_REQ = 231;
  CMD_GET_EXTRA_STORY_DATA_RSP = 232;
  CMD_GET_EXTRA_STORY_ACTIVITY_ACT_REQ = 233;
  CMD_GET_EXTRA_STORY_ACTIVITY_ACT_RSP = 234;
  CMD_GET_EXTRA_STORY_ACHIEVE_DATA_REQ = 235;
  CMD_GET_EXTRA_STORY_ACHIEVE_DATA_RSP = 236;
  CMD_GET_EXTRA_STORY_ACHIEVE_REWARD_REQ = 237;
  CMD_GET_EXTRA_STORY_ACHIEVE_REWARD_RSP = 238;
  CMD_SWITCH_DYNAMIC_HARD_LV_REQ = 239;
  CMD_SWITCH_DYNAMIC_HARD_LV_RSP = 240;
  CMD_GET_ISLAND_EVENT_REQ = 241;
  CMD_GET_ISLAND_EVENT_RSP = 242;
  CMD_FINISH_ISLAND_EVENT_REQ = 243;
  CMD_FINISH_ISLAND_EVENT_RSP = 244;
  CMD_SET_TRANSFER_PWD_REQ = 245;
  CMD_SET_TRANSFER_PWD_RSP = 246;
  CMD_VERIFY_GOOGLE_ORDER_NOTIFY = 247;
  CMD_SET_DRESS_REQ = 248;
  CMD_SET_DRESS_RSP = 249;
  CMD_DRESS_TO_RETURN_MATERIAL_NOTIFY = 250;
  CMD_USE_MATERIAL_REQ = 251;
  CMD_USE_MATERIAL_RSP = 252;
  CMD_SWITCH_AVATAR_SUB_SKILL_REQ = 253;
  CMD_SWITCH_AVATAR_SUB_SKILL_RSP = 254;
  CMD_EXCHANGE_WEEK_DAY_ACTIVITY_TIMES_REQ = 259;
  CMD_EXCHANGE_WEEK_DAY_ACTIVITY_TIMES_RSP = 260;
  CMD_UPDATE_CUSTOM_AVATAR_TEAM_REQ = 269;
  CMD_UPDATE_CUSTOM_AVATAR_TEAM_RSP = 270;
  CMD_UPDATE_ASSISTANT_AVATAR_ID_REQ = 271;
  CMD_UPDATE_ASSISTANT_AVATAR_ID_RSP = 272;
  CMD_TAKE_DUTY_REWARD_REQ = 288;
  CMD_TAKE_DUTY_REWARD_RSP = 289;
  CMD_REPORT_BIRTHDAY_REQ = 299;
  CMD_REPORT_BIRTHDAY_RSP = 300;
  CMD_CREATE_LOBBY_REQ = 301;
  CMD_CREATE_LOBBY_RSP = 302;
  CMD_ENTER_LOBBY_REQ = 303;
  CMD_ENTER_LOBBY_RSP = 304;
  CMD_LEAVE_TEAM_REQ = 305;
  CMD_LEAVE_TEAM_RSP = 306;
  CMD_UPDATE_LOBBY_LINEUP_REQ = 307;
  CMD_UPDATE_LOBBY_LINEUP_RSP = 308;
  CMD_SWITCH_MEMBER_STATUS_REQ = 309;
  CMD_SWITCH_MEMBER_STATUS_RSP = 310;
  CMD_LOBBY_STAGE_BEGIN_REQ = 311;
  CMD_LOBBY_STAGE_BEGIN_RSP = 312;
  CMD_LOBBY_STAGE_END_REQ = 313;
  CMD_LOBBY_STAGE_END_RSP = 314;
  CMD_KICK_LOBBY_MEMBER_REQ = 317;
  CMD_KICK_LOBBY_MEMBER_RSP = 318;
  CMD_SET_LOBBY_FAST_ENTRANCE_REQ = 319;
  CMD_SET_LOBBY_FAST_ENTRANCE_RSP = 320;
  CMD_LOBBY_ENTER_FIGHT_ERROR_NOTIFY = 321;
  CMD_PROMOTE_STIGMATA_RUNE_REQ = 332;
  CMD_PROMOTE_STIGMATA_RUNE_RSP = 333;
  CMD_GET_MP_DATA_REQ = 340;
  CMD_GET_MP_DATA_RSP = 341;
  CMD_MP_UPGRADE_SKILL_REQ = 342;
  CMD_MP_UPGRADE_SKILL_RSP = 343;
  CMD_MP_RESET_SKILL_POINT_REQ = 344;
  CMD_MP_RESET_SKILL_POINT_RSP = 345;
  CMD_MP_GET_TEAM_REQ = 346;
  CMD_MP_GET_TEAM_RSP = 347;
  CMD_MP_CREATE_TEAM_REQ = 348;
  CMD_MP_CREATE_TEAM_RSP = 349;
  CMD_MP_ENTER_TEAM_REQ = 350;
  CMD_MP_ENTER_TEAM_RSP = 351;
  CMD_GET_TEAM_BRIEF_INFO_REQ = 352;
  CMD_GET_TEAM_BRIEF_INFO_RSP = 353;
  CMD_MP_KICK_FROM_TEAM_REQ = 354;
  CMD_MP_KICK_FROM_TEAM_RSP = 355;
  CMD_MP_TEAM_ENTER_LOBBY_REQ = 356;
  CMD_MP_TEAM_ENTER_LOBBY_RSP = 357;
  CMD_MP_TEAM_CHANGE_LEADER_REQ = 362;
  CMD_MP_TEAM_CHANGE_LEADER_RSP = 363;
  CMD_GET_GOBACK_REQ = 364;
  CMD_GET_GOBACK_RSP = 365;
  CMD_TAKE_GOBACK_LOGIN_REWARD_REQ = 366;
  CMD_TAKE_GOBACK_LOGIN_REWARD_RSP = 367;
  CMD_TEAM_LEADER_CHANGE_NOTIFY = 371;
  CMD_MP_TEAM_LEAVE_LOBBY_REQ = 373;
  CMD_MP_TEAM_LEAVE_LOBBY_RSP = 374;
  CMD_MP_MEMBER_SET_CLIENT_STATUS_REQ = 375;
  CMD_MP_MEMBER_SET_CLIENT_STATUS_RSP = 376;
  CMD_MP_STAGE_END_REQ = 379;
  CMD_MP_STAGE_END_RSP = 380;
  CMD_MP_REPORT_PLAYER_REQ = 381;
  CMD_MP_REPORT_PLAYER_RSP = 382;
  CMD_MP_STAGE_SETTLE_NOTIFY = 391;
  CMD_MP_LIKE_PLAYER_REQ = 392;
  CMD_MP_LIKE_PLAYER_RSP = 393;
  CMD_FRIEND_BOND_NOTIFY = 394;
  CMD_MP_TEAM_SYNC_NOTIFY = 395;
  CMD_MP_TEAM_MEMBER_SET_VOICE_ID_REQ = 396;
  CMD_MP_TEAM_MEMBER_SET_VOICE_ID_RSP = 397;
  CMD_REPORT_CLIENT_DATA_VERSION_REQ = 398;
  CMD_REPORT_CLIENT_DATA_VERSION_RSP = 399;
}

enum PanelActivityType {
  PANEL_ACTIVITY_TYPE_NONE = 0;
  PANEL_ACTIVITY_THEME = 2;
  PANEL_ACTIVITY_BATTLE_PASS = 6;
  PANEL_ACTIVITY_GLOBAL_WAR = 7;
  PANEL_ACTIVITY_SLG = 8;
  PANEL_ACTIVITY_GLOBAL_POLLING = 9;
  PANEL_ACTIVITY_COLLABORATION = 10;
}

enum EnterTimesType {
  ENTER_TIMES_TYPE_NONE = 0;
  ACITIVYT_TIMES_REF = 1;
  STAGE_TIMES_REF = 2;
}

enum GobackHcoinSourceType {
  GOBACK_HCOIN_SOURCE_TYPE_NONE = 0;
  GOBACK_HCOIN_SOURCE_LOGIN_REWARD = 1;
  GOBACK_HCOIN_SOURCE_REWARD_LINE = 2;
}

message OpenworldStat {
  uint32 id = 1;
  uint32 max_num = 2;
  uint32 finish_num = 3;
}

message OpenworldStageAvatarInfo {
  uint32 avatar_id = 1;
  uint32 hp_percent = 2;
  uint32 sp_percent = 3;
  uint32 revive_time = 4;
  uint32 last_hp_recover_time = 5;
}

message OpenworldStageArea {
  uint32 area_id = 1;
  repeated uint32 avatar_list = 2;
  repeated uint32 weapon_uid_list = 3;
  repeated uint32 stigmata_uid_list = 4;
}

message OpenworldStageInner {
  uint32 condition_type = 1;
  uint32 condition_value = 2;
}

message OpenworldQuestData {
  uint32 level = 1;
  uint32 star = 2;
  bool is_open = 3;
  uint32 day_open_times = 4;
  repeated OpenworldQuest quest_list = 5;
  uint32 refresh_left_times = 6;
  uint32 next_refresh_cost = 7;
  OpenworldQuest key_quest = 8;
  uint32 max_quest_level = 9;
  bool is_can_abandon = 10;
  uint32 challenge_score = 11;
  repeated uint32 finish_key_quest_list = 12;
  bool is_quest_finish = 13;
  uint32 open_quest_time = 14;
}

message OpenworldOverView {
  uint32 mission_id = 1;
  uint32 progress = 2;
}

message OpenworldCook {
  uint32 cook_id = 1;
  uint32 eat_num = 2;
}

message OpenworldStory {
  uint32 story_id = 1;
  uint32 story_progress = 2;
  uint32 accept_time = 3;
}

message OpenworldTechData {
  uint32 map_id = 1;
  uint32 level = 2;
  uint32 exp = 3;
  uint32 next_collect_time = 4;
  uint32 skill_point = 5;
  repeated uint32 unlock_skill_list = 6;
}

message OpenworldMapBriefData {
  uint32 map_id = 1;
  uint32 status = 2;
  repeated OpenworldStat stat_list = 3;
  uint32 cycle = 4;
  uint32 quest_level = 5;
  uint32 has_take_finish_reward_cycle = 6;
  bool is_once_unlocked = 7;
}

message OpenworldEvent {
  uint32 event_id = 1;
  repeated DropItem drop_item_list = 2;
}

message OpenworldBossHunt {
  uint32 map_id = 1;
  uint32 cur_boss_id = 2;
  repeated OpenworldBoss boss_list = 3;
  uint32 last_choose_boss_time = 4;
  repeated uint32 have_take_rating_reward_list = 5;
  bool is_call_boss = 6;
  repeated uint32 killed_boss_id_list = 7;
}

message OpenworldActivity {
  uint32 activity_id = 1;
  uint32 phase_id = 2;
  uint32 activity_level = 3;
  uint32 activity_exp = 4;
  repeated uint32 activity_reward_taken_level_list = 5;
  repeated uint32 activity_treasure_taken_list = 6;
}

message OpenworldBoss {
  uint32 boss_id = 1;
  uint32 left_hp = 2;
  uint32 clue_progress = 3;
  uint32 search_time = 4;
  uint32 battle_time = 5;
  bool is_take_kill_reward = 6;
  uint32 location_idx = 7;
  repeated uint32 boss_killed_avatar_list = 9;
  uint32 mp_left_hp = 10;
  uint32 min_kill_time = 11;
}

message OpenworldAreaInfo {
  uint32 area_id = 1;
  repeated string info_list = 2;
}

message OpenworldEntityState {
  uint32 entity_id = 1;
  uint32 entity_state = 2;
}

message OpenworldAreaEntityState {
  uint32 area_id = 1;
  repeated OpenworldEntityState entity_state_list = 2;
}

message OpenworldPeriodSettleData {
  uint32 map_id = 1;
  uint32 settle_level = 2;
  uint32 old_level = 3;
  uint32 old_star = 4;
  uint32 cur_level = 5;
  uint32 cur_star = 6;
  uint32 sub_star = 7;
  RewardData normal_reward = 8;
  RewardData up_reward = 9;
}

// CmdID: 4450
message OpenworldPeriodSettleNotify {
  repeated OpenworldPeriodSettleData settle_map_list = 1;
}

// CmdID: 4451
message OpenworldWeeklySettleNotify {
  uint32 map_id = 1;
  uint32 quest_level = 2;
  RewardData reward = 3;
}

message OpenworldMechaPort {
  MechaSlot slot = 1;
  uint32 mecha_id = 2;
}

// CmdID: 4452
message AcceptOpenworldStoryReq {
  uint32 story_id = 1;
  string report_ext = 2;
}

// CmdID: 4453
message AcceptOpenworldStoryRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    CYCLE_NOT_MATCH = 2;
    PRE_STORY_NOT_FINISH = 3;
    STORY_NOT_BEGIN = 4;
    QUEST_LEVEL_LIMIT = 5;
    STORY_DOING = 6;
    STORY_DONE = 7;
    TECH_LEVEL_LIMIT = 8;
    CONDITION_NOT_MEET = 9;
  }

  AcceptOpenworldStoryRsp.Retcode retcode = 1;
  uint32 story_id = 2;
}

// CmdID: 4454
message SetOpenworldStoryProgressReq {
  uint32 story_id = 1;
  uint32 story_progress = 2;
}

// CmdID: 4455
message SetOpenworldStoryProgressRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    STORY_NOT_FOUND = 2;
  }

  SetOpenworldStoryProgressRsp.Retcode retcode = 1;
  uint32 story_id = 2;
}

// CmdID: 4456
message TakeOpenworldStoryRewardReq {
  uint32 story_id = 1;
  bool is_accept_follow_story = 2;
  string report_ext = 3;
}

// CmdID: 4457
message TakeOpenworldStoryRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    STORY_NOT_FOUND = 2;
  }

  TakeOpenworldStoryRewardRsp.Retcode retcode = 1;
  repeated RewardData reward_list = 2;
  uint32 story_id = 3;
  repeated uint32 accept_story_id_list = 4;
  bool is_accept_follow_story = 5;
}

// CmdID: 4458
message TakeOpenworldEventRewardReq {
  uint32 event_id = 1;
  repeated DropItem drop_item_list = 2;
  uint32 map_id = 3;
  string report_ext = 4;
}

// CmdID: 4459
message TakeOpenworldEventRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    EVENT_NOT_FOUND = 2;
    MAP_NOT_FOUND = 3;
  }

  TakeOpenworldEventRewardRsp.Retcode retcode = 1;
  uint32 map_id = 2;
  OpenworldEvent openworld_event = 3;
  repeated uint32 finish_once_event_list = 4;
}

// CmdID: 4460
message GetOpenworldStageReq {
  uint32 map_id = 1;
}

// CmdID: 4461
message GetOpenworldStageRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    CYCLE_NOT_OPEN = 2;
    NOT_OPEN = 3;
  }

  GetOpenworldStageRsp.Retcode retcode = 1;
  repeated OpenworldStageAvatarInfo avatar_list = 2;
  repeated uint32 cook_buffer_list = 3;
  uint32 map_id = 4;
  repeated uint32 mecha_buff_list = 5;
  uint32 mecha_lost_hp_percent = 6;
  uint32 mecha_lost_sp_percent = 7;
  uint32 map_energy = 8;
  uint32 sc_dlc_fever_score = 9;
  uint32 sc_dlc_climax_score = 10;
}

message OpenworldChapterStageBeginInfo {
  uint32 location_id = 1;
  uint32 story_mode = 2;
  uint32 story_serial = 3;
  bool is_quick_start = 4;
}

// CmdID: 4462
message OpenworldStageBeginReq {
  repeated uint32 avatar_id_list = 1;
  uint32 area_id = 2;
  uint32 map_id = 3;
  repeated uint32 elf_id_list = 4;
  OpenworldStageType openworld_stage_type = 5;
  uint32 stage_id = 6;
  uint32 support_avatar_id = 7;
  OpenworldChapterStageBeginInfo chapter_ow_info = 8;
  string report_ext = 9;
}

// CmdID: 4463
message OpenworldStageBeginRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    CYCLE_NOT_OPEN = 2;
    AVATAR_ERROR = 3;
    NOT_OPEN = 4;
    AREA_NOT_EXIST = 5;
    AREA_NOT_OPEN = 6;
    EQUIPMENT_USED = 7;
    AVATAR_USED = 8;
    ELF_ERROR = 9;
    ELF_CARRY_LEVEL_LIMIT = 10;
    FEATURE_LIMIT = 11;
    HONKAI_ENERGY_FULL = 12;
    FEATURE_CLOSED = 13;
    AI_CYBER_CONDITION_NOT_MEET = 14;
    AVATAR_NUM_ERROR = 15;
    ELF_SYSTEM_ERROR = 16;
  }

  OpenworldStageBeginRsp.Retcode retcode = 1;
  repeated uint32 can_sp_recover_avatar_list = 2;
  uint32 map_id = 3;
  repeated uint32 dlc_support_avatar_list = 4;
}

// CmdID: 4464
message OpenworldStageEndReq {
  StageEndStatus end_status = 1;
  repeated StageCheatData cheat_data_list = 3;
  repeated OpenworldStageAvatarInfo avatar_list = 4;
  repeated uint32 sp_recover_avatar_list = 5;
  uint32 map_id = 6;
  uint32 mecha_lost_hp_percent = 7;
  uint32 mecha_lost_sp_percent = 8;
  repeated DropItem drop_item_list = 10;
  uint32 map_energy = 11;
  uint32 sc_dlc_fever_score = 12;
  uint32 sc_dlc_climax_score = 13;
  uint32 area_id = 14;
  string report_ext = 15;
}

// CmdID: 4465
message OpenworldStageEndRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    CYCLE_NOT_OPEN = 2;
    NOT_BEGIN = 3;
    STAGE_ERROR = 4;
    STAGE_FAIL = 5;
    AVATAR_ERROR = 6;
    NOT_OPEN = 7;
    MECHA_ERROR = 8;
  }

  OpenworldStageEndRsp.Retcode retcode = 1;
  StageEndStatus end_status = 2;
  uint32 map_id = 3;
}

// CmdID: 4474
message OpenOpenworldQuestReq {
  uint32 map_id = 1;
}

// CmdID: 4475
message OpenOpenworldQuestRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    IS_OPEN = 2;
    TIMES_LACK = 3;
    CYCLE_NOT_MATCH = 4;
    MAP_NOT_FOUND = 5;
    MAP_NOT_OPEN = 6;
  }

  OpenOpenworldQuestRsp.Retcode retcode = 1;
}

// CmdID: 4476
message GetOpenworldSelectQuestReq {
  uint32 map_id = 1;
}

// CmdID: 4477
message GetOpenworldSelectQuestRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    HAS_CHOOSE = 2;
    MAP_NOT_FOUND = 3;
  }

  GetOpenworldSelectQuestRsp.Retcode retcode = 1;
  repeated OpenworldQuest quest_list = 2;
}

// CmdID: 4478
message ChooseOpenworldQuestReq {
  uint32 map_id = 1;
  uint32 quest_id = 2;
}

// CmdID: 4479
message ChooseOpenworldQuestRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    HAS_CHOOSE = 2;
    STAMINA_LACK = 3;
    MAP_NOT_FOUND = 4;
    QUEST_NOT_FOUND = 5;
    ACTIVITY_QUEST_TIMES_LIMIT = 6;
  }

  ChooseOpenworldQuestRsp.Retcode retcode = 1;
  OpenworldQuest quest = 2;
}

// CmdID: 4480
message RefreshOpenworldQuestReq {
  uint32 map_id = 1;
}

// CmdID: 4481
message RefreshOpenworldQuestRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    HAS_CHOOSE = 2;
    HCOIN_LACK = 3;
    MAP_NOT_FOUND = 4;
  }

  RefreshOpenworldQuestRsp.Retcode retcode = 1;
  repeated OpenworldQuest quest_list = 2;
  uint32 refresh_left_times = 3;
  uint32 next_refresh_cost = 4;
  uint32 map_id = 5;
}

// CmdID: 4482
message TakeOpenworldQuestRewardReq {
  uint32 map_id = 1;
  uint32 quest_id = 2;
}

// CmdID: 4483
message TakeOpenworldQuestRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_FINISH = 2;
    MAP_NOT_FOUND = 3;
    QUEST_NOT_FOUND = 4;
  }

  TakeOpenworldQuestRewardRsp.Retcode retcode = 1;
  repeated RewardData reward_list = 2;
  repeated RewardData day_reward_list = 3;
  uint32 add_star = 4;
  uint32 challenge_score = 5;
  uint32 old_quest_level = 6;
}

// CmdID: 4484
message AbandonOpenworldQuestReq {
  uint32 map_id = 1;
  uint32 quest_id = 2;
}

// CmdID: 4485
message AbandonOpenworldQuestRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    IS_CLOSE = 2;
    REWARD_NOT_TAKE = 3;
    NOT_FOUND = 4;
    NOT_DOING = 5;
    HAS_ABANDAN = 6;
    MAP_NOT_FOUND = 7;
    CANNOT_ABANDON = 8;
  }

  AbandonOpenworldQuestRsp.Retcode retcode = 1;
}

// CmdID: 4486
message ReportOpenworldSpawnPointReq {
  string point_info = 1;
  repeated OpenworldStageAvatarInfo avatar_list = 2;
  bool is_ld_sp_recover = 3;
  repeated uint32 sp_recover_avatar_list = 4;
  uint32 map_id = 5;
}

// CmdID: 4487
message ReportOpenworldSpawnPointRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    AVATAR_ERROR = 2;
  }

  ReportOpenworldSpawnPointRsp.Retcode retcode = 1;
  uint32 map_id = 2;
  string point_info = 3;
}

// CmdID: 4488
message FinishOpenworldQuestReq {
  uint32 map_id = 1;
  uint32 quest_id = 2;
  uint32 cost_time = 3;
  repeated uint32 finish_challenge_list = 4;
  uint32 mecha_id = 5;
  string report_ext = 6;
}

// CmdID: 4489
message FinishOpenworldQuestRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    QUEST_NOT_EXIST = 2;
    QUEST_NOT_DOING = 3;
    MAP_NOT_FOUND = 4;
  }

  FinishOpenworldQuestRsp.Retcode retcode = 1;
  uint32 quest_id = 2;
  uint32 cost_time = 3;
  repeated uint32 finish_challenge_list = 4;
}

// CmdID: 4490
message TakeOpenworldCycleFinishRewardReq {
  uint32 cycle = 1;
  uint32 map_id = 2;
}

// CmdID: 4491
message TakeOpenworldCycleFinishRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    STORY_NOT_FINISH = 2;
    CYCLE_NOT_MATCH = 3;
    MAP_NOT_FOUND = 4;
  }

  TakeOpenworldCycleFinishRewardRsp.Retcode retcode = 1;
  repeated RewardData reward_list = 2;
  uint32 map_id = 3;
  uint32 cycle = 4;
}

// CmdID: 4492
message EatOpenworldCookReq {
  uint32 cook_id = 1;
  uint32 avatar_id = 2;
  uint32 map_id = 3;
}

// CmdID: 4493
message EatOpenworldCookRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    CYCLE_NOT_OPEN = 2;
    MATERIAL_LACK = 3;
    QUEST_LEVEL_LACK = 4;
    EAT_LIMIT = 5;
    AVATAR_NOT_EXIST = 6;
    AVATAR_ERROR = 7;
    AVATAR_HP_FULL = 8;
    AVATAR_SP_FULL = 9;
    AVATAR_DIE = 10;
    MAP_NOT_FOUND = 11;
  }

  EatOpenworldCookRsp.Retcode retcode = 1;
}

// CmdID: 4494
message TakeOpenworldKeyQuestRewardReq {
  uint32 map_id = 1;
}

// CmdID: 4495
message TakeOpenworldKeyQuestRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_KEY_QUEST = 2;
    NOT_FINISH = 3;
    MAP_NOT_FOUND = 4;
  }

  TakeOpenworldKeyQuestRewardRsp.Retcode retcode = 1;
  repeated RewardData reward_list = 2;
  uint32 level = 3;
  uint32 star = 4;
}

// CmdID: 4496
message GetNewOpenworldReq {
  OpenworldDataType data_type = 1;
}

// CmdID: 4497
message GetNewOpenworldRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    CYCLE_NOT_OPEN = 2;
  }

  GetNewOpenworldRsp.Retcode retcode = 1;
  OpenworldDataType data_type = 2;
  repeated OpenworldMapBriefData map_list = 3;
  uint32 next_refresh_time = 4;
  uint32 global_random_seed = 6;
  uint32 close_time = 7;
  repeated OpenworldCook cook_list = 8;
  uint32 quest_theme_index = 9;
  repeated OpenworldTechData tech = 10;
  repeated OpenworldMechaPort mecha_port_list = 11;
  uint32 quest_level = 12;
  uint32 quest_star = 13;
  uint32 max_quest_level = 14;
}

// CmdID: 4498
message GetOpenworldMapReq {
  uint32 map_id = 1;
}

// CmdID: 4499
message GetOpenworldMapRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetOpenworldMapRsp.Retcode retcode = 1;
  uint32 map_id = 2;
  uint32 cycle = 3;
  repeated OpenworldEvent event_list = 4;
  uint32 event_random_seed = 5;
  string spawn_point = 6;
  repeated OpenworldOverView over_view_list = 7;
  repeated OpenworldStat stat_list = 8;
  uint32 status = 9;
  OpenworldQuestData quest_data = 11;
  OpenworldTechData tech_data = 12;
  uint32 has_take_finish_reward_cycle = 13;
  OpenworldActivity activity_data = 14;
  OpenworldBossHunt boss_hunt = 15;
  repeated OpenworldAreaInfo area_info_list = 16;
  repeated OpenworldAreaEntityState area_entity_state_list = 17;
  repeated uint32 finish_once_event_list = 19;
}

// CmdID: 4500
message GetOpenworldStoryReq {
}

// CmdID: 4501
message GetOpenworldStoryRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetOpenworldStoryRsp.Retcode retcode = 1;
  repeated uint32 finish_story_id_list = 2;
  repeated OpenworldStory cur_story_list = 3;
  repeated uint32 finish_story_id_add_list = 4;
  repeated uint32 finish_story_id_del_list = 5;
  bool is_all = 6;
}

// CmdID: 4502
message UnlockOpenworldTechSkillReq {
  uint32 map_id = 1;
  uint32 skill_id = 2;
}

// CmdID: 4503
message UnlockOpenworldTechSkillRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    TECH_LOCK = 2;
    LEVEL_LACK = 3;
    STORY_LOCK = 4;
    PRE_SKILL_LOCK = 5;
    SKILL_POINT_LACK = 6;
    ALREADA_UNLOCK = 7;
  }

  UnlockOpenworldTechSkillRsp.Retcode retcode = 1;
  int32 param = 2;
}

// CmdID: 4504
message ActivateOpenworldMapReq {
  uint32 map_id = 1;
}

// CmdID: 4505
message ActivateOpenworldMapRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    HAS_ACTIVATE = 2;
    STATUS_ERROR = 3;
  }

  ActivateOpenworldMapRsp.Retcode retcode = 1;
  uint32 map_id = 2;
}

message OpenworldMechaTeamMember {
  uint32 pos = 1;
  uint32 mecha_unique_id = 2;
}

message OpenworldMechaTeam {
  repeated OpenworldMechaTeamMember mecha_list = 1;
}

// CmdID: 4506
message OpenworldSetMechaTeamReq {
  uint32 team_index = 1;
  repeated OpenworldMechaTeamMember mecha_list = 2;
  bool set_as_battle_team = 3;
}

// CmdID: 4507
message OpenworldSetMechaTeamRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    INDEX_ERROR = 2;
    MECHA_NUM_ERROR = 3;
    MECHA_REPEAT = 4;
    MECHA_NOT_EXIST = 5;
    MECHA_POS_ERROR = 6;
    POS_REPEAT = 7;
    CLASS_REPEAT = 8;
    NOT_OPEN = 9;
  }

  OpenworldSetMechaTeamRsp.Retcode retcode = 1;
}

// CmdID: 4508
message OpenworldGetMechaTeamReq {
}

// CmdID: 4509
message OpenworldGetMechaTeamRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  OpenworldGetMechaTeamRsp.Retcode retcode = 1;
  repeated OpenworldMechaTeam mecha_team_list = 2;
  uint32 cur_team_index = 3;
}

// CmdID: 4510
message OpenworldMechaDefenseBeginReq {
}

// CmdID: 4511
message OpenworldMechaDefenseBeginRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    MAP_NOT_OPEN = 3;
    TIMES_LIMIT = 4;
    MECHA_NUM_ERROR = 5;
  }

  OpenworldMechaDefenseBeginRsp.Retcode retcode = 1;
  uint32 hard_level = 2;
}

// CmdID: 4512
message OpenworldMechaDefenseEndReq {
  StageEndStatus end_status = 1;
  uint32 hard_level = 2;
  uint32 score = 3;
  repeated StageCheatData cheat_data_list = 4;
}

// CmdID: 4513
message OpenworldMechaDefenseEndRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_BEGIN = 2;
    NOT_OPEN = 3;
  }

  OpenworldMechaDefenseEndRsp.Retcode retcode = 1;
  repeated RewardData reward_list = 2;
  uint32 rating = 3;
}

// CmdID: 4514
message GetOpenworldMechaDefenseReq {
}

message OpenworldMechaDefense {
  uint32 last_enter_time = 1;
  uint32 left_enter_times = 2;
  uint32 last_rating = 3;
}

// CmdID: 4515
message GetOpenworldMechaDefenseRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetOpenworldMechaDefenseRsp.Retcode retcode = 1;
  OpenworldMechaDefense mecha_defense = 2;
}

// CmdID: 4516
message OpenworldMakeMechaReq {
  uint32 paper_id = 1;
}

// CmdID: 4517
message OpenworldMakeMechaRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MATERIAL_LACK = 2;
    LEVEL_UNLOCK = 3;
    NOT_OPEN = 4;
  }

  OpenworldMakeMechaRsp.Retcode retcode = 1;
  uint32 mecha_id = 2;
}

// CmdID: 4518
message SetMechaPortReq {
  MechaSlot slot = 1;
  uint32 mecha_id = 2;
}

// CmdID: 4519
message SetMechaPortRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    EQUIPPED = 2;
    CAN_NOT_RIDE = 3;
    NOT_EXIST = 4;
    CLASS_REPEAT = 5;
    NOT_OPEN = 6;
  }

  SetMechaPortRsp.Retcode retcode = 1;
}

// CmdID: 4520
message ChooseOpenworldBossReq {
  uint32 map_id = 1;
  uint32 boss_id = 2;
}

// CmdID: 4521
message ChooseOpenworldBossRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    STAMINA_LACK = 2;
    BOSS_NOT_KILL = 3;
    BOSS_NOT_EXIST = 4;
    TIME_LIMIT = 5;
  }

  ChooseOpenworldBossRsp.Retcode retcode = 1;
  uint32 map_id = 2;
  uint32 boss_id = 3;
}

// CmdID: 4522
message UpdateOpenworldBossStatusReq {
  uint32 map_id = 1;
  uint32 left_hp = 2;
  uint32 battle_time = 3;
  uint32 location_idx = 4;
  string report_ext = 5;
}

// CmdID: 4523
message UpdateOpenworldBossStatusRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_CHOOSE = 2;
    CLUE_NOT_FINISH = 3;
  }

  UpdateOpenworldBossStatusRsp.Retcode retcode = 1;
  uint32 map_id = 2;
}

// CmdID: 4524
message UpdateOpenworldBossSearchTimeReq {
  uint32 map_id = 1;
  uint32 search_time = 2;
}

// CmdID: 4525
message UpdateOpenworldBossSearchTimeRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_CHOOSE = 2;
  }

  UpdateOpenworldBossSearchTimeRsp.Retcode retcode = 1;
  uint32 map_id = 2;
}

// CmdID: 4526
message TakeOpenworldBossRewardReq {
  uint32 map_id = 1;
  uint32 boss_id = 2;
}

// CmdID: 4527
message TakeOpenworldBossRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_KILL = 2;
    NO_REWARD = 3;
    HAVE_TAKE = 4;
  }

  TakeOpenworldBossRewardRsp.Retcode retcode = 1;
  uint32 map_id = 2;
  uint32 boss_id = 3;
  repeated RewardData reward_data_list = 4;
}

// CmdID: 4528
message TakeOpenworldBossHuntRatingRewardReq {
  uint32 map_id = 1;
  uint32 rating_id = 2;
}

// CmdID: 4529
message TakeOpenworldBossHuntRatingRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_KILL_ALL = 2;
    NO_REWARD = 3;
    NO_RATING = 4;
    RATING_DISMATCH = 5;
    HAVE_TAKE = 6;
  }

  TakeOpenworldBossHuntRatingRewardRsp.Retcode retcode = 1;
  uint32 map_id = 2;
  uint32 rating_id = 3;
  repeated RewardData reward_data_list = 4;
}

// CmdID: 4530
message SyncOpenworldBossHuntNotify {
  OpenworldBossHunt boss_hunt = 1;
}

// CmdID: 4531
message TakeOpenworldActivityLevelRewardReq {
  uint32 activity_id = 1;
  uint32 activity_level = 2;
}

// CmdID: 4532
message TakeOpenworldActivityLevelRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    LEVEL_LACK = 2;
    HAVE_TAKEN = 3;
  }

  TakeOpenworldActivityLevelRewardRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 activity_level = 3;
  repeated RewardData reward_data_list = 4;
}

// CmdID: 4533
message GetOpenworldBossHuntRankReq {
  uint32 map_id = 1;
}

// CmdID: 4534
message GetOpenworldBossHuntRankRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetOpenworldBossHuntRankRsp.Retcode retcode = 1;
  uint32 map_id = 2;
  RankShowData rank_data = 3;
}

message SyncOpenworldActivityDisplayInfo {
  uint32 add_base_activity_exp = 1;
  uint32 add_buff_activity_exp = 2;
}

// CmdID: 4535
message SyncOpenworldActivityNotify {
  OpenworldActivity activity_data = 1;
  SyncOpenworldActivityDisplayInfo display_info = 2;
}

// CmdID: 4536
message ResetOpenworldBossReq {
  uint32 map_id = 1;
  uint32 boss_id = 2;
}

// CmdID: 4537
message ResetOpenworldBossRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_KILL_ALL = 2;
    BOSS_NOT_KILL = 3;
  }

  ResetOpenworldBossRsp.Retcode retcode = 1;
  uint32 map_id = 2;
  uint32 boss_id = 3;
}

// CmdID: 4538
message ReportOpenworldAreaInfoReq {
  uint32 map_id = 1;
  uint32 area_id = 2;
  string area_info = 3;
}

// CmdID: 4539
message ReportOpenworldAreaInfoRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  ReportOpenworldAreaInfoRsp.Retcode retcode = 1;
  uint32 map_id = 2;
  uint32 area_id = 3;
  repeated OpenworldAreaInfo area_info_list = 4;
}

// CmdID: 4540
message OpenworldFightBeginNotify {
  uint32 map_id = 1;
  uint32 area_id = 2;
  OpenworldStageType stage_type = 3;
  string monster_name = 4;
  string sub_area_name = 5;
  string report_ext = 6;
}

// CmdID: 4541
message OpenworldFightEndNotify {
  uint32 map_id = 1;
  uint32 area_id = 2;
  OpenworldStageType stage_type = 3;
  string monster_kill_info = 4;
  uint32 revive_times = 5;
  OpenworldFightEndStatus fight_end_status = 6;
  uint32 cost_time = 7;
  string sub_area_name = 8;
  string report_ext = 9;
}

// CmdID: 4542
message ReportOpenworldAreaEntityStateReq {
  uint32 map_id = 1;
  uint32 area_id = 2;
  uint32 entity_id = 3;
  uint32 entity_state = 4;
}

// CmdID: 4543
message ReportOpenworldAreaEntityStateRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MAP_ERROR = 2;
    AREA_ERROR = 3;
    ENTITY_ID_ERROR = 4;
    ENTITY_STATE_ERROR = 5;
  }

  ReportOpenworldAreaEntityStateRsp.Retcode retcode = 1;
  uint32 map_id = 2;
  uint32 area_id = 3;
  uint32 entity_id = 4;
  repeated OpenworldAreaEntityState area_entity_state_list = 5;
}

// CmdID: 4544
message UpdateOpenworldQuestProgressReq {
  OpenworldQuestFinishWay finish_way = 1;
  string finish_para_str = 2;
  uint32 progress_add = 3;
  string report_ext = 4;
}

// CmdID: 4545
message UpdateOpenworldQuestProgressRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    FINISH_WAY_ERROR = 2;
  }

  UpdateOpenworldQuestProgressRsp.Retcode retcode = 1;
  OpenworldQuestFinishWay finish_way = 2;
  string finish_para_str = 3;
}

// CmdID: 4546
message GetOpenworldQuestActivityReq {
}

// CmdID: 4547
message GetOpenworldQuestActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  GetOpenworldQuestActivityRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 total_score = 3;
  uint32 cycle_quest_taken_num = 4;
}

message OpenworldAvatarActivity {
  message Talent {
    uint32 talent_id = 1;
    uint32 level = 2;
  }

  message Cultivate {
    uint32 id = 1;
    uint32 level = 2;
  }

  uint32 map_id = 1;
  uint32 activity_id = 2;
  uint32 level = 3;
  uint32 exp = 4;
  repeated OpenworldQuest daily_quest_list = 5;
  uint32 daily_accept_quest_times = 6;
  uint32 daily_refresh_quest_times = 7;
  repeated OpenworldQuest special_quest_list = 8;
  repeated OpenworldAvatarActivity.Talent talent_list = 9;
  repeated OpenworldAvatarActivity.Cultivate cultivate_list = 10;
  repeated uint32 unlock_avatar_id_list = 11;
  repeated uint32 finished_quest_id_list = 12;
  uint32 total_daily_quest_currency_num = 13;
  uint32 schedule_id = 14;
}

// CmdID: 4548
message GetOpenworldAvatarActivityReq {
  uint32 map_id = 1;
}

// CmdID: 4549
message GetOpenworldAvatarActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  GetOpenworldAvatarActivityRsp.Retcode retcode = 1;
  OpenworldAvatarActivity activity = 2;
}

// CmdID: 4550
message OpenworldAvatarActivityAcceptDailyQuestReq {
  uint32 map_id = 1;
}

// CmdID: 4551
message OpenworldAvatarActivityAcceptDailyQuestRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    DAILY_LIMIT = 2;
    QUEST_LIMIT = 3;
    STAMINA_LACK = 4;
    FUNCTION_LOCK = 5;
    CURRENCY_FULL = 6;
  }

  OpenworldAvatarActivityAcceptDailyQuestRsp.Retcode retcode = 1;
  OpenworldQuest quest = 2;
}

// CmdID: 4552
message OpenworldAvatarActivityRefreshDailyQuestReq {
  uint32 map_id = 1;
  uint32 quest_id = 2;
}

// CmdID: 4553
message OpenworldAvatarActivityRefreshDailyQuestRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    DAILY_LIMIT = 2;
    QUEST_NOT_EXIST = 3;
    QUEST_STATUS_ERROR = 4;
  }

  OpenworldAvatarActivityRefreshDailyQuestRsp.Retcode retcode = 1;
  OpenworldQuest quest = 2;
}

// CmdID: 4554
message OpenworldAvatarActivityFinishQuestReq {
  uint32 map_id = 1;
  uint32 quest_id = 2;
  uint32 cost_time = 3;
  repeated uint32 finish_challenge_list = 4;
}

// CmdID: 4555
message OpenworldAvatarActivityFinishQuestRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    QUEST_NOT_EXIST = 2;
    QUEST_STATUS_ERROR = 3;
  }

  OpenworldAvatarActivityFinishQuestRsp.Retcode retcode = 1;
  uint32 quest_id = 2;
  uint32 cost_time = 3;
  repeated uint32 finish_challenge_list = 4;
}

// CmdID: 4556
message OpenworldAvatarActivityTakeQuestRewardReq {
  uint32 map_id = 1;
  uint32 quest_id = 2;
}

// CmdID: 4557
message OpenworldAvatarActivityTakeQuestRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    QUEST_NOT_EXIST = 2;
    NOT_FINISH = 3;
  }

  OpenworldAvatarActivityTakeQuestRewardRsp.Retcode retcode = 1;
  RewardData reward_data = 2;
  uint32 map_id = 3;
  uint32 quest_id = 4;
}

// CmdID: 4558
message OpenworldAvatarActivityCultivateReq {
  uint32 map_id = 1;
  uint32 cultivate_id = 2;
}

// CmdID: 4559
message OpenworldAvatarActivityCultivateRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MATERIAL_LACK = 2;
    CONDITION_NOT_MEET = 3;
    MAX_LEVEL = 4;
  }

  OpenworldAvatarActivityCultivateRsp.Retcode retcode = 1;
}

// CmdID: 4560
message OpenworldAvatarActivityTalentLevelupReq {
  uint32 map_id = 1;
  uint32 talent_id = 2;
}

// CmdID: 4561
message OpenworldAvatarActivityTalentLevelupRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MATERIAL_LACK = 2;
    CONDITION_NOT_MEET = 3;
    MAX_LEVEL = 4;
  }

  OpenworldAvatarActivityTalentLevelupRsp.Retcode retcode = 1;
}

// CmdID: 4562
message OpenworldAvatarActivityGetFileReq {
  uint32 map_id = 1;
}

// CmdID: 4563
message OpenworldAvatarActivityGetFileRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  OpenworldAvatarActivityGetFileRsp.Retcode retcode = 1;
  repeated uint32 file_id_list = 2;
}

// CmdID: 4564
message OpenworldAvatarActivitySpecialQuestNotify {
  uint32 activity_id = 1;
  repeated OpenworldQuest quest_list = 2;
}

// CmdID: 4565
message OpenworldChapterGetDataReq {
  uint32 map_id = 1;
}

message OpenworldChapterSlot {
  uint32 slot_id = 1;
  uint32 buff_id = 2;
}

message OpenworldChapterBuff {
  enum Type {
    TYPE_NONE = 0;
    SKILL = 3;
  }

  uint32 buff_id = 1;
  uint32 level = 2;
}

message OpenworldChapterShopGoods {
  uint32 goods_id = 1;
  uint32 cost_material_id = 2;
  uint32 cost_num = 3;
  bool is_sold = 4;
  uint32 need_fame_level = 5;
  uint32 reward_id = 6;
}

message OpenworldChapterShop {
  uint32 shop_id = 1;
  repeated OpenworldChapterShopGoods goods_list = 2;
}

message OpenworldChapterChallenge {
  uint32 today_challenge_times = 1;
  uint32 last_challenge_time = 2;
}

message OpenworldChapterEndlessTowerSite {
  uint32 site_id = 1;
  uint32 has_take_reward_score = 2;
}

message OpenworldChapterHero {
  uint32 hero_id = 1;
  uint32 hero_level = 2;
}

message OpenworldChapterHeroCard {
  uint32 card_id = 1;
  uint32 card_level = 2;
  uint32 card_exp = 3;
}

message OpenworldChapterHeroCardSlot {
  uint32 slot_idx = 1;
  uint32 card_id = 2;
}

message OpenworldChapterHeroCardGroup {
  uint32 hero_id = 1;
  string group_name = 2;
  bool is_active = 3;
  repeated OpenworldChapterHeroCardSlot slot_list = 4;
}

message OpenworldChapterAchievementMission {
  uint32 mission_id = 1;
  uint32 finish_time = 2;
}

message OpenworldChapterEndlessChallenge {
  uint32 challenge_id = 1;
  bool is_passed = 2;
  uint32 max_score = 3;
}

message OpenworldChapterFurnaceWork {
  uint32 unique_id = 1;
  uint32 formula_id = 2;
  OpenworldChapterFurnaceWorkStatus status = 5;
  uint32 finish_time = 6;
}

message OpenworldChapterFurnaceFormulaUseHistory {
  uint32 formula_id = 1;
  uint32 use_times = 2;
}

message OpenworldChapterFurnace {
  repeated OpenworldChapterFurnaceFormulaUseHistory formula_use_history_list = 1;
  repeated OpenworldChapterFurnaceWork furnace_work_list = 2;
}

message OpenworldChapterBuilding {
  uint32 main_id = 1;
  uint32 level = 2;
  uint32 level_up_finish_time = 3;
}

message OpenworldChapterTerminal {
  uint32 level = 1;
  uint32 exp = 2;
  bool is_period_upgraded = 3;
}

message OpenworldChapterQuestData {
  repeated OpenworldQuest quest_list = 1;
  uint32 quest_accept_times = 2;
  uint32 quest_refresh_times = 3;
  uint32 special_quest_finished_num = 4;
}

message OpenworldChapterTalent {
  uint32 talent_id = 1;
  uint32 talent_level = 2;
}

message OpenworldChapterDigSiteProgramTimes {
  uint32 program_id = 1;
  uint32 times = 2;
}

message OpenworldChapterDigSite {
  uint32 main_id = 1;
  uint32 program_id = 2;
  uint32 program_finish_time = 3;
  repeated OpenworldChapterDigSiteProgramTimes program_times_list = 4;
}

message OpenworldChapter {
  uint32 map_id = 1;
  repeated OpenworldChapterSlot slot_list = 2;
  uint32 max_equip_cost = 4;
  repeated OpenworldChapterBuff buff_list = 5;
  uint32 max_reward_take_num = 6;
  uint32 fame = 7;
  uint32 fame_level = 8;
  OpenworldChapterChallenge challenge = 9;
  repeated OpenworldChapterEndlessTowerSite endless_tower_site_list = 10;
  repeated OpenworldChapterHero hero_list = 11;
  repeated OpenworldChapterHeroCard hero_card_list = 14;
  repeated OpenworldChapterHeroCardGroup hero_card_group_list = 15;
  repeated OpenworldChapterAchievementMission achievement_mission_list = 16;
  repeated OpenworldChapterEndlessChallenge endless_challenge_list = 17;
  repeated OpenworldChapterBuilding building_list = 18;
  OpenworldChapterTerminal terminal = 19;
  OpenworldChapterQuestData quest_data = 20;
  OpenworldChapterFurnace furnace = 21;
  repeated OpenworldChapterTalent talent_list = 22;
  repeated uint32 active_talent_id_list = 23;
  repeated OpenworldChapterDigSite dig_site_list = 24;
  repeated uint32 got_last_reward_special_qte_map_list = 25;
}

// CmdID: 4566
message OpenworldChapterGetDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  OpenworldChapterGetDataRsp.Retcode retcode = 1;
  OpenworldChapter chapter_data = 2;
}

// CmdID: 4567
message OpenworldChapterSlotEquipBuffReq {
  uint32 map_id = 1;
  uint32 slot_id = 2;
  uint32 buff_id = 3;
}

// CmdID: 4568
message OpenworldChapterSlotEquipBuffRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    BUFF_NOT_EXIST = 2;
    BUFF_USED = 3;
    SLOT_LOCKED = 4;
    OVER_COST = 5;
    SLOT_NOT_SUIT = 6;
  }

  OpenworldChapterSlotEquipBuffRsp.Retcode retcode = 1;
  uint32 map_id = 2;
  uint32 slot_id = 3;
  uint32 buff_id = 4;
}

// CmdID: 4569
message OpenworldAcceptNewStoryReq {
  uint32 map_id = 1;
  string report_ext = 2;
}

// CmdID: 4570
message OpenworldAcceptNewStoryRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  OpenworldAcceptNewStoryRsp.Retcode retcode = 1;
  uint32 map_id = 2;
  repeated uint32 story_id_list = 3;
}

// CmdID: 4571
message OpenworldChapterTakeRewardReq {
  uint32 map_id = 1;
}

// CmdID: 4572
message OpenworldChapterTakeRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  OpenworldChapterTakeRewardRsp.Retcode retcode = 1;
  uint32 map_id = 2;
  RewardData reward_data = 3;
  uint32 max_reward_take_num = 4;
}

// CmdID: 4573
message OpenworldCloseStoryReq {
  repeated uint32 story_id_list = 1;
  string report_ext = 2;
}

// CmdID: 4574
message OpenworldCloseStoryRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  OpenworldCloseStoryRsp.Retcode retcode = 1;
  repeated uint32 story_id_list = 2;
}

// CmdID: 4575
message OpenworldChapterGetShopDataReq {
  uint32 shop_id = 1;
}

// CmdID: 4576
message OpenworldChapterGetShopDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  OpenworldChapterGetShopDataRsp.Retcode retcode = 1;
  OpenworldChapterShop shop = 2;
}

// CmdID: 4577
message OpenworldChapterShopBuyGoodsReq {
  uint32 shop_id = 1;
  uint32 goods_id = 2;
}

// CmdID: 4578
message OpenworldChapterShopBuyGoodsRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_MAP = 2;
    SOLD = 3;
    LACK_MATERIAL = 4;
  }

  OpenworldChapterShopBuyGoodsRsp.Retcode retcode = 1;
  uint32 shop_id = 2;
  uint32 goods_id = 3;
  RewardData reward_data = 4;
}

// CmdID: 4579
message OpenworldChapterEndlessTowerGetRankReq {
  uint32 site_id = 1;
}

// CmdID: 4580
message OpenworldChapterEndlessTowerGetRankRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  OpenworldChapterEndlessTowerGetRankRsp.Retcode retcode = 1;
  uint32 site_id = 2;
  uint32 rank_percent = 3;
}

// CmdID: 4581
message OpenworldChapterEndlessTowerTakeRewardReq {
  uint32 site_id = 2;
}

// CmdID: 4582
message OpenworldChapterEndlessTowerTakeRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NO_REWARD = 2;
  }

  OpenworldChapterEndlessTowerTakeRewardRsp.Retcode retcode = 1;
  uint32 site_id = 2;
  repeated RewardData reward_list = 3;
}

// CmdID: 4583
message OpenworldChapterLevelUpHeroReq {
  uint32 hero_id = 1;
}

// CmdID: 4584
message OpenworldChapterLevelUpHeroRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    HERO_ERROR = 2;
    HERO_LOCKED = 3;
    MATERIAL_LACK = 4;
    TARGET_LEVEL_ERROR = 5;
  }

  OpenworldChapterLevelUpHeroRsp.Retcode retcode = 1;
}

// CmdID: 4585
message OpenworldChapterEquipCardGroupReq {
  uint32 group_idx = 1;
  uint32 hero_id = 2;
  repeated OpenworldChapterHeroCardSlot slot_list = 3;
}

// CmdID: 4586
message OpenworldChapterEquipCardGroupRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    GROUP_ERROR = 2;
    HERO_ERROR = 3;
    CARD_REPEATED = 4;
    CARD_NOT_EXIST = 5;
    SPECIAL_CARD_SLOT_LIMIT = 6;
    SLOT_LOCKED = 7;
    SLOT_REPEATED = 8;
  }

  OpenworldChapterEquipCardGroupRsp.Retcode retcode = 1;
}

// CmdID: 4587
message OpenworldChapterModifyCardGroupNameReq {
  uint32 map_id = 1;
  uint32 group_idx = 2;
  string group_name = 3;
}

// CmdID: 4588
message OpenworldChapterModifyCardGroupNameRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    FORMAT_ERROR = 2;
    SENSITIVE_WORDS = 3;
    MAP_ERROR = 4;
    GROUP_ERROR = 5;
  }

  OpenworldChapterModifyCardGroupNameRsp.Retcode retcode = 1;
}

// CmdID: 4589
message OpenworldChapterActiveCardGroupReq {
  uint32 map_id = 1;
  uint32 group_idx = 2;
}

// CmdID: 4590
message OpenworldChapterActiveCardGroupRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MAP_ERROR = 2;
    GROUP_ERROR = 3;
  }

  OpenworldChapterActiveCardGroupRsp.Retcode retcode = 1;
}

// CmdID: 4591
message OpenworldChapterDeleteCardGroupReq {
  uint32 map_id = 1;
  uint32 group_idx = 2;
}

// CmdID: 4592
message OpenworldChapterDeleteCardGroupRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MAP_ERROR = 2;
    TOO_FREQUENT = 3;
  }

  OpenworldChapterDeleteCardGroupRsp.Retcode retcode = 1;
}

// CmdID: 4593
message OpenworldChapterGetChallengeDataReq {
  uint32 map_id = 1;
}

message OpenworldChapterChallengeGroup {
  uint32 group_id = 1;
  uint32 max_challenge_index = 2;
}

// CmdID: 4594
message OpenworldChapterGetChallengeDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MAP_ERROR = 2;
  }

  OpenworldChapterGetChallengeDataRsp.Retcode retcode = 1;
  uint32 map_id = 2;
  uint32 challenge_schedule_id = 3;
  repeated uint32 open_group_list = 4;
  repeated OpenworldChapterChallengeGroup group_list = 5;
  uint32 schedule_end_time = 6;
}

// CmdID: 4595
message OpenworldChapterFinishChallengeReq {
  uint32 map_id = 1;
  uint32 group_id = 2;
  uint32 challenge_index = 3;
  string report_ext = 4;
}

// CmdID: 4596
message OpenworldChapterFinishChallengeRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MAP_ERROR = 2;
    SCHEDULE_NOT_OPEN = 3;
    GROUP_NOT_OPEN = 4;
    GROUP_NOT_MEET_CONDITION = 5;
    CHALLENGE_INDEX_ERROR = 6;
  }

  OpenworldChapterFinishChallengeRsp.Retcode retcode = 1;
  uint32 map_id = 2;
  uint32 group_id = 3;
  uint32 challenge_index = 4;
  RewardData reward_data = 5;
}

// CmdID: 4597
message OpenworldChapterHeroCardLevelUpNotify {
  uint32 card_id = 1;
  uint32 card_level = 2;
}

// CmdID: 4598
message OpenworldChapterOpenHeroTreasureReq {
}

// CmdID: 4599
message OpenworldChapterOpenHeroTreasureRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    PART_FAIL = 2;
  }

  OpenworldChapterOpenHeroTreasureRsp.Retcode retcode = 1;
  repeated RewardData reward_list = 2;
  RewardData reward_data = 3;
}

message HuntActivityHunter {
  uint32 hunter_id = 1;
  HuntActivityHunterState state = 2;
  string spawn_point = 3;
}

message HuntActivityMachine {
  uint32 machine_id = 1;
  uint32 state = 2;
}

message HuntActivityMapData {
  uint32 map_id = 1;
  bool is_unlock = 2;
  uint32 open_time = 3;
  HuntActivityHunter hunter = 4;
  repeated HuntActivityMachine machine_list = 5;
  repeated uint32 show_stronghold_id_list = 7;
  uint32 hard_level = 8;
  uint32 remain_stronghold_take_times = 9;
  repeated OpenworldQuest quest_list = 10;
  uint32 hunting_score = 11;
  uint32 finish_quest_num = 12;
  repeated uint32 finish_stronghold_id_list = 13;
}

// CmdID: 4600
message OpenworldHuntActivityGetDataReq {
  uint32 activity_id = 1;
}

// CmdID: 4601
message OpenworldHuntActivityGetDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ACTIVITY_NOT_OPEN = 2;
  }

  OpenworldHuntActivityGetDataRsp.Retcode retcode = 1;
  uint32 schedule_id = 2;
  repeated HuntActivityMapData map_data_list = 3;
  repeated OpenworldTalent talent_list = 4;
}

// CmdID: 4602
message OpenworldHuntActivityGetMapDataReq {
  uint32 map_id = 1;
}

// CmdID: 4603
message OpenworldHuntActivityGetMapDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MAP_NOT_OPEN = 2;
    PROCESS_NOT_ENOUGH = 3;
    ACTIVITY_NOT_OPEN = 4;
    MAP_NOT_EXIST = 5;
  }

  OpenworldHuntActivityGetMapDataRsp.Retcode retcode = 1;
  HuntActivityMapData map_data = 2;
}

// CmdID: 4604
message OpenworldHuntActivityCommonStateChangeReq {
  HuntActivityEntityType type = 1;
  uint32 wanted_state = 2;
  uint32 map_id = 3;
  uint32 entity_id = 4;
  string report_ext = 5;
}

// CmdID: 4605
message OpenworldHuntActivityCommonStateChangeRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    STATE_ERROR = 2;
    MAP_NOT_EXIST = 3;
    ENTITY_NOT_EXIST = 4;
    TIMES_LACK = 5;
    STRONGHOLD_ERROR = 6;
  }

  OpenworldHuntActivityCommonStateChangeRsp.Retcode retcode = 1;
  HuntActivityEntityType type = 2;
  uint32 map_id = 3;
  uint32 entity_id = 4;
}

// CmdID: 4606
message OpenworldHuntActivityTalentUpgradeReq {
  uint32 activity_id = 1;
  uint32 talent_id = 2;
  string report_ext = 3;
}

// CmdID: 4607
message OpenworldHuntActivityTalentUpgradeRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ACTIVITY_NOT_OPEN = 2;
    TALENT_LEVEL_ERROR = 3;
    PRE_TALENT_LACK = 4;
    MAP_NOT_OPEN = 5;
    MAP_PROGRESS_LACK = 6;
    MATERIAL_LACK = 7;
  }

  OpenworldHuntActivityTalentUpgradeRsp.Retcode retcode = 1;
}

// CmdID: 4608
message OpenworldHuntActivityFinishQuestReq {
  uint32 map_id = 1;
  uint32 quest_id = 2;
  uint32 cost_time = 3;
  string report_ext = 4;
}

// CmdID: 4609
message OpenworldHuntActivityFinishQuestRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    QUEST_NOT_EXIST = 2;
    QUEST_NOT_DOING = 3;
    MAP_NOT_EXIST = 4;
    NOT_IN_MAP = 5;
  }

  OpenworldHuntActivityFinishQuestRsp.Retcode retcode = 1;
  uint32 map_id = 2;
  uint32 quest_id = 3;
  RewardData reward_data = 4;
}

// CmdID: 4610
message OpenworldHuntActivityTakeStrongholdRewardNotify {
  uint32 map_id = 1;
  uint32 stronghold_id = 2;
  RewardData reward_data = 3;
}

// CmdID: 4611
message OpenworldHuntActivityChangeHunterAreaReq {
  uint32 map_id = 1;
  uint32 hunter_id = 2;
  string spawn_point = 3;
}

// CmdID: 4612
message OpenworldHuntActivityChangeHunterAreaRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_MAP = 3;
    MAP_ERROR = 4;
    TARGET_AREA_ERROR = 5;
    HUNTER_ERROR = 6;
  }

  OpenworldHuntActivityChangeHunterAreaRsp.Retcode retcode = 1;
}

// CmdID: 4613
message OpenworldHuntActivityReportHuntingScoreReq {
  uint32 map_id = 1;
  uint32 hunting_score = 2;
}

// CmdID: 4614
message OpenworldHuntActivityReportHuntingScoreRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_MAP = 2;
    MAP_NOT_OPEN = 3;
  }

  OpenworldHuntActivityReportHuntingScoreRsp.Retcode retcode = 1;
}

// CmdID: 4630
message OpenworldChapterChallengeBeginReq {
  uint32 map_id = 1;
  uint32 group_id = 2;
  uint32 challenge_index = 3;
  string report_ext = 4;
}

// CmdID: 4631
message OpenworldChapterChallengeBeginRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MAP_ERROR = 2;
    SCHEDULE_NOT_OPEN = 3;
    GROUP_NOT_OPEN = 4;
    GROUP_NOT_MEET_CONDITION = 5;
    CHALLENGE_INDEX_ERROR = 6;
  }

  OpenworldChapterChallengeBeginRsp.Retcode retcode = 1;
}

// CmdID: 4632
message OpenworldChapterEndlessChallengeBeginReq {
  uint32 map_id = 1;
  uint32 challenge_id = 2;
  string report_ext = 3;
}

// CmdID: 4633
message OpenworldChapterEndlessChallengeBeginRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    CHALLENGE_ERROR = 2;
    MAP_ERROR = 3;
    PRE_CHALLENGE_NOT_FINISH = 4;
    MATERIAL_LACK = 5;
  }

  OpenworldChapterEndlessChallengeBeginRsp.Retcode retcode = 1;
}

// CmdID: 4634
message OpenworldChapterEndlessChallengeEndReq {
  uint32 map_id = 1;
  uint32 challenge_id = 2;
  uint32 score = 3;
  string report_ext = 4;
}

// CmdID: 4635
message OpenworldChapterEndlessChallengeEndRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    CHALLENGE_ERROR = 2;
    MAP_ERROR = 3;
    MATERIAL_LACK = 4;
    NOT_BEGIN = 5;
  }

  OpenworldChapterEndlessChallengeEndRsp.Retcode retcode = 1;
  RewardData reward_data = 2;
}

// CmdID: 4636
message OpenworldChapterLevelUpBuildingReq {
  uint32 map_id = 1;
  uint32 main_id = 2;
}

// CmdID: 4637
message OpenworldChapterLevelUpBuildingRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MAP_ERROR = 2;
    BUILDING_ERROR = 3;
    IN_PROGRESS = 4;
    TARGET_LEVEL_ERROR = 5;
    MATERIAL_LACK = 6;
    TERMINAL_LEVEL_LACK = 7;
  }

  OpenworldChapterLevelUpBuildingRsp.Retcode retcode = 1;
}

// CmdID: 4638
message OpenworldChapterLevelUpBuildingFinishNotify {
  uint32 main_id = 1;
  uint32 level = 2;
  uint32 map_id = 3;
}

// CmdID: 4639
message OpenworldChapterAccelerateLevelUpBuildingReq {
  uint32 map_id = 1;
  uint32 main_id = 2;
  uint32 material_id = 3;
  uint32 material_num = 4;
}

// CmdID: 4640
message OpenworldChapterAccelerateLevelUpBuildingRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MAP_ERROR = 2;
    BUILDING_ERROR = 3;
    NOT_IN_PROGRESS = 4;
    MATERIAL_ERROR = 5;
    MATERIAL_LACK = 6;
  }

  OpenworldChapterAccelerateLevelUpBuildingRsp.Retcode retcode = 1;
}

// CmdID: 4641
message OpenworldChapterTerminalPeriodUpgradeReq {
  uint32 map_id = 1;
  uint32 cur_level = 2;
}

// CmdID: 4642
message OpenworldChapterTerminalPeriodUpgradeRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MAP_ERROR = 2;
    TERMINAL_ERROR = 3;
    MATERIAL_LACK = 4;
    TALENT_LACK = 5;
    TERMINAL_PERIOD_UPGRADED = 6;
    TERMINAL_LEVEL_ERROR = 7;
    PRE_STORY_ERROR = 8;
  }

  OpenworldChapterTerminalPeriodUpgradeRsp.Retcode retcode = 1;
  uint32 map_id = 2;
}

// CmdID: 4643
message OpenworldChapterGetSelectQuestReq {
  uint32 map_id = 1;
}

// CmdID: 4644
message OpenworldChapterGetSelectQuestRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MAP_ERROR = 2;
    BUILDING_LOCKED = 3;
  }

  OpenworldChapterGetSelectQuestRsp.Retcode retcode = 1;
  repeated OpenworldQuest quest_list = 2;
  uint32 map_id = 3;
}

// CmdID: 4645
message OpenworldChapterRefreshQuestReq {
  uint32 map_id = 1;
}

// CmdID: 4646
message OpenworldChapterRefreshQuestRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MAP_ERROR = 2;
    BUILDING_LOCKED = 3;
    REFRESH_TIMES_LACK = 4;
    SLOT_LACK = 5;
  }

  OpenworldChapterRefreshQuestRsp.Retcode retcode = 1;
  repeated OpenworldQuest quest_list = 2;
  uint32 map_id = 3;
}

// CmdID: 4647
message OpenworldChapterAcceptQuestReq {
  uint32 map_id = 1;
  uint32 quest_id = 2;
}

// CmdID: 4648
message OpenworldChapterAcceptQuestRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    QUEST_ERROR = 2;
    STAMINA_LACK = 3;
    ACCEPT_TIMES_LACK = 4;
    SLOT_LACK = 5;
    MAP_ERROR = 6;
    BUILDING_LOCKED = 7;
  }

  OpenworldChapterAcceptQuestRsp.Retcode retcode = 1;
  OpenworldQuest quest = 2;
  uint32 map_id = 3;
}

// CmdID: 4649
message OpenworldChapterFinishQuestReq {
  uint32 map_id = 1;
  uint32 quest_id = 2;
  uint32 cost_time = 3;
  string report_ext = 4;
}

// CmdID: 4650
message OpenworldChapterFinishQuestRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    QUEST_NOT_EXIST = 2;
    QUEST_NOT_DOING = 3;
    MAP_ERROR = 4;
  }

  OpenworldChapterFinishQuestRsp.Retcode retcode = 1;
  uint32 quest_id = 2;
  uint32 cost_time = 3;
}

// CmdID: 4651
message OpenworldChapterTakeQuestRewardReq {
  uint32 map_id = 1;
  uint32 quest_id = 2;
}

// CmdID: 4652
message OpenworldChapterTakeQuestRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    QUEST_NOT_EXIST = 2;
    NOT_FINISH = 3;
    MAP_ERROR = 4;
  }

  OpenworldChapterTakeQuestRewardRsp.Retcode retcode = 1;
  uint32 quest_id = 2;
  RewardData reward_data = 3;
}

// CmdID: 4653
message OpenworldChapterFurnaceStartWorkReq {
  uint32 map_id = 1;
  repeated uint32 formula_id_list = 2;
}

// CmdID: 4654
message OpenworldChapterFurnaceStartWorkRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MAP_ERROR = 2;
    BUILDING_LOCKED = 3;
    MATERIAL_LACK = 4;
    FORMULA_ERROR = 5;
    FORMULA_NUM_ERROR = 6;
    FORMULA_TIMES_ERROR = 7;
  }

  OpenworldChapterFurnaceStartWorkRsp.Retcode retcode = 1;
  uint32 map_id = 2;
}

// CmdID: 4655
message OpenworldChapterFurnaceCancelWorkReq {
  uint32 map_id = 1;
  uint32 unique_id = 2;
}

// CmdID: 4656
message OpenworldChapterFurnaceCancelWorkRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MAP_ERROR = 2;
    WORK_FINISHED = 3;
  }

  OpenworldChapterFurnaceCancelWorkRsp.Retcode retcode = 1;
  uint32 map_id = 2;
  uint32 unique_id = 3;
}

// CmdID: 4657
message OpenworldChapterFurnaceAccelerateWorkReq {
  uint32 map_id = 1;
  uint32 unique_id = 2;
  uint32 material_id = 3;
  uint32 material_num = 4;
}

// CmdID: 4658
message OpenworldChapterFurnaceAccelerateWorkRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MAP_ERROR = 2;
    MATERIAL_ERROR = 3;
    UNIQUE_ID_ERROR = 4;
    MATERIAL_LACK = 5;
    MATERIAL_NUM_ERROR = 6;
    NOT_IN_PROGRESS = 7;
  }

  OpenworldChapterFurnaceAccelerateWorkRsp.Retcode retcode = 1;
  uint32 map_id = 2;
  uint32 unique_id = 3;
}

// CmdID: 4659
message TakeOpenworldChapterFurnaceWorkRewardReq {
  uint32 map_id = 1;
}

// CmdID: 4660
message TakeOpenworldChapterFurnaceWorkRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MAP_ERROR = 2;
    NO_REWARD = 3;
    FORMULA_ERROR = 4;
  }

  TakeOpenworldChapterFurnaceWorkRewardRsp.Retcode retcode = 1;
  uint32 map_id = 2;
  RewardData reward_data = 3;
}

// CmdID: 4661
message OpenworldChapterLevelUpTalentReq {
  uint32 map_id = 1;
  uint32 talent_id = 2;
}

// CmdID: 4662
message OpenworldChapterLevelUpTalentRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    TALENT_ERROR = 2;
    TARGET_LEVEL_ERROR = 3;
    WORK_SHOP_LEVEL_LACK = 4;
    PRE_TALENT_LACK = 5;
    MATERIAL_LACK = 6;
    MAP_ERROR = 7;
    BUILDING_LOCKED = 8;
    NOT_MEET_CONDITION = 9;
  }

  OpenworldChapterLevelUpTalentRsp.Retcode retcode = 1;
}

// CmdID: 4663
message OpenworldChapterActiveTalentReq {
  uint32 map_id = 1;
  repeated uint32 active_talent_id_list = 2;
}

// CmdID: 4664
message OpenworldChapterActiveTalentRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MAP_ERROR = 2;
    TALENT_ERROR = 3;
    BUILDING_LOCKED = 4;
    UNIQUE_TAG_REPEATED = 5;
  }

  OpenworldChapterActiveTalentRsp.Retcode retcode = 1;
}

// CmdID: 4665
message OpenworldChapterDigSiteStartReq {
  uint32 map_id = 1;
  uint32 main_id = 2;
  uint32 program_id = 3;
}

// CmdID: 4666
message OpenworldChapterDigSiteStartRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MAP_ERROR = 2;
    PROGRAM_ERROR = 3;
    IN_PROGRESS = 4;
    BUILDING_LOCKED = 5;
    DIG_TIMES_LACK = 6;
  }

  OpenworldChapterDigSiteStartRsp.Retcode retcode = 1;
}

// CmdID: 4667
message OpenworldChapterDigSiteCancelReq {
  uint32 map_id = 1;
  uint32 main_id = 2;
}

// CmdID: 4668
message OpenworldChapterDigSiteCancelRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MAP_ERROR = 2;
    NOT_IN_PROGRESS = 3;
    BUILDING_ERROR = 4;
    PROGRAM_FINISHED = 5;
  }

  OpenworldChapterDigSiteCancelRsp.Retcode retcode = 1;
}

// CmdID: 4669
message OpenworldChapterDigSiteTakeRewardReq {
  uint32 map_id = 1;
  uint32 main_id = 2;
}

// CmdID: 4670
message OpenworldChapterDigSiteTakeRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MAP_ERROR = 2;
    NOT_FINISH = 3;
    BUILDING_ERROR = 4;
  }

  OpenworldChapterDigSiteTakeRewardRsp.Retcode retcode = 1;
  RewardData reward_data = 2;
}

// CmdID: 4671
message OpenworldChapterDigSiteAccelerateReq {
  uint32 map_id = 1;
  uint32 main_id = 2;
  uint32 material_id = 3;
  uint32 material_num = 4;
}

// CmdID: 4672
message OpenworldChapterDigSiteAccelerateRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MAP_ERROR = 2;
    BUILDING_ERROR = 3;
    NOT_IN_PROGRESS = 4;
    PROGRAM_FINISHED = 5;
    MATERIAL_ERROR = 6;
    MATERIAL_LACK = 7;
  }

  OpenworldChapterDigSiteAccelerateRsp.Retcode retcode = 1;
}

// CmdID: 4673
message OpenworldChapterMoonChallengeTowerGetDataReq {
  uint32 map_id = 1;
}

message OpenworldChapterMoonChallengeTower {
  uint32 tower_id = 1;
  uint32 max_score = 2;
  uint32 save_point_floor = 3;
  uint32 max_finish_floor = 4;
}

// CmdID: 4674
message OpenworldChapterMoonChallengeTowerGetDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MAP_ERROR = 2;
  }

  OpenworldChapterMoonChallengeTowerGetDataRsp.Retcode retcode = 1;
  uint32 map_id = 2;
  uint32 daily_challenge_times = 3;
  repeated OpenworldChapterMoonChallengeTower challenge_tower_list = 4;
}

// CmdID: 4675
message OpenworldChapterMoonChallengeTowerBattleBeginReq {
  uint32 map_id = 1;
  uint32 tower_id = 2;
}

// CmdID: 4676
message OpenworldChapterMoonChallengeTowerBattleBeginRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MAP_ERROR = 2;
    TOWER_ERROR = 3;
    DAILY_TIMES_LACK = 4;
    NOT_OPEN = 5;
    FLOOR_ERROR = 6;
  }

  OpenworldChapterMoonChallengeTowerBattleBeginRsp.Retcode retcode = 1;
  uint32 map_id = 2;
  uint32 tower_id = 3;
  uint32 cur_floor = 4;
  uint32 cur_score = 5;
}

// CmdID: 4677
message OpenworldChapterMoonChallengeTowerBattleEndReq {
  uint32 map_id = 1;
  uint32 tower_id = 2;
  uint32 end_floor = 3;
  uint32 score = 4;
  MoonChallengeTowerBattleEndStatus battle_end_status = 5;
  uint32 cost_time = 6;
}

// CmdID: 4678
message OpenworldChapterMoonChallengeTowerBattleEndRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MAP_ERROR = 2;
    TOWER_ERROR = 3;
    DAILY_TIMES_LACK = 4;
    FLOOR_ERROR = 5;
    SCORE_ERROR = 6;
  }

  OpenworldChapterMoonChallengeTowerBattleEndRsp.Retcode retcode = 1;
  uint32 map_id = 2;
  uint32 tower_id = 3;
  uint32 end_floor = 4;
  uint32 score = 5;
  uint32 old_max_score = 6;
  uint32 save_point_floor = 7;
  Material score_drop_material = 8;
  Material save_point_drop_material = 9;
  uint32 save_point_drop_terminal_exp = 10;
  MoonChallengeTowerBattleEndStatus battle_end_status = 11;
}

// CmdID: 4679
message OpenworldChapterMoonChallengeTowerSweepReq {
  uint32 map_id = 1;
  uint32 tower_id = 2;
}

// CmdID: 4680
message OpenworldChapterMoonChallengeTowerSweepRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MAP_ERROR = 2;
    TOWER_ERROR = 3;
    DAILY_TIMES_LACK = 4;
    SWEEP_LOCK = 5;
    FLOOR_ERROR = 6;
  }

  OpenworldChapterMoonChallengeTowerSweepRsp.Retcode retcode = 1;
  uint32 map_id = 2;
  uint32 tower_id = 3;
  Material score_drop_material = 4;
}

// CmdID: 4681
message OpenworldChapterMoonChallengeTowerGetRankReq {
  uint32 map_id = 1;
  uint32 tower_id = 2;
}

// CmdID: 4682
message OpenworldChapterMoonChallengeTowerGetRankRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MAP_ERROR = 2;
    TOWER_ERROR = 3;
  }

  OpenworldChapterMoonChallengeTowerGetRankRsp.Retcode retcode = 1;
  uint32 map_id = 2;
  uint32 tower_id = 3;
  RankShowData rank_data = 4;
  uint32 rank_percent = 5;
}

// CmdID: 4687
message OpenworldChapterMoonRelicsChangeReq {
  uint32 map_id = 1;
  uint32 relics_id = 2;
}

// CmdID: 4688
message OpenworldChapterMoonRelicsChangeRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    FRAGMENT_LACK = 2;
    MAP_ERROR = 3;
    MAP_MISMATCH = 4;
    RELICS_EXIST = 5;
  }

  OpenworldChapterMoonRelicsChangeRsp.Retcode retcode = 1;
  uint32 map_id = 2;
  uint32 relics_id = 3;
  RewardData reward = 4;
}

// CmdID: 4683
message OpenworldChapterQTEMapEndReq {
  uint32 map_id = 1;
  uint32 qte_map_id = 2;
  uint32 normal_drop_num = 3;
  bool is_got_last_reward = 4;
  QTEMapEndStatus end_status = 5;
  string report_ext = 6;
}

// CmdID: 4684
message OpenworldChapterQTEMapEndRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MAP_ERROR = 2;
    QTE_MAP_ERROR = 3;
  }

  OpenworldChapterQTEMapEndRsp.Retcode retcode = 1;
  Material normal_drop_material = 2;
  Material last_reward_material = 3;
}

// CmdID: 4685
message OpenworldChapterReportDropItemReq {
  uint32 map_id = 1;
  repeated DropItem drop_item_list = 2;
}

// CmdID: 4686
message OpenworldChapterReportDropItemRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  OpenworldChapterReportDropItemRsp.Retcode retcode = 1;
}

message OpenworldChapterAntiGravityData {
  uint32 stage_id = 1;
  bool is_unlock = 2;
  repeated uint32 finish_coin_index_list = 3;
}

// CmdID: 4689
message OpenworldChapterGetAntiGravityDataReq {
  uint32 map_id = 1;
}

// CmdID: 4690
message OpenworldChapterGetAntiGravityDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  OpenworldChapterGetAntiGravityDataRsp.Retcode retcode = 1;
  uint32 map_id = 2;
  repeated OpenworldChapterAntiGravityData antigravity_stage_data_list = 3;
}

enum CmdTypeOpenworld {
  CMD_TYPE_OPENWORLD_NONE = 0;
  CMD_OPENWORLD_PERIOD_SETTLE_NOTIFY = 4450;
  CMD_OPENWORLD_WEEKLY_SETTLE_NOTIFY = 4451;
  CMD_ACCEPT_OPENWORLD_STORY_REQ = 4452;
  CMD_ACCEPT_OPENWORLD_STORY_RSP = 4453;
  CMD_SET_OPENWORLD_STORY_PROGRESS_REQ = 4454;
  CMD_SET_OPENWORLD_STORY_PROGRESS_RSP = 4455;
  CMD_TAKE_OPENWORLD_STORY_REWARD_REQ = 4456;
  CMD_TAKE_OPENWORLD_STORY_REWARD_RSP = 4457;
  CMD_TAKE_OPENWORLD_EVENT_REWARD_REQ = 4458;
  CMD_TAKE_OPENWORLD_EVENT_REWARD_RSP = 4459;
  CMD_GET_OPENWORLD_STAGE_REQ = 4460;
  CMD_GET_OPENWORLD_STAGE_RSP = 4461;
  CMD_OPENWORLD_STAGE_BEGIN_REQ = 4462;
  CMD_OPENWORLD_STAGE_BEGIN_RSP = 4463;
  CMD_OPENWORLD_STAGE_END_REQ = 4464;
  CMD_OPENWORLD_STAGE_END_RSP = 4465;
  CMD_GET_OPENWORLD_STAGE_BOSS_REQ = 4466;
  CMD_GET_OPENWORLD_STAGE_BOSS_RSP = 4467;
  CMD_OPENWORLD_STAGE_BOSS_BEGIN_REQ = 4468;
  CMD_OPENWORLD_STAGE_BOSS_BEGIN_RSP = 4469;
  CMD_OPENWORLD_STAGE_BOSS_END_REQ = 4470;
  CMD_OPENWORLD_STAGE_BOSS_END_RSP = 4471;
  CMD_TAKE_OPENWORLD_STAGE_BOSS_REWARD_REQ = 4472;
  CMD_TAKE_OPENWORLD_STAGE_BOSS_REWARD_RSP = 4473;
  CMD_OPEN_OPENWORLD_QUEST_REQ = 4474;
  CMD_OPEN_OPENWORLD_QUEST_RSP = 4475;
  CMD_GET_OPENWORLD_SELECT_QUEST_REQ = 4476;
  CMD_GET_OPENWORLD_SELECT_QUEST_RSP = 4477;
  CMD_CHOOSE_OPENWORLD_QUEST_REQ = 4478;
  CMD_CHOOSE_OPENWORLD_QUEST_RSP = 4479;
  CMD_REFRESH_OPENWORLD_QUEST_REQ = 4480;
  CMD_REFRESH_OPENWORLD_QUEST_RSP = 4481;
  CMD_TAKE_OPENWORLD_QUEST_REWARD_REQ = 4482;
  CMD_TAKE_OPENWORLD_QUEST_REWARD_RSP = 4483;
  CMD_ABANDON_OPENWORLD_QUEST_REQ = 4484;
  CMD_ABANDON_OPENWORLD_QUEST_RSP = 4485;
  CMD_REPORT_OPENWORLD_SPAWN_POINT_REQ = 4486;
  CMD_REPORT_OPENWORLD_SPAWN_POINT_RSP = 4487;
  CMD_FINISH_OPENWORLD_QUEST_REQ = 4488;
  CMD_FINISH_OPENWORLD_QUEST_RSP = 4489;
  CMD_TAKE_OPENWORLD_CYCLE_FINISH_REWARD_REQ = 4490;
  CMD_TAKE_OPENWORLD_CYCLE_FINISH_REWARD_RSP = 4491;
  CMD_EAT_OPENWORLD_COOK_REQ = 4492;
  CMD_EAT_OPENWORLD_COOK_RSP = 4493;
  CMD_TAKE_OPENWORLD_KEY_QUEST_REWARD_REQ = 4494;
  CMD_TAKE_OPENWORLD_KEY_QUEST_REWARD_RSP = 4495;
  CMD_GET_NEW_OPENWORLD_REQ = 4496;
  CMD_GET_NEW_OPENWORLD_RSP = 4497;
  CMD_GET_OPENWORLD_MAP_REQ = 4498;
  CMD_GET_OPENWORLD_MAP_RSP = 4499;
  CMD_GET_OPENWORLD_STORY_REQ = 4500;
  CMD_GET_OPENWORLD_STORY_RSP = 4501;
  CMD_UNLOCK_OPENWORLD_TECH_SKILL_REQ = 4502;
  CMD_UNLOCK_OPENWORLD_TECH_SKILL_RSP = 4503;
  CMD_ACTIVATE_OPENWORLD_MAP_REQ = 4504;
  CMD_ACTIVATE_OPENWORLD_MAP_RSP = 4505;
  CMD_OPENWORLD_SET_MECHA_TEAM_REQ = 4506;
  CMD_OPENWORLD_SET_MECHA_TEAM_RSP = 4507;
  CMD_OPENWORLD_GET_MECHA_TEAM_REQ = 4508;
  CMD_OPENWORLD_GET_MECHA_TEAM_RSP = 4509;
  CMD_OPENWORLD_MECHA_DEFENSE_BEGIN_REQ = 4510;
  CMD_OPENWORLD_MECHA_DEFENSE_BEGIN_RSP = 4511;
  CMD_OPENWORLD_MECHA_DEFENSE_END_REQ = 4512;
  CMD_OPENWORLD_MECHA_DEFENSE_END_RSP = 4513;
  CMD_GET_OPENWORLD_MECHA_DEFENSE_REQ = 4514;
  CMD_GET_OPENWORLD_MECHA_DEFENSE_RSP = 4515;
  CMD_MAKE_OPENWORLD_MECHA_REQ = 4516;
  CMD_MAKE_OPENWORLD_MECHA_RSP = 4517;
  CMD_SET_MECHA_PORT_REQ = 4518;
  CMD_SET_MECHA_PORT_RSP = 4519;
  CMD_CHOOSE_OPENWORLD_BOSS_REQ = 4520;
  CMD_CHOOSE_OPENWORLD_BOSS_RSP = 4521;
  CMD_UPDATE_OPENWORLD_BOSS_STATUS_REQ = 4522;
  CMD_UPDATE_OPENWORLD_BOSS_STATUS_RSP = 4523;
  CMD_UPDATE_OPENWORLD_BOSS_SEARCH_TIME_REQ = 4524;
  CMD_UPDATE_OPENWORLD_BOSS_SEARCH_TIME_RSP = 4525;
  CMD_TAKE_OPENWORLD_BOSS_REWARD_REQ = 4526;
  CMD_TAKE_OPENWORLD_BOSS_REWARD_RSP = 4527;
  CMD_TAKE_OPENWORLD_BOSS_HUNT_RATING_REWARD_REQ = 4528;
  CMD_TAKE_OPENWORLD_BOSS_HUNT_RATING_REWARD_RSP = 4529;
  CMD_SYNC_OPENWORLD_BOSS_HUNT_NOTIFY = 4530;
  CMD_TAKE_OPENWORLD_ACTIVITY_LEVEL_REWARD_REQ = 4531;
  CMD_TAKE_OPENWORLD_ACTIVITY_LEVEL_REWARD_RSP = 4532;
  CMD_GET_OPENWORLD_BOSS_HUNT_RANK_REQ = 4533;
  CMD_GET_OPENWORLD_BOSS_HUNT_RANK_RSP = 4534;
  CMD_SYNC_OPENWORLD_ACTIVITY_NOTIFY = 4535;
  CMD_RESET_OPENWORLD_BOSS_REQ = 4536;
  CMD_RESET_OPENWORLD_BOSS_RSP = 4537;
  CMD_REPORT_OPENWORLD_AREA_INFO_REQ = 4538;
  CMD_REPORT_OPENWORLD_AREA_INFO_RSP = 4539;
  CMD_OPENWORLD_FIGHT_BEGIN_NOTIFY = 4540;
  CMD_OPENWORLD_FIGHT_END_NOTIFY = 4541;
  CMD_REPORT_OPENWORLD_AREA_ENTITY_STATE_REQ = 4542;
  CMD_REPORT_OPENWORLD_AREA_ENTITY_STATE_RSP = 4543;
  CMD_UPDATE_OPENWORLD_QUEST_PROGRESS_REQ = 4544;
  CMD_UPDATE_OPENWORLD_QUEST_PROGRESS_RSP = 4545;
  CMD_GET_OPENWORLD_QUEST_ACTIVITY_REQ = 4546;
  CMD_GET_OPENWORLD_QUEST_ACTIVITY_RSP = 4547;
  CMD_GET_OPENWORLD_AVATAR_ACTIVITY_REQ = 4548;
  CMD_GET_OPENWORLD_AVATAR_ACTIVITY_RSP = 4549;
  CMD_OPENWORLD_AVATAR_ACTIVITY_ACCEPT_DAILY_QUEST_REQ = 4550;
  CMD_OPENWORLD_AVATAR_ACTIVITY_ACCEPT_DAILY_QUEST_RSP = 4551;
  CMD_OPENWORLD_AVATAR_ACTIVITY_REFRESH_DAILY_QUEST_REQ = 4552;
  CMD_OPENWORLD_AVATAR_ACTIVITY_REFRESH_DAILY_QUEST_RSP = 4553;
  CMD_OPENWORLD_AVATAR_ACTIVITY_FINISH_QUEST_REQ = 4554;
  CMD_OPENWORLD_AVATAR_ACTIVITY_FINISH_QUEST_RSP = 4555;
  CMD_OPENWORLD_AVATAR_ACTIVITY_TAKE_QUEST_REWARD_REQ = 4556;
  CMD_OPENWORLD_AVATAR_ACTIVITY_TAKE_QUEST_REWARD_RSP = 4557;
  CMD_OPENWORLD_AVATAR_ACTIVITY_CULTIVATE_REQ = 4558;
  CMD_OPENWORLD_AVATAR_ACTIVITY_CULTIVATE_RSP = 4559;
  CMD_OPENWORLD_AVATAR_ACTIVITY_TALENT_LEVELUP_REQ = 4560;
  CMD_OPENWORLD_AVATAR_ACTIVITY_TALENT_LEVELUP_RSP = 4561;
  CMD_OPENWORLD_AVATAR_ACTIVITY_GET_FILE_REQ = 4562;
  CMD_OPENWORLD_AVATAR_ACTIVITY_GET_FILE_RSP = 4563;
  CMD_OPENWORLD_AVATAR_ACTIVITY_SPECIAL_QUEST_NOTIFY = 4564;
  CMD_OPENWORLD_CHAPTER_GET_DATA_REQ = 4565;
  CMD_OPENWORLD_CHAPTER_GET_DATA_RSP = 4566;
  CMD_OPENWORLD_CHAPTER_SLOT_EQUIP_BUFF_REQ = 4567;
  CMD_OPENWORLD_CHAPTER_SLOT_EQUIP_BUFF_RSP = 4568;
  CMD_OPENWORLD_ACCEPT_NEW_STORY_REQ = 4569;
  CMD_OPENWORLD_ACCEPT_NEW_STORY_RSP = 4570;
  CMD_OPENWORLD_CHAPTER_TAKE_REWARD_REQ = 4571;
  CMD_OPENWORLD_CHAPTER_TAKE_REWARD_RSP = 4572;
  CMD_OPENWORLD_CLOSE_STORY_REQ = 4573;
  CMD_OPENWORLD_CLOSE_STORY_RSP = 4574;
  CMD_OPENWORLD_CHAPTER_GET_SHOP_DATA_REQ = 4575;
  CMD_OPENWORLD_CHAPTER_GET_SHOP_DATA_RSP = 4576;
  CMD_OPENWORLD_CHAPTER_SHOP_BUY_GOODS_REQ = 4577;
  CMD_OPENWORLD_CHAPTER_SHOP_BUY_GOODS_RSP = 4578;
  CMD_OPENWORLD_CHAPTER_ENDLESS_TOWER_GET_RANK_REQ = 4579;
  CMD_OPENWORLD_CHAPTER_ENDLESS_TOWER_GET_RANK_RSP = 4580;
  CMD_OPENWORLD_CHAPTER_ENDLESS_TOWER_TAKE_REWARD_REQ = 4581;
  CMD_OPENWORLD_CHAPTER_ENDLESS_TOWER_TAKE_REWARD_RSP = 4582;
  CMD_OPENWORLD_CHAPTER_LEVEL_UP_HERO_REQ = 4583;
  CMD_OPENWORLD_CHAPTER_LEVEL_UP_HERO_RSP = 4584;
  CMD_OPENWORLD_CHAPTER_EQUIP_CARD_GROUP_REQ = 4585;
  CMD_OPENWORLD_CHAPTER_EQUIP_CARD_GROUP_RSP = 4586;
  CMD_OPENWORLD_CHAPTER_MODIFY_CARD_GROUP_NAME_REQ = 4587;
  CMD_OPENWORLD_CHAPTER_MODIFY_CARD_GROUP_NAME_RSP = 4588;
  CMD_OPENWORLD_CHAPTER_ACTIVE_CARD_GROUP_REQ = 4589;
  CMD_OPENWORLD_CHAPTER_ACTIVE_CARD_GROUP_RSP = 4590;
  CMD_OPENWORLD_CHAPTER_DELETE_CARD_GROUP_REQ = 4591;
  CMD_OPENWORLD_CHAPTER_DELETE_CARD_GROUP_RSP = 4592;
  CMD_OPENWORLD_CHAPTER_GET_CHALLENGE_DATA_REQ = 4593;
  CMD_OPENWORLD_CHAPTER_GET_CHALLENGE_DATA_RSP = 4594;
  CMD_OPENWORLD_CHAPTER_FINISH_CHALLENGE_REQ = 4595;
  CMD_OPENWORLD_CHAPTER_FINISH_CHALLENGE_RSP = 4596;
  CMD_OPENWORLD_CHAPTER_HERO_CARD_LEVEL_UP_NOTIFY = 4597;
  CMD_OPENWORLD_CHAPTER_OPEN_HERO_TREASURE_REQ = 4598;
  CMD_OPENWORLD_CHAPTER_OPEN_HERO_TREASURE_RSP = 4599;
  CMD_OPENWORLD_HUNT_ACTIVITY_GET_DATA_REQ = 4600;
  CMD_OPENWORLD_HUNT_ACTIVITY_GET_DATA_RSP = 4601;
  CMD_OPENWORLD_HUNT_ACTIVITY_GET_MAP_DATA_REQ = 4602;
  CMD_OPENWORLD_HUNT_ACTIVITY_GET_MAP_DATA_RSP = 4603;
  CMD_OPENWORLD_HUNT_ACTIVITY_COMMON_STATE_CHANGE_REQ = 4604;
  CMD_OPENWORLD_HUNT_ACTIVITY_COMMON_STATE_CHANGE_RSP = 4605;
  CMD_OPENWORLD_HUNT_ACTIVITY_TALENT_UPGRADE_REQ = 4606;
  CMD_OPENWORLD_HUNT_ACTIVITY_TALENT_UPGRADE_RSP = 4607;
  CMD_OPENWORLD_HUNT_ACTIVITY_FINISH_QUEST_REQ = 4608;
  CMD_OPENWORLD_HUNT_ACTIVITY_FINISH_QUEST_RSP = 4609;
  CMD_OPENWORLD_HUNT_ACTIVITY_TAKE_STRONGHOLD_REWARD_NOTIFY = 4610;
  CMD_OPENWORLD_HUNT_ACTIVITY_CHANGE_HUNTER_AREA_REQ = 4611;
  CMD_OPENWORLD_HUNT_ACTIVITY_CHANGE_HUNTER_AREA_RSP = 4612;
  CMD_OPENWORLD_HUNT_ACTIVITY_REPORT_HUNTING_SCORE_REQ = 4613;
  CMD_OPENWORLD_HUNT_ACTIVITY_REPORT_HUNTING_SCORE_RSP = 4614;
  CMD_OPENWORLD_CHAPTER_CHALLENGE_BEGIN_REQ = 4630;
  CMD_OPENWORLD_CHAPTER_CHALLENGE_BEGIN_RSP = 4631;
  CMD_OPENWORLD_CHAPTER_ENDLESS_CHALLENGE_BEGIN_REQ = 4632;
  CMD_OPENWORLD_CHAPTER_ENDLESS_CHALLENGE_BEGIN_RSP = 4633;
  CMD_OPENWORLD_CHAPTER_ENDLESS_CHALLENGE_END_REQ = 4634;
  CMD_OPENWORLD_CHAPTER_ENDLESS_CHALLENGE_END_RSP = 4635;
  CMD_OPENWORLD_CHAPTER_LEVEL_UP_BUILDING_REQ = 4636;
  CMD_OPENWORLD_CHAPTER_LEVEL_UP_BUILDING_RSP = 4637;
  CMD_OPENWORLD_CHAPTER_LEVEL_UP_BUILDING_FINISH_NOTIFY = 4638;
  CMD_OPENWORLD_CHAPTER_ACCELERATE_LEVEL_UP_BUILDING_REQ = 4639;
  CMD_OPENWORLD_CHAPTER_ACCELERATE_LEVEL_UP_BUILDING_RSP = 4640;
  CMD_OPENWORLD_CHATPER_TERMINAL_PERIOD_UPGRADE_REQ = 4641;
  CMD_OPENWORLD_CHATPER_TERMINAL_PERIOD_UPGRADE_RSP = 4642;
  CMD_OPENWORLD_CHAPTER_GET_SELECT_QUEST_REQ = 4643;
  CMD_OPENWORLD_CHAPTER_GET_SELECT_QUEST_RSP = 4644;
  CMD_OPENWORLD_CHAPTER_REFRESH_QUEST_REQ = 4645;
  CMD_OPENWORLD_CHAPTER_REFRESH_QUEST_RSP = 4646;
  CMD_OPENWORLD_CHAPTER_ACCEPT_QUEST_REQ = 4647;
  CMD_OPENWORLD_CHAPTER_ACCEPT_QUEST_RSP = 4648;
  CMD_OPENWORLD_CHAPTER_FINISH_QUEST_REQ = 4649;
  CMD_OPENWORLD_CHAPTER_FINISH_QUEST_RSP = 4650;
  CMD_OPENWORLD_CHAPTER_TAKE_QUEST_REWARD_REQ = 4651;
  CMD_OPENWORLD_CHAPTER_TAKE_QUEST_REWARD_RSP = 4652;
  CMD_OPENWORLD_CHAPTER_FURNACE_START_WORK_REQ = 4653;
  CMD_OPENWORLD_CHAPTER_FURNACE_START_WORK_RSP = 4654;
  CMD_OPENWORLD_CHAPTER_FURNACE_CANCEL_WORK_REQ = 4655;
  CMD_OPENWORLD_CHAPTER_FURNACE_CANCEL_WORK_RSP = 4656;
  CMD_OPENWORLD_CHAPTER_FURNACE_ACCELERATE_WORK_REQ = 4657;
  CMD_OPENWORLD_CHAPTER_FURNACE_ACCLELRATE_WORK_RSP = 4658;
  CMD_TAKE_OPENWORLD_CHAPTER_FURNACE_WORK_REWARD_REQ = 4659;
  CMD_TAKE_OPENWORLD_CHAPTER_FURNACE_WORK_REWARD_RSP = 4660;
  CMD_OPENWORLD_CHAPTER_LEVEL_UP_TALENT_REQ = 4661;
  CMD_OPENWORLD_CHAPTER_LEVEL_UP_TALENT_RSP = 4662;
  CMD_OPENWORLD_CHAPTER_ACTIVE_TALENT_REQ = 4663;
  CMD_OPENWORLD_CHAPTER_ACTIVE_TALENT_RSP = 4664;
  CMD_OPENWORLD_CHAPTER_DIGSITE_START_REQ = 4665;
  CMD_OPENWORLD_CHAPTER_DIGSITE_START_RSP = 4666;
  CMD_OPENWORLD_CHAPTER_DIGSITE_CANCEL_REQ = 4667;
  CMD_OPENWORLD_CHAPTER_DIGSITE_CANCEL_RSP = 4668;
  CMD_OPENWORLD_CHAPTER_DIGSITE_TAKE_REWARD_REQ = 4669;
  CMD_OPENWORLD_CHAPTER_DIGSITE_TAKE_REWARD_RSP = 4670;
  CMD_OPENWORLD_CHAPTER_DIGSITE_ACCELERATE_REQ = 4671;
  CMD_OPENWORLD_CHAPTER_DIGSITE_ACCELERATE_RSP = 4672;
  CMD_OPENWORLD_CHAPTER_MOON_CHALLENGE_TOWER_GET_DATA_REQ = 4673;
  CMD_OPENWORLD_CHAPTER_MOON_CHALLENGE_TOWER_GET_DATA_RSP = 4674;
  CMD_OPENWORLD_CHAPTER_MOON_CHALLENGE_TOWER_BATTLE_BEGIN_REQ = 4675;
  CMD_OPENWORLD_CHAPTER_MOON_CHALLENGE_TOWER_BATTLE_BEGIN_RSP = 4676;
  CMD_OPENWORLD_CHAPTER_MOON_CHALLENGE_TOWER_BATTLE_END_REQ = 4677;
  CMD_OPENWORLD_CHAPTER_MOON_CHALLENGE_TOWER_BATTLE_END_RSP = 4678;
  CMD_OPENWORLD_CHAPTER_MOON_CHALLENGE_TOWER_SWEEP_REQ = 4679;
  CMD_OPENWORLD_CHAPTER_MOON_CHALLENGE_TOWER_SWEEP_RSP = 4680;
  CMD_OPENWORLD_CHAPTER_MOON_CHALLENGE_TOWER_GET_RANK_REQ = 4681;
  CMD_OPENWORLD_CHAPTER_MOON_CHALLENGE_TOWER_GET_RANK_RSP = 4682;
  CMD_OPENWORLD_CHAPTER_QTE_MAP_END_REQ = 4683;
  CMD_OPENWORLD_CHAPTER_QTE_MAP_END_RSP = 4684;
  CMD_OPENWORLD_CHAPTER_REPORT_DROP_ITEM_REQ = 4685;
  CMD_OPENWORLD_CHAPTER_REPORT_DROP_ITEM_RSP = 4686;
  CMD_OPENWORLD_CHAPTER_MOON_RELICS_CHANGE_REQ = 4687;
  CMD_OPENWORLD_CHAPTER_MOON_RELICS_CHANGE_RSP = 4688;
  CMD_OPENWORLD_CHAPTER_GET_ANTIGRAVITY_DATA_REQ = 4689;
  CMD_OPENWORLD_CHAPTER_GET_ANTIGRAVITY_DATA_RSP = 4690;
  CMD_OPENWORLD_DUMMY = 4699;
}

enum EventJudgeType {
  EVENT_JUDGE_TYPE_NONT = 0;
  EVENT_JUDGE_TYPE_COLLECT = 1;
  EVENT_JUDGE_TYPE_MONSTER = 2;
  EVENT_JUDGE_TYPE_EMERGENCY = 3;
}

enum CookEffectType {
  COOK_EFFECT_TYPE_NONE = 0;
  COOK_ADD_BUFFER = 1;
  COOK_REVIVE = 2;
  COOK_RECOVER_ONE_HP = 3;
  COOK_RECOVER_ALL_HP = 4;
  COOK_RECOVER_ONE_SP = 5;
  COOK_RECOVER_ALL_SP = 6;
}

enum OpenworldStatId {
  OPENWORLD_STAT_ID_NONE = 0;
  OPENWORLD_STAT_QUEST = 1;
  OPENWORLD_STAT_EVENT_MONSTER = 2;
  OPENWORLD_STAT_EVENT_EMERGENCY = 3;
  OPENWORLD_STAT_EVENT_COLLECT = 4;
  OPENWORLD_STAT_MECHA = 5;
}

enum OpenworldFunction {
  OPENWORLD_FUNCTION_NONE = 0;
  OPENWORLD_FUNCTION_QUEST = 1;
  OPENWORLD_FUNCTION_COOK = 2;
  OPENWORLD_FUNCTION_MECHA = 3;
  OPENWORLD_FUNCTION_MECHA_DEFENSE = 4;
  OPENWORLD_FUNCTION_SHOP = 5;
  OPENWORLD_FUNCTION_WEEK_SETTLE = 6;
  OPENWORLD_FUNCTION_TREASURE = 7;
  OPENWORLD_FUNCTION_TECH = 8;
  OPENWORLD_FUNCTION_WEATHER = 9;
  OPENWORLD_FUNCTION_BOSS_HUNT = 10;
  OPENWORLD_FUNCTION_STORY = 11;
  OPENWORLD_FUNCTION_KEY_QUEST = 12;
}

enum OpenworldFunctionUnlockType {
  OPENWORLD_FUNCTION_UNLOCK_AUTO = 0;
  OPENWORLD_FUNCTION_UNLOCK_QUEST_LEVEL = 1;
  OPENWORLD_FUNCTION_UNLOCK_STORY = 2;
  OPENWORLD_FUNCTION_UNLOCK_TECH_LEVEL = 3;
}

enum OpenworldStageCondition {
  OPENWORLD_STAGE_CONDITION_NONE = 0;
  OPENWORLD_STAGE_COND_LD_SP = 1;
}

enum OpenworldDataType {
  OPENWORLD_DATA_ALL = 0;
  OPENWORLD_DATA_COOK = 1;
  OPENWORLD_DATA_TECH = 2;
  OPENWORLD_DATA_MECHA = 3;
}

enum OpenworldMapStatus {
  OPENWORLD_MAP_STATUS_NONE = 0;
  OPENWORLD_MAP_STATUS_ACTIVATE = 1;
  OPENWORLD_MAP_STATUS_AUTO_ACTIVATE = 2;
  OPENWORLD_MAP_STATUS_LOCK = 3;
}

enum OpenworldEventSubType {
  OPENWORLD_EVENT_SUB_TYPE_NONE = 0;
  OPENWORLD_EVENT_SUB_TREASURE = 50;
}

enum OpenworldEventRefreshType {
  OPENWORLD_EVENT_REFRESH_TYPE_NONE = 0;
  OPENWORLD_EVENT_REFRESH_CYCLE = 1;
  OPENWORLD_EVENT_REFRESH_ONCE = 2;
  OPENWORLD_EVENT_REFRESH_TIME = 3;
}

enum OpenworldQuestSettleType {
  OPENWORLD_QUEST_SETTLE_DEFAULT = 0;
  OPENWORLD_QUEST_SETTLE_CHALLENGE = 1;
}

enum OpenworldMapType {
  OPENWORLD_MAP_TYPE_NONE = 0;
  OPENWORLD_NORMAL_MAP = 1;
  OPENWORLD_ACTIVITY_MAP = 2;
  OPENWORLD_ENDLESS_MAP = 3;
  OPENWORLD_DLC_MAP = 4;
  OPENWORLD_ENDLESS_SINGLE_MAP = 5;
  OPENWORLD_AVATAR_ACTIVITY_MAP = 6;
  OPENWORLD_CHAPTER_MAP = 7;
  OPENWORLD_SC_DLC_MAP = 8;
  OPENWORLD_HUNT_ACTIVITY_MAP = 9;
  OPENWORLD_AI_CYBER_ACTIVITY_MAP = 10;
}

enum OpenworldActivityType {
  OPENWORLD_ACTIVITY_TYPE_NONE = 0;
  OPENWORLD_BOSS_HUNT_ACTIVITY = 1;
}

enum OpenworldFightEndStatus {
  OPENWORLD_FIGHT_STATUS_NONE = 0;
  OPENWORLD_FIGHT_STATUS_WIN = 1;
  OPENWORLD_FIGHT_STATUS_EXCAPE = 2;
  OPENWORLD_FIGHT_STATUS_ALL_DEAD = 3;
}

enum OpenworldSpecialMapID {
  OPENWORLD_SPECIAL_MAP_ID_NONE = 0;
  OPENWORLD_SAKURA_MAP_ID = 1;
  OPENWORLD_TM_MAP_ID = 2;
  OPENWORLD_DLC_MAP_ID = 401;
  OPENWORLD_SC_DLC_MAP_ID = 601;
  OPENWORLD_CHAPTER_29_OW = 801;
  OPENWORLD_CHAPTER_31_OW = 1001;
}

enum OpenworldQuestFinishWay {
  OPENWORLD_QUEST_FINISH_WAY_NONE = 0;
  OPENWORLD_QUEST_FINISH_WAY_DLC_COIN = 1;
  OPENWORLD_QUEST_FINISH_WAY_FINISH_EVENT = 2;
  OPENWORLD_QUEST_FINISH_WAY_ASSASSIN_KILL = 3;
  OPENWORLD_QUEST_FINISH_WAY_QTE_KILL = 4;
  OPENWORLD_QUEST_FINISH_WAY_KILL_MONSTER_TYPE = 5;
  OPENWORLD_QUEST_FINISH_WAY_AIR_KILL = 6;
  OPENWORLD_QUEST_FINISH_WAY_KILL_NATURE_MONSTER = 7;
  OPENWORLD_QUEST_FINISH_WAY_AIRSTRIKE_KILL = 8;
  OPENWORLD_QUEST_FINISH_WAY_THROWBLOW = 9;
  OPENWORLD_QUEST_FINISH_WAT_CHAPTER_OW_FINAL_COIN = 10;
  OPENWORLD_QUEST_FINISH_WAT_CHAPTER_OW_FINAL_ROBOT_ULTRA_KILL = 11;
  OPENWORLD_QUEST_FINISH_WAT_CHAPTER_OW_FINAL_ROBOT_USE_CATCH = 12;
}

enum OpenworldMechaTeamPosType {
  OPENWORLD_MECHA_TEAM_POS_TYPE_NONE = 0;
  MECHA_TEAM_POS_1 = 1;
  MECHA_TEAM_POS_2 = 2;
  MECHA_TEAM_POS_3 = 3;
  MECHA_TEAM_POS_4 = 4;
  MECHA_TEAM_POS_5 = 5;
}

enum OpenworldQuestCreateWay {
  OPENWORLD_QUEST_CREATE_WAY_NONE = 0;
  OPENWORLD_QUEST_CREATE_WAY_RARITY = 1;
  OPENWORLD_QUEST_CREATE_WAY_MAP_LEVEL = 2;
}

enum OpenworldAvatarActivityConditionType {
  OPENWORLD_AVATAR_ACTIVITY_CONDITION_NONE = 0;
  OPENWORLD_AVATAR_ACTIVITY_CONDITION_LEVEL = 1;
  OPENWORLD_AVATAR_ACTIVITY_CONDITION_TALENT = 2;
  OPENWORLD_AVATAR_ACTIVITY_CONDITION_STORY = 3;
  OPENWORLD_AVATAR_ACTIVITY_CONDITION_EVENT = 4;
  OPENWORLD_AVATAR_ACTIVITY_CONDITION_QUEST = 5;
  OPENWORLD_AVATAR_ACTIVITY_CONDITION_CULTIVATE = 6;
}

enum OpenworldAvatarActivityCultivateType {
  OPENWORLD_AVATAR_ACTIVITY_CULTIVATE_TYPE_NONE = 0;
  OPENWORLD_AVATAR_ACTIVITY_CULTIVATE_AVATAR = 1;
  OPENWORLD_AVATAR_ACTIVITY_CULTIVATE_STIGMATA = 2;
  OPENWORLD_AVATAR_ACTIVITY_CULTIVATE_WEAPON = 3;
}

enum OpenworldChapterUnlockConditionType {
  OPENWORLD_CHAPTER_UNLOCK_NONE = 0;
  OPENWORLD_CHAPTER_UNLOCK_PRE_EVENT = 1;
  OPENWORLD_CHAPTER_UNLOCK_DATETIME = 2;
  OPENWORLD_CHAPTER_UNLOCK_STAGE = 3;
  OPENWORLD_CHAPTER_UNLOCK_MISSION = 4;
  OPENWORLD_CHAPTER_UNLOCK_PRE_STORY = 5;
  OPENWORLD_CHAPTER_UNLOCK_PRE_TOWER = 6;
}

enum OpenworldUnlockConditionType {
  OPENWORLD_UNLOCK_CONDITION_TYPE_NONE = 0;
  OPENWORLD_UNLOCK_PRE_EVENT_LIST = 1;
  OPENWORLD_UNLOCK_DATETIME = 2;
  OPENWORLD_UNLOCK_STAGE_LIST = 3;
  OPENWORLD_UNLOCK_MISSION_LIST = 4;
  OPENWORLD_UNLOCK_PRE_STORY_LIST = 5;
}

enum OpenworldChapterStoryType {
  OPENWORLD_CHAPTER_STORY_TYPE_NONE = 0;
  OPENWORLD_CHAPTER_STAGE = 1;
  OPENWORLD_CHAPTER_STORY = 2;
}

enum OpenworldQuestRewardType {
  OPENWORLD_QUEST_REWARD_TYPE_NONE = 0;
  OW_QUEST_REWARD_A_AVATAR_FRAGMENT = 1;
  OW_QUEST_REWARD_SP_AVATAR_FRAGMENT = 2;
  OW_QUEST_REWARD_PURPLEJADE = 3;
  OW_QUEST_REWARD_NORMAL = 4;
  OW_QUEST_REWARD_ARTIFACT = 5;
}

enum OpenworldChapterTowerType {
  OPENWORLD_CHAPTER_TOWER_TYPE_NONE = 0;
  OPENWORLD_CHAPTER_TOWER_COMMON = 1;
  OPENWORLD_CHAPTER_TOWER_ENDLESS = 2;
}

enum OpenworldChapterTowerSiteType {
  OPENWORLD_CHAPTER_TOWER_SITE_TYPE_NONE = 0;
  OPENWORLD_CHAPTER_TOWER_SITE_STAGE = 1;
  OPENWORLD_CHAPTER_TOWER_SITE_PLOT = 2;
}

enum OpenworldChapterHeroType {
  OPENWORLD_CHAPTER_HERO_TYPE_NONE = 0;
  OPENWORLD_CHAPTER_CARD_HERO = 1;
  OPENWORLD_CHAPTER_NORMAL_HERO = 2;
}

enum HuntActivityEntityType {
  HUNT_ACTIVITY_TYPE_NONE = 0;
  HUNT_ACTIVITY_TYPE_HUNTER = 1;
  HUNT_ACTIVITY_TYPE_STRONGHOLD = 2;
  HUNT_ACTIVITY_TYPE_MACHINE = 3;
}

enum HuntActivityHunterState {
  HUNTER_STATE_NONE = 0;
  HUNTER_STATE_PARTOL = 1;
  HUNTER_STATE_CHASE = 2;
  HUNTER_STATE_BATTLE = 3;
  HUNTER_STATE_DEAD = 4;
}

enum OpenworldChapterBuildingType {
  OPENWORLD_CHAPTER_BUILDING_TYPE_NONE = 0;
  OPENWORLD_CHAPTER_BUILDING_FURNACE = 1;
  OPENWORLD_CHAPTER_BUILDING_QUEST = 2;
  OPENWORLD_CHAPTER_BUILDING_WORKSHOP = 3;
  OPENWORLD_CHAPTER_BUILDING_BAG = 4;
  OPENWORLD_CHAPTER_BUILDING_DIGSITE = 5;
  OPENWORLD_CHAPTER_BUILDING_TRANSPORT = 6;
}

enum OpenworldChapterQuestType {
  OPENWORLD_CHAPTER_QUEST_TYPE_NONE = 0;
  OPENWORLD_CHAPTER_NORMAL_QUEST = 1;
  OPENWORLD_CHAPTER_SPECIAL_QUEST = 2;
}

enum OpenworldChapterFurnaceWorkStatus {
  OPENWORLD_CHAPTER_FURNACE_WORK_INVALID = 0;
  OPENWORLD_CHAPTER_FURNACE_WORK_NOT_BEGIN = 1;
  OPENWORLD_CHAPTER_FURNACE_WORK_DOING = 2;
  OPENWORLD_CHAPTER_FURNACE_WORK_FINISHED = 3;
}

enum OpenworldChapterTalentType {
  OPENWORLD_CHAPTER_TALENT_TYPE_NONE = 0;
  OPENWORLD_CHAPTER_NORMAL_TALENT = 1;
  OPENWORLD_CHAPTER_ACTIVE_TALENT = 2;
  OPENWORLD_CHAPTER_DIG_TALENT = 3;
}

enum MoonChallengeTowerBattleEndStatus {
  MOON_CHALLENGE_TOWER_BATTLE_END_INVALID = 0;
  MOON_CHALLENGE_TOWER_BATTLE_END_SUCC = 1;
  MOON_CHALLENGE_TOWER_BATTLE_END_FAIL = 2;
}

enum OpenworldChapterQTEMapType {
  OPENWORLD_CHAPTER_QTE_MAP_TYPE_NONE = 0;
  OPENWORLD_CHAPTER_QTE_NORMAL_MAP = 1;
  OPENWORLD_CHAPTER_QTE_SPECIAL_MAP = 2;
}

enum QTEMapEndStatus {
  QTE_MAP_END_STATUS_SUCC = 0;
  QTE_MAP_END_STATUS_EXIT = 1;
  QTE_MAP_END_STATUS_EXHAUSTED = 2;
}

message PjmsWorld {
  uint32 world_id = 1;
  repeated PjmsEntity entity_list = 2;
  uint32 world_time = 3;
  repeated uint32 kill_monster_guid_list = 5;
  repeated PjmsGroup active_group_list = 6;
}

message PjmsTeleport {
  enum Status {
    PJMS_TELEPORT_STATUS_LOCK = 0;
    PJMS_TELEPORT_STATUS_INACTIVE = 1;
    PJMS_TELEPORT_STATUS_ACTIVE = 2;
  }

  uint32 teleport_id = 1;
  PjmsTeleport.Status status = 2;
}

message PjmsMap {
  repeated uint32 unlock_fog_id_list = 1;
  repeated PjmsTeleport teleport_list = 2;
}

message PjmsGadget {
  uint32 state = 1;
}

message PjmsNpc {
  uint32 state = 1;
}

message PjmsEntity {
  uint32 guid = 1;
  uint32 type = 2;
  PjmsGadget gadget = 3;
  PjmsNpc npc = 4;
}

message PjmsGroup {
  uint32 group_id = 1;
  uint32 state = 2;
  uint32 create_time = 3;
}

message PjmsEventChapterLevelUpParam {
  uint32 chapter_id = 1;
  uint32 cur_chapter_level = 2;
}

message PjmsEventFinishStoryParam {
  uint32 story_id = 1;
}

message PjmsEventAddMaterialParam {
  uint32 material_id = 1;
  int32 add_num = 2;
}

message PjmsEventEnterWorldParam {
  uint32 world_id = 1;
}

message PjmsEventLevelUpParam {
  uint32 level = 1;
}

message PjmsEventKillMonsterParam {
  uint32 monster_guid = 1;
  uint32 world_id = 2;
  uint32 group_id = 3;
}

message PjmsEventGadgetStateChangeParam {
  uint32 gadget_guid = 1;
  uint32 cur_state = 2;
  uint32 world_id = 3;
  uint32 group_id = 4;
}

message PjmsEventGroupStateChangeParam {
  uint32 group_id = 1;
  uint32 cur_state = 2;
}

message PjmsEventSetWorldTimeParam {
  uint32 world_time = 1;
}

message PjmsEventFinishStageIdParam {
  uint32 stage_id = 1;
}

message PjmsEventFinishMissionParam {
  uint32 mission_id = 1;
}

message PjmsEventGroupActiveChangeParam {
  uint32 group_id = 1;
  bool is_active = 2;
}

message PjmsEventShopBuyGoodsParam {
  uint32 shop_id = 1;
  uint32 goods_id = 2;
  uint32 goods_num = 3;
}

message PjmsEventLeaveWorldParam {
  uint32 world_id = 1;
}

message PjmsEvent {
  PjmsEventType type = 1;
  PjmsEventFinishStoryParam finish_story_param = 21;
  PjmsEventAddMaterialParam add_material_param = 23;
  PjmsEventEnterWorldParam enter_world_param = 24;
  PjmsEventLevelUpParam level_up_param = 25;
  PjmsEventKillMonsterParam kill_monster_param = 26;
  PjmsEventGadgetStateChangeParam gadget_state_change_param = 27;
  PjmsEventGroupStateChangeParam group_state_change_param = 28;
  PjmsEventSetWorldTimeParam set_world_time_param = 29;
  PjmsEventFinishStageIdParam finish_stage_id_param = 30;
  PjmsEventChapterLevelUpParam chapter_level_up_param = 31;
  PjmsEventFinishMissionParam finish_mission_param = 32;
  PjmsEventGroupActiveChangeParam group_active_change_param = 33;
  PjmsEventShopBuyGoodsParam shop_buy_goods_param = 34;
  PjmsEventLeaveWorldParam leave_world_param = 35;
}

message PjmsStory {
  uint32 story_id = 1;
  uint32 status = 2;
  uint32 progress = 3;
}

// CmdID: 7700
message PjmsEnterWorldReq {
  uint32 world_id = 1;
  uint32 teleport_id = 2;
}

// CmdID: 7701
message PjmsEnterWorldRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    CHAPTER_ERROR = 2;
    TELEPORT_NOT_FOUND = 3;
    TELEPORT_NOT_ACTIVE = 4;
    TELEPORT_WORLD_ERROR = 5;
    WORLD_ERROR = 6;
    DIRECTED_ENTER_DENIED = 7;
  }

  PjmsEnterWorldRsp.Retcode retcode = 1;
  PjmsWorld world = 2;
  uint32 teleport_id = 3;
  PjmsFormation formation = 4;
  string world_transaction_str = 5;
}

// CmdID: 7702
message PjmsGetCurWorldReq {
}

// CmdID: 7703
message PjmsGetCurWorldRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  PjmsGetCurWorldRsp.Retcode retcode = 1;
  PjmsWorld world = 2;
}

message PjmsChapterSection {
  uint32 chapter_section_id = 1;
  uint32 cur_track_series_id = 2;
}

message PjmsChapter {
  uint32 chapter_id = 1;
  uint32 level = 2;
  uint32 exp = 3;
  uint32 cur_track_series_id = 4;
  uint32 talent_level = 5;
  PjmsFormation formation = 6;
  PjmsUnitInfo unit_info = 7;
  uint32 last_take_chapter_reward_material_num = 8;
  uint32 last_take_chapter_reward_level = 9;
  repeated uint32 finish_daily_quest_series_id_list = 10;
  ChapterShadowLake chapter_shadowlake = 11;
  uint32 playing_bgm_id = 12;
  repeated PjmsChapterSection section_list = 13;
  uint32 cur_section_id = 14;
}

message PjmsUnitInfo {
  repeated PjmsCoreUnit core_unit_list = 1;
  repeated PjmsAuxiliaryUnit auxiliary_unit_list = 2;
  uint32 cur_unit_set_id = 3;
  repeated PjmsUnitSet unit_set_list = 4;
}

// CmdID: 7706
message PjmsGetMainDataReq {
}

// CmdID: 7707
message PjmsGetMainDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_CHAPTER = 2;
  }

  PjmsGetMainDataRsp.Retcode retcode = 1;
  PjmsWorld world = 2;
  PjmsMap map = 3;
  uint32 gender_type = 4;
  uint32 world_time = 5;
  string name = 7;
  uint32 name_cd_end_time = 8;
  uint32 gender_cd_end_time = 9;
  string world_transaction_str = 10;
  string first_set_name = 11;
}

// CmdID: 7708
message PjmsGetStoryDataReq {
}

message PjmsStorySeriesData {
  uint32 story_series_id = 1;
  repeated PjmsStory story_list = 2;
}

// CmdID: 7709
message PjmsGetStoryDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  PjmsGetStoryDataRsp.Retcode retcode = 1;
  repeated uint32 finished_story_series_id_list = 3;
  repeated PjmsStory story_list = 4;
  repeated uint32 accepted_series_id_list = 5;
}

message PjmsStoryFinishData {
  uint32 story_id = 1;
  RewardData reward_data = 2;
}

message PjmsStorySeriesFinishData {
  uint32 story_series_id = 1;
  RewardData reward_data = 2;
}

message PjmsStoryProgressData {
  uint32 story_id = 1;
  uint32 progress = 2;
}

// CmdID: 7714
message PjmsUpdateStoryProgressNotify {
  repeated PjmsStoryProgressData story_progress_data_list = 1;
}

// CmdID: 7719
message PjmsSyncMapInfoNotify {
  PjmsMap map = 1;
}

// CmdID: 7720
message PjmsUpdateEntityNotify {
  repeated uint32 inactive_entity_guid_list = 1;
  repeated PjmsEntity update_active_entity_list = 2;
  repeated uint32 inactive_group_id_list = 3;
  repeated uint32 refresh_group_id_list = 4;
  repeated PjmsGroup active_group_list = 5;
  repeated uint32 revive_monster_guid_list = 6;
}

// CmdID: 7725
message PjmsUpdateStoryProgressReq {
  uint32 finish_param_uint = 1;
  string finish_param_str = 2;
}

// CmdID: 7726
message PjmsUpdateStoryProgressRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  PjmsUpdateStoryProgressRsp.Retcode retcode = 1;
  uint32 finish_param_uint = 2;
  string finish_param_str = 3;
}

// CmdID: 7727
message PjmsKillMonsterReq {
  uint32 guid = 1;
}

// CmdID: 7728
message PjmsKillMonsterRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_WORLD = 2;
    MONSTER_NOT_FOUND = 3;
    MONSTER_KILLED = 4;
  }

  PjmsKillMonsterRsp.Retcode retcode = 1;
  uint32 guid = 2;
}

// CmdID: 7729
message PjmsChangeGadgetStateReq {
  uint32 guid = 1;
  uint32 current_state = 2;
  uint32 target_state = 3;
}

// CmdID: 7730
message PjmsChangeGadgetStateRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_WORLD = 2;
    STATE_NOT_MATCH = 3;
    STATE_CANNOT_CHANGE = 4;
    GADGET_NOT_EXIST = 5;
  }

  PjmsChangeGadgetStateRsp.Retcode retcode = 1;
  uint32 guid = 2;
  uint32 current_state = 3;
  uint32 target_state = 4;
}

// CmdID: 7731
message PjmsActiveGroupReq {
  uint32 group_id = 1;
  bool is_active = 2;
  uint32 graph_id = 3;
}

// CmdID: 7732
message PjmsActiveGroupRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_WORLD = 2;
    GROUP_NOT_EXIST = 3;
    GROUP_NOT_VALID = 4;
    CONDITION_NOT_SATISFY = 5;
  }

  PjmsActiveGroupRsp.Retcode retcode = 1;
  uint32 group_id = 2;
  bool is_current_active = 3;
  uint32 graph_id = 4;
}

// CmdID: 7733
message PjmsActiveEntityReq {
  repeated uint32 entity_guid_list = 1;
  bool is_active = 2;
  uint32 graph_id = 3;
}

// CmdID: 7734
message PjmsActiveEntityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_WORLD = 2;
  }

  PjmsActiveEntityRsp.Retcode retcode = 1;
  repeated uint32 entity_guid_list = 2;
  bool is_active = 3;
  repeated uint32 fail_entity_guid_list = 4;
  uint32 graph_id = 5;
}

// CmdID: 7735
message PjmsSetWorldTimeReq {
  uint32 target_time = 1;
}

// CmdID: 7736
message PjmsSetWorldTimeRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_WORLD = 2;
    TIME_FORMAT_ERROR = 3;
  }

  PjmsSetWorldTimeRsp.Retcode retcode = 1;
  uint32 cur_time = 2;
}

message DropFrom {
  uint32 from_type = 1;
  uint32 param_int = 2;
}

// CmdID: 7737
message PjmsCommonDropNotify {
  repeated DropItem drop_item_list = 1;
  DropFrom drop_from = 2;
  uint32 hcoin = 3;
}

// CmdID: 7738
message PjmsChangeChapterReq {
  uint32 select_chapter_id = 1;
  uint32 section_id = 2;
}

// CmdID: 7739
message PjmsChangeChapterRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    INVALID_CHAPTER = 2;
    NOT_IN_CHAPTER = 3;
    CONDITION_NOT_MATCH = 4;
    PJMS_CLOSE = 5;
  }

  PjmsChangeChapterRsp.Retcode retcode = 1;
  PjmsChapter cur_chapter = 2;
  PjmsWorld cur_world = 3;
  string world_transaction_str = 4;
}

// CmdID: 7740
message PjmsSetCurAvatarReq {
  uint32 chapter_id = 1;
  uint32 cur_avatar_id = 2;
  bool is_elf_mode = 3;
}

// CmdID: 7741
message PjmsSetCurAvatarRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    CHAPTER_ERROR = 2;
    AVATAR_ERROR = 3;
    TARGET_DEAD = 4;
    WORLD_TYPE_ERROR = 5;
  }

  PjmsSetCurAvatarRsp.Retcode retcode = 1;
  uint32 chapter_id = 2;
  uint32 cur_avatar_id = 3;
  bool is_elf_mode = 4;
}

message PjmsAvatarStatus {
  uint32 avatar_id = 1;
  uint32 sp_percent = 2;
  uint32 hp_percent = 3;
}

message PjmsFormation {
  uint32 cur_avatar_id = 2;
  uint32 elf_id = 3;
  bool is_elf_mode = 4;
  uint32 star_ring_energy = 5;
  repeated uint32 avatar_id_list = 6;
}

// CmdID: 7742
message PjmsUpdateFormationReq {
  uint32 chapter_id = 1;
  repeated uint32 avatar_list = 2;
  uint32 elf_id = 3;
}

// CmdID: 7743
message PjmsUpdateFormationRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    FORMATION_LENGTH_ERROR = 2;
    AVATAR_ERROR = 3;
    CHAPTER_ERROR = 4;
    ELF_ERROR = 5;
    ASTRA_MATE_ERROR = 6;
    ALL_DEAD = 7;
  }

  PjmsUpdateFormationRsp.Retcode retcode = 1;
  uint32 chapter_id = 2;
  PjmsFormation formation = 3;
}

// CmdID: 7744
message PjmsUpdateAvatarStatusReq {
  uint32 chapter_id = 1;
  repeated PjmsAvatarStatus avatar_status_list = 2;
  uint32 star_ring_energy = 3;
}

// CmdID: 7745
message PjmsUpdateAvatarStatusRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    AVATAR_ERROR = 2;
    CHAPTER_ERROR = 3;
  }

  PjmsUpdateAvatarStatusRsp.Retcode retcode = 1;
  uint32 chapter_id = 2;
  repeated PjmsAvatarStatus avatar_status_list = 4;
  uint32 star_ring_energy = 5;
}

// CmdID: 7746
message PjmsGetAvatarStatusReq {
  uint32 chapter_id = 1;
  repeated uint32 avatar_id_list = 2;
  bool is_all = 3;
}

// CmdID: 7747
message PjmsGetAvatarStatusRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    CHAPTER_ERROR = 2;
    AVATAR_ERROR = 3;
  }

  PjmsGetAvatarStatusRsp.Retcode retcode = 1;
  uint32 chapter_id = 2;
  repeated PjmsAvatarStatus avatar_status_list = 3;
  bool is_all = 4;
  uint32 star_ring_energy = 5;
}

// CmdID: 7756
message PjmsUpdateChapterNotify {
  PjmsChapter cur_chapter = 1;
}

// CmdID: 7757
message PjmsLevelUpTalentReq {
  uint32 chapter_id = 1;
  uint32 target_level = 2;
}

// CmdID: 7758
message PjmsLevelUpTalentRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    CHAPTER_ERROR = 2;
    TALENT_ERROR = 3;
    TALENT_LEVEL_ERROR = 4;
    MATERIAL_LACK = 5;
    CHAPTER_LEVEL_ERROR = 6;
    CONDITION_NOT_MATCH = 7;
  }

  PjmsLevelUpTalentRsp.Retcode retcode = 1;
  uint32 chapter_id = 2;
  uint32 cur_talent_level = 3;
  uint32 cur_chapter_level = 4;
}

message ChapterShadowLake {
  uint32 max_energy_num = 1;
  uint32 energy_num = 2;
}

// CmdID: 7761
message PjmsSetNameReq {
  string name = 1;
  bool is_first = 2;
}

// CmdID: 7762
message PjmsSetNameRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    FORMAT_ERROR = 2;
    SENSITIVE_WORDS = 3;
    IN_CD = 4;
    IN_AUDIT = 5;
    FEATURE_CLOSED = 6;
  }

  PjmsSetNameRsp.Retcode retcode = 1;
  string name = 2;
  uint32 cd_end_time = 3;
  string first_set_name = 4;
}

// CmdID: 7763
message PjmsSetGenderReq {
  PjmsGenderType gender_type = 1;
}

// CmdID: 7764
message PjmsSetGenderRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    GENDER_TYPE_ERROR = 2;
    IN_CD = 3;
  }

  PjmsSetGenderRsp.Retcode retcode = 1;
  PjmsGenderType gender_type = 2;
  uint32 cd_end_time = 3;
}

// CmdID: 7765
message PjmsGetUnitInfoReq {
  uint32 chapter_id = 1;
}

// CmdID: 7766
message PjmsGetUnitInfoRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    CHAPTER_ERROR = 2;
  }

  PjmsGetUnitInfoRsp.Retcode retcode = 1;
  uint32 chapter_id = 2;
  PjmsUnitInfo unit_info = 3;
}

// CmdID: 7767
message PjmsLevelUpCoreUnitReq {
  uint32 chapter_id = 1;
  uint32 unit_id = 2;
  uint32 target_level = 3;
}

// CmdID: 7768
message PjmsLevelUpCoreUnitRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    COST_LACK = 2;
    TARGET_LEVEL_ERROR = 3;
    CONDITION_MISMATCH = 4;
    UNIT_ID_ERROR = 5;
    CHAPTER_ERROR = 6;
  }

  PjmsLevelUpCoreUnitRsp.Retcode retcode = 1;
  uint32 chapter_id = 2;
  uint32 unit_id = 3;
  uint32 target_level = 4;
  uint32 before_level = 5;
}

// CmdID: 7769
message PjmsLevelUpAuxiliaryUnitReq {
  uint32 chapter_id = 1;
  uint32 unique_id = 2;
  uint32 cur_level = 3;
  uint32 cur_exp = 4;
  repeated Material cost_material_list = 5;
  repeated uint32 cost_auxiliary_unique_id_list = 6;
}

// CmdID: 7770
message PjmsLevelUpAuxiliaryUnitRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    COST_MATERIAL_LACK = 2;
    CONDITION_MISMATCH = 3;
    COST_UNIT_ERROR = 4;
    CHAPTER_ERROR = 5;
    TARGET_UNIT_ERROR = 6;
    LEVEL_LIMIT = 7;
    COST_MATERIAL_ERROR = 8;
    UNIT_LOCKED = 9;
    GOLD_LACK = 10;
    EMPTY_COST = 11;
  }

  PjmsLevelUpAuxiliaryUnitRsp.Retcode retcode = 1;
  uint32 chapter_id = 2;
  PjmsAuxiliaryUnit unit_before = 3;
  PjmsAuxiliaryUnit unit_after = 4;
  repeated Material return_material_list = 5;
}

// CmdID: 7771
message PjmsUnitSetChangeNotify {
  uint32 chapter_id = 1;
  uint32 cur_unit_set_id = 2;
  repeated PjmsUnitSet updated_unit_set_list = 3;
}

message PjmsUnitSetSlot {
  uint32 slot_id = 1;
  uint32 id = 2;
}

message PjmsUnitSet {
  uint32 set_id = 1;
  repeated PjmsUnitSetSlot slot_list = 2;
}

// CmdID: 7773
message PjmsSetCurUnitSetReq {
  uint32 chapter_id = 1;
  uint32 set_id = 2;
}

// CmdID: 7774
message PjmsSetCurUnitSetRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    SET_ID_ERROR = 2;
    CHAPTER_ERROR = 3;
  }

  PjmsSetCurUnitSetRsp.Retcode retcode = 1;
  uint32 chapter_id = 2;
  uint32 cur_set_id = 3;
}

// CmdID: 7775
message PjmsChangeUnitSetSlotReq {
  uint32 chapter_id = 1;
  uint32 set_id = 2;
  PjmsUnitSetSlot slot = 3;
}

// CmdID: 7776
message PjmsChangeUnitSetSlotRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    SET_ID_ERROR = 2;
    UNIT_NOT_EXIST = 3;
    SLOT_ERROR = 4;
    CHAPTER_ERROR = 5;
    SLOT_CONDITION_NOT_MATCH = 6;
  }

  PjmsChangeUnitSetSlotRsp.Retcode retcode = 1;
  uint32 chapter_id = 2;
  PjmsUnitSet set_data = 3;
}

// CmdID: 7777
message PjmsUnitChangeNotify {
  uint32 chapter_id = 1;
  repeated PjmsCoreUnit updated_core_unit_list = 2;
  repeated PjmsAuxiliaryUnit updated_auxiliary_unit_list = 3;
  repeated uint32 deleted_auxiliary_unique_id_list = 4;
}

// CmdID: 7778
message PjmsChangeBgmReq {
  uint32 bgm_id = 1;
  uint32 chapter_id = 2;
}

// CmdID: 7779
message PjmsChangeBgmRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    BGM_LOCKED = 2;
    CHAPTER_ERROR = 3;
  }

  PjmsChangeBgmRsp.Retcode retcode = 1;
  uint32 bgm_id = 2;
  uint32 chapter_id = 3;
}

// CmdID: 7780
message PjmsTakeChapterRewardReq {
  uint32 chapter_id = 1;
}

// CmdID: 7781
message PjmsTakeChapterRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    CHAPTER_ERROR = 2;
    NO_REWARD = 3;
  }

  PjmsTakeChapterRewardRsp.Retcode retcode = 1;
  uint32 chapter_id = 2;
  RewardData reward_data = 3;
  uint32 last_take_reward_material_num = 4;
}

// CmdID: 7782
message PjmsDisjoinAuxiliaryUnitReq {
  uint32 chapter_id = 1;
  repeated uint32 unique_id_list = 2;
}

// CmdID: 7783
message PjmsDisjoinAuxiliaryUnitRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    CHAPTER_ERROR = 2;
    UNIQUE_ID_ERROR = 3;
    UNIT_LOCKED = 4;
    EMPTY_COST = 5;
  }

  PjmsDisjoinAuxiliaryUnitRsp.Retcode retcode = 1;
  uint32 chapter_id = 2;
  repeated Material return_material_list = 3;
}

message PjmsResidentStageRestrict {
  uint32 restrict_id = 1;
  uint32 weekly_enter_times = 2;
}

// CmdID: 7784
message PjmsGetResidentStageDataReq {
}

// CmdID: 7785
message PjmsGetResidentStageDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  PjmsGetResidentStageDataRsp.Retcode retcode = 1;
  repeated PjmsResidentStageRestrict restrict_list = 2;
}

// CmdID: 7786
message PjmsGetExploreScoreReq {
  uint32 chapter_id = 1;
}

message PjmsExploreScore {
  uint32 explore_id = 1;
  uint32 score = 2;
}

// CmdID: 7787
message PjmsGetExploreScoreRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    CHAPTER_ERROR = 2;
  }

  PjmsGetExploreScoreRsp.Retcode retcode = 1;
  uint32 chapter_id = 2;
  repeated PjmsExploreScore explore_score_list = 3;
}

// CmdID: 7788
message PjmsGetHomeDataReq {
}

// CmdID: 7789
message PjmsGetHomeDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  PjmsGetHomeDataRsp.Retcode retcode = 1;
  repeated uint32 unlock_bgm_id_list = 2;
  repeated uint32 unlock_furniture_id_list = 4;
}

// CmdID: 7790
message PjmsGetAchievementDataReq {
}

message PjmsAchievement {
  uint32 mission_id = 1;
  uint32 finish_time = 2;
}

message PjmsAchievementSection {
  uint32 section_id = 1;
  bool is_take_platinum_reward = 2;
  repeated PjmsAchievement achievement_list = 3;
}

// CmdID: 7791
message PjmsGetAchievementDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  PjmsGetAchievementDataRsp.Retcode retcode = 1;
  repeated PjmsAchievementSection section_list = 2;
}

// CmdID: 7792
message PjmsTakeAchievementPlatinumRewardReq {
  uint32 section_id = 1;
}

// CmdID: 7793
message PjmsTakeAchievementPlatinumRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    SECTION_ERROR = 2;
    NO_REWARD = 3;
    LOCKED = 4;
    PROGRESS_LACK = 5;
    HAS_TAKE = 6;
  }

  PjmsTakeAchievementPlatinumRewardRsp.Retcode retcode = 1;
  uint32 section_id = 2;
  RewardData reward_data = 3;
}

// CmdID: 7796
message PjmsTakeChapterLevelRewardReq {
  uint32 chapter_id = 1;
}

// CmdID: 7797
message PjmsTakeChapterLevelRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    CHAPTER_ERROR = 2;
    NO_REWARD = 3;
  }

  PjmsTakeChapterLevelRewardRsp.Retcode retcode = 1;
  uint32 chapter_id = 2;
  RewardData reward_data = 3;
  uint32 last_take_chapter_reward_level = 4;
}

// CmdID: 7800
message PjmsRefreshGroupReq {
  uint32 group_id = 1;
  uint32 create_time = 2;
  uint32 graph_id = 3;
}

// CmdID: 7801
message PjmsRefreshGroupRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_WORLD = 2;
    GROUP_NOT_EXIST = 3;
    CREATE_TIME_NOT_EQUAL = 4;
  }

  PjmsRefreshGroupRsp.Retcode retcode = 1;
  uint32 group_id = 2;
  uint32 cur_create_time = 3;
  uint32 graph_id = 4;
}

message PjmsStageBeginRspBody {
  PjmsWorld world = 1;
}

// CmdID: 7794
message PjmsSetAuxiliaryUnitLockStatusReq {
  uint32 chapter_id = 1;
  uint32 unique_id = 2;
  PjmsAuxiliaryUnitLockStatus lock_status = 3;
}

// CmdID: 7795
message PjmsSetAuxiliaryUnitLockStatusRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    CHAPTER_ERROR = 2;
    UNIQUE_ID_ERROR = 3;
  }

  PjmsSetAuxiliaryUnitLockStatusRsp.Retcode retcode = 1;
  uint32 chapter_id = 2;
  uint32 unique_id = 3;
}

// CmdID: 7798
message PjmsReviveAvatarReq {
  uint32 chapter_id = 1;
  uint32 avatar_id = 2;
  uint32 revive_use_id = 3;
  uint32 revive_seed = 4;
}

// CmdID: 7799
message PjmsReviveAvatarRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    CHAPTER_ERROR = 2;
    AVATAR_ERROR = 3;
    MATERIAL_LACK = 4;
    REVIVE_TIMES_LIMIT = 5;
    STAGE_ERROR = 6;
    REVIVE_USE_ID_ERROR = 7;
    SEED_ERROR = 8;
  }

  PjmsReviveAvatarRsp.Retcode retcode = 1;
  uint32 chapter_id = 2;
  uint32 avatar_id = 3;
  uint32 revive_times = 4;
  uint32 revive_seed = 5;
}

// CmdID: 7802
message PjmsFinishConsumeMaterialStoryReq {
  uint32 story_id = 1;
}

// CmdID: 7803
message PjmsFinishConsumeMaterialStoryRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    STORY_NOT_ACCEPT = 2;
    STORY_NOT_DOING = 3;
    CONDITION_NOT_MATCH = 4;
    MATERIAL_LACK = 5;
  }

  PjmsFinishConsumeMaterialStoryRsp.Retcode retcode = 1;
  uint32 story_id = 2;
}

message PjmsStoryStatusData {
  PjmsStoryFinishData finished_story_data = 1;
  PjmsStorySeriesFinishData finished_story_series_data = 2;
  uint32 accepted_story_id = 3;
  uint32 accepted_series_id = 4;
  uint32 closed_story_id = 5;
}

// CmdID: 7804
message PjmsStoryStatusNotify {
  repeated PjmsStoryStatusData story_status_list = 1;
}

// CmdID: 7805
message PjmsChangeNpcStateReq {
  uint32 npc_guid = 1;
  uint32 target_state = 2;
}

// CmdID: 7806
message PjmsChangeNpcStateRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_WORLD = 2;
    NPC_NOT_EXIST = 3;
  }

  PjmsChangeNpcStateRsp.Retcode retcode = 1;
  uint32 npc_guid = 2;
  uint32 cur_state = 3;
}

// CmdID: 7807
message PjmsAddShadowLakeEnergyReq {
  uint32 add_energy_num = 1;
  uint32 cur_energy_num = 2;
}

// CmdID: 7808
message PjmsAddShadowLakeEnergyRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  PjmsAddShadowLakeEnergyRsp.Retcode retcode = 1;
  uint32 add_energy_num = 2;
  uint32 cur_energy_num = 3;
}

// CmdID: 7809
message PjmsSubShadowLakeEnergyReq {
  uint32 sub_energy_num = 1;
  uint32 cur_energy_num = 2;
}

// CmdID: 7810
message PjmsSubShadowLakeEnergyRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ENERGY_NOT_ENOUGH = 3;
  }

  PjmsSubShadowLakeEnergyRsp.Retcode retcode = 1;
  uint32 sub_energy_num = 2;
  uint32 cur_energy_num = 3;
}

// CmdID: 7811
message PjmsShadowLakeNotify {
  ChapterShadowLake chapter_shadowlake = 1;
}

// CmdID: 7812
message PjmsGetChapterDataReq {
  bool is_all = 1;
  uint32 chapter_id = 2;
}

// CmdID: 7813
message PjmsGetChapterDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    CHAPTER_ERROR = 2;
  }

  PjmsGetChapterDataRsp.Retcode retcode = 1;
  bool is_all = 2;
  repeated PjmsChapter chapter_list = 3;
  uint32 cur_chapter_id = 4;
}

// CmdID: 7814
message PjmsGetActivityPanelReq {
}

message PjmsActivityPanel {
  uint32 activity_id = 1;
  uint32 begin_time = 2;
  uint32 end_time = 3;
  bool is_resident = 4;
  uint32 advance_begin_time = 5;
  uint32 advance_end_time = 6;
  uint32 min_level = 7;
}

// CmdID: 7815
message PjmsGetActivityPanelRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    FEATURE_CLOSED = 3;
  }

  PjmsGetActivityPanelRsp.Retcode retcode = 1;
  repeated PjmsActivityPanel activity_panel_list = 2;
}

// CmdID: 7816
message PjmsResidentStageGetRankReq {
  uint32 rank_group_id = 1;
}

// CmdID: 7817
message PjmsResidentStageGetRankRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    INVALID_RANK_GROUP = 2;
  }

  PjmsResidentStageGetRankRsp.Retcode retcode = 1;
  uint32 rank_group_id = 2;
  RankShowData rank_data = 3;
  uint32 rank_percent = 4;
  uint32 rank = 5;
}

// CmdID: 7818
message PjmsGetRecoveryRecordReq {
}

message PjmsRecoveryRecord {
  uint32 target_id = 1;
  uint32 skill_id = 2;
  uint32 last_recover_time = 3;
}

// CmdID: 7819
message PjmsGetRecoveryRecordRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  PjmsGetRecoveryRecordRsp.Retcode retcode = 1;
  repeated PjmsRecoveryRecord recovery_record_list = 5;
}

// CmdID: 7820
message PjmsRecordRecoveryActionReq {
  repeated PjmsRecoveryRecord triggered_record_list = 3;
}

// CmdID: 7821
message PjmsRecordRecoveryActionRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    IN_CD = 4;
    TARGET_ID_ERROR = 5;
  }

  PjmsRecordRecoveryActionRsp.Retcode retcode = 1;
  repeated PjmsRecoveryRecord recovery_record_list = 5;
}

message PjmsCondition {
  uint32 condition_id = 1;
  bool is_match = 2;
}

// CmdID: 7822
message PjmsGetConditionDataReq {
}

// CmdID: 7823
message PjmsGetConditionDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  PjmsGetConditionDataRsp.Retcode retcode = 1;
  repeated PjmsCondition condition_list = 2;
}

// CmdID: 7826
message PjmsChapterTrackStorySeriesReq {
  uint32 chapter_id = 1;
  uint32 track_series_id = 2;
}

// CmdID: 7827
message PjmsChapterTrackStorySeriesRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    CHAPTER_ERROR = 2;
  }

  PjmsChapterTrackStorySeriesRsp.Retcode retcode = 1;
  uint32 chapter_id = 2;
  uint32 cur_track_series_id = 3;
}

// CmdID: 7828
message PjmsLeaveCurWorldReq {
}

// CmdID: 7829
message PjmsLeaveCurWorldRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  PjmsLeaveCurWorldRsp.Retcode retcode = 1;
}

// CmdID: 7830
message PjmsChapterActiveEcologyTalkReq {
  uint32 chapter_id = 1;
  repeated uint32 talk_id_list = 2;
}

// CmdID: 7831
message PjmsChapterActiveEcologyTalkRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    CHAPTER_ERROR = 2;
  }

  PjmsChapterActiveEcologyTalkRsp.Retcode retcode = 1;
  uint32 chapter_id = 2;
}

// CmdID: 7834
message PjmsTrackStorySeriesReq {
  uint32 track_series_id = 1;
  uint32 category_id = 2;
}

// CmdID: 7835
message PjmsTrackStorySeriesRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    CHAPTER_ERROR = 2;
  }

  PjmsTrackStorySeriesRsp.Retcode retcode = 1;
}

// CmdID: 7836
message PjmsSkipStoryReq {
  uint32 skip_id = 1;
}

// CmdID: 7837
message PjmsSkipStoryRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  PjmsSkipStoryRsp.Retcode retcode = 1;
  uint32 skip_id = 2;
  repeated uint32 skipped_story_list = 3;
}

// CmdID: 7839
message PjmsUpdateChapterSectionNotify {
  uint32 chapter_id = 1;
  uint32 cur_section_id = 2;
  repeated PjmsChapterSection section_list = 3;
}

enum CmdTypePjms {
  CMD_TYPE_PJMS_NONE = 0;
  CMD_PJMS_ENTER_WORLD_REQ = 7700;
  CMD_PJMS_ENTER_WORLD_RSP = 7701;
  CMD_PJMS_GET_CUR_WORLD_REQ = 7702;
  CMD_PJMS_GET_CUR_WORLD_RSP = 7703;
  CMD_PJMS_GET_MAIN_DATA_REQ = 7706;
  CMD_PJMS_GET_MAIN_DATA_RSP = 7707;
  CMD_PJMS_GET_STORY_DATA_REQ = 7708;
  CMD_PJMS_GET_STORY_DATA_RSP = 7709;
  CMD_PJMS_UPDATE_STORY_PROGRESS_NOTIFY = 7714;
  CMD_PJMS_SYNC_MAP_INFO_NOTIFY = 7719;
  CMD_PJMS_UPDATE_ENTITY_NOTIFY = 7720;
  CMD_PJMS_UPDATE_STORY_PROGRESS_REQ = 7725;
  CMD_PJMS_UPDATE_STORY_PROGRESS_RSP = 7726;
  CMD_PJMS_KILL_MONSTER_REQ = 7727;
  CMD_PJMS_KILL_MONSTER_RSP = 7728;
  CMD_PJMS_CHANGE_GADGET_STATE_REQ = 7729;
  CMD_PJMS_CHANGE_GADGET_STATE_RSP = 7730;
  CMD_PJMS_ACTIVE_GROUP_REQ = 7731;
  CMD_PJMS_ACTIVE_GROUP_RSP = 7732;
  CMD_PJMS_ACTIVE_ENTITY_REQ = 7733;
  CMD_PJMS_ACTIVE_ENTITY_RSP = 7734;
  CMD_PJMS_SET_WORLD_TIME_REQ = 7735;
  CMD_PJMS_SET_WORLD_TIME_RSP = 7736;
  CMD_PJMS_COMMON_DROP_NOTIFY = 7737;
  CMD_PJMS_CHANGE_CHAPTER_REQ = 7738;
  CMD_PJMS_CHANGE_CHAPTER_RSP = 7739;
  CMD_PJMS_SET_CUR_AVATAR_REQ = 7740;
  CMD_PJMS_SET_CUR_AVATAR_RSP = 7741;
  CMD_PJMS_UPDATE_FORMATION_REQ = 7742;
  CMD_PJMS_UPDATE_FORMATION_RSP = 7743;
  CMD_PJMS_UPDATE_AVATAR_STATUS_REQ = 7744;
  CMD_PJMS_UPDATE_AVATAR_STATUS_RSP = 7745;
  CMD_PJMS_GET_AVATAR_STATUS_REQ = 7746;
  CMD_PJMS_GET_AVATAR_STATUS_RSP = 7747;
  CMD_PJMS_UPDATE_CHAPTER_NOTIFY = 7756;
  CMD_PJMS_LEVEL_UP_TALENT_REQ = 7757;
  CMD_PJMS_LEVEL_UP_TALENT_RSP = 7758;
  CMD_PJMS_SET_NAME_REQ = 7761;
  CMD_PJMS_SET_NAME_RSP = 7762;
  CMD_PJMS_SET_GENDER_REQ = 7763;
  CMD_PJMS_SET_GENDER_RSP = 7764;
  CMD_PJMS_GET_UNIT_INFO_REQ = 7765;
  CMD_PJMS_GET_UNIT_INFO_RSP = 7766;
  CMD_PJMS_LEVEL_UP_CORE_UNIT_REQ = 7767;
  CMD_PJMS_LEVEL_UP_CORE_UNIT_RSP = 7768;
  CMD_PJMS_LEVEL_UP_AUXILIARY_UNIT_REQ = 7769;
  CMD_PJMS_LEVEL_UP_AUXILIARY_UNIT_RSP = 7770;
  CMD_PJMS_UNIT_SET_CHANGE_NOTIFY = 7771;
  CMD_PJMS_SET_CUR_UNIT_SET_REQ = 7773;
  CMD_PJMS_SET_CUR_UNIT_SET_RSP = 7774;
  CMD_PJMS_CHANGE_UNIT_SET_SLOT_REQ = 7775;
  CMD_PJMS_CHANGE_UNIT_SET_SLOT_RSP = 7776;
  CMD_PJMS_UNIT_CHANGE_NOTIFY = 7777;
  CMD_PJMS_CHANGE_BGM_REQ = 7778;
  CMD_PJMS_CHANGE_BGM_RSP = 7779;
  CMD_PJMS_TAKE_CHAPTER_REWARD_REQ = 7780;
  CMD_PJMS_TAKE_CHAPTER_REWARD_RSP = 7781;
  CMD_PJMS_DISJOIN_AUXILIARY_UNIT_REQ = 7782;
  CMD_PJMS_DISJOIN_AUXILIARY_UNIT_RSP = 7783;
  CMD_PJMS_GET_RESIDENT_STAGE_DATA_REQ = 7784;
  CMD_PJMS_GET_RESIDENT_STAGE_DATA_RSP = 7785;
  CMD_PJMS_GET_EXPLORE_SCORE_REQ = 7786;
  CMD_PJMS_GET_EXPLORE_SCORE_RSP = 7787;
  CMD_PJMS_GET_HOME_DATA_REQ = 7788;
  CMD_PJMS_GET_HOME_DATA_RSP = 7789;
  CMD_PJMS_GET_ACHIEVEMENT_DATA_REQ = 7790;
  CMD_PJMS_GET_ACHIEVEMENT_DATA_RSP = 7791;
  CMD_PJMS_TAKE_ACHIEVEMENT_PLATINUM_REWARD_REQ = 7792;
  CMD_PJMS_TAKE_ACHIEVEMENT_PLATINUM_REWARD_RSP = 7793;
  CMD_PJMS_SET_AUXILIARY_UNIT_LOCK_STATUS_REQ = 7794;
  CMD_PJMS_SET_AUXILIARY_UNIT_LOCK_STATUS_RSP = 7795;
  CMD_PJMS_TAKE_CHAPTER_LEVEL_REWARD_REQ = 7796;
  CMD_PJMS_TAKE_CHAPTER_LEVEL_REWARD_RSP = 7797;
  CMD_PJMS_REVIVE_AVATAR_REQ = 7798;
  CMD_PJMS_REVIVE_AVATAR_RSP = 7799;
  CMD_PJMS_REFRESH_GROUP_REQ = 7800;
  CMD_PJMS_REFRESH_GROUP_RSP = 7801;
  CMD_PJMS_FINISH_CONSUME_MATERIAL_STORY_REQ = 7802;
  CMD_PJMS_FINISH_CONSUME_MATERIAL_STORY_RSP = 7803;
  CMD_PJMS_STORY_STATUS_NOTIFY = 7804;
  CMD_PJMS_CHANGE_NPC_STATE_REQ = 7805;
  CMD_PJMS_CHANGE_NPC_STATE_RSP = 7806;
  CMD_PJMS_ADD_SHADOW_LAKE_ENERGY_REQ = 7807;
  CMD_PJMS_ADD_SHADOW_LAKE_ENERGY_RSP = 7808;
  CMD_PJMS_SUB_SHADOW_LAKE_ENERGY_REQ = 7809;
  CMD_PJMS_SUB_SHADOW_LAKE_ENERGY_RSP = 7810;
  CMD_PJMS_SHADOWLAKE_NOTIFY = 7811;
  CMD_PJMS_GET_CHAPTER_DATA_REQ = 7812;
  CMD_PJMS_GET_CHAPTER_DATA_RSP = 7813;
  CMD_PJMS_GET_ACTIVITY_PANEL_REQ = 7814;
  CMD_PJMS_GET_ACTIVITY_PANEL_RSP = 7815;
  CMD_PJMS_RESIDENT_STAGE_GET_RANK_REQ = 7816;
  CMD_PJMS_RESIDENT_STAGE_GET_RANK_RSP = 7817;
  CMD_PJMS_GET_RECOVERY_RECORD_REQ = 7818;
  CMD_PJMS_GET_RECOVERY_RECORD_RSP = 7819;
  CMD_PJMS_RECORD_RECOVERY_ACTION_REQ = 7820;
  CMD_PJMS_RECORD_RECOVERY_ACTION_RSP = 7821;
  CMD_PJMS_GET_CONDITION_DATA_REQ = 7822;
  CMD_PJMS_GET_CONDITION_DATA_RSP = 7823;
  CMD_PJMS_CHAPTER_TRACK_STORY_SERIES_REQ = 7826;
  CMD_PJMS_CHAPTER_TRACK_STORY_SERIES_RSP = 7827;
  CMD_PJMS_LEAVE_CUR_WORLD_REQ = 7828;
  CMD_PJMS_LEAVE_CUR_WORLD_RSP = 7829;
  CMD_PJMS_CHAPTER_ACTIVE_ECOLOGY_TALK_REQ = 7830;
  CMD_PJMS_CHAPTER_ACTIVE_ECOLOGY_TALK_RSP = 7831;
  CMD_PJMS_TRACK_STORY_SERIES_REQ = 7834;
  CMD_PJMS_TRACK_STORY_SERIES_RSP = 7835;
  CMD_PJMS_SKIP_STORY_REQ = 7836;
  CMD_PJMS_SKIP_STORY_RSP = 7837;
  CMD_PJMS_UPDATE_CHAPTER_SECTION_NOTIFY = 7839;
  CMD_PJMS_DUMMY = 7899;
}

enum PjmsChapterIdEnum {
  PJMS_CHAPTER_ID_ENUM_NONE = 0;
  PJMS_CHAPTER_ID_SHADOW_LAKE = 100;
  PJMS_CHAPTER_ID_RE = 150;
  PJMS_CHAPTER_ID_KNIGHT = 200;
}

enum PjmsWorldType {
  PJMS_WORLD_TYPE_NONE = 0;
  PJMS_WORLD_TYPE_BASE = 1;
  PJMS_WORLD_TYPE_OWSTAGE_WITH_BATTLE = 2;
  PJMS_WORLD_TYPE_OWSTAGE_NO_BATTLE = 3;
  PJMS_WORLD_TYPE_DUNGEON = 4;
  PJMS_WORLD_TYPE_OWSTAGE_UAUTO = 200;
}

enum PjmsEntityType {
  PJMS_ENTITY_TYPE_NONE = 0;
  PJMS_ENTITY_TYPE_NPC = 1;
  PJMS_ENTITY_TYPE_GADGET = 2;
  PJMS_ENTITY_TYPE_MONSTER = 3;
  PJMS_ENTITY_TYPE_WALKER = 4;
}

enum PjmsEventType {
  PJMS_EVENT_TYPE_NONE = 0;
  PJMS_EVENT_TYPE_FINISH_STORY = 2;
  PJMS_EVENT_TYPE_ADD_MATERIAL = 4;
  PJMS_EVENT_TYPE_ENTER_WORLD = 5;
  PJMS_EVENT_TYPE_LEVEL_UP = 6;
  PJMS_EVENT_TYPE_KILL_MONSTER = 7;
  PJMS_EVENT_TYPE_GADGET_STATE_CHANGE = 8;
  PJMS_EVENT_TYPE_GROUP_STATE_CHANGE = 9;
  PJMS_EVENT_TYPE_SET_WORLD_TIME = 10;
  PJMS_EVENT_TYPE_STAGE_END = 11;
  PJMS_EVENT_TYPE_CHAPTER_LEVEL_UP = 12;
  PJMS_EVENT_TYPE_FINISH_MISSION = 13;
  PJMS_EVENT_TYPE_GROUP_ACTIVE_CHANGE = 14;
  PJMS_EVENT_TYPE_SHOP_BUY_GOODS = 15;
  PJMS_EVENT_TYPE_LEAVE_WORLD = 16;
}

enum PjmsGroupStateEventType {
  PJMS_GROUP_STATE_EVENT_TYPE_NONE = 0;
  PJMS_GROUP_STATE_EVENT_TYPE_KILL_MONSTER = 1;
  PJMS_GROUP_STATE_EVENT_TYPE_GADGET_STATE_CHANGE = 2;
  PJMS_GROUP_STATE_EVENT_TYPE_STORY_STATUS_CHANGE = 3;
}

enum PjmsStoryStatus {
  PJMS_STORY_STATUS_NONE = 0;
  PJMS_STORY_STATUS_DOING = 1;
  PJMS_STORY_STATUS_FINISH = 2;
  PJMS_STORY_STATUS_CLOSE = 3;
  PJMS_STORY_STATUS_WAIT_DELETE = 4;
}

enum PjmsPreStoryJudgeType {
  PJMS_PRE_STORY_JUDGE_TPYE_AND = 0;
  PJMS_PRE_STORY_JUDGE_TPYE_OR = 1;
}

enum PjmsStoryFinishType {
  PJMS_STORY_FINISH_TYPE_NONE = 0;
  PJMS_STORY_FINISH_TYPE_FINISH_STORY = 1;
  PJMS_STORY_FINISH_TYPE_FINISH_INTERACT = 2;
  PJMS_STORY_FINISH_TYPE_ADD_MATERIAL = 3;
  PJMS_STORY_FINISH_TYPE_ENTER_WORLD = 4;
  PJMS_STORY_FINISH_TYPE_CLIENT_TRIGGER = 5;
  PJMS_STORY_FINISH_TYPE_KILL_MONSTER = 6;
  PJMS_STORY_FINISH_TYPE_GADGET_STATE_CHANGE = 7;
  PJMS_STORY_FINISH_TYPE_GROUP_STATE_CHANGE = 8;
  PJMS_STORY_FINISH_TYPE_CONSUME_MATERIAL = 9;
  PJMS_STORY_FINISH_TYPE_STAGE_ID = 10;
  PJMS_STORY_FINISH_TYPE_FINISH_MISSION = 11;
  PJMS_STORY_FINISH_TYPE_SHOPPING_TIMES = 12;
  PJMS_STORY_FINISH_TYPE_LEAVE_WORLD = 13;
  PJMS_STORY_FINISH_TYPE_TAKE_MISSION_REWARD = 14;
}

enum PjmsSeriesType {
  PJMS_SERIES_TYPE_NONE = 0;
  PJMS_SERIES_TYPE_MAIN = 1;
  PJMS_SERIES_TYPE_BRANCH = 2;
  PJMS_SERIES_TYPE_QUEST = 3;
  PJMS_SERIES_TYPE_TIMED = 4;
  PJMS_SERIES_TYPE_ACTIVITY = 5;
}

enum PjmsConditionType {
  PJMS_CONDITION_TYPE_NONE = 0;
  PJMS_CONDITION_TYPE_EXPRESSION = 1;
  PJMS_CONDITION_TYPE_ALWAYS_TRUE = 2;
  PJMS_CONDITION_TYPE_ALWAYS_FALSE = 3;
  PJMS_CONDITION_TYPE_ALL_OF = 4;
  PJMS_CONDITION_TYPE_ANY_OF = 5;
  PJMS_CONDITION_TYPE_NONE_OF = 6;
  PJMS_CONDITION_TYPE_LEVEL_GE = 11;
  PJMS_CONDITION_TYPE_PASS_STAGE_AND = 12;
  PJMS_CONDITION_TYPE_PASS_STAGE_OR = 13;
  PJMS_CONDITION_TYPE_GENDER = 14;
  PJMS_CONDITION_TYPE_STORY_STATUS_MATCH = 15;
  PJMS_CONDITION_TYPE_CUR_CHAPTER_MATCH = 16;
  PJMS_CONDITION_TYPE_DATETIME_GE = 17;
  PJMS_CONDITION_TYPE_CHPATER_LEVEL_GE = 18;
  PJMS_CONDITION_TYPE_WORLD_TIME_LIMIT = 19;
  PJMS_CONDITION_TYPE_SHADOW_LAKE_ENERGY_NUM_GE = 20;
  PJMS_CONDITION_TYPE_GADGET_STATE_MATCH = 21;
  PJMS_CONDITION_TYPE_GROUP_STATE_MATCH = 22;
  PJMS_CONDITION_TYPE_GROUP_ACTIVE_MATCH = 23;
  PJMS_CONDITION_TYPE_PJMS_ACTIVITY_SUB_MODULE_OPEN = 24;
  PJMS_CONDITION_TYPE_MATERIAL_NUM_GE = 25;
  PJMS_CONDITION_TYPE_IN_WORLD_LIST = 26;
  PJMS_CONDITION_TYPE_MISSION_STATUS_MATCH = 27;
  PJMS_CONDITION_TYPE_IS_IN_STORY_MODE = 1001;
  PJMS_CONDITION_TYPE_CAN_TRIAL_AVATAR_EDIT = 1002;
  PJMS_CONDITION_TYPE_THELEMA_ACTIVITY_NPC_FINISH = 10001;
  PJMS_CONDITION_TYPE_NO_PJMS_ACTIVITY = 10002;
}

enum PjmsActionType {
  PJMS_ACTION_TYPE_NONE = 0;
  PJMS_ACTION_TYPE_SUB_MATERIAL = 1;
  PJMS_ACTION_TYPE_CLOSE_STORY = 2;
  PJMS_ACTION_TYPE_UNLOCK_FOG = 3;
  PJMS_ACTION_TYPE_SET_ENTITY_ACTIVE = 4;
  PJMS_ACTION_TYPE_SET_GROUP_ACTIVE = 5;
  PJMS_ACTION_TYPE_CHANGE_GADGET_STATE = 6;
  PJMS_ACTION_TYPE_ACTIVATE_TELEPORT = 7;
  PJMS_ACTION_TYPE_REFRESH_GROUP = 8;
  PJMS_ACTION_TYPE_ADD_SHADOW_LAKE_ENERGY_MAX_NUM = 9;
  PJMS_ACTION_TYPE_ADD_SHADOW_LAKE_ENERGY_NUM = 10;
  PJMS_ACTION_TYPE_SUB_SHADOW_LAKE_ENERGY_NUM = 11;
  PJMS_ACTION_TYPE_REFRESH_DAILY_QUEST = 12;
  PJMS_ACTION_TYPE_SET_GENDER = 13;
}

enum PjmsGenderType {
  PJMS_GENDER_TYPE_NONE = 0;
  PJMS_GENDER_TYPE_FEMALE = 1;
  PJMS_GENDER_TYPE_MALE = 2;
}

enum PjmsGroupRefreshType {
  PJMS_GROUP_REFRESH_TYPE_NONE = 0;
  PJMS_GROUP_REFRESH_TYPE_NEVER = 1;
  PJMS_GROUP_REFRESH_TYPE_ON_LOAD = 2;
  PJMS_GROUP_REFRESH_TYPE_INTERVAL_SECOND_AFTER_CREATE = 3;
  PJMS_GROUP_REFRESH_TYPE_INTERVAL_DAY_AFTER_CREATE = 4;
  PJMS_GROUP_REFRESH_TYPE_INTERVAL_SECOND_AFTER_MODIFY = 5;
}

enum PjmsChapterItemType {
  PJMS_CHAPTER_ITEM_TYPE_NONE = 0;
  PJMS_CHAPTER_ITEM_TYPE_MATERIAL = 1;
  PJMS_CHAPTER_ITEM_TYPE_AUX_UNIT_EXP = 2;
}

enum PjmsResidentStageType {
  PJMS_RESIDENT_STAGE_TYPE_NONE = 0;
  PJMS_RESIDENT_STAGE_TYPE_MATERIAL = 1;
  PJMS_RESIDENT_STAGE_TYPE_WEEKLY = 2;
  PJMS_RESIDENT_STAGE_TYPE_TOWER = 3;
}

enum DropFromType {
  DROP_FROM_TYPE_NONE = 0;
  DROP_FROM_TYPE_GADGET = 1;
  DROP_FROM_TYPE_MONSTER = 2;
  DROP_FROM_TYPE_STORY = 3;
}

enum PjmsUnitSetIdRange {
  PJMS_UNIT_SET_ID_RANGE_NONE = 0;
  PJMS_MIN_UNIT_SET_ID = 1;
  PJMS_MAX_UNIT_SET_ID = 5;
}

enum PjmsUnitSetSlotType {
  PJMS_UNIT_SET_SLOT_TYPE_NONE = 0;
  PJMS_UNIT_SET_SLOT_TYPE_CORE = 1;
  PJMS_UNIT_SET_SLOT_TYPE_AUXILIARY = 2;
}

enum PjmsTrackStorySeriesType {
  PJMS_TRACK_STORY_SERIES_TYPE_NONE = 0;
  PJMS_TRACK_STORY_SERIES_TYPE_CHAPTER = 1;
  PJMS_TRACK_STORY_SERIES_TYPE_CLIENT = 2;
}

// CmdID: 6950
message PlatformShooterGetActivityReq {
  uint32 activity_id = 1;
}

message PlatformShooterWeaponAffix {
  uint32 cur_affix_id = 1;
  uint32 wait_confirm_affix_id = 2;
}

message PlatformShooterWeapon {
  uint32 weapon_id = 1;
  uint32 level = 2;
  repeated PlatformShooterWeaponAffix affix_list = 3;
}

message PlatformShooterQAvatar {
  uint32 qavatar_id = 1;
  uint32 level = 2;
}

message PlatformShooterWeaponPool {
  uint32 pool_id = 1;
  PlatformShooterWeaponPoolStatus status = 2;
  repeated uint32 has_got_weapon_list = 3;
}

message PlatformShooterDailyStageInfo {
  uint32 stage_id = 1;
  repeated uint32 room_id_list = 2;
}

message PlatformShooterActivity {
  uint32 activity_id = 1;
  repeated PlatformShooterQAvatar qavatar_list = 2;
  repeated PlatformShooterWeapon weapon_list = 3;
  uint32 daily_challenge_has_drop_num = 4;
  repeated PlatformShooterDailyStageInfo daily_stage_info_list = 5;
  uint32 cur_daily_challenge_schedule_id = 6;
}

// CmdID: 6951
message PlatformShooterGetActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  PlatformShooterGetActivityRsp.Retcode retcode = 1;
  PlatformShooterActivity activity = 2;
}

// CmdID: 6952
message PlatformShooterQAvatarLevelUpReq {
  uint32 activity_id = 1;
  uint32 qavatar_id = 2;
  uint32 target_level = 3;
}

// CmdID: 6953
message PlatformShooterQAvatarLevelUpRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    QAVATAR_NOT_FOUND = 2;
    TARGET_LEVEL_ERROR = 3;
    MATERIAL_LACK = 4;
  }

  PlatformShooterQAvatarLevelUpRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  PlatformShooterQAvatar qavatar = 3;
}

// CmdID: 6954
message PlatformShooterWeaponPoolGetDisplayReq {
  uint32 activity_id = 1;
}

// CmdID: 6955
message PlatformShooterWeaponPoolGetDisplayRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  PlatformShooterWeaponPoolGetDisplayRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 gacha_random = 3;
  repeated PlatformShooterWeaponPool pool_list = 4;
}

// CmdID: 6956
message PlatformShooterWeaponPoolGachaReq {
  uint32 activity_id = 1;
  uint32 gacha_random = 2;
}

// CmdID: 6957
message PlatformShooterWeaponPoolGachaRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NO_POOL = 2;
    MATERIAL_LACK = 3;
    ACTION_RANDOM_ERROR = 4;
    WEAPON_ERROR = 5;
  }

  PlatformShooterWeaponPoolGachaRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 new_gacha_random = 3;
  repeated PlatformShooterWeaponPool pool_list = 4;
  uint32 pool_id = 5;
  PlatformShooterWeapon weapon = 6;
}

// CmdID: 6958
message PlatformShooterWeaponAffixRefineReq {
  uint32 activity_id = 1;
  uint32 weapon_id = 2;
  repeated uint32 affix_index_list = 3;
  PlatformShooterWeaponAffixRefineType type = 4;
  bool is_retry = 5;
}

// CmdID: 6959
message PlatformShooterWeaponAffixRefineRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    WEAPON_ERROR = 2;
    AFFIX_ERROR = 3;
    NEED_CONFIRM = 4;
    MATERIAL_LACK = 5;
    REFINE_TYPE_ERROR = 6;
  }

  PlatformShooterWeaponAffixRefineRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  PlatformShooterWeapon weapon = 3;
}

message PlatformShooterWeaponAffixConfirmInfo {
  uint32 affix_index = 1;
  PlatformShooterWeaponAffixConfirmType type = 2;
}

// CmdID: 6960
message PlatformShooterWeaponAffixConfirmReq {
  uint32 activity_id = 1;
  uint32 weapon_id = 2;
  uint32 affix_index = 3;
  PlatformShooterWeaponAffixConfirmType type = 4;
  repeated PlatformShooterWeaponAffixConfirmInfo confirm_info_list = 5;
}

// CmdID: 6961
message PlatformShooterWeaponAffixConfirmRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    WEAPON_ERROR = 2;
    NO_NEED_CONFIRM = 3;
    DUPLICATE_CONFIRM_INFO = 4;
  }

  PlatformShooterWeaponAffixConfirmRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  PlatformShooterWeapon weapon = 3;
}

// CmdID: 6962
message PlatformShooterGetRankReq {
  uint32 activity_id = 1;
  uint32 stage_id = 2;
}

// CmdID: 6963
message PlatformShooterGetRankRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NO_RANK = 2;
  }

  PlatformShooterGetRankRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 stage_id = 3;
  RankShowData rank_data = 4;
  uint32 rank_percent = 5;
  uint32 rank = 6;
}

enum CmdTypePlatformshooter {
  CMD_TYPE_PLATFORMSHOOTER_NONE = 0;
  CMD_PLATFORM_SHOOTER_GET_ACTIVITY_REQ = 6950;
  CMD_PLATFORM_SHOOTER_GET_ACTIVITY_RSP = 6951;
  CMD_PLATFORM_SHOOTER_QAVATAR_LEVEL_UP_REQ = 6952;
  CMD_PLATFORM_SHOOTER_QAVATAR_LEVEL_UP_RSP = 6953;
  CMD_PLATFORM_SHOOTER_WEAPON_POOL_GET_DISPLAY_REQ = 6954;
  CMD_PLATFORM_SHOOTER_WEAPON_POOL_GET_DISPLAY_RSP = 6955;
  CMD_PLATFORM_SHOOTER_WEAPON_POOL_GACHA_REQ = 6956;
  CMD_PLATFORM_SHOOTER_WEAPON_POOL_GACHA_RSP = 6957;
  CMD_PLATFORM_SHOOTER_WEAPON_AFFIX_REFINE_REQ = 6958;
  CMD_PLATFORM_SHOOTER_WEAPON_AFFIX_REFINE_RSP = 6959;
  CMD_PLATFORM_SHOOTER_WEAPON_AFFIX_CONFIRM_REQ = 6960;
  CMD_PLATFORM_SHOOTER_WEAPON_AFFIX_CONFIRM_RSP = 6961;
  CMD_PLATFORM_SHOOTER_GET_RANK_REQ = 6962;
  CMD_PLATFORM_SHOOTER_GET_RANK_RSP = 6963;
}

enum PlatformShooterWeaponAffixConfirmType {
  PLATFORM_SHOOTER_WEAPON_AFFIX_CONFIRM_NONE = 0;
  PLATFORM_SHOOTER_WEAPON_AFFIX_CONFIRM_CONFIRM = 1;
  PLATFORM_SHOOTER_WEAPON_AFFIX_CONFIRM_ABANDON = 2;
}

enum PlatformShooterWeaponAffixRefineType {
  PLATFORM_SHOOTER_WEAPON_AFFIX_REFINE_NONE = 0;
  PLATFORM_SHOOTER_WEAPON_AFFIX_REFINE_JUNIOR = 1;
  PLATFORM_SHOOTER_WEAPON_AFFIX_REFINE_SENIOR = 2;
  PLATFORM_SHOOTER_WEAPON_AFFIX_REFINE_TOP = 3;
}

enum PlatformShooterStageType {
  PLATFORM_SHOOTER_STAGE_INVALID = 0;
  PLATFORM_SHOOTER_STAGE_MAIN = 1;
  PLATFORM_SHOOTER_STAGE_DAILY = 2;
  PLATFORM_SHOOTER_STAGE_DAILY_CHALLENGE = 3;
  PLATFORM_SHOOTER_STAGE_TOWER = 4;
  PLATFORM_SHOOTER_STAGE_QAVATAR_CHALLENGE = 5;
}

enum PlatformShooterWeaponPoolStatus {
  PLATFORM_SHOOTER_WEAPON_POOL_NONE = 0;
  PLATFORM_SHOOTER_WEAPON_POOL_LOCKED = 1;
  PLATFORM_SHOOTER_WEAPON_POOL_DOING = 2;
  PLATFORM_SHOOTER_WEAPON_POOL_FINISHED = 3;
}

// CmdID: 6550
message PvzGetActivityReq {
  uint32 activity_id = 1;
}

message PvzQAvatar {
  uint32 qavatar_id = 1;
  uint32 level = 2;
  bool is_special_material_unlocked = 3;
}

message PvzSiteDropMaterial {
  uint32 material_id = 1;
  uint32 has_drop_num = 2;
}

message PvzSiteInfo {
  uint32 site_id = 1;
  uint32 tower_id = 2;
  PvzSiteType site_type = 4;
  repeated PvzSiteDropMaterial has_drop_material_list = 5;
}

message PvzActivity {
  uint32 activity_id = 1;
  repeated PvzQAvatar unlocked_qavatar_list = 2;
  repeated PvzSiteInfo site_info_list = 3;
  uint32 challenge_max_finish_wave = 4;
}

// CmdID: 6551
message PvzGetActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  PvzGetActivityRsp.Retcode retcode = 1;
  PvzActivity pvz_activity = 2;
}

// CmdID: 6552
message PvzBattleBeginReq {
  uint32 activity_id = 1;
  uint32 tower_id = 2;
  uint32 floor_id = 3;
  repeated uint32 qavatar_id_list = 4;
}

// CmdID: 6553
message PvzBattleBeginRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    QAVATAR_ERROR = 2;
    INVALID_TILE = 3;
    RPG_SITE_CANNOT_ENTER = 4;
    LACK_TICKET = 5;
    TILE_SITE_MISMATCH = 6;
  }

  PvzBattleBeginRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 tower_id = 3;
  uint32 floor_id = 4;
  repeated PvzQAvatar qavatar_list = 5;
  uint32 game_type = 6;
}

// CmdID: 6554
message PvzBattleEndReq {
  uint32 activity_id = 1;
  PvzBattleEndStatus end_status = 2;
  uint32 finish_wave = 3;
  uint32 tower_id = 4;
  uint32 floor_id = 5;
  uint32 cost_time = 6;
  uint32 left_hp = 7;
  uint32 used_coin_num = 8;
}

// CmdID: 6555
message PvzBattleEndRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    BATTLE_MISMATCH = 2;
    INVALID_TILE = 3;
    RPG_SITE_CANNOT_ENTER = 4;
    LACK_TICKET = 5;
    TILE_SITE_MISMATCH = 6;
    END_STATUS_INVALID = 7;
  }

  PvzBattleEndRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 tower_id = 3;
  uint32 floor_id = 4;
  PvzBattleEndStatus end_status = 5;
  uint32 finish_wave = 6;
  uint32 max_finish_wave = 7;
  RewardData reward_data = 8;
  repeated PvzQAvatar qavatar_list = 9;
  uint32 site_id = 10;
  uint32 cost_time = 11;
  uint32 left_hp = 12;
  uint32 used_coin_num = 13;
}

// CmdID: 6556
message PvzQAvatarLevelUpReq {
  uint32 activity_id = 1;
  uint32 qavatar_id = 2;
  uint32 target_level = 3;
}

// CmdID: 6557
message PvzQAvatarLevelUpRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MATERIAL_LACK = 2;
    TARGET_LEVEL_ERROR = 3;
    QAVATAR_NOT_FOUND = 4;
  }

  PvzQAvatarLevelUpRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 qavatar_id = 3;
  uint32 target_level = 4;
}

enum CmdTypePvz {
  CMD_TYPE_PVZ_NONE = 0;
  CMD_PVZ_GET_ACTIVITY_REQ = 6550;
  CMD_PVZ_GET_ACTIVITY_RSP = 6551;
  CMD_PVZ_BATTLE_BEGIN_REQ = 6552;
  CMD_PVZ_BATTLE_BEGIN_RSP = 6553;
  CMD_PVZ_BATTLE_END_REQ = 6554;
  CMD_PVZ_BATTLE_END_RSP = 6555;
  CMD_PVZ_QAVATAR_LEVEL_UP_REQ = 6556;
  CMD_PVZ_QAVATAR_LEVEL_UP_RSP = 6557;
}

enum PvzSiteType {
  PVZ_SITE_TYPE_NONE = 0;
  PVZ_SITE_NORMAL = 1;
  PVZ_SITE_DAILY = 2;
  PVZ_SITE_CHALLENGE = 3;
}

enum PvzBattleEndStatus {
  PVZ_BATTLE_END_NONE = 0;
  PVZ_BATTLE_END_SUCC = 1;
  PVZ_BATTLE_END_FAIL = 2;
  PVZ_BATTLE_END_QUIT = 3;
}

enum PvzQAvatarNextLevelConditionType {
  PVZ_QAVATAR_NEXT_LEVEL_CONDITION_NONE = 0;
  PVZ_QAVATAR_NEXT_LEVEL_CONDITION_PASS_SITE = 1;
}

enum PvzQAvatarType {
  PVZ_Q_AVATAR_TYPE_NONE = 0;
  PVZ_QAVATAR_ATTACK = 1;
  PVZ_QAVATAR_ASSIST = 2;
}

message QAvatarBattleMember {
  uint32 uid = 1;
  string region_name = 2;
  string nickname = 3;
  uint32 level = 4;
  uint32 frame_id = 5;
  uint32 custom_head_id = 6;
  uint32 division = 7;
  uint32 elo_score = 8;
  VirtualAvatar choose_virtual_avatar = 9;
  uint32 camp_id = 10;
}

// CmdID: 5550
message QAvatarBattleBeginNotify {
  uint32 tale_id = 1;
  uint32 site_id = 2;
  uint32 fightserver_ip = 3;
  uint32 fightserver_port = 4;
  uint32 chatworld_id = 5;
  uint32 scene_id = 6;
  string fightserver_ip_v4 = 7;
  string fightserver_ip_v6 = 8;
  uint32 lobby_id = 10;
  uint32 battle_id = 11;
  uint32 battle_start_time = 12;
  repeated QAvatarBattleMember member_list = 13;
}

message QAvatarBattleFightInfo {
  uint32 uid = 1;
  uint32 kill_num = 2;
  uint32 dead_num = 3;
  uint32 rank = 4;
  bool is_mvp = 5;
  bool is_win = 6;
  uint32 max_hp = 11;
  uint32 cur_hp = 12;
  uint64 reborn_time_ms_u64 = 13;
  uint32 max_sp = 14;
  uint32 cur_sp = 15;
  uint32 damage_caused = 16;
}

// CmdID: 5551
message QAvatarBattleSettleNotify {
  QAvatarBattleEndReason end_reason = 1;
  uint32 tale_id = 2;
  uint32 site_id = 3;
  uint32 lobby_id = 4;
  uint32 battle_start_time = 5;
  uint32 previous_score = 6;
  uint32 cur_score = 8;
  repeated QAvatarBattleFightInfo fight_info_list = 9;
  repeated Material get_material_list = 10;
  repeated QAvatarBattleMember member_list = 11;
}

// CmdID: 5552
message QAvatarBattleGetLobbyInfoReq {
  uint32 tale_id = 1;
  uint32 lobby_id = 3;
}

// CmdID: 5553
message QAvatarBattleGetLobbyInfoRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_EXIST = 2;
  }

  QAvatarBattleGetLobbyInfoRsp.Retcode retcode = 1;
  uint32 tale_id = 2;
  uint32 lobby_id = 3;
  uint32 lobby_status = 4;
  uint32 fightserver_ip = 5;
  uint32 fightserver_port = 6;
  uint32 battle_id = 7;
  repeated QAvatarBattleMember member_list = 8;
  string fightserver_ip_v4 = 9;
  string fightserver_ip_v6 = 10;
}

message QAvatarBattlePositionComponent {
  float x = 1;
  float y = 2;
  float rotation_x = 3;
  float rotation_y = 4;
}

message QAvatarBattleSpeedComponent {
  float speed_x = 1;
  float speed_y = 2;
}

message QAvatarBattleSkillInfo {
  uint32 skill_id = 1;
  uint32 skill_type = 2;
  uint64 btn_holdup_time_ms_u64 = 4;
  uint32 combo_num = 5;
  uint32 max_bullet_num = 6;
  uint32 cur_bullet_num = 7;
  uint32 max_charge_num = 8;
  uint32 cur_charge_num = 9;
  uint64 skill_cd_ms_u64 = 10;
}

message QAvatarBattleSkillComponent {
  repeated QAvatarBattleSkillInfo skill_info_list = 1;
}

message QAvatarBattleBuff {
  uint32 buff_id = 1;
  QAvatarBuffType buff_type = 2;
  uint64 expire_time_ms_u64 = 4;
  uint32 num = 5;
}

message QAvatarBattleBuffComponent {
  repeated QAvatarBattleBuff buff_list = 1;
}

message QAvatarBattleEvadeComponent {
  float speed_x = 1;
  float speed_y = 2;
  uint64 expire_time_ms_u64 = 3;
}

message QAvatarBattleStigmata {
  uint32 stigmata_id = 1;
}

message QAvatarBattleStigmataComponent {
  repeated QAvatarBattleStigmata stigmata_list = 1;
}

message QAvatarBattleComponentSet {
  QAvatarBattlePositionComponent position_component = 1;
  QAvatarBattleSpeedComponent speed_component = 2;
  QAvatarBattleSkillComponent skill_component = 3;
  QAvatarBattleEvadeComponent evade_component = 4;
  QAvatarBattleBuffComponent buff_component = 5;
}

message QAvatarBattleEntity {
  uint32 entity_id = 1;
  QAvatarBattleEntityType type = 2;
  uint32 entity_name_id = 3;
  uint64 entity_expire_time_ms_u64 = 4;
  QAvatarBattleComponentSet component_set = 5;
  QAvatarBattleFightInfo fight_info = 7;
  uint32 owner_id = 8;
}

message QAvatarBattleDeleteEntity {
  QAvatarBattleEntityDeleteReasonType delete_reason = 1;
  uint32 entity_id = 2;
}

// CmdID: 5600
message QAvatarBattleDataNotify {
  repeated QAvatarBattleEntity update_entity_list = 1;
  uint64 cur_time_ms_u64 = 3;
  repeated QAvatarBattleDeleteEntity delete_entity_list = 4;
  bool is_all = 5;
}

// CmdID: 5601
message QAvatarBattleEnterBattleReq {
}

// CmdID: 5602
message QAvatarBattleEnterBattleRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    BATTLE_NOT_EXIST = 2;
  }

  QAvatarBattleEnterBattleRsp.Retcode retcode = 1;
}

// CmdID: 5603
message QAvatarBattleMoveNotify {
  float speed_x = 1;
  float speed_y = 2;
  float rotation_x = 3;
  float rotation_y = 4;
}

// CmdID: 5630
message QAvatarBattleEndBattleNotify {
  QAvatarBattleEndReason end_reason = 1;
  bool is_win = 2;
  bool is_mvp = 3;
  repeated QAvatarBattleFightInfo fight_info_list = 4;
}

// CmdID: 5604
message QAvatarBattleStartSkillReq {
  uint32 skill_type = 1;
  float rotation_x = 2;
  float rotation_y = 3;
}

// CmdID: 5605
message QAvatarBattleStartSkillRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    SKILL_CD = 2;
    BULLET_LACK = 3;
    RELOAD_TO_MAX = 4;
    CHARGE_LACK = 5;
    SP_LACK = 6;
  }

  QAvatarBattleStartSkillRsp.Retcode retcode = 1;
  uint32 skill_type = 2;
  uint32 skill_id = 3;
}

// CmdID: 5606
message QAvatarBattleStartSkillNotify {
  uint32 src_entity_id = 1;
  uint32 skill_type = 2;
  uint32 skill_id = 3;
}

// CmdID: 5607
message QAvatarBattleEndSkillReq {
  uint32 skill_type = 1;
  float rotation_x = 2;
  float rotation_y = 3;
  float dst_position_x = 4;
  float dst_position_y = 5;
}

// CmdID: 5608
message QAvatarBattleEndSkillRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  QAvatarBattleEndSkillRsp.Retcode retcode = 1;
  uint32 skill_type = 2;
  uint32 skill_id = 3;
}

// CmdID: 5609
message QAvatarBattleEndSkillNotify {
  uint32 src_entity_id = 1;
  uint32 skill_type = 2;
  uint32 skill_id = 3;
}

// CmdID: 5610
message QAvatarBattleSkillTriggerNotify {
  uint32 trigger_entity_id = 1;
  QAvatarBattleEntity trigger_entity = 2;
  QAvatarBattleSkillInfo skill_info = 3;
}

// CmdID: 5611
message QAvatarBattleComponentOpNotify {
  enum ComponentOpType {
    COMPONENT_OP_NONE = 0;
    COMPONENT_OP_ADD = 1;
    COMPONENT_OP_DEL = 2;
  }

  uint32 trigger_entity_id = 1;
  uint32 component_type = 2;
  QAvatarBattleComponentOpNotify.ComponentOpType op_type = 3;
}

// CmdID: 5612
message QAvatarBattleDiscardStigmataReq {
  uint32 stigmata_id = 1;
}

// CmdID: 5613
message QAvatarBattleDiscardStigmataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  QAvatarBattleDiscardStigmataRsp.Retcode retcode = 1;
  uint32 stigmata_id = 2;
}

// CmdID: 5614
message QAvatarBattleGetDataNotify {
}

// CmdID: 5621
message QAvatarBattleKillNotify {
  uint32 killer_uid = 1;
  uint32 killed_uid = 2;
  uint32 killer_streak_num = 3;
  uint32 battle_total_kill_num = 4;
}

// CmdID: 5622
message QAvatarBattleRefreshGadgetForecastNotify {
  uint32 refresh_id = 1;
  uint64 refresh_time_ms_u64 = 2;
  repeated uint32 spawn_point_id_list = 3;
}

message QAvatarBattleRefreshGadget {
  uint32 gadget_id = 1;
  uint32 spawn_point_id = 2;
}

// CmdID: 5623
message QAvatarBattleRefreshGadgetGenerateNotify {
  uint32 refresh_id = 1;
  repeated QAvatarBattleRefreshGadget refresh_gadget_list = 2;
}

enum CmdTypeQavatarbattle {
  CMD_TYPE_QAVATARBATTLE_NONE = 0;
  CMD_QAVATAR_BATTLE_BEGIN_NOTIFY = 5550;
  CMD_QAVATAR_BATTLE_SETTLE_NOTIFY = 5551;
  CMD_QAVATAR_BATTLE_GET_LOBBY_INFO_REQ = 5552;
  CMD_QAVATAR_BATTLE_GET_LOBBY_INFO_RSP = 5553;
  CMD_QAVATAR_BATTLE_DATA_NOTIFY = 5600;
  CMD_QAVATAR_BATTLE_ENTER_BATTLE_REQ = 5601;
  CMD_QAVATAR_BATTLE_ENTER_BATTLE_RSP = 5602;
  CMD_QAVATAR_BATTLE_MOVE_NOTIFY = 5603;
  CMD_QAVATAR_BATTLE_START_SKILL_REQ = 5604;
  CMD_QAVATAR_BATTLE_START_SKILL_RSP = 5605;
  CMD_QAVATAR_BATTLE_START_SKILL_NOTIFY = 5606;
  CMD_QAVATAR_BATTLE_END_SKILL_REQ = 5607;
  CMD_QAVATAR_BATTLE_END_SKILL_RSP = 5608;
  CMD_QAVATAR_BATTLE_END_SKILL_NOTIFY = 5609;
  CMD_QAVATAR_BATTLE_SKILL_TRIGGER_NOTIFY = 5610;
  CMD_QAVATAR_BATTLE_COMPONENT_OP_NOTIFY = 5611;
  CMD_QAVATAR_BATTLE_DISCARD_STIGMATA_REQ = 5612;
  CMD_QAVATAR_BATTLE_DISCARD_STIGMATA_RSP = 5613;
  CMD_QAVATAR_BATTLE_GET_DATA_NOTIFY = 5614;
  CMD_QAVATAR_BATTLE_KILL_NOTIFY = 5621;
  CMD_QAVATAR_BATTLE_REFRESH_GADGET_FORECAST_NOTIFY = 5622;
  CMD_QAVATAR_BATTLE_REFRESH_GADGET_GENERATE_NOTIFY = 5623;
  CMD_QAVATAR_BATTLE_END_BATTLE_NOTIFY = 5630;
  CMD_QAVATAR_BATTLE_DUMMY = 5649;
}

enum QAvatarBattleComponentType {
  QAVATAR_BATTLE_COMPONENT_TYPE_NONE = 0;
  QAVATAR_BATTLE_COMPONENT_TYPE_POSITION = 1;
  QAVATAR_BATTLE_COMPONENT_TYPE_SPEED = 2;
  QAVATAR_BATTLE_COMPONENT_TYPE_RIGID_BODY = 3;
  QAVATAR_BATTLE_COMPONENT_TYPE_SKILL = 4;
  QAVATAR_BATTLE_COMPONENT_TYPE_BUFF = 5;
  QAVATAR_BATTLE_COMPONENT_TYPE_EVADE = 6;
  QAVATAR_BATTLE_COMPONENT_TYPE_STIGMATA = 7;
  QAVATAR_BATTLE_COMPONENT_TYPE_CONTACT = 8;
  QAVATAR_BATTLE_COMPONENT_TYPE_TICK = 9;
}

enum QAvatarBattleEntityType {
  QAVATAR_BATTLE_ENTITY_TYPE_NONE = 0;
  QAVATAR_BATTLE_ENTITY_TYPE_PLAYER = 1;
  QAVATAR_BATTLE_ENTITY_TYPE_BULLET = 2;
  QAVATAR_BATTLE_ENTITY_TYPE_GADGET = 3;
  QAVATAR_BATTLE_ENTITY_TYPE_SCHEDULED_TASK = 4;
}

enum QAvatarBattleCollidePropertyType {
  QAVATAR_BATTLE_COLLIDE_PROPERTY_TYPE_WALL = 0;
  QAVATAR_BATTLE_COLLIDE_PROPERTY_TYPE_AVATAR_SENSOR = 1;
  QAVATAR_BATTLE_COLLIDE_PROPERTY_TYPE_BULLET = 2;
  QAVATAR_BATTLE_COLLIDE_PROPERTY_TYPE_AVATAR = 3;
}

enum QAvatarBattleGadgetType {
  Q_AVATAR_BATTLE_GADGET_TYPE_NONE = 0;
  QAVATAR_BATTLE_GADGET_TYPE_BREAKABLE_BOX = 1;
  QAVATAR_BATTLE_GADGET_TYPE_DROP_ITEM = 2;
  QAVATAR_BATTLE_GADGET_TYPE_DAMAGE_AREA = 3;
  QAVATAR_BATTLE_GADGET_TYPE_DELAYED_BOMB = 4;
  QAVATAR_BATTLE_GADGET_TYPE_UNSTABLE_DELAYED_BOMB = 5;
  QAVATAR_BATTLE_GADGET_TYPE_BREAKABLE_DELAYED_BOMB = 6;
}

enum QAvatarBattleTickComponentEventType {
  Q_AVATAR_BATTLE_TICK_COMPONENT_EVENT_TYPE_NONE = 0;
  QAVATAR_BATTLE_TICK_EVENT_TYPE_ENABLE = 1;
  QAVATAR_BATTLE_TICK_EVENT_TYPE_INTERVAL = 2;
}

enum QAvatarBattleDropItemType {
  Q_AVATAR_BATTLE_DROP_ITEM_TYPE_NONE = 0;
  QAVATAR_BATTLE_DROP_ITEM_TYPE_BUFF = 1;
  QAVATAR_BATTLE_DROP_ITEM_TYPE_STIGMATA = 2;
  QAVATAR_BATTLE_DROP_ITEM_TYPE_INSTANT_HEAL_HP = 3;
}

enum QAvatarBattleGadgetEffectCampType {
  QAVATAR_BATTLE_GADGET_EFFECT_CAMP_TYPE_ALL = 0;
  QAVATAR_BATTLE_GADGET_EFFECT_CAMP_TYPE_ALLIES = 1;
  QAVATAR_BATTLE_GADGET_EFFECT_CAMP_TYPE_ENEMIES = 2;
}

enum QAvatarLobbyStatus {
  QAVATAR_LOBBY_STATUS_INVALID = 0;
  QAVATAR_LOBBY_STATUS_INIT = 1;
  QAVATAR_LOBBY_STATUS_PREPARE = 2;
  QAVATAR_LOBBY_STATUS_FIGHT = 3;
  QAVATAR_LOBBY_STATUS_SETTLE = 4;
  QAVATAR_LOBBY_STATUS_DELETE = 5;
}

enum QAvatarBattleEntityDeleteReasonType {
  QAVATAR_BATTLE_ENTITY_DELETE_REASON_NONE = 0;
  QAVATAR_BATTLE_ENTITY_DELETE_REASON_EXPIRE = 1;
  QAVATAR_BATTLE_ENTITY_DELETE_REASON_HIT = 2;
  QAVATAR_BATTLE_ENTITY_DELETE_REASON_PICK_UP = 3;
}

enum QAvatarBattleEndReason {
  QAVATAR_BATTLE_END_REASON_NONE = 0;
  QAVATAR_BATTLE_END_REASON_FAIL = 1;
  QAVATAR_BATTLE_END_REASON_TIMEOUT = 2;
  QAVATAR_BATTLE_END_REASON_TIMEOUT_INVALID = 3;
  QAVATAR_BATTLE_END_REASON_KILL_NUM = 4;
  QAVATAR_BATTLE_END_REASON_GM = 5;
}

enum QAvatarSkillType {
  QAVATAR_SKILL_NONE = 0;
  QAVATAR_SKILL_ATK = 1;
  QAVATAR_SKILL_SKL01 = 2;
  QAVATAR_SKILL_SKL02 = 3;
}

enum QAvatarSkillTriggerType {
  QAVATAR_SKILL_TRIGGER_NONE = 0;
  QAVATAR_SKILL_TRIGGER_DOWN = 1;
  QAVATAR_SKILL_TRIGGER_UP = 2;
  QAVATAR_SKILL_TRIGGER_HOLDUP = 3;
  QAVATAR_SKILL_TRIGGER_HOLDLOOP = 4;
}

enum QAvatarChangePropType {
  QAVATAR_CHANGE_PROP_NONE = 0;
  QAVATAR_CHANGE_PROP_HP = 1;
  QAVATAR_CHANGE_PROP_SP = 2;
}

enum QAvatarActionType {
  QAVATAR_ACTION_NONE = 0;
  QAVATAR_ACTION_ADD_BUFF = 1;
  QAVATAR_ACTION_REMOVE_BUFF = 2;
  QAVATAR_ACTION_EVADE = 3;
  QAVATAR_ACTION_SHOOT_BULLET = 4;
  QAVATAR_ACTION_MELEE_ATK = 5;
  QAVATAR_ACTION_COMBO_ATK = 6;
  QAVATAR_ACTION_CREATE_GADGET = 7;
  QAVATAR_ACTION_MUTE_SKILL = 8;
  QAVATAR_ACTION_BREAK_SKILL = 9;
  QAVATAR_ACTION_CHANGE_PROP = 11;
  QAVATAR_ACTION_HOLDUP_ACTION = 13;
  QAVATAR_ACTION_SET_ANIM_PARA = 21;
  QAVATAR_ACTION_APPLY_EFFECT = 22;
  QAVATAR_ACTION_SET_CAMERA_PARA = 23;
  QAVATAR_ACTION_LOCK_AIM_ROTATION = 24;
  QAVATAR_ACTION_SIM_SKILL_BUTTON_OP = 25;
}

enum QAvatarBuffType {
  QAVATAR_BUFF_NONE = 0;
  QAVATAR_BUFF_MAXHP = 1;
  QAVATAR_BUFF_ATTACK = 2;
  QAVATAR_BUFF_MOVESPEED = 3;
  QAVATAR_BUFF_HEALHP = 4;
  QAVATAR_BUFF_CHANGESKILL = 5;
  QAVATAR_BUFF_HEALSP = 6;
  QAVATAR_BUFF_ADDEDDAMAGERATIO = 7;
  QAVATAR_BUFF_DAMAGETAKENRATIO = 8;
  QAVATAR_BUFF_CHANGESKILLCD = 9;
  QAVATAR_BUFF_CRITICALRATE = 10;
  QAVATAR_BUFF_CRITICALDAMAGERATIO = 11;
  QAVATAR_BUFF_CLIENT_ONLY = 21;
}

enum QAvatarBuffEffectType {
  QAVATAR_BUFF_EFFECT_NONE = 0;
  QAVATAR_BUFF_EFFECT_HP_GREATER = 1;
  QAVATAR_BUFF_EFFECT_HP_LESS = 2;
  QAVATAR_BUFF_EFFECT_OUT_OF_BATTLE = 3;
}

enum QAvatarStigmataSrcType {
  QAVATAR_STIGMATA_SRC_NONE = 0;
  QAVATAR_STIGMATA_SRC_DEFAULT = 1;
  QAVATAR_STIGMATA_SRC_DROP = 2;
}

enum QAvatarStigmataEffectType {
  QAVATAR_STIGMATA_EFFECT_NONE = 0;
  QAVATAR_STIGMATA_EFFECT_DIRECT = 1;
  QAVATAR_STIGMATA_EFFECT_SKILL_TRIGGER = 2;
  QAVATAR_STIGMATA_EFFECT_ROLE = 3;
  QAVATAR_STIGMATA_EFFECT_AVATAR_ID = 4;
  QAVATAR_STIGMATA_EFFECT_ATTACK_ON = 5;
  QAVATAR_STIGMATA_EFFECT_DEL_HP = 8;
}

enum QAvatarShapeType {
  QAVATAR_SHAPE_NONE = 0;
  QAVATAR_SHAPE_AABB = 1;
  QAVATAR_SHAPE_CIRCLE = 2;
  QAVATAR_SHAPE_OAB = 3;
}

message QCandyBattleVector3 {
  int32 x = 1;
  int32 y = 2;
  int32 z = 3;
}

message QCandyBattleComponentPosition {
  QCandyBattleVector3 postion = 1;
  QCandyBattleVector3 forward = 2;
}

message QCandyBattleComponentSet {
  QCandyBattleComponentPosition position_component = 1;
}

message QCandyBattleMember {
  uint32 uid = 1;
  string nickname = 2;
  uint32 rank_score = 3;
  uint32 team_id = 4;
  uint32 avatar_id = 5;
  uint32 entity_id = 6;
  int32 hidden_score = 7;
  uint32 effect_id = 8;
}

message QCandyBattleMemberBrief {
  uint32 uid = 1;
  uint32 entity_id = 2;
}

message QCandyBattlePropData {
  uint32 entity_id = 1;
  uint32 uuid = 2;
}

message QCandyBattleSettleInfo {
  uint32 rank = 1;
  uint32 progress = 2;
  uint32 cost_time = 3;
  uint32 life_times = 4;
  uint32 score = 5;
  uint32 map_id = 6;
  bool is_first_pass = 7;
  uint32 effect_times = 9;
  uint32 survive_rounds = 10;
  uint32 item_type = 11;
}

message QCandyBattleMemberSettleInfo {
  uint32 uid = 1;
  string nickname = 2;
  uint32 avatar_id = 3;
  uint32 cur_rank_score = 4;
  bool is_abandoned = 5;
  QCandyBattleSettleInfo settle_info = 6;
}

message QCandyBattleEntity {
  uint32 entity_id = 1;
  QCandyBattleEntityType type = 2;
  QCandyBattleComponentSet component_set = 3;
  uint32 prop_id = 4;
  uint32 owner_entity_id = 5;
  uint32 state = 6;
}

message QCandyBattleInfo {
  uint32 battle_id = 1;
  uint32 remain_life_times = 2;
  uint32 score = 3;
  uint32 uid = 4;
  uint32 total_score = 5;
}

message PlayerSkill {
  uint32 entity_id = 1;
  uint32 skill_id = 2;
}

// CmdID: 6601
message QCandyBattleGetActivityReq {
  uint32 activity_id = 1;
}

// CmdID: 6602
message QCandyBattleGetActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  QCandyBattleGetActivityRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 today_currency_got_num = 3;
  uint32 rank_score = 4;
  uint32 max_rank_score = 5;
  uint32 last_avatar_id = 6;
  repeated uint32 unlocked_avatar_list = 7;
  repeated QCandyBattleSettleInfo settle_record_list = 8;
  uint32 cur_day_fight_num = 9;
  uint32 currency_limit = 10;
  uint32 last_enter_effect_id = 11;
  repeated uint32 unlocked_enter_effect_list = 12;
}

// CmdID: 6603
message QCandyBattleBeginNotify {
  uint32 lobby_id = 1;
  uint32 battle_id = 2;
  uint32 map_id = 3;
  uint32 fightserver_ip = 4;
  uint32 fightserver_port = 5;
  uint32 activity_id = 6;
  QCandyBattleSettleInfo best_record = 7;
  string fightserver_ip_v4 = 8;
  string fightserver_ip_v6 = 9;
}

// CmdID: 6604
message QCandyBattleChooseAvatarReq {
  uint32 activity_id = 1;
  uint32 old_avatar_id = 2;
  uint32 new_avatar_id = 3;
}

// CmdID: 6605
message QCandyBattleChooseAvatarRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    OLD_AVATAR_MISMATCH = 2;
    NEW_AVATAR_LOCKED = 3;
    IN_MATCH_STATUS = 4;
    IN_READY_STATUS = 5;
  }

  QCandyBattleChooseAvatarRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 old_avatar_id = 3;
  uint32 new_avatar_id = 4;
}

// CmdID: 6606
message QCandyBattleUnlockAvatarReq {
  uint32 activity_id = 1;
  uint32 avatar_id = 2;
}

// CmdID: 6607
message QCandyBattleUnlockAvatarRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MATERIAL_LACK = 2;
    RANK_SCORE_LACK = 3;
  }

  QCandyBattleUnlockAvatarRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 avatar_id = 3;
}

// CmdID: 6608
message QCandyBattleSettleBattleNotify {
  uint32 activity_id = 1;
  uint32 lobby_id = 2;
  uint32 map_id = 3;
  repeated QCandyBattleMemberSettleInfo settle_info_list = 4;
  uint32 battle_id = 5;
  uint32 fightserver_ip = 6;
  uint32 settle_time = 7;
  string fightserver_ip_v4 = 8;
  string fightserver_ip_v6 = 9;
}

// CmdID: 6570
message QCandyBattleEnterBattleReq {
}

// CmdID: 6571
message QCandyBattleEnterBattleRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    BATTLE_NOT_EXIST = 2;
  }

  QCandyBattleEnterBattleRsp.Retcode retcode = 1;
  QCandyBattleType battle_type = 2;
  repeated QCandyBattleMember member_list = 3;
  repeated QCandyBattlePropData prop_data_list = 5;
  repeated QCandyBattleMemoryRoundData memory_round_data_list = 6;
  repeated QCandyBattleCooperationScoreRoundData cs_round_data_list = 7;
  uint32 random_seed = 8;
  uint32 target_total_score = 9;
  QCandyBattleExtendRuleData extend_rule_data = 10;
}

// CmdID: 6572
message QCandyBattleDataNotify {
  uint64 cur_time_ms_u64 = 1;
  repeated QCandyBattleEntity update_entity_list = 2;
  repeated QCandyBattleEntity delete_entity_list = 3;
  repeated QCandyBattleInfo battle_info_list = 4;
}

// CmdID: 6573
message QCandyBattleEndNotify {
  uint32 battle_id = 1;
}

// CmdID: 6574
message QCandyBattleMoveNotify {
  QCandyBattleVector3 pos = 1;
  QCandyBattleVector3 forward = 2;
}

// CmdID: 6580
message QCandyBattleTriggerEntityReq {
  uint32 entity_id = 1;
  uint32 cur_state = 2;
}

// CmdID: 6581
message QCandyBattleTriggerEntityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ENTITY_NOT_EXIST = 2;
    STATE_ERROR = 3;
  }

  QCandyBattleTriggerEntityRsp.Retcode retcode = 1;
  uint32 entity_id = 2;
  uint32 cur_state = 3;
}

// CmdID: 6582
message QCandyBattleAvatarLifeTimesChangeNotify {
  uint32 life_times = 1;
}

// CmdID: 6583
message QCandyBattleArriveReq {
}

// CmdID: 6584
message QCandyBattleArriveRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    SETTLE_FAILED = 2;
  }

  QCandyBattleArriveRsp.Retcode retcode = 1;
}

// CmdID: 6585
message QCandyBattleUseSkillReq {
  uint32 skill_id = 1;
}

// CmdID: 6586
message QCandyBattleUseSkillRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    SKILL_INVALID = 2;
    SKILL_IN_CD = 3;
    SKILL_ALL_USED = 4;
  }

  QCandyBattleUseSkillRsp.Retcode retcode = 1;
  uint32 skill_id = 2;
  uint32 remain_times = 3;
}

// CmdID: 6587
message QCandyBattleUseSkillNotify {
  PlayerSkill player_use_skill = 1;
}

// CmdID: 6588
message QCandyBattleAvatarStateClientNotify {
  uint32 state = 1;
  bool is_move = 2;
  uint32 sub_state = 3;
}

// CmdID: 6589
message QCandyBattleAvatarStateServerNotify {
  uint32 entity_id = 1;
  uint32 state = 2;
  bool is_move = 3;
  uint32 sub_state = 4;
}

// CmdID: 6590
message QCandyBattleSkillEndNotify {
  PlayerSkill player_skill_end = 1;
}

// CmdID: 6591
message QCandyBattleFinishBattleNotify {
  uint32 uid = 1;
  bool is_over = 3;
  QCandyBattleSettleInfo settle_info = 4;
}

// CmdID: 6592
message QCandyBattleLeaveBattleReq {
}

// CmdID: 6593
message QCandyBattleLeaveBattleRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  QCandyBattleLeaveBattleRsp.Retcode retcode = 1;
}

// CmdID: 6594
message QCandyBattleLeaveBattleNotify {
  uint32 uid = 1;
}

// CmdID: 6595
message QCandyBattleStartTimeLineNotify {
  uint32 battle_begin_time = 1;
  uint32 battle_end_time = 2;
}

// CmdID: 6596
message QCandyBattleSkillUseTimesChangeNotify {
  uint32 skill_id = 1;
  uint32 remain_times = 2;
}

// CmdID: 6597
message QCandyBattleSendEmojiReq {
  uint32 emoji_id = 1;
}

// CmdID: 6598
message QCandyBattleSendEmojiRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    EMOJI_INVALID = 2;
    EMOJI_IN_CD = 3;
  }

  QCandyBattleSendEmojiRsp.Retcode retcode = 1;
  uint32 emoji_id = 2;
}

// CmdID: 6599
message QCandyBattleSendEmojiNotify {
  uint32 emoji_id = 1;
  uint32 uid = 2;
  uint32 entity_id = 3;
}

// CmdID: 6600
message QCandyBattleSyncAbilityNotify {
  uint32 ability_id = 1;
  uint32 entity_id = 2;
  uint32 owner_entity_id = 3;
  uint32 param = 4;
}

message QCandyBattleMemoryRoundData {
  uint32 correct_picture_id = 1;
  repeated uint32 picture_id_list = 2;
  repeated QCandyBattleMemoryData memory_data_list = 3;
}

message QCandyBattleMemoryData {
  repeated uint32 picture_show_list = 1;
}

message QCandyBattleCooperationScoreRoundData {
  repeated uint32 random_list = 1;
}

// CmdID: 6622
message QCandyBattleMemoryRoundEndReq {
  uint32 life_times = 1;
  uint32 cur_round = 2;
}

// CmdID: 6623
message QCandyBattleMemoryRoundEndRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    INVALID = 2;
  }

  QCandyBattleMemoryRoundEndRsp.Retcode retcode = 1;
  uint32 life_times = 2;
  uint32 cur_round = 3;
}

message QCandyBattleRandomRefreshData {
  repeated uint32 random_list = 1;
}

message QCandyBattleExtendRuleData {
  repeated QCandyBattleRandomRefreshData random_refresh_data_list = 1;
}

message QCandyBattleActionInfo {
  uint32 id = 1;
  uint32 action_id = 2;
  uint64 trigger_time_ms = 3;
}

// CmdID: 6624
message QCandyBattleSyncActionNotify {
  repeated QCandyBattleActionInfo action_info_list = 1;
}

// CmdID: 6625
message QCandyBattleActionAckReq {
  repeated uint32 id_list = 1;
}

// CmdID: 6626
message QCandyBattleActionAckRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ACTION_NOT_EXIST = 2;
  }

  QCandyBattleActionAckRsp.Retcode retcode = 1;
}

enum CmdTypeQcandybattle {
  CMD_TYPE_QCANDYBATTLE_NONE = 0;
  CMD_QCANDY_BATTLE_ENTER_BATTLE_REQ = 6570;
  CMD_QCANDY_BATTLE_ENTER_BATTLE_RSP = 6571;
  CMD_QCANDY_BATTLE_DATA_NOTIFY = 6572;
  CMD_QCANDY_BATTLE_END_NOTIFY = 6573;
  CMD_QCANDY_BATTLE_MOVE_NOTIFY = 6574;
  CMD_QCANDY_BATTLE_TRIGGER_ENTITY_REQ = 6580;
  CMD_QCANDY_BATTLE_TRIGGER_ENTITY_RSP = 6581;
  CMD_QCANDY_BATTLE_LIFE_TIMES_CHANGE_NOTIFY = 6582;
  CMD_QCANDY_BATTLE_ARRIVE_REQ = 6583;
  CMD_QCANDY_BATTLE_ARRIVE_RSP = 6584;
  CMD_QCANDY_BATTLE_USE_SKILL_REQ = 6585;
  CMD_QCANDY_BATTLE_USE_SKILL_RSP = 6586;
  CMD_QCANDY_BATTLE_PLAYER_USE_SKILL_NOTIFY = 6587;
  CMD_QCANDY_BATTLE_AVATAR_STATE_CLIENT_NOTIFY = 6588;
  CMD_QCANDY_BATTLE_AVATAR_STATE_SERVER_NOTIFY = 6589;
  CMD_QCANDY_BATTLE_SKILL_EFFECT_NOTIFY = 6590;
  CMD_QCANDY_BATTLE_FINISH_BATTLE_NOTIFY = 6591;
  CMD_QCANDY_BATTLE_LEAVE_BATTLE_REQ = 6592;
  CMD_QCANDY_BATTLE_LEAVE_BATTLE_RSP = 6593;
  CMD_QCANDY_BATTLE_LEAVE_BATTLE_NOTIFY = 6594;
  CMD_QCANDY_BATTLE_START_TIMELINE_NOTIFY = 6595;
  CMD_QCANDY_BATTLE_SKILL_USE_TIMES_CHANGE_NOTIFY = 6596;
  CMD_QCANDY_BATTLE_SEND_EMOJI_REQ = 6597;
  CMD_QCANDY_BATTLE_SEND_EMOJI_RSP = 6598;
  CMD_QCANDY_BATTLE_SEND_EMOJI_NOTIFY = 6599;
  CMD_QCANDY_BATTLE_SYNC_ABILITY_NOTIFY = 6600;
  CMD_QCANDY_BATTLE_GET_ACTIVITY_REQ = 6601;
  CMD_QCANDY_BATTLE_GET_ACTIVITY_RSP = 6602;
  CMD_QCANDY_BATTLE_BEGIN_NOTIFY = 6603;
  CMD_QCANDY_BATTLE_CHOOSE_AVATAR_REQ = 6604;
  CMD_QCANDY_BATTLE_CHOOSE_AVATAR_RSP = 6605;
  CMD_QCANDY_BATTLE_UNLOCK_AVATAR_REQ = 6606;
  CMD_QCANDY_BATTLE_UNLOCK_AVATAR_RSP = 6607;
  CMD_QCANDY_BATTLE_SETTLE_BATTLE_NOTIFY = 6608;
  CMD_QCANDY_BATTLE_MEMORY_ROUND_END_REQ = 6622;
  CMD_QCANDY_BATTLE_MEMORY_ROUND_END_RSP = 6623;
  CMD_QCANDY_BATTLE_SYNC_ACTION_NOTIFY = 6624;
  CMD_QCANDY_BATTLE_ACTION_ACK_REQ = 6625;
  CMD_QCANDY_BATTLE_ACTION_ACK_RSP = 6626;
  CMD_QCANDY_BATTLE_DUMMY = 6649;
}

enum QCandyActivityType {
  QCANDY_ACTIVITY_NONE = 0;
  QCANDY_ACTIVITY_NORMAL = 1;
  QCANDY_ACTIVITY_CHATLOBBY = 2;
}

enum QCandyBattleType {
  QCANDY_BATTLE_TYPE_NONE = 0;
  QCANDY_BATTLE_TYPE_RACING = 1;
  QCANDY_BATTLE_TYPE_SURVIVE = 2;
  QCANDY_BATTLE_TYPE_SCORE = 3;
  QCANDY_BATTLE_TYPE_COOPERATION_SCORE = 4;
  QCANDY_BATTLE_TYPE_MEMORY_SURVIVE = 5;
}

enum QCandyBattleComponentType {
  QCANDY_BATTLE_COMPONENT_TYPE_NONE = 0;
  QCANDY_BATTLE_COMPONENT_TYPE_POSITION = 1;
}

enum QCandyBattleTriggerEventType {
  Q_CANDY_BATTLE_TRIGGER_EVENT_TYPE_NONE = 0;
  QCANDY_BATTLE_TRIGGER_EVENT_TYPE_ADD_SCORE = 1;
  QCANDY_BATTLE_TRIGGER_EVENT_TYPE_SUB_SKILL_USE_TIMES = 2;
}

enum QCandyBattleDelayActionType {
  QCANDY_BATTLE_DELAY_ACTION_TYPE_NONE = 0;
  QCANDY_BATTLE_DELAY_ACTION_TYPE_STATE_RESET = 1;
  QCANDY_BATTLE_DELAY_ACTION_TYPE_SKILL_END = 2;
}

enum QCandyBattleEntityType {
  QCANDY_BATTLE_ENTITY_TYPE_NONE = 0;
  QCANDY_BATTLE_ENTITY_TYPE_PLAYER = 1;
  QCANDY_BATTLE_ENTITY_TYPE_PROP = 2;
}

enum QCandyBattlePropState {
  QCANDY_BATTLE_PROP_CANNOT_TRIGGER = 0;
  QCANDY_BATTLE_PROP_CAN_TRIGGER = 1;
}

enum QCandyBattlePropType {
  QCANDY_BATTLE_PROP_TYPE_NONE = 0;
  QCANDY_BATTLE_PROP_TYPE_HAS_CD = 1;
  QCANDY_BATTLE_PROP_TYPE_AUTO_RECOVER = 2;
}

enum QCandyLobbyStatus {
  QCANDY_LOBBY_STATUS_INVALID = 0;
  QCANDY_LOBBY_STATUS_INIT = 1;
  QCANDY_LOBBY_STATUS_FIGHT = 2;
  QCANDY_LOBBY_STATUS_SETTLE = 3;
  QCANDY_LOBBY_STATUS_DELETE = 4;
}

enum QCandyBattleMemoryPictureType {
  QCANDY_BATTLE_MEMORY_PICTURE_TYPE_NONE = 0;
  QCANDY_BATTLE_MEMORY_PICTURE_TYPE_SPRING = 1;
  QCANDY_BATTLE_MEMORY_PICTURE_TYPE_FRUIT = 2;
  QCANDY_BATTLE_MEMORY_PICTURE_TYPE_HOMU = 3;
}

enum QCandyBattleExtendRuleType {
  Q_CANDY_BATTLE_EXTEND_RULE_TYPE_NONE = 0;
  QCANDY_BATTLE_EXTEND_RULE_TYPE_RANDOM_REFRESH = 1;
}

enum QCandyBattleConditionType {
  Q_CANDY_BATTLE_CONDITION_TYPE_NONE = 0;
  QCANDY_BATTLE_CONDITION_TYPE_PERCENT_TOTAL_SCORE = 1;
  QCANDY_BATTLE_CONDITION_TYPE_ELAPSED_TIME_SECONDS = 2;
}

message RaidReplaceScoreRecord {
  uint32 stage_id = 1;
  uint32 score = 2;
}

message RaidReplaceActivity {
  uint32 activity_id = 1;
  repeated uint32 opened_stage_list = 2;
  repeated uint32 passed_stage_list = 3;
  uint32 cur_reward_line_score = 4;
  uint32 last_take_reward_score = 5;
  uint32 reward_line_id = 6;
  bool is_special_reward_take_times_added = 7;
}

// CmdID: 8100
message RaidReplaceGetDataReq {
}

// CmdID: 8101
message RaidReplaceGetDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    FEATURE_CLOSED = 2;
  }

  RaidReplaceGetDataRsp.Retcode retcode = 1;
  uint32 schedule_id = 2;
  repeated RaidReplaceActivity activity_list = 3;
  repeated RaidReplaceScoreRecord score_record_list = 4;
  uint32 available_special_reward_take_times = 5;
}

// CmdID: 8102
message RaidReplaceTakeRewardLineRewardReq {
  uint32 activity_id = 1;
}

// CmdID: 8103
message RaidReplaceTakeRewardLineRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    FEATURE_CLOSED = 2;
    ACTIVITY_NOT_OPEN = 3;
  }

  RaidReplaceTakeRewardLineRewardRsp.Retcode retcode = 1;
  RewardData reward_data = 2;
}

// CmdID: 8104
message RaidReplaceTakeSpecialRewardReq {
  uint32 reward_id = 1;
}

// CmdID: 8105
message RaidReplaceTakeSpecialRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    FEATURE_CLOSED = 2;
    ALREADY_EXIST = 3;
    TIMES_LACK = 4;
  }

  RaidReplaceTakeSpecialRewardRsp.Retcode retcode = 1;
}

enum CmdTypeRaidreplace {
  CMD_TYPE_RAIDREPLACE_NONE = 0;
  CMD_RAID_REPLACE_GET_DATA_REQ = 8100;
  CMD_RAID_REPLACE_GET_DATA_RSP = 8101;
  CMD_RAID_REPLACE_TAKE_REWARD_LINE_REWARD_REQ = 8102;
  CMD_RAID_REPLACE_TAKE_REWARD_LINE_REWARD_RSP = 8103;
  CMD_RAID_REPLACE_TAKE_SPECIAL_REWARD_REQ = 8104;
  CMD_RAID_REPLACE_TAKE_SPECIAL_REWARD_RSP = 8105;
}

enum RaidReplaceStageType {
  RAID_REPLACE_STAGE_NONE = 0;
  RAID_REPLACE_STAGE_MACHINERY = 1;
  RAID_REPLACE_STAGE_NOSTALGIA = 2;
  RAID_REPLACE_STAGE_AVATAR = 3;
  RAID_REPLACE_STAGE_FUNNY = 4;
  RAID_REPLACE_STAGE_BOSS = 5;
}

message InLevelBaseActorSnapshot {
  float base_max_hp = 1;
  float base_max_sp = 2;
  float max_hp = 3;
  float max_sp = 4;
  float hp = 5;
  float sp = 6;
  uint32 level = 7;
  float attack = 8;
  float defense = 9;
  bool is_alive = 10;
  float total_overkill_damage = 11;
}

message InLevelAvatarSkillInfo {
  string skill_name = 1;
  float cd = 2;
  float cost_sp = 3;
  float need_sp = 4;
  float cd_timer = 5;
  uint32 max_charges_count = 6;
  uint32 charges_counter = 7;
  bool can_hold = 8;
  string instant_trigger_anim_event_id = 9;
}

message InLevelAvatarActorSnapshot {
  uint32 avatar_id = 1;
  repeated InLevelAvatarSkillInfo skill_list = 2;
  uint32 weapon_id = 3;
  uint32 weapon_level = 4;
  uint32 stigmata_1_id = 5;
  uint32 stigmata_1_level = 6;
  uint32 stigmata_2_id = 7;
  uint32 stigmata_2_level = 8;
  uint32 stigmata_3_id = 9;
  uint32 stigmata_3_level = 10;
}

message InLevelMonsterActorSnapshot {
  string monster_name = 1;
}

message InLevelEntityProperty {
  string name = 1;
  float value = 2;
}

message InLevelActorSnapshot {
  InLevelAvatarActorSnapshot avatar_snapshot = 1;
  InLevelMonsterActorSnapshot monster_snapshot = 2;
  InLevelBaseActorSnapshot base_snapshot = 3;
  repeated InLevelEntityProperty property_list = 4;
}

message InLevelAttackDataSnapshot {
  float attacker_ani_damage_Ratio = 1;
  uint32 attacker_class = 2;
  uint32 attacker_nature = 3;
  uint32 attacker_category = 4;
  float attacker_crit_chance = 5;
  float attacker_crit_damage_ratio = 6;
  uint32 attacker_level = 7;
  float attacker_shield_damage_ratio = 8;
  float attacker_shield_damage_delta = 9;
  float attacker_attack_percentage = 10;
  float attacker_attack_value = 11;
  float added_attack_ratio = 12;
  float added_damage_ratio = 13;
  float added_damage_ratio2 = 14;
  float attacker_added_attack_value = 15;
  float attacker_all_damage_reduce_ratio = 16;
  float attacker_fire_damage = 17;
  float attacker_fire_damage_percentage = 18;
  float added_attacker_fire_damage_ratio = 19;
  float attacker_thunder_damage = 20;
  float attacker_thunder_damage_percentage = 21;
  float added_attacker_thunder_damage_ratio = 22;
  float attacker_ice_damage = 23;
  float attacker_ice_damage_percentage = 24;
  float added_attacker_ice_damage_ratio = 25;
  float attackee_ani_defence_ratio = 26;
  uint32 attackee_nature = 27;
  uint32 attackee_class = 28;
  float attackee_added_damage_take_ratio = 29;
  float attackee_normal_damage_taken_ratio = 30;
  float attackee_fire_damage_taken_ratio = 31;
  float attackee_ice_damage_taken_ratio = 32;
  float attackee_thunder_damage_taken_ratio = 33;
  float fire_damage = 34;
  float thunder_damage = 35;
  float ice_damage = 36;
  float ani_damage_ratio = 37;
  float retreat_velocity = 38;
  uint32 frame_halt = 39;
  bool is_anim_event_attack = 40;
  bool is_in_combo_count = 41;
  uint32 attack_category_tag = 42;
  uint32 hit_type = 43;
  uint32 hit_flag = 44;
  uint32 hit_level = 45;
  uint32 hit_effect = 46;
  uint32 hit_effect_aux = 47;
  float added_attack_ratio2 = 48;
  float added_attacker_fire_damage_ratio2 = 49;
  float added_attacker_thunder_damage_ratio2 = 50;
  float added_attacker_ice_damage_ratio2 = 51;
  float added_attacker_burn_damage_ratio = 52;
  float added_attacker_burn_damage_ratio2 = 53;
  float added_attacker_burn_damage_delta = 54;
  float added_attacker_bleed_damage_ratio = 55;
  float added_attacker_bleed_damage_ratio2 = 56;
  float added_attacker_bleed_damage_delta = 57;
  float added_damage_ratio3 = 58;
}

message InLevelContext {
  enum ContextType {
    INVALID = 0;
    NORMAL = 1;
    ENDLESS = 2;
    OPENWORLD_ENDLESS = 3;
    EXBOSS = 4;
  }

  InLevelContext.ContextType type = 1;
  string context_string = 2;
}

message InLevelAttackSnapshot {
  uint32 time = 1;
  InLevelAttackDataSnapshot attack_data_created = 2;
  InLevelAttackDataSnapshot attack_data_resoved = 3;
  repeated InLevelActorSnapshot actor_list = 4;
}

message InLevelAttackSnapshotInfo {
  InLevelContext context = 1;
  repeated InLevelAttackSnapshot snapshot_list = 2;
}

enum CmdTypeReport {
  CMD_DUMMY = 0;
}

message PlayerRoomStatus {
  RoomMode room_mode = 1;
  uint32 room_id = 2;
}

message RoomMember {
  enum MemberPosition {
    MEMBER_POSITION_NONE = 0;
    NORMAL = 1;
    LEADER = 2;
  }

  uint32 uid = 1;
  string region_name = 2;
  string nickname = 3;
  uint32 level = 4;
  uint32 head_avatar_id = 5;
  uint32 frame_id = 6;
  uint32 dress_id = 7;
  RoomMemberStatus status = 8;
  RoomMember.MemberPosition position = 9;
  bytes mode_bytes = 10;
  uint32 custom_head_id = 11;
  RoomClientStatus client_status = 12;
  uint32 voice_id = 13;
}

message RoomInfo {
  uint32 sub_type = 1;
  uint32 stage_id = 2;
}

// CmdID: 3150
message GetRoomDataReq {
}

// CmdID: 3151
message GetRoomDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetRoomDataRsp.Retcode retcode = 1;
}

// CmdID: 3152
message SyncRoomDataNotify {
  PlayerRoomStatus player_room_status = 1;
  repeated RoomMember member_list = 2;
  RoomInfo room_info = 3;
}

// CmdID: 3153
message CreateRoomReq {
  RoomMode room_mode = 1;
  RoomMember member_data = 2;
  RoomInfo room_info = 3;
}

// CmdID: 3154
message CreateRoomRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    SERVER_BUSY = 2;
    IS_IN_ROOM = 3;
    NO_SCHEDULE = 4;
    IS_IN_BATTLE = 5;
    TOO_FREQUENT = 6;
    PLAYER_LEVEL_LACK = 7;
    ALREADY_IN_MP = 8;
    EQUIPMENT_FULL = 9;
    EQUIPMENT_MATERIAL_LIMIT = 10;
    EQUIPMENT_FRAGMENT_LIMIT = 11;
    FEATURE_LIMIT = 12;
    TIMES_LACK = 13;
    STAGE_NOT_IN_SCHEDULE = 14;
    PUNISHED = 15;
    PRE_REQUIRE_LIMIT = 16;
    MAP_NOT_OPEN = 17;
    FEATURE_CLOSED = 18;
  }

  CreateRoomRsp.Retcode retcode = 1;
  RoomMode room_mode = 2;
}

// CmdID: 3155
message EnterRoomReq {
  RoomMode room_mode = 1;
  uint32 room_id = 2;
  RoomMember member_data = 3;
  RoomInfo room_info = 4;
}

// CmdID: 3156
message EnterRoomRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    SERVER_BUSY = 2;
    IS_IN_ROOM = 3;
    ROOM_NOT_EXIST = 4;
    ROOM_FULL = 5;
    ROOM_IN_MATCHING = 6;
    IS_IN_BATTLE = 7;
    TOO_FREQUENT = 8;
    NO_SCHEDULE = 9;
    PLAYER_LEVEL_LACK = 10;
    ALREADY_IN_MP = 11;
    EQUIPMENT_FULL = 12;
    EQUIPMENT_MATERIAL_LIMIT = 13;
    EQUIPMENT_FRAGMENT_LIMIT = 14;
    FEATURE_LIMIT = 15;
    PUNISHED = 16;
    PRE_REQUIRE_LIMIT = 17;
    MAP_NOT_OPEN = 18;
  }

  EnterRoomRsp.Retcode retcode = 1;
  RoomMode room_mode = 2;
}

// CmdID: 3157
message ExitRoomReq {
}

// CmdID: 3158
message ExitRoomRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_ROOM = 2;
    TOO_FREQUENT = 3;
  }

  ExitRoomRsp.Retcode retcode = 1;
}

// CmdID: 3159
message ExitRoomNotify {
  RoomExitReason reason = 1;
}

// CmdID: 3160
message InviteRoomReq {
  uint32 target_uid = 1;
}

// CmdID: 3161
message InviteRoomRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_ROOM = 2;
    ROOM_IN_MATCHING = 3;
    IS_IN_BATTLE = 4;
    TOO_FREQUENT = 5;
    INVITE_SELF = 6;
    NO_SCHEDULE = 7;
  }

  InviteRoomRsp.Retcode retcode = 1;
}

// CmdID: 3162
message RoomInvitationNotify {
  uint32 target_uid = 1;
  RoomMode room_mode = 2;
  uint32 room_id = 3;
  RoomMember from_player = 4;
  RoomInfo room_info = 5;
  uint32 chatworld_scene_id = 6;
  uint32 chatworld_id = 7;
}

// CmdID: 3163
message SendRoomChatMsgNotify {
  ChatMsg chat_msg = 1;
  bool is_broadcast_msg = 2;
  RoomMode room_mode = 3;
  repeated uint32 target_uid_list = 4;
}

// CmdID: 3164
message RecvRoomChatMsgNotify {
  RoomMode room_mode = 1;
  ChatMsg chat_msg = 2;
}

// CmdID: 3165
message StartRoomMatchReq {
  RoomMode room_mode = 1;
}

// CmdID: 3166
message StartRoomMatchRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    TOO_FREQUENT = 2;
    ALREADY_IN_MATCH = 3;
    IS_IN_BATTLE = 4;
    IN_CD = 5;
    TIMES_LACK = 6;
    STAGE_NOT_IN_SCHEDULE = 7;
    IS_NOT_READY = 8;
    NO_SCHEDULE = 9;
    FEATURE_LIMIT = 10;
    PUNISHED = 11;
  }

  StartRoomMatchRsp.Retcode retcode = 1;
  RoomMode room_mode = 2;
}

// CmdID: 3167
message CancelRoomMatchReq {
}

// CmdID: 3168
message CancelRoomMatchRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_MATCH = 2;
    TOO_FREQUENT = 3;
  }

  CancelRoomMatchRsp.Retcode retcode = 1;
}

// CmdID: 3169
message SyncRoomMatchDataNotify {
  enum Reason {
    SUCC = 0;
    CANCEL = 1;
    TIMEOUT = 2;
    MATCH_SUCC = 3;
  }

  RoomMode room_mode = 1;
  bool is_in_matching = 2;
  uint32 match_start_time = 3;
  uint32 estimate_match_cost_time = 4;
  SyncRoomMatchDataNotify.Reason reason = 5;
}

// CmdID: 3170
message RoomMatchTimeoutNotify {
}

// CmdID: 3171
message UpdateRoomInfoReq {
  RoomInfo room_info = 1;
}

// CmdID: 3172
message UpdateRoomInfoRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_ROOM = 2;
    IN_MATCH = 3;
    NOT_LEADER = 4;
    STAGE_NOT_IN_SCHEDULE = 5;
    TOO_FREQUENT = 6;
  }

  UpdateRoomInfoRsp.Retcode retcode = 1;
}

// CmdID: 3173
message RoomSwitchMemberStatusReq {
  RoomMemberStatus status = 1;
  RoomClientStatus client_status = 2;
}

// CmdID: 3174
message RoomSwitchMemberStatusRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  RoomSwitchMemberStatusRsp.Retcode retcode = 1;
}

// CmdID: 3175
message RoomKickMemberReq {
  uint32 target_uid = 1;
}

// CmdID: 3176
message RoomKickMemberRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_ROOM = 2;
    NOT_LEADER = 3;
    NO_TARGET = 4;
    SELF = 5;
  }

  RoomKickMemberRsp.Retcode retcode = 1;
}

// CmdID: 3177
message RoomTransferLeaderReq {
  uint32 target_uid = 1;
}

// CmdID: 3178
message RoomTransferLeaderRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_ROOM = 2;
    NOT_LEADER = 3;
    NO_TARGET = 4;
    SELF = 5;
  }

  RoomTransferLeaderRsp.Retcode retcode = 1;
}

// CmdID: 3179
message RoomMemberSetVoiceIdReq {
  uint32 voice_id = 1;
}

// CmdID: 3180
message RoomMemberSetVoiceIdRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_ROOM = 2;
  }

  RoomMemberSetVoiceIdRsp.Retcode retcode = 1;
  uint32 uid = 2;
  uint32 voice_id = 3;
}

// CmdID: 3181
message RoomGetStatusReq {
  uint32 room_id = 1;
  RoomMember member_data = 2;
}

// CmdID: 3182
message RoomGetStatusRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    TOO_FREQUENT = 2;
    ROOM_NOT_EXIST = 3;
  }

  RoomGetStatusRsp.Retcode retcode = 1;
  PlayerRoomStatus player_room_status = 2;
  repeated RoomMember member_list = 3;
  RoomInfo room_info = 4;
}

// CmdID: 3183
message DismissRoomReq {
}

// CmdID: 3184
message DismissRoomRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_ROOM = 2;
    NOT_LEADER = 3;
  }

  DismissRoomRsp.Retcode retcode = 1;
}

enum CmdTypeRoom {
  CMD_TYPE_ROOM_NONE = 0;
  CMD_GET_ROOM_DATA_REQ = 3150;
  CMD_GET_ROOM_DATA_RSP = 3151;
  CMD_SYNC_ROOM_DATA_NOTIFY = 3152;
  CMD_CREATE_ROOM_REQ = 3153;
  CMD_CREATE_ROOM_RSP = 3154;
  CMD_ENTER_ROOM_REQ = 3155;
  CMD_ENTER_ROOM_RSP = 3156;
  CMD_EXIT_ROOM_REQ = 3157;
  CMD_EXIT_ROOM_RSP = 3158;
  CMD_EXIT_ROOM_NOTIFY = 3159;
  CMD_INVITE_ROOM_REQ = 3160;
  CMD_INVITE_ROOM_RSP = 3161;
  CMD_ROOM_INVITATION_NOTIFY = 3162;
  CMD_SEND_ROOM_CHAT_MSG_NOTIFY = 3163;
  CMD_RECV_ROOM_CHAT_MSG_NOTIFY = 3164;
  CMD_START_ROOM_MATCH_REQ = 3165;
  CMD_START_ROOM_MATCH_RSP = 3166;
  CMD_CANCEL_ROOM_MATCH_REQ = 3167;
  CMD_CANCEL_ROOM_MATCH_RSP = 3168;
  CMD_SYNC_ROOM_MATCH_DATA_NOTIFY = 3169;
  CMD_ROOM_MATCH_TIMEOUT_NOTIFY = 3170;
  CMD_UPDATE_ROOM_INFO_REQ = 3171;
  CMD_UPDATE_ROOM_INFO_RSP = 3172;
  CMD_ROOM_SWITCH_MEMBER_STATUS_REQ = 3173;
  CMD_ROOM_SWITCH_MEMBER_STATUS_RSP = 3174;
  CMD_ROOM_KICK_MEMBER_REQ = 3175;
  CMD_ROOM_KICK_MEMBER_RSP = 3176;
  CMD_ROOM_TRANSFER_LEADER_REQ = 3177;
  CMD_ROOM_TRANSFER_LEADER_RSP = 3178;
  CMD_ROOM_MEMBER_SET_VOICE_ID_REQ = 3179;
  CMD_ROOM_MEMBER_SET_VOICE_ID_RSP = 3180;
  CMD_ROOM_GET_STATUS_REQ = 3181;
  CMD_ROOM_GET_STATUS_RSP = 3182;
  CMD_DISMISS_ROOM_REQ = 3183;
  CMD_DISMISS_ROOM_RSP = 3184;
}

enum RoomMemberStatus {
  ROOM_MEMBER_STATUS_NONE = 0;
  ROOM_UNREADY = 1;
  ROOM_READY = 2;
  ROOM_IN_BATTLE = 3;
}

enum RoomClientStatus {
  ROOM_CLIENT_NONE = 0;
  ROOM_CLIENT_SELECTING_MAP = 1;
  ROOM_CLIENT_EQUIPING = 2;
}

enum RoomExitReason {
  ROOM_EXIT_NONE = 0;
  ROOM_EXIT_KICK = 1;
  ROOM_EXIT_DISMISSED = 2;
}

message RpgDungeonQuest {
  uint32 id = 1;
  repeated uint32 avatar_id_list = 2;
}

message RpgDungeonBuff {
  uint32 buff_id = 1;
  uint32 buff_level = 2;
}

message RpgDungeonBuffPool {
  uint32 pool_id = 1;
  uint32 left_times = 2;
}

message RpgDungeonActivity {
  uint32 id = 1;
  repeated RpgDungeonQuest quest_list = 2;
  repeated uint32 candidate_buff_id_list = 3;
  repeated RpgDungeonBuff buff_list = 4;
  repeated RpgDungeonBuffPool pool_list = 5;
}

// CmdID: 5500
message RpgDungeonGetActivityReq {
  uint32 dungeon_id = 1;
}

// CmdID: 5501
message RpgDungeonGetActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  RpgDungeonGetActivityRsp.Retcode retcode = 1;
  RpgDungeonActivity activity = 2;
  uint32 dungeon_id = 3;
}

// CmdID: 5502
message RpgDungeonSelectQuestReq {
  uint32 dungeon_id = 1;
  uint32 quest_id = 2;
  repeated uint32 avatar_id_list = 3;
}

// CmdID: 5503
message RpgDungeonSelectQuestRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_MEET_TAG = 2;
    AVATAR_NOT_EXIST = 3;
    LOCKED = 4;
    SELECTED = 5;
  }

  RpgDungeonSelectQuestRsp.Retcode retcode = 1;
  uint32 dungeon_id = 2;
}

// CmdID: 5504
message RpgDungeonGetCandidateBuffReq {
  uint32 dungeon_id = 1;
  uint32 pool_id = 2;
}

// CmdID: 5505
message RpgDungeonGetCandidateBuffRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_SELECT = 2;
    NO_LEFT_TIMES = 3;
  }

  RpgDungeonGetCandidateBuffRsp.Retcode retcode = 1;
  uint32 dungeon_id = 2;
  uint32 pool_id = 3;
  repeated uint32 buff_id_list = 4;
}

// CmdID: 5506
message RpgDungeonSelectBuffReq {
  uint32 dungeon_id = 1;
  uint32 buff_id = 2;
}

// CmdID: 5507
message RpgDungeonSelectBuffRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_CANDIDATE = 2;
  }

  RpgDungeonSelectBuffRsp.Retcode retcode = 1;
  uint32 dungeon_id = 2;
}

enum CmdTypeRpgdungeon {
  CMD_TYPE_RPGDUNGEON_NONE = 0;
  CMD_RPG_DUNGEON_GET_ACTIVITY_REQ = 5500;
  CMD_RPG_DUNGEON_GET_ACTIVITY_RSP = 5501;
  CMD_RPG_DUNGEON_SELECT_QUEST_REQ = 5502;
  CMD_RPG_DUNGEON_SELECT_QUEST_RSP = 5503;
  CMD_RPG_DUNGEON_GET_CANDIDATE_BUFF_REQ = 5504;
  CMD_RPG_DUNGEON_GET_CANDIDATE_BUFF_RSP = 5505;
  CMD_RPG_DUNGEON_SELECT_BUFF_REQ = 5506;
  CMD_RPG_DUNGEON_SELECT_BUFF_RSP = 5507;
}

// CmdID: 2300
message GetRpgTaleReq {
  uint32 tale_id = 1;
  bool is_all = 2;
}

message RpgTaleProgress {
  uint32 id = 1;
  uint32 progress = 2;
}

message RpgTaleSite {
  uint32 site_id = 1;
  uint32 area_id = 2;
  RpgTaleSiteStatus status = 3;
  RpgTaleSiteContentType content_type = 4;
  string content_param = 5;
  repeated uint32 finished_matrix_event_id_list = 6;
  uint32 event_type = 7;
  uint32 event_param = 8;
  RpgTaleProgress cur_progress = 9;
  uint32 pass_times = 10;
  uint32 status_end_time = 11;
  uint32 close_time = 12;
  repeated RpgTaleFlag unlock_limit_flag_list = 13;
}

message RpgTaleOverall {
  uint32 overall_id = 1;
  uint32 value = 2;
}

message RpgTaleArea {
  uint32 area_id = 1;
}

message RpgTaleStageScoreDrop {
  uint32 total_num = 1;
  uint32 daily_num = 2;
}

message RpgTaleTotalScoreDrop {
  uint32 material_id = 1;
  uint32 daily_num = 2;
  uint32 total_num = 3;
}

message RpgTaleStage {
  uint32 stage_id = 1;
  uint32 max_floor = 2;
  uint32 max_score = 3;
  RpgTaleStageScoreDrop score_drop = 5;
}

message CurRpgTaleStage {
  uint32 stage_id = 1;
  uint32 cur_floor = 2;
  repeated uint32 avatar_list = 3;
  string client_data = 4;
}

message RpgTaleAbility {
  uint32 ability_id = 1;
  uint32 ability_level = 2;
}

message RpgTaleStageEnterTimesLimit {
  uint32 limit_id = 1;
  uint32 enter_times = 2;
}

message RpgTaleQAvatarSettleGotMaterial {
  uint32 material_id = 1;
  uint32 material_num = 2;
}

message RpgTaleQAvatarBattle {
  uint32 cur_score = 1;
  uint32 has_take_reward_score = 2;
  uint32 choose_virtual_avatar_id = 3;
  uint32 win_num = 4;
  uint32 win_streak = 5;
  uint32 virtual_avatar_drop_num = 6;
  repeated RpgTaleQAvatarSettleGotMaterial got_material_list = 7;
}

message RpgTaleData {
  uint32 tale_id = 1;
  repeated RpgTaleSite site_list = 2;
  uint32 cur_site_id = 3;
  repeated uint32 reward_taken_collection_count_list = 4;
  uint32 end_time = 5;
  repeated uint32 finished_event_id_list = 8;
  repeated RpgTaleArea area_list = 9;
  repeated RpgTaleOverall overall_list = 10;
  uint32 schedule_id = 11;
  repeated RpgTaleStage stage_list = 12;
  repeated RpgTaleTotalScoreDrop total_score_drop_list = 13;
  repeated RpgTaleAbility ability_list = 14;
  uint32 site_refresh_num = 15;
  uint32 last_reset_site_refresh_num_time = 16;
  RpgTaleQAvatarBattle qavatar_battle = 17;
  repeated RpgTaleStageEnterTimesLimit stage_enter_times_limit_list = 18;
  repeated uint32 finished_mission_group_list = 19;
  uint32 timed_end_time = 20;
}

// CmdID: 2301
message GetRpgTaleRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetRpgTaleRsp.Retcode retcode = 1;
  uint32 tale_id = 2;
  bool is_all = 12;
  repeated RpgTaleData rpg_tale_list = 13;
}

// CmdID: 2302
message SyncRpgTaleSiteNotify {
  repeated RpgTaleSite site_list = 1;
  uint32 tale_id = 3;
}

// CmdID: 2303
message EnterRpgTaleSiteReq {
  uint32 site_id = 1;
  uint32 tale_id = 2;
}

// CmdID: 2304
message EnterRpgTaleSiteRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_PASS_CUR_SITE = 2;
    SITE_LOCKED = 3;
  }

  EnterRpgTaleSiteRsp.Retcode retcode = 1;
  uint32 site_id = 2;
  uint32 tale_id = 3;
}

// CmdID: 2305
message FinishRpgTalePlotReq {
  uint32 plot_id = 1;
  uint32 dialog_id = 2;
  uint32 tale_id = 3;
}

// CmdID: 2306
message FinishRpgTalePlotRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  FinishRpgTalePlotRsp.Retcode retcode = 1;
  uint32 plot_id = 2;
  uint32 dialog_id = 3;
  uint32 tale_id = 4;
}

// CmdID: 2307
message UnlockRpgTaleSiteReq {
  uint32 site_id = 1;
  uint32 tale_id = 2;
  bool is_only_check = 3;
}

message RpgTaleFlag {
  RpgTaleFlagType type = 1;
  repeated uint32 param_list = 2;
}

// CmdID: 2308
message UnlockRpgTaleSiteRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    UNLOCKED = 2;
    MATERIAL_NOT_ENOUGH = 3;
    FLAG_LIMIT = 4;
  }

  UnlockRpgTaleSiteRsp.Retcode retcode = 1;
  uint32 site_id = 2;
  uint32 tale_id = 5;
  repeated RpgTaleFlag limit_flag_list = 6;
  bool is_only_check = 7;
}

// CmdID: 2309
message TakeRpgTaleCollectionRewardReq {
  uint32 tale_id = 1;
}

// CmdID: 2310
message TakeRpgTaleCollectionRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NUM_LACK = 2;
    NO_REWARD = 3;
    TIME_LIMIT = 4;
    HAVE_TAKE = 5;
  }

  TakeRpgTaleCollectionRewardRsp.Retcode retcode = 1;
  repeated uint32 collection_count_list = 2;
  repeated RewardData reward_data_list = 3;
  repeated uint32 reward_taken_collection_count_list = 4;
  uint32 tale_id = 5;
}

message RpgTaleEvent {
  uint32 event_id = 1;
  uint32 event_type = 2;
  repeated uint32 event_param_list = 3;
  RewardData reward_data = 4;
}

// CmdID: 2312
message RpgTaleEventNotify {
  RpgTaleEvent event_data = 1;
  uint32 tale_id = 2;
}

// CmdID: 2313
message TriggerRpgTaleEventReq {
  uint32 tale_id = 2;
  repeated uint32 content_id_list = 3;
}

// CmdID: 2314
message TriggerRpgTaleEventRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NO_EVENT = 2;
  }

  TriggerRpgTaleEventRsp.Retcode retcode = 1;
  uint32 tale_id = 2;
}

// CmdID: 2315
message CheckRpgTaleStageTriggerReq {
  repeated uint32 trigger_list = 1;
  uint32 tale_id = 2;
}

// CmdID: 2316
message CheckRpgTaleStageTriggerRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  CheckRpgTaleStageTriggerRsp.Retcode retcode = 1;
  repeated uint32 show_trigger_list = 2;
  uint32 tale_id = 3;
}

// CmdID: 2317
message TriggerRpgTaleStageEventReq {
  uint32 trigger_id = 1;
  uint32 tale_id = 2;
}

// CmdID: 2318
message TriggerRpgTaleStageEventRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  TriggerRpgTaleStageEventRsp.Retcode retcode = 1;
  RpgTaleEvent event_data = 2;
  uint32 tale_id = 3;
}

message MatrixGridPos {
  uint32 x = 1;
  uint32 y = 2;
}

message MatrixFloorBriefInfo {
  uint32 floor_id = 1;
  MatrixFloorStatus floor_status = 2;
}

// CmdID: 2320
message GetMatrixReq {
}

// CmdID: 2321
message GetMatrixRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetMatrixRsp.Retcode retcode = 1;
  repeated MatrixFloorBriefInfo floor_brief_info_list = 2;
  uint32 cur_floor_id = 3;
}

// CmdID: 2322
message GetMatrixFloorReq {
  uint32 floor_id = 1;
}

message MatrixGrid {
  MatrixGridPos pos = 1;
  MatrixGridType type = 2;
  uint32 grid_id = 3;
  uint32 event_id = 4;
}

message MatrixLottery {
  uint32 lottery_id = 1;
  uint32 lottery_num = 2;
  uint32 left_step = 3;
}

message MatrixBuff {
  uint32 buff_id = 1;
  uint32 buff_type = 2;
  uint32 buff_para_int = 3;
}

message MatrixFloorMapInfo {
  uint32 floor_id = 1;
  repeated MatrixGrid grid_list = 2;
  uint32 width = 3;
  uint32 height = 4;
  uint32 map_id = 5;
  MatrixGridPos current_pos = 6;
  repeated MatrixGrid event_grid_list = 7;
  uint32 step_num = 8;
  uint32 dice_point = 9;
  repeated MatrixLottery lottery_list = 10;
  repeated MatrixBuff buff_list = 11;
}

// CmdID: 2323
message GetMatrixFloorRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetMatrixFloorRsp.Retcode retcode = 1;
  MatrixFloorBriefInfo floor_brief_info = 2;
  MatrixFloorMapInfo floor_map_info = 3;
}

// CmdID: 2324
message MatrixEnterReq {
  uint32 floor_id = 1;
}

// CmdID: 2325
message MatrixEnterRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  MatrixEnterRsp.Retcode retcode = 1;
}

message MatrixAdvancePath {
  MatrixGridPos path_from = 1;
  MatrixGridPos path_to = 2;
}

// CmdID: 2326
message MatrixAdvanceReq {
  MatrixGridPos from_pos = 1;
  MatrixGridPos to_pos = 2;
  repeated MatrixAdvancePath path_list = 3;
}

// CmdID: 2327
message MatrixAdvanceRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    PATH_NOT_VALID = 2;
    IN_FLOOR_EVENT = 3;
  }

  MatrixAdvanceRsp.Retcode retcode = 1;
  MatrixGridPos cur_pos = 2;
  repeated MatrixGridPos pos_list = 3;
}

// CmdID: 2328
message SyncMatrixFloorNotify {
  uint32 floor_id = 1;
  MatrixFloorBriefInfo floor_brief_info = 2;
  MatrixFloorMapInfo floor_map_info = 3;
}

// CmdID: 2329
message SyncMatrixNotify {
  repeated MatrixFloorBriefInfo floor_brief_info_list = 1;
  uint32 cur_floor_id = 2;
}

// CmdID: 2330
message MatrixTriggerEventReq {
  MatrixGridPos pos = 1;
  uint32 event_id = 2;
}

// CmdID: 2331
message MatrixTriggerEventRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    POS_INVALID = 2;
    EVENT_NOT_EXIST = 3;
    IN_FLOOR_EVENT = 4;
  }

  MatrixTriggerEventRsp.Retcode retcode = 1;
}

// CmdID: 2332
message MatrixCancelEventReq {
}

// CmdID: 2333
message MatrixCancelEventRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  MatrixCancelEventRsp.Retcode retcode = 1;
}

// CmdID: 2334
message SyncMatrixCurEventNotify {
  MatrixGridPos pos = 1;
  uint32 event_id = 2;
  uint32 real_event_param = 3;
}

// CmdID: 2335
message MatrixEventFinishNotify {
  MatrixGridPos pos = 1;
  uint32 event_id = 2;
  RewardData reward_data = 3;
  MatrixEventType display_type = 4;
  uint32 display_id = 5;
}

// CmdID: 2336
message FinishMatrixEventPlotReq {
  uint32 plot_id = 1;
  uint32 dialog_id = 2;
}

// CmdID: 2337
message FinishMatrixEventPlotRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  FinishMatrixEventPlotRsp.Retcode retcode = 1;
  uint32 plot_id = 2;
  uint32 dialog_id = 3;
}

// CmdID: 2338
message MatrixTeleportNotify {
  MatrixGridPos from_pos = 1;
  MatrixGridPos to_pos = 2;
}

// CmdID: 2339
message MatrixMoveObjectReq {
  MatrixGridPos pos = 1;
  uint32 event_id = 2;
}

// CmdID: 2340
message MatrixMoveObjectRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    POS_INVALID = 2;
    OBJECT_NOT_EXIST = 3;
    BLOCK = 4;
    IN_FLOOR_EVENT = 5;
  }

  MatrixMoveObjectRsp.Retcode retcode = 1;
  repeated MatrixGridPos pos_list = 2;
  uint32 event_id = 3;
}

// CmdID: 2341
message MatrixResetFloorReq {
}

// CmdID: 2342
message MatrixResetFloorRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  MatrixResetFloorRsp.Retcode retcode = 1;
}

// CmdID: 2343
message MatrixSettleFloorEventReq {
}

// CmdID: 2344
message MatrixSettleFloorEventRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  MatrixSettleFloorEventRsp.Retcode retcode = 1;
}

// CmdID: 2345
message MatrixThrowDiceReq {
  DiceType dice_type = 1;
  uint32 dice_point = 2;
}

// CmdID: 2346
message MatrixThrowDiceRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NO_DICE = 2;
    IN_FLOOR_EVENT = 3;
    WAIT_CHOOSE = 4;
    HAVE_EVENT = 5;
    LACK_DICE = 6;
  }

  MatrixThrowDiceRsp.Retcode retcode = 1;
  DiceType dice_type = 2;
  uint32 dice_point = 3;
  uint32 bonus_dice_point = 4;
}

// CmdID: 2347
message MatrixSetDiceDestinationReq {
  MatrixGridPos target_pos = 1;
}

// CmdID: 2348
message MatrixSetDiceDestinationRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NO_PATH = 2;
  }

  MatrixSetDiceDestinationRsp.Retcode retcode = 1;
  MatrixGridPos target_pos = 2;
}

// CmdID: 2349
message MatrixGuessFingerReq {
  MatrixFingerType finger_type = 1;
}

// CmdID: 2350
message MatrixGuessFingerRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_WIN = 2;
  }

  MatrixGuessFingerRsp.Retcode retcode = 1;
  MatrixFingerType player_finger_type = 2;
  MatrixFingerType robot_finger_type = 3;
  RewardData reward_data = 4;
}

// CmdID: 2351
message MatrixSetLotteryNumReq {
  uint32 lottery_num = 1;
}

// CmdID: 2352
message MatrixSetLotteryNumRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  MatrixSetLotteryNumRsp.Retcode retcode = 1;
}

// CmdID: 2353
message MatrixLotteryDrawNotify {
  MatrixLottery lottery = 1;
  uint32 win_num = 2;
  RewardData reward_data = 3;
}

// CmdID: 2370
message FinishRpgTaleStagePlotReq {
  uint32 plot_id = 1;
  uint32 dialog_id = 2;
  uint32 tale_id = 3;
}

// CmdID: 2371
message FinishRpgTaleStagePlotRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  FinishRpgTaleStagePlotRsp.Retcode retcode = 1;
  uint32 plot_id = 2;
  uint32 dialog_id = 3;
  uint32 tale_id = 4;
}

// CmdID: 2374
message ReportRpgTaleStageReq {
  uint32 stage_id = 1;
  uint32 cur_floor = 2;
  string client_data = 3;
  uint32 tale_id = 4;
  uint32 score = 5;
  repeated uint32 monster_unique_id_list = 6;
  repeated uint32 monster_card_unique_id_list = 7;
}

// CmdID: 2375
message ReportRpgTaleStageRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  ReportRpgTaleStageRsp.Retcode retcode = 1;
  uint32 stage_id = 2;
  uint32 cur_floor = 3;
  uint32 tale_id = 4;
  uint32 score = 5;
}

// CmdID: 2376
message RpgTaleSweepReq {
  uint32 stage_id = 1;
  uint32 times = 2;
  uint32 tale_id = 3;
}

// CmdID: 2377
message RpgTaleSweepRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    LACK_MATERIAL = 2;
    STAGE_ERROR = 3;
    NO_REWARD = 4;
    ENTER_TIMES_LACK = 5;
    CHALLENGE_NUM_LACK = 6;
  }

  RpgTaleSweepRsp.Retcode retcode = 1;
  uint32 stage_id = 2;
  uint32 times = 3;
  RewardData reward_data = 4;
  uint32 tale_id = 5;
  uint32 max_floor = 6;
}

// CmdID: 2378
message GetRpgTaleFileReq {
  uint32 tale_id = 1;
}

// CmdID: 2379
message GetRpgTaleFileRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetRpgTaleFileRsp.Retcode retcode = 1;
  uint32 tale_id = 2;
  repeated uint32 file_id_list = 3;
}

// CmdID: 2380
message RpgTaleRefreshTicketReq {
  uint32 tale_id = 1;
}

message RpgTaleTicketRefreshInfo {
  uint32 ticket_id = 1;
  uint32 material_id = 2;
  uint32 add_num = 3;
}

// CmdID: 2381
message RpgTaleRefreshTicketRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  RpgTaleRefreshTicketRsp.Retcode retcode = 1;
  uint32 tale_id = 2;
  repeated RpgTaleTicketRefreshInfo ticket_refresh_list = 3;
}

// CmdID: 2382
message RpgTaleLevelUpAbilityReq {
  uint32 tale_id = 1;
  uint32 ability_id = 2;
  uint32 target_level = 3;
}

// CmdID: 2383
message RpgTaleLevelUpAbilityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    TARGET_LEVEL_ERROR = 2;
    MATERIAL_LACK = 3;
    FLAG_LIMIT = 4;
    ABILITY_ERROR = 5;
  }

  RpgTaleLevelUpAbilityRsp.Retcode retcode = 1;
  uint32 tale_id = 2;
  uint32 ability_id = 3;
  repeated RpgTaleFlag limit_flag_list = 4;
}

// CmdID: 2384
message RpgTaleResetTowerReq {
  uint32 tale_id = 1;
}

// CmdID: 2385
message RpgTaleResetTowerRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  RpgTaleResetTowerRsp.Retcode retcode = 1;
  uint32 tale_id = 2;
}

// CmdID: 2386
message RpgTaleSetOverallReq {
  uint32 tale_id = 1;
  uint32 overall_id = 2;
  uint32 value = 3;
}

// CmdID: 2387
message RpgTaleSetOverallRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  RpgTaleSetOverallRsp.Retcode retcode = 1;
  uint32 tale_id = 2;
  uint32 overall_id = 3;
}

// CmdID: 2388
message RpgTaleRefreshSiteReq {
  uint32 tale_id = 1;
}

// CmdID: 2389
message RpgTaleRefreshSiteRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    HCOIN_LACK = 2;
    MATERIAL_LACK = 3;
    REFRESH_TIME_LACK = 4;
    SITE_NOT_FINISH = 5;
  }

  RpgTaleRefreshSiteRsp.Retcode retcode = 1;
  uint32 tale_id = 2;
}

// CmdID: 2390
message RpgTaleSetPvpVirtualAvatarReq {
  uint32 tale_id = 1;
  uint32 virtual_avatar_id = 2;
}

// CmdID: 2391
message RpgTaleSetPvpVirtualAvatarRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    AVATAR_NOT_EXIST = 2;
  }

  RpgTaleSetPvpVirtualAvatarRsp.Retcode retcode = 1;
  uint32 tale_id = 2;
  uint32 virtual_avatar_id = 3;
}

// CmdID: 2392
message RpgTaleGetPvpDivisionRewardReq {
  uint32 tale_id = 1;
}

// CmdID: 2393
message RpgTaleGetPvpDivisionRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ALREADY_TAKEN = 2;
  }

  RpgTaleGetPvpDivisionRewardRsp.Retcode retcode = 1;
  uint32 tale_id = 2;
  RewardData reward_data = 3;
}

// CmdID: 2394
message RpgTaleGetStageScoreRankReq {
  uint32 tale_id = 1;
  uint32 stage_id = 2;
}

// CmdID: 2395
message RpgTaleGetStageScoreRankRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    TALE_ERROR = 2;
    STAGE_ERROR = 3;
  }

  RpgTaleGetStageScoreRankRsp.Retcode retcode = 1;
  uint32 tale_id = 2;
  uint32 stage_id = 3;
  RankShowData rank_data = 4;
  uint32 percent = 5;
}

// CmdID: 2396
message RpgTaleFinishMissionGroupNotify {
  uint32 tale_id = 1;
  uint32 mission_group_id = 2;
  RewardData reward_data = 3;
}

enum CmdTypeRpgtale {
  CMD_TYPE_RPGTALE_NONE = 0;
  CMD_GET_RPG_TALE_REQ = 2300;
  CMD_GET_RPG_TALE_RSP = 2301;
  CMD_SYNC_RPG_TALE_SITE_NOTIFY = 2302;
  CMD_ENTER_RPG_TALE_SITE_REQ = 2303;
  CMD_ENTER_RPG_TALE_SITE_RSP = 2304;
  CMD_FINISH_RPG_TALE_PLOT_REQ = 2305;
  CMD_FINISH_RPG_TALE_PLOT_RSP = 2306;
  CMD_UNLOCK_RPG_TALE_SITE_REQ = 2307;
  CMD_UNLOCK_RPG_TALE_SITE_RSP = 2308;
  CMD_TAKE_RPG_TALE_COLLECTION_REWARD_REQ = 2309;
  CMD_TAKE_RPG_TALE_COLLECTION_REWARD_RSP = 2310;
  CMD_RPG_TALE_EVENT_NOTIFY = 2312;
  CMD_TRIGGER_RPG_TALE_EVENT_REQ = 2313;
  CMD_TRIGGER_RPG_TALE_EVENT_RSP = 2314;
  CMD_CHECK_RPG_TALE_STAGE_TRIGGER_REQ = 2315;
  CMD_CHECK_RPG_TALE_STAGE_TRIGGER_RSP = 2316;
  CMD_TRIGGER_RPG_TALE_STAGE_EVENT_REQ = 2317;
  CMD_TRIGGER_RPG_TALE_STAGE_EVENT_RSP = 2318;
  CMD_GET_MATRIX_REQ = 2320;
  CMD_GET_MATRIX_RSP = 2321;
  CMD_GET_MATRIX_FLOOR_REQ = 2322;
  CMD_GET_MATRIX_FLOOR_RSP = 2323;
  CMD_MATRIX_ENTER_REQ = 2324;
  CMD_MATRIX_ENTER_RSP = 2325;
  CMD_MATRIX_ADVANCE_REQ = 2326;
  CMD_MATRIX_ADVANCE_RSP = 2327;
  CMD_SYNC_MATRIX_FLOOR_NOTIFY = 2328;
  CMD_SYNC_MATRIX_NOTIFY = 2329;
  CMD_MATRIX_TRIGGER_EVENT_REQ = 2330;
  CMD_MATRIX_TRIGGER_EVENT_RSP = 2331;
  CMD_MATRIX_CANCEL_EVENT_REQ = 2332;
  CMD_MATRIX_CANCEL_EVENT_RSP = 2333;
  CMD_SYNC_MATRIX_CUR_EVENT_NOTIFY = 2334;
  CMD_MATRIX_EVENT_FINISH_NOTIFY = 2335;
  CMD_FINISH_MATRIX_EVENT_PLOT_REQ = 2336;
  CMD_FINISH_MATRIX_EVENT_PLOT_RSP = 2337;
  CMD_MATRIX_TELEPORT_NOTIFY = 2338;
  CMD_MATRIX_MOVE_OBJECT_REQ = 2339;
  CMD_MATRIX_MOVE_OBJECT_RSP = 2340;
  CMD_MATRIX_RESET_FLOOR_REQ = 2341;
  CMD_MATRIX_RESET_FLOOR_RSP = 2342;
  CMD_MATRIX_SETTLE_FLOOR_EVENT_REQ = 2343;
  CMD_MATRIX_SETTLE_FLOOR_EVENT_RSP = 2344;
  CMD_MATRIX_THROW_DICE_REQ = 2345;
  CMD_MATRIX_THROW_DICE_RSP = 2346;
  CMD_MATRIX_SET_DICE_DESTINATION_REQ = 2347;
  CMD_MATRIX_SET_DICE_DESTINATION_RSP = 2348;
  CMD_MATRIX_GUESS_FINGER_REQ = 2349;
  CMD_MATRIX_GUESS_FINGER_RSP = 2350;
  CMD_MATRIX_SET_LOTTERY_NUM_REQ = 2351;
  CMD_MATRIX_SET_LOTTERY_NUM_RSP = 2352;
  CMD_MATRIX_LOTTERY_DRAW_NOTIFY = 2353;
  CMD_FINISH_RPG_TALE_STAGE_PLOT_REQ = 2370;
  CMD_FINISH_RPG_TALE_STAGE_PLOT_RSP = 2371;
  CMD_REPORT_RPG_TALE_STAGE_REQ = 2374;
  CMD_REPORT_RPG_TALE_STAGE_RSP = 2375;
  CMD_RPG_TALE_SWEEP_REQ = 2376;
  CMD_RPG_TALE_SWEEP_RSP = 2377;
  CMD_GET_RPG_TALE_FILE_REQ = 2378;
  CMD_GET_RPG_TALE_FILE_RSP = 2379;
  CMD_RPG_TALE_REFRESH_TICKET_REQ = 2380;
  CMD_RPG_TALE_REFRESH_TICKET_RSP = 2381;
  CMD_RPG_TALE_LEVEL_UP_ABILITY_REQ = 2382;
  CMD_RPG_TALE_LEVEL_UP_ABILITY_RSP = 2383;
  CMD_RPG_TALE_RESET_TOWER_REQ = 2384;
  CMD_RPG_TALE_RESET_TOWER_RSP = 2385;
  CMD_RPG_TALE_SET_OVERALL_REQ = 2386;
  CMD_RPG_TALE_SET_OVERALL_RSP = 2387;
  CMD_RPG_TALE_REFRESH_SITE_REQ = 2388;
  CMD_RPG_TALE_REFRESH_SITE_RSP = 2389;
  CMD_RPG_TALE_SET_PVP_VIRTUAL_AVATAR_REQ = 2390;
  CMD_RPG_TALE_SET_PVP_VIRTUAL_AVATAR_RSP = 2391;
  CMD_RPG_TALE_GET_PVP_DIVISION_REWARD_REQ = 2392;
  CMD_RPG_TALE_GET_PVP_DIVISION_REWARD_RSP = 2393;
  CMD_RPG_TALE_GET_STAGE_SCORE_RANK_REQ = 2394;
  CMD_RPG_TALE_GET_STAGE_SCORE_RANK_RSP = 2395;
  CMD_RPG_TALE_FINISH_MISSION_GROUP_NOTIFY = 2396;
}

enum RpgTaleSiteContentType {
  RPG_TALE_SITE_CONTENT_INVALID = 0;
  RPG_TALE_SITE_CONTENT_NONE = 1;
  RPG_TALE_SITE_CONTENT_MATRIX = 2;
  RPG_TALE_SITE_CONTENT_PLOT = 3;
  RPG_TALE_SITE_CONTENT_TIPS = 4;
  RPG_TALE_SITE_CONTENT_LINK = 5;
}

enum RpgTaleFlagType {
  RPG_TALE_FLAG_INVALID = 0;
  RPG_TALE_FLAG_MATERIAL = 1;
  RPG_TALE_FLAG_MISSION = 2;
  RPG_TALE_FLAG_DIALOG = 3;
  RPG_TALE_FLAG_ROLE = 4;
  RPG_TALE_FLAG_ROLE_STAR_NUM = 5;
  RPG_TALE_FLAG_BEGIN_TIME = 6;
  RPG_TALE_FLAG_END_TIME = 7;
  RPG_TALE_FLAG_PRE_SITE = 8;
  RPG_TALE_FLAG_MATERIAL_NUM = 9;
  RPG_TALE_FLAG_AVATAR = 10;
  RPG_TALE_FLAG_STAGE_CHALLENGE_NUM = 11;
  RPG_TALE_FLAG_PLAYER_LEVEL = 12;
  RPG_TALE_FLAG_OVERALL = 13;
  RPG_TALE_FLAG_TOTAL_STAGE_SCORE = 15;
  RPG_TALE_FLAG_STAGE_SCORE = 16;
  RPG_TALE_FLAG_ABILITY_LEVEL = 17;
  RPG_TALE_FLAG_ABILITY_TOTAL_LEVEL = 18;
  RPG_TALE_FLAG_SITE_ALLOW_ENTER = 19;
  RPG_TALE_FLAG_SITE_STATUS = 20;
  RPG_TALE_FLAG_DROP_LIMIT = 21;
  RPG_TALE_FLAG_IS_STAGE_PASSED = 22;
  RPG_TALE_FLAG_REWARD_LINE_SCORE = 23;
}

enum RpgTaleOverallCmpType {
  RPG_TALE_CMP_INVALID = 0;
  RPG_TALE_CMP_LESS = 1;
  RPG_TALE_CMP_LESS_OR_EQUAL = 2;
  RPG_TALE_CMP_EQUAL = 3;
  RPG_TALE_CMP_GREATER = 4;
  RPG_TALE_CMP_GREATER_OR_EQUAL = 5;
}

enum RpgTaleSiteStatus {
  RPG_TALE_SITE_STATUS_INVALID = 0;
  RPG_TALE_SITE_STATUS_HIDE = 1;
  RPG_TALE_SITE_STATUS_SHOW = 2;
  RPG_TALE_SITE_STATUS_CONTENT_UNLOCKED = 3;
  RPG_TALE_SITE_STATUS_PASSED = 4;
  RPG_TALE_SITE_STATUS_CLOSED = 5;
  RPG_TALE_SITE_STATUS_CD = 6;
  RPG_TALE_SITE_STATUS_DISCARD = 7;
}

enum RpgTaleRoleStatus {
  RPG_TALE_ROLE_STATUS_INVALID = 0;
  RPG_TALE_ROLE_STATUS_LOCKED = 1;
  RPG_TALE_ROLE_STATUS_UNLOCKED = 2;
  RPG_TALE_ROLE_STATUS_AWAY = 3;
}

enum RpgTaleCollectionRewardType {
  RPG_TALE_COLLECTION_REWARD_NONE = 0;
  RPG_TALE_COLLECTION_REWARD_QAVATAR_STAR = 1;
  RPG_TALE_COLLECTION_REWARD_EVENT = 2;
  RPG_TALE_COLLECTION_REWARD_SHOP = 3;
  RPG_TALE_COLLECTION_REWARD_TOTAL_STAGE_SCORE = 4;
  RPG_TALE_COLLECTION_REWARD_STAGE_CHALLENGE_NUM = 5;
  RPG_TALE_COLLECTION_REWARD_LINKED_ACTIVITY_SCORE = 6;
  RPG_TALE_COLLECTION_REWARD_STAGE_SCORE = 7;
  RPG_TALE_COLLECTION_REWARD_MATERIAL_NUM = 8;
}

enum RpgTaleLinkedActivityType {
  RPG_TALE_LINKED_NONE = 0;
  RPG_TALE_LINKED_NEWBIE = 2;
  RPG_TALE_LINKED_RPG_DUNGEON = 3;
  RPG_TALE_LINKED_RANCH = 4;
  RPG_TALE_LINKED_RESTAURANT = 5;
  RPG_TALE_LINKED_TOWN = 6;
  RPG_TALE_LINKED_MONSTER_CARD = 7;
  RPG_TALE_LINKED_DICEY_DUNGEON = 8;
  RPG_TALE_LINKED_PVZ = 9;
  RPG_TALE_LINKED_QCANDY_BATTLE = 10;
  RPG_TALE_LINKED_GLOBAL_EXPLORE = 11;
  RPG_TALE_LINKED_PLATFORM_SHOOTER = 12;
  RPG_TALE_LINKED_AVATAR_CULTIVATE = 13;
  RPG_TALE_LINKED_SUSANNA_TRIAL = 14;
  RPG_TALE_LINKED_MATCH_THREE = 15;
  RPG_TALE_LINKED_SHIGURE_KIRA = 16;
  RPG_TALE_LINKED_MAHOU_CARD = 17;
  RPG_TALE_LINKED_TILED_GAME_LUNA = 18;
  RPG_TALE_LINKED_TILED_GAME_FARM = 19;
  RPG_TALE_LINKED_MINION_CLASH = 20;
  RPG_TALE_LINKED_MARBLES_SHOOT = 21;
  RPG_TALE_LINKED_GOURMET_HUNT = 22;
  RPG_TALE_LINKED_MATCH_THREE_PLUS = 23;
  RPG_TALE_LINKED_DEVIL_AUTO_CHESS = 24;
  RPG_TALE_LINKED_TILED_GAME_SRPG = 25;
  RPG_TALE_LINKED_QRTS = 26;
  RPG_TALE_LINKED_MONSTER_CARD_PVP = 27;
  RPG_TALE_LINKED_MONSTER_FARM = 28;
  RPG_TALE_LINKED_TILED_GAME_PRPG = 29;
  RPG_TALE_LINKED_MONSTER_MORPH = 30;
  RPG_TALE_LINKED_KIANA_AUTO_CHESS = 31;
  RPG_TALE_LINKED_TILED_GAME_INN = 32;
  RPG_TALE_LINKED_TOWER_DEFENSE = 33;
}

enum RpgScheduleRankType {
  RPG_SCHEDULE_RANK_TYPE_NONE = 0;
  RPG_SCHEDULE_RANK_COLLECTION = 1;
  RPG_SCHEDULE_RANK_GENERAL = 2;
}

enum RpgTaleStageRankType {
  RPG_TALE_STAGE_RANK_TYPE_NONE = 0;
  RPG_TALE_STAGE_RANK_TYPE_MINI = 1;
  RPG_TALE_STAGE_RANK_TYPE_NORMAL = 2;
}

enum RpgTaleStageRankKeyType {
  RPG_TALE_STAGE_RANK_KEY_TYPE_NONE = 0;
  RPG_TALE_STAGE_RANK_KEY_TYPE_SCHEDULE = 1;
  RPG_TALE_STAGE_RANK_KEY_TYPE_TALE = 2;
}

enum RpgTaleOverallRefreshType {
  RPG_TALE_OVERALL_REFRESH_NONE = 0;
  RPG_TALE_OVERALL_REFRESH_DAILY = 1;
  RPG_TALE_OVERALL_REFRESH_WEEKLY = 2;
}

enum RpgTaleProgressType {
  RPG_TALE_PROGRESS_NONE = 0;
  RPG_TALE_PROGRESS_EVENT = 1;
  RPG_TALE_PROGRESS_TOWER = 2;
  RPG_TALE_PROGRESS_GENERAL_ACTIVITY = 3;
  RPG_TALE_PROGRESS_STAGE_SCORE = 4;
}

enum MatrixFloorStatus {
  MATRIX_FLOOR_STATUS_INVALID = 0;
  MATRIX_FLOOR_STATUS_LOCKED = 1;
  MATRIX_FLOOR_STATUS_UNLOCKED = 2;
  MATRIX_FLOOR_STATUS_FREE = 3;
  MATRIX_FLOOR_STATUS_IN_STAGE = 11;
  MATRIX_FLOOR_STATUS_IN_PLOT = 12;
}

enum MatrixFloorType {
  MATRIX_FLOOR_INVALID = 0;
  MATRIX_FLOOR_NORMAL = 1;
  MATRIX_FLOOR_EXPLORE = 2;
  MATRIX_FLOOR_MONOPOLY = 3;
}

enum MatrixGridType {
  MATRIX_GRID_NONE = 0;
  MATRIX_GRID_EMPTY = 1;
  MATRIX_GRID_BARRIER = 2;
  MATRIX_GRID_START = 3;
  MATRIX_GRID_ITEM = 4;
  MATRIX_GRID_MONSTER = 5;
  MATRIX_GRID_RANDOM = 6;
  MATRIX_GRID_TRAP = 7;
  MATRIX_GRID_SHOP = 8;
  MATRIX_GRID_EXIT = 9;
  MATRIX_GRID_DIALOG = 10;
  MATRIX_GRID_TELEPORT = 11;
  MATRIX_GRID_ICE = 12;
  MATRIX_GRID_INVALID = -1;
}

enum MatrixEventType {
  MATRIX_EVENT_INVALID = 0;
  MATRIX_EVENT_FINISH = 1;
  MATRIX_EVENT_CANCEL = 2;
  MATRIX_EVENT_LINK = 3;
  MATRIX_EVENT_COMPLEX = 4;
  MATRIX_EVENT_MOVE = 5;
  MATRIX_EVENT_LOTTERY = 6;
  MATRIX_EVENT_BUFF = 7;
  MATRIX_EVENT_GUESS = 8;
  MATRIX_EVENT_FORWARD = 9;
  MATRIX_EVENT_RESET_FLOOR = 10;
  MATRIX_EVENT_PLOT = 11;
  MATRIX_EVENT_STAGE = 12;
  MATRIX_EVENT_ITEM_DROP = 13;
  MATRIX_EVENT_ITEM_REWARD = 14;
  MATRIX_EVENT_TIPS = 15;
  MATRIX_EVENT_SUB_RPG_MATERIAL = 16;
  MATRIX_EVENT_RANDOM_PLOT_ONCE = 17;
  MATRIX_EVENT_RANDOM_STAGE_ONCE = 18;
  MATRIX_EVENT_RANDOM_AREA_ONCE = 19;
  MATRIX_EVENT_TRIGGER_EVENT_GROUP = 21;
  MATRIX_EVENT_PASS_RPG_TALE_SITE = 101;
  MATRIX_EVENT_UNLOCK_RPG_TALE_ROLE = 102;
  MATRIX_EVENT_AWAY_RPG_TALE_ROLE = 103;
  MATRIX_EVENT_ADD_RPG_TALE_MISSION = 104;
  MATRIX_EVENT_ADD_RPG_TALE_PHOTO = 105;
  MATRIX_EVENT_ADD_RPG_OVERALL = 106;
  MATRIX_EVENT_DEL_RPG_OVERALL = 107;
  MATRIX_EVENT_SET_RPG_OVERALL = 108;
  MATRIX_EVENT_DISCARD_RPG_TALE_SITE = 109;
  MATRIX_EVENT_NOTIFY = 110;
  MATRIX_EVENT_MATRIX_FLOOR = 111;
  MATRIX_EVENT_MONOPOLY = 112;
  MATRIX_EVENT_RPG_DUNGEON = 113;
  MATRIX_EVENT_RPG_DUNGEON_BUFF = 114;
  MATRIX_EVENT_ROGUE_TOWER_HP_HEAL = 115;
  MATRIX_EVENT_ROGUE_TOWER_HP_HEAL_NO_EXTRA = 116;
  MATRIX_EVENT_ROGUE_TOWER_ADD_COIN = 117;
  MATRIX_EVENT_ROGUE_TOWER_SUB_COIN = 118;
  MATRIX_EVENT_ROGUE_TOWER_GET_RANDOM_BUFF = 119;
  MATRIX_EVENT_ROGUE_TOWER_LEVEL_UP_RANDOM_BUFF = 120;
  MATRIX_EVENT_ROGUE_TOWER_HP_COST = 121;
  MATRIX_EVENT_ROGUE_TOWER_SUPPORT_LEVELUP_TIMES = 122;
  MATRIX_EVENT_RANCH_UNLOCK_AREA = 123;
  MATRIX_EVENT_RANCH_STAGE = 124;
  MATRIX_EVENT_TOWN = 125;
  MATRIX_EVENT_DICEY_DUNGEON = 126;
  MATRIX_EVENT_PVZ_ADD_QAVATAR = 127;
  MATRIX_EVENT_QCANDY_ADD_AVATAR = 128;
  MATRIX_EVENT_PLATFORM_SHOOTER_ADD_AVATAR = 129;
  MATRIX_EVENT_SUSANNA_TRIAL_PASS_SITE = 130;
  MATRIX_EVENT_MATCH_THREE_ENTER_ROOM = 131;
  MATRIX_EVENT_MAHOU_CARD_ENTER_SITE = 132;
  MATRIX_EVENT_MAHOU_CARD_ENTER_SITE_FROM_AVATAR = 133;
  MATRIX_EVENT_TILED_GAME_FARM_FINISH_AVATAR_SCENE = 134;
  MATRIX_EVENT_MARBLES_SHOOT_ADD_AVATAR = 135;
  MATRIX_EVENT_GOURMET_HUNT_FORCE_REFRESH_DAILY_QUEST = 136;
  MATRIX_EVENT_GOURMET_HUNT_GRANT_DAILY_QUEST_REWARD = 137;
  MATRIX_EVENT_TILED_GAME_SRPG_ADD_AVATAR = 138;
  MATRIX_EVENT_TILED_GAME_SRPG_TRY_REFRESH_DAILY_QUEST = 140;
  MATRIX_EVENT_TILED_GAME_SRPG_REPLACE_AVATAR = 141;
  MATRIX_EVENT_TILED_GAME_MONSTER_FARM_BUILDING_LEVEL_UP = 142;
  MATRIX_EVENT_TILED_GAME_MONSTER_FARM_FINISH_PRIVILEGE = 144;
  MATRIX_EVENT_TILED_GAME_INN_UNLOCK_STAFF = 145;
  MATRIX_EVENT_TILED_GAME_INN_UNLOCK_SITE = 146;
  MATRIX_EVENT_TILED_GAME_INN_UNLOCK_DISH = 147;
  MATRIX_EVENT_TILED_GAME_INN_UNLOCK_FOOD = 148;
  MATRIX_EVENT_TILED_GAME_INN_UNLOCK_INSPIRATION = 149;
  MATRIX_EVENT_AWAY_VIRTUAL_AVATAR = 171;
  MATRIX_EVENT_BACK_VIRTUAL_AVATAR = 172;
  MATRIX_EVENT_CLIENT = 200;
  MATRIX_EVENT_TILE_MARK = 201;
  MATRIX_EVENT_SET_STAGE_SCORE = 302;
}

enum MatrixEventPlotRequirementType {
  MATRIX_EVENT_PLOT_REQUIREMENT_INVALID = 0;
  MATRIX_EVENT_PLOT_REQUIREMENT_MATERIAL = 1;
  MATRIX_EVENT_PLOT_REQUIREMENT_MISSION = 2;
  MATRIX_EVENT_PLOT_REQUIREMENT_DIALOG = 3;
  MATRIX_EVENT_PLOT_REQUIREMENT_FLOOR_EVENT = 4;
}

enum MatrixTriggerType {
  MATRIX_TRIGGER_NONE = 0;
  MATRIX_TRIGGER_STEP_NUM_GE = 1;
  MATRIX_TRIGGER_POSITION = 2;
  MATRIX_TRIGGER_STEP_NUM_LE = 3;
}

enum DiceType {
  DICE_TYPE_NONE = 0;
  DICE_TYPE_RANDOM = 1;
  DICE_TYPE_FIXED = 2;
  DICE_TYPE_FORWARD = 3;
}

enum MatrixFingerType {
  MATRIX_FINGER_NONE = 0;
  MATRIX_FINGER_SCISSORS = 1;
  MATRIX_FINGER_STONE = 2;
  MATRIX_FINGER_CLOTH = 3;
}

enum MatrixMonopolyBuffType {
  MATRIX_MONOPOLY_BUFF_NONE = 0;
  MATRIX_MONOPOLY_BUFF_DICE = 1;
  MATRIX_MONOPOLY_BUFF_STAGE = 2;
  MATRIX_MONOPOLY_BUFF_DROP = 3;
}

enum RpgTaleTicketRefreshType {
  RPG_TALE_TICKET_REFRESH_TYPE_NONE = 0;
  RPG_TALE_TICKET_REFRESH_DAILY = 1;
  RPG_TALE_TICKET_REFRESH_WEEKLY = 2;
  RPG_TALE_TICKET_REFRESH_CUSTOM = 3;
  RPG_TALE_TICKET_REFRESH_DAILY_WITH_STORAGE = 4;
}

enum RpgTaleSiteType {
  RPG_TALE_SITE_TYPE_NONE = 0;
  RPG_TALE_SITE_TYPE_STORY = 1;
  RPG_TALE_SITE_TYPE_CLUE = 2;
  RPG_TALE_SITE_TYPE_CYCLE = 3;
  RPG_TALE_SITE_TYPE_RANK = 4;
  RPG_TALE_SITE_TYPE_ENDLESS = 5;
}

// CmdID: 6300
message GetScDLCReq {
}

message FeverSkillSuite {
  uint32 suite_id = 1;
  string suite_name = 2;
  repeated uint32 skill_chip_id_list = 3;
}

message ScDLCFever {
  uint32 level = 1;
  uint32 exp = 2;
  uint32 fever_slot_num = 3;
  uint32 has_take_reward_level = 4;
  repeated FeverSkillSuite skill_suite_list = 5;
  uint32 active_suite_id = 6;
}

message ScDLCTalent {
  uint32 talent_id = 1;
  uint32 talent_level = 2;
}

message ScDLCAvatar {
  uint32 avatar_id = 1;
  uint32 level = 2;
  repeated ScDLCTalent talent_list = 3;
  repeated uint32 equip_talent_list = 4;
}

message ScDLCSupportNPC {
  uint32 npc_id = 1;
  uint32 exp = 2;
  uint32 level = 3;
}

message ScDLCDailyQuestData {
  repeated OpenworldQuest quest_list = 1;
  uint32 left_accept_times = 2;
  uint32 refresh_left_times = 3;
  uint32 refresh_cost_material_id = 4;
  uint32 refresh_cost_material_num = 5;
}

message ScDLCAchievement {
  uint32 mission_id = 1;
  uint32 finish_time = 2;
}

// CmdID: 6301
message GetScDLCRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetScDLCRsp.Retcode retcode = 1;
  ScDLCFever fever = 2;
  repeated ScDLCAvatar avatar_list = 3;
  repeated ScDLCSupportNPC npc_list = 4;
  ScDLCDailyQuestData daily_quest_data = 5;
  string name = 6;
  repeated ScDLCAchievement achievement_list = 7;
  uint32 max_challenge_reward_take_progress = 8;
  repeated uint32 active_fever_ability_group_id_list = 9;
  uint32 max_active_fever_ability_group_num = 10;
}

// CmdID: 6304
message UpdateScDLCFeverSuiteReq {
  uint32 suite_id = 1;
  string suite_name = 2;
  repeated uint32 skill_chip_id_list = 3;
}

// CmdID: 6305
message UpdateScDLCFeverSuiteRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    SENSITIVE_WORDS = 2;
    SLOT_LACK = 3;
    INVALID_SKILL_CHIP = 4;
    NAME_FORMAT_ERROR = 5;
  }

  UpdateScDLCFeverSuiteRsp.Retcode retcode = 1;
}

// CmdID: 6306
message ActiveScDLCFeverSuiteReq {
  uint32 suite_id = 1;
}

// CmdID: 6307
message ActiveScDLCFeverSuiteRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  ActiveScDLCFeverSuiteRsp.Retcode retcode = 1;
}

// CmdID: 6308
message AddScDLCSupportNPCExpReq {
  uint32 npc_id = 1;
  uint32 material_id = 2;
}

// CmdID: 6309
message AddScDLCSupportNPCExpRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MATERIAL_LACK = 2;
    NPC_ERROR = 3;
    MATERIAL_ERROR = 4;
  }

  AddScDLCSupportNPCExpRsp.Retcode retcode = 1;
}

// CmdID: 6310
message LevelUpScDLCAvatarReq {
  uint32 avatar_id = 1;
}

// CmdID: 6311
message LevelUpScDLCAvatarRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MATERIAL_LACK = 2;
    AVATAR_NOT_EXIST = 3;
    FEVER_LEVEL_LACK = 4;
  }

  LevelUpScDLCAvatarRsp.Retcode retcode = 1;
}

// CmdID: 6312
message LevelUpScDLCTalentReq {
  uint32 avatar_id = 1;
  uint32 talent_id = 2;
}

// CmdID: 6313
message LevelUpScDLCTalentRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    AVATAR_ERROR = 2;
    TALENT_ERROR = 3;
    TARGET_LEVEL_ERROR = 4;
    FEVER_LEVEL_LACK = 5;
    PRE_TALENT_LACK = 6;
    MATERIAL_LACK = 7;
  }

  LevelUpScDLCTalentRsp.Retcode retcode = 1;
}

// CmdID: 6314
message EquipScDLCAvatarTalentReq {
  uint32 avatar_id = 1;
  repeated uint32 equip_talent_list = 2;
}

// CmdID: 6315
message EquipScDLCAvatarTalentRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    AVATAR_ERROR = 2;
    TALENT_ERROR = 3;
    TALENT_TAG_REPEAT = 4;
  }

  EquipScDLCAvatarTalentRsp.Retcode retcode = 1;
}

// CmdID: 6316
message GetScDLCSelectDailyQuestReq {
}

// CmdID: 6317
message GetScDLCSelectDailyQuestRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetScDLCSelectDailyQuestRsp.Retcode retcode = 1;
  repeated OpenworldQuest quest_list = 2;
}

// CmdID: 6318
message RefreshScDLCDailyQuestReq {
}

// CmdID: 6319
message RefreshScDLCDailyQuestRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MATERIAL_LACK = 2;
  }

  RefreshScDLCDailyQuestRsp.Retcode retcode = 1;
  repeated OpenworldQuest quest_list = 2;
}

// CmdID: 6320
message AcceptScDLCDailyQuestReq {
  uint32 quest_id = 1;
}

// CmdID: 6321
message AcceptScDLCDailyQuestRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    QUEST_ERROR = 2;
    STAMINA_LACK = 3;
    ACCEPT_TIMES_LACK = 4;
    SLOT_LACK = 5;
  }

  AcceptScDLCDailyQuestRsp.Retcode retcode = 1;
  OpenworldQuest quest = 2;
}

// CmdID: 6322
message FinishScDLCDailyQuestReq {
  uint32 quest_id = 1;
  uint32 cost_time = 2;
  repeated uint32 finish_challenge_list = 3;
}

// CmdID: 6323
message FinishScDLCDailyQuestRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    QUEST_NOT_EXIST = 2;
    QUEST_NOT_DOING = 3;
  }

  FinishScDLCDailyQuestRsp.Retcode retcode = 1;
  uint32 quest_id = 2;
  uint32 cost_time = 3;
  repeated uint32 finish_challenge_list = 4;
}

// CmdID: 6324
message TakeScDLCDailyQuestRewardReq {
  uint32 quest_id = 1;
}

// CmdID: 6325
message TakeScDLCDailyQuestRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    QUEST_NOT_EXIST = 2;
    NOT_FINISH = 3;
  }

  TakeScDLCDailyQuestRewardRsp.Retcode retcode = 1;
  uint32 quest_id = 2;
  RewardData reward_data = 3;
}

// CmdID: 6326
message ModifyScDLCNameReq {
  string name = 1;
}

// CmdID: 6327
message ModifyScDLCNameRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    FORMAT_ERROR = 2;
    SENSITIVE_WORDS = 3;
  }

  ModifyScDLCNameRsp.Retcode retcode = 1;
}

// CmdID: 6328
message TakeScDLCChallengeRewardReq {
}

// CmdID: 6329
message TakeScDLCChallengeRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NO_REWARD = 2;
  }

  TakeScDLCChallengeRewardRsp.Retcode retcode = 1;
  repeated RewardData reward_list = 2;
}

// CmdID: 6330
message FinishScDLCPlotReq {
  uint32 id = 1;
}

// CmdID: 6331
message FinishScDLCPlotRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  FinishScDLCPlotRsp.Retcode retcode = 1;
}

message ScDLCTowerAvatarInfo {
  uint32 avatar_id = 1;
  uint32 hp_percent = 2;
  uint32 sp_percent = 3;
}

// CmdID: 6332
message GetScDLCTowerReq {
}

// CmdID: 6333
message GetScDLCTowerRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  GetScDLCTowerRsp.Retcode retcode = 1;
  uint32 schedule_id = 2;
  uint32 cur_floor = 3;
  uint32 max_floor = 4;
  repeated ScDLCTowerAvatarInfo avatar_info_list = 5;
  uint32 max_score = 6;
  uint32 avatar_revive_times = 7;
  uint32 sc_dlc_fever_score = 8;
  uint32 sc_dlc_climax_score = 9;
  uint32 max_can_sweep_floor = 10;
}

// CmdID: 6334
message ScDLCTowerStageBeginReq {
  repeated uint32 avatar_id_list = 1;
  uint32 support_avatar_id = 2;
  string report_ext = 3;
}

// CmdID: 6335
message ScDLCTowerStageBeginRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_BEGIN = 2;
    PROGRESS_FULL = 3;
    AVATAR_ERROR = 4;
    AVATAR_DIE = 5;
    NOT_OPEN = 6;
    SUPPORT_AVATAR_ERROR = 7;
    FLOOR_ERROR = 8;
    STORY_NOT_FINISH = 9;
  }

  ScDLCTowerStageBeginRsp.Retcode retcode = 1;
  uint32 cur_floor = 2;
}

// CmdID: 6336
message ScDLCTowerStageEndReq {
  StageEndStatus end_status = 1;
  uint32 floor = 2;
  uint32 score = 3;
  repeated ScDLCTowerAvatarInfo avatar_info_list = 4;
  repeated DropItem drop_item_list = 5;
  uint32 sc_dlc_fever_score = 6;
  uint32 sc_dlc_climax_score = 7;
  string report_ext = 8;
}

// CmdID: 6337
message ScDLCTowerStageEndRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_BEGIN = 2;
    FLOOR_ERROR = 3;
    AVATAR_ERROR = 4;
  }

  ScDLCTowerStageEndRsp.Retcode retcode = 1;
  RewardData reward_data = 2;
  uint32 score = 3;
  uint32 floor = 4;
  uint32 settle_floor = 5;
}

// CmdID: 6338
message GetScDLCTowerRankReq {
}

// CmdID: 6339
message GetScDLCTowerRankRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetScDLCTowerRankRsp.Retcode retcode = 1;
  uint32 rank_percent = 2;
  uint32 rank = 3;
}

// CmdID: 6340
message ScDLCTowerScheduleRewardNotify {
  uint32 score = 1;
  RewardData reward_data = 2;
}

// CmdID: 6341
message ScDLCReviveAvatarReq {
  uint32 avatar_id = 1;
  string report_ext = 2;
}

// CmdID: 6342
message ScDLCReviveAvatarRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    AVATAR_ERROR = 2;
    MATERIAL_LACK = 3;
  }

  ScDLCReviveAvatarRsp.Retcode retcode = 1;
}

// CmdID: 6343
message ScDLCTowerReviveAvatarReq {
  string report_ext = 1;
}

// CmdID: 6344
message ScDLCTowerReviveAvatarRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    REVIVE_TIMES_LACK = 2;
    NOT_IN_TOWER = 3;
    MATERIAL_LACK = 4;
  }

  ScDLCTowerReviveAvatarRsp.Retcode retcode = 1;
  uint32 revive_times = 2;
}

// CmdID: 6345
message ScDLCActiveFeverAbilityReq {
  repeated uint32 ability_group_id_list = 1;
}

// CmdID: 6346
message ScDLCActiveFeverAbilityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ACTIVE_NUM_LIMIT = 2;
    ACTIVE_LIST_EMPTY = 3;
    GROUP_INVALID = 4;
  }

  ScDLCActiveFeverAbilityRsp.Retcode retcode = 1;
}

// CmdID: 6347
message ScDLCSweepTowerReq {
}

// CmdID: 6348
message ScDLCSweepTowerRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    CANNOT_SWEEP = 2;
  }

  ScDLCSweepTowerRsp.Retcode retcode = 1;
  repeated RewardData reward_list = 2;
}

enum CmdTypeScdlc {
  CMD_TYPE_SCDLC_NONE = 0;
  CMD_GET_SC_DLC_REQ = 6300;
  CMD_GET_SC_DLC_RSP = 6301;
  CMD_UPDATE_SC_DLC_FEVER_SUITE_REQ = 6304;
  CMD_UPDATE_SC_DLC_FEVER_SUITE_RSP = 6305;
  CMD_ACTIVE_SC_DLC_FEVER_SUITE_REQ = 6306;
  CMD_ACTIVE_SC_DLC_FEVER_SUITE_RSP = 6307;
  CMD_ADD_SC_DLC_SUUPORT_NPC_EXP_REQ = 6308;
  CMD_ADD_SC_DLC_SUUPORT_NPC_EXP_RSP = 6309;
  CMD_LEVEL_UP_SC_DLC_AVATAR_REQ = 6310;
  CMD_LEVEL_UP_SC_DLC_AVATAR_RSP = 6311;
  CMD_LEVEL_UP_SC_DLC_TALENT_REQ = 6312;
  CMD_LEVEL_UP_SC_DLC_TALENT_RSP = 6313;
  CMD_EQUIP_SC_DLC_AVATAR_TALENT_REQ = 6314;
  CMD_EQUIP_SC_DLC_AVATAR_TALENT_RSP = 6315;
  CMD_GET_SC_DLC_SELECT_DAILY_QUEST_REQ = 6316;
  CMD_GET_SC_DLC_SELECT_DAILY_QUEST_RSP = 6317;
  CMD_REFRESH_SC_DLC_DAILY_QUEST_REQ = 6318;
  CMD_REFRESH_SC_DLC_DAILY_QUEST_RSP = 6319;
  CMD_ACCEPT_SC_DLC_DAILY_QUEST_REQ = 6320;
  CMD_ACCEPT_SC_DLC_DAILY_QUEST_RSP = 6321;
  CMD_FINISH_SC_DLC_DAILY_QUEST_REQ = 6322;
  CMD_FINISH_SC_DLC_DAILY_QUEST_RSP = 6323;
  CMD_TAKE_SC_DLC_DAILY_QUEST_REWARD_REQ = 6324;
  CMD_TAKE_SC_DLC_DAILY_QUEST_REWARD_RSP = 6325;
  CMD_MODIFY_SC_DLC_NAME_REQ = 6326;
  CMD_MODIFY_SC_DLC_NAME_RSP = 6327;
  CMD_TAKE_SC_DLC_CHALLENGE_REWARD_REQ = 6328;
  CMD_TAKE_SC_DLC_CHALLENGE_REWARD_RSP = 6329;
  CMD_FINISH_SC_DLC_PLOT_REQ = 6330;
  CMD_FINISH_SC_DLC_PLOT_RSP = 6331;
  CMD_GET_SC_DLC_TOWER_REQ = 6332;
  CMD_GET_SC_DLC_TOWER_RSP = 6333;
  CMD_SC_DLC_TOWER_STAGE_BEGIN_REQ = 6334;
  CMD_SC_DLC_TOWER_STAGE_BEGIN_RSP = 6335;
  CMD_SC_DLC_TOWER_STAGE_END_REQ = 6336;
  CMD_SC_DLC_TOWER_STAGE_END_RSP = 6337;
  CMD_GET_SC_DLC_TOWER_RANK_REQ = 6338;
  CMD_GET_SC_DLC_TOWER_RANK_RSP = 6339;
  CMD_SC_DLC_TOWER_SCHEDULE_REWARD_NOTIFY = 6340;
  CMD_SC_DLC_REVIVE_AVATAR_REQ = 6341;
  CMD_SC_DLC_REVIVE_AVATAR_RSP = 6342;
  CMD_SC_DLC_TOWER_REVIVE_AVATAR_REQ = 6343;
  CMD_SC_DLC_TOWER_REVIVE_AVATAR_RSP = 6344;
  CMD_SC_DLC_ACTIVE_FEVER_ABILITY_REQ = 6345;
  CMD_SC_DLC_ACTIVE_FEVER_ABILITY_RSP = 6346;
  CMD_SC_DLC_SWEEP_TOWER_REQ = 6347;
  CMD_SC_DLC_SWEEP_TOWER_RSP = 6348;
  CMD_SCDLC_DUMMY = 6449;
}

// CmdID: 5002
message UpdateClientSettingNotify {
  uint32 id = 1;
  bytes data = 3;
}

// CmdID: 5003
message CommonCdCheckNotify {
  uint32 end_time = 1;
}

// CmdID: 5004
message AntiAddictNotify {
  enum AntiAddictMsgType {
    ANTI_ADDICT_MSG_ERROR = 0;
    ANTI_ADDICT_MSG_ANTI_ADDICT = 1;
    ANTI_ADDICT_MSG_SHOULD_BIND_ACCOUNT = 2;
  }

  AntiAddictNotify.AntiAddictMsgType msg_type = 1;
  string msg = 2;
  string level = 3;
}

// CmdID: 5005
message SensitiveWordCheckReq {
  string content = 1;
}

// CmdID: 5006
message SensitiveWordCheckRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    SENSITIVE_WORDS = 2;
  }

  SensitiveWordCheckRsp.Retcode retcode = 1;
}

// CmdID: 5007
message KickOutPlayerNotify {
  enum KickOutReason {
    REASON_NONE = 0;
    REASON_MTP_ERROR = 1;
    REASON_PLATFORM_ERROR = 2;
    REASON_SQUEEZE = 3;
    REASON_LOGIN_UNFINISH = 4;
  }

  KickOutPlayerNotify.KickOutReason reason = 1;
}

// CmdID: 5008
message ClientReportReq {
  string report_type = 1;
  string report_value = 2;
}

// CmdID: 5009
message ClientReportRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  ClientReportRsp.Retcode retcode = 1;
}

// CmdID: 5010
message GetAuthkeyReq {
  string auth_appid = 1;
  uint32 sign_type = 2;
  uint32 authkey_ver = 3;
}

// CmdID: 5011
message GetAuthkeyRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    SIGN_TYPE_ERROR = 2;
    AUTHKEY_VER_ERROR = 3;
  }

  GetAuthkeyRsp.Retcode retcode = 1;
  string authkey = 2;
  string auth_appid = 3;
  uint32 sign_type = 4;
  uint32 authkey_ver = 5;
}

// CmdID: 5012
message ClientReportBinReq {
  ClientReportBinType report_type = 1;
  repeated bytes report_bin_list = 2;
}

// CmdID: 5013
message ClientReportBinRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  ClientReportBinRsp.Retcode retcode = 1;
}

// CmdID: 5014
message NetTestReq {
  bool is_gate_test = 1;
  uint64 req_time = 2;
  repeated uint32 test_uint_list = 3;
  repeated string test_str_list = 4;
}

// CmdID: 5015
message NetTestRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  NetTestRsp.Retcode retcode = 1;
  bool is_gate_test = 2;
  uint64 req_time = 3;
  repeated uint32 test_uint_list = 4;
  repeated string test_str_list = 5;
}

message SecurityPasswordInfo {
  int32 remain_fail_times = 1;
}

// CmdID: 5021
message GetSecurityPasswordReq {
}

// CmdID: 5022
message GetSecurityPasswordRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  GetSecurityPasswordRsp.Retcode retcode = 1;
  SecurityPasswordStatus status = 2;
  SecurityPasswordDeviceStatus device_status = 3;
  uint32 reset_end_time = 4;
  string salt = 5;
}

// CmdID: 5023
message SetSecurityPasswordReq {
  string password = 1;
}

// CmdID: 5024
message SetSecurityPasswordRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    IS_NOT_OFTEN_DEVICE = 2;
    ALREADY_SET = 3;
  }

  SetSecurityPasswordRsp.Retcode retcode = 1;
}

// CmdID: 5025
message ChangeSecurityPasswordReq {
  string old_password = 1;
  string new_password = 2;
}

// CmdID: 5026
message ChangeSecurityPasswordRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    TOO_MANY_FAILS = 2;
    IS_IN_RESETTING = 3;
    WRONG_PASSWORD = 4;
  }

  ChangeSecurityPasswordRsp.Retcode retcode = 1;
  SecurityPasswordInfo security_password_info = 2;
}

// CmdID: 5027
message UnlockDeviceSecurityPasswordReq {
  string password = 1;
}

// CmdID: 5028
message UnlockDeviceSecurityPasswordRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    TOO_MANY_FAILS = 2;
    WRONG_PASSWORD = 3;
  }

  UnlockDeviceSecurityPasswordRsp.Retcode retcode = 1;
  SecurityPasswordInfo security_password_info = 2;
}

// CmdID: 5029
message SecurityPasswordOpReq {
  string password = 1;
  SecurityPasswordOpType op_type = 2;
  repeated uint32 para_list = 3;
}

// CmdID: 5030
message SecurityPasswordOpRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    TOO_MANY_FAILS = 2;
    WRONG_PASSWORD = 3;
  }

  SecurityPasswordOpRsp.Retcode retcode = 1;
  SecurityPasswordOpType op_type = 2;
  SecurityPasswordInfo security_password_info = 3;
}

// CmdID: 5031
message ResetSecurityPasswordReq {
  bool is_withdraw = 1;
}

// CmdID: 5032
message ResetSecurityPasswordRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    IS_ALREADY_RESETTING = 2;
  }

  ResetSecurityPasswordRsp.Retcode retcode = 1;
}

// CmdID: 5033
message SecurityPasswordRejectionNotify {
}

enum CmdTypeSecurity {
  CMD_TYPE_SECURITY_NONE = 0;
  CMD_UPDATE_CLIENT_SETTING_NOTIFY = 5002;
  CMD_COMMON_CD_CHECK_NOTIFY = 5003;
  CMD_ANTI_ADDICT_NOTIFY = 5004;
  CMD_SENSITIVE_WORD_CHECK_REQ = 5005;
  CMD_SENSITIVE_WORD_CHECK_RSP = 5006;
  CMD_KICK_OUT_PLAYER_NOTIFY = 5007;
  CMD_CLIENT_REPORT_REQ = 5008;
  CMD_CLIENT_REPORT_RSP = 5009;
  CMD_GET_AUTHKEY_REQ = 5010;
  CMD_GET_AUTHKEY_RSP = 5011;
  CMD_CLIENT_REPORT_BIN_REQ = 5012;
  CMD_CLIENT_REPORT_BIN_RSP = 5013;
  CMD_NET_TEST_REQ = 5014;
  CMD_NET_TEST_RSP = 5015;
  CMD_GET_SECURITY_PASSWORD_REQ = 5021;
  CMD_GET_SECURITY_PASSWORD_RSP = 5022;
  CMD_SET_SECURITY_PASSWORD_REQ = 5023;
  CMD_SET_SECURITY_PASSWORD_RSP = 5024;
  CMD_CHANGE_SECURITY_PASSWORD_REQ = 5025;
  CMD_CHANGE_SECURITY_PASSWORD_RSP = 5026;
  CMD_UNLOCK_DEVICE_SECURITY_PASSWORD_REQ = 5027;
  CMD_UNLOCK_DEVICE_SECURITY_PASSWORD_RSP = 5028;
  CMD_SECURITY_PASSWORD_OP_REQ = 5029;
  CMD_SECURITY_PASSWORD_OP_RSP = 5030;
  CMD_RESET_SECURITY_PASSWORD_REQ = 5031;
  CMD_RESET_SECURITY_PASSWORD_RSP = 5032;
  CMD_SECURITY_PASSWORD_REJECTION_NOTIFY = 5033;
}

enum AntiOfflineReportStatus {
  ANTI_OFFLINE_REPORT_CORRECT = 0;
  ANTI_OFFLINE_REPORT_ERROR = 1;
  ANTI_OFFLINE_REPORT_TIMEOUT = 2;
  ANTI_OFFLINE_REPORT_SOON_LOGOUT = 3;
  ANTI_OFFLINE_REPORT_UNEXPECTED = 4;
}

enum AuthkeySignType {
  AUTHKEY_SIGN_TYPE_NONE = 0;
  AUTHKEY_SIGN_TYPE_DEFAULT = 1;
  AUTHKEY_SIGN_TYPE_RSA = 2;
}

enum ClientReportBinType {
  CLIENT_REPORT_BIN_INVALID = 0;
  CLIENT_REPORT_BIN_AVATAR_DETAIL = 1;
  CLIENT_REPORT_BIN_ATTACK_SNAPSHOT = 2;
}

enum SecurityPasswordStatus {
  SECURITY_PASSWORD_NOT_SET = 0;
  SECURITY_PASSWORD_IS_SET = 1;
  SECURITY_PASSWORD_TOO_MANY_FAILS = 2;
}

enum SecurityPasswordDeviceStatus {
  SECURITY_PASSWORD_DEVICE_UNLOCKED = 0;
  SECURITY_PASSWORD_DEVICE_LOCKED = 1;
}

enum SecurityPasswordOpType {
  SECURITY_PASSWORD_NONE_OP = 0;
  SECURITY_PASSWORD_FAST_UNPROTECT_WEAPON = 1;
  SECURITY_PASSWORD_FAST_UNPROTECT_STIGMATA = 2;
}

message BuyGoodsCost {
  uint32 hcoin_cost = 1;
  uint32 scoin_cost = 2;
  uint32 mcoin_cost = 3;
  repeated Material cost_item_list = 4;
}

message GoodsDiscount {
  uint32 begin_time = 1;
  uint32 end_time = 2;
  uint32 discount = 3;
  BuyGoodsCost goods_cost = 4;
}

message Goods {
  enum RefreshTimeType {
    SHOP_TYPE = 0;
    DAY_TYPE = 1;
    WEEK_TYPE = 2;
    MONTH_TYPE = 3;
    VERSION_TYPE = 4;
    DOUBLE_WEEK_TYPE = 5;
  }

  enum ShowType {
    SHOW_TYPE_NONE = 0;
    NORMAL_SHOW = 1;
    LOCK_SHOW = 2;
  }

  uint32 goods_id = 1;
  uint32 buy_times = 2;
  bool can_be_refresh = 3;
  Goods.RefreshTimeType refresh_time_type = 4;
  uint32 begin_time = 6;
  uint32 end_time = 7;
  Goods.ShowType show_type = 8;
  string unlock_tips = 9;
  uint32 prepare_time = 10;
  uint32 sort_id = 11;
  string product_name = 12;
  uint32 product_id = 13;
  uint32 product_price = 14;
  string show_setting_str = 15;
  uint32 show_new_tag = 16;
  repeated uint32 mall_anchor_list = 17;
  bool is_ignore = 18;
  uint32 unlock_type = 19;
  uint32 unlock_para_int = 20;
  string unlock_para_str = 21;
  uint32 prepare_level = 22;
  uint32 min_level = 23;
  uint32 max_level = 24;
  GoodsDiscount discount = 25;
  bool is_popup = 26;
  bool is_hide_price = 27;
  uint32 max_buy_type = 28;
}

message Shop {
  uint32 shop_id = 1;
  bool is_open = 2;
  string text_map_name = 3;
  string shop_icon_path = 4;
  repeated Goods goods_list = 5;
  uint32 next_auto_refresh_time = 6;
  uint32 manual_refresh_times = 7;
  uint32 refresh_item = 8;
  uint32 next_refresh_cost = 9;
  uint32 max_manual_refresh_times = 10;
  uint32 shop_type = 11;
  repeated uint32 currency_list = 12;
  uint32 schedule_change_time = 13;
  string shop_name = 14;
  uint32 unlock_level = 15;
  repeated uint32 all_goods_id_list = 16;
  uint32 begin_time = 17;
  uint32 end_time = 18;
  bool is_hot = 19;
  uint32 multi_currency = 20;
  bool is_double_confirm = 21;
  bool is_show = 22;
  uint32 sort_priority = 23;
  repeated uint32 toolbar_currency_list = 24;
  repeated uint32 new_currency_list = 25;
  uint32 free_manual_refresh_times = 26;
}

// CmdID: 6700
message GetShopListReq {
}

// CmdID: 6701
message GetShopListRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetShopListRsp.Retcode retcode = 1;
  repeated Shop shop_list = 2;
  bool is_all = 3;
}

// CmdID: 6702
message GetShoppingMallListReq {
}

message EffectiveGiftGoodsData {
  uint32 goods_id = 1;
  uint32 expire_time = 2;
}

// CmdID: 6703
message GetShoppingMallListRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetShoppingMallListRsp.Retcode retcode = 1;
  repeated Shop shop_list = 2;
  repeated EffectiveGiftGoodsData effective_gift_goods_list = 3;
}

// CmdID: 6704
message GetSingleShopWithoutRefreshReq {
  uint32 shop_id = 1;
}

// CmdID: 6705
message GetSingleShopWithoutRefreshRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  GetSingleShopWithoutRefreshRsp.Retcode retcode = 1;
  Shop shop = 2;
}

message Product {
  string name = 1;
  string desc = 2;
  ProductType type = 3;
  uint32 pay_hcoin = 4;
  uint32 free_hcoin = 5;
  uint32 price = 6;
  uint32 left_buy_times = 7;
  uint32 card_daily_hcoin = 8;
  uint32 card_left_days = 9;
  bool is_forbid_by_itunes_small_order = 10;
  repeated RewardData box_reward_list = 11;
  bool is_itunes_box_subscription = 12;
  uint32 card_activity_daily_hcoin = 13;
  bool is_add_hcoin = 14;
  uint32 end_time = 15;
  uint32 sort_priority = 16;
  bool is_show_pic = 17;
  string pic_path = 18;
  string detail = 19;
  uint32 id = 20;
  uint32 mcoin = 21;
  uint32 product_goods_id = 22;
  string price_tier = 23;
}

// CmdID: 6706
message GetProductListReq {
}

message FoundationData {
  string product_name = 1;
  repeated uint32 has_take_reward_level_list = 2;
}

// CmdID: 6707
message GetProductListRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    DEVICE_ERROR = 2;
  }

  GetProductListRsp.Retcode retcode = 1;
  repeated Product product_list = 2;
  uint32 next_random_box_product_refresh_time = 3;
  uint32 next_limit_product_refresh_time = 4;
  repeated FoundationData foundation_list = 5;
}

// CmdID: 6708
message ManualRefreshShopReq {
  uint32 shop_id = 1;
}

// CmdID: 6709
message ManualRefreshShopRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    SHOP_NOT_EXIST = 2;
    REFRESH_TIMES_LACK = 3;
    HCOIN_LACK = 4;
    SHOP_CLOSE = 5;
    NO_NEED_REFRESH = 6;
    MATERIAL_LACK = 7;
  }

  ManualRefreshShopRsp.Retcode retcode = 1;
}

// CmdID: 6710
message GetRecommendGoodsReq {
}

message RecommendGoods {
  uint32 shop_id = 1;
  Goods goods = 2;
  string banner_bg = 3;
  uint32 accurate_deliver_schedule_id = 4;
}

// CmdID: 6711
message GetRecommendGoodsRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetRecommendGoodsRsp.Retcode retcode = 1;
  repeated RecommendGoods recommend_goods_list = 2;
}

// CmdID: 6714
message BuyGoodsReq {
  uint32 shop_id = 1;
  uint32 goods_id = 2;
  uint32 coupon_material_id = 3;
  uint32 coupon_num = 4;
  uint32 mcoin_coupon_material_id = 5;
  uint32 goods_num = 6;
  uint32 gift_pack_select_reward_id = 7;
  uint32 discount_save_num = 8;
  uint32 auto_open_select_reward_id = 9;
}

// CmdID: 6715
message BuyGoodsRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    GOODS_NOT_EXIST = 2;
    BUY_TIMES_LACK = 3;
    MONEY_LACK = 4;
    EQUIPMENT_FULL = 5;
    SHOP_CLOSE = 6;
    SHOP_OVERDUE = 7;
    GIFT_GOODS_EFFECT = 8;
    GOODS_LOCKED = 9;
    COUPON_ERROR = 10;
    COUPON_LACK = 11;
    FEATURE_CLOSED = 12;
    MCOIN_LIMIT = 13;
    GLOBAL_GOODS_NUM_LIMIT = 14;
    NOT_IN_DISCOUNT = 15;
    IN_DISCOUNT = 16;
    DISCOUNT_ERROR = 17;
  }

  BuyGoodsRsp.Retcode retcode = 1;
  uint32 shop_id = 2;
  uint32 goods_id = 3;
  uint32 goods_buy_times = 4;
  uint32 item_id = 5;
  uint32 level = 6;
  uint32 num = 7;
  uint32 gift_pack_select_reward_id = 8;
  uint32 split_fragment_num = 9;
}

message ShopGoodsInfo {
  uint32 goods_id = 1;
  uint32 sell_num = 2;
}

// CmdID: 6716
message GlobalShopGoodsInfoNotify {
  repeated ShopGoodsInfo shop_goods_list = 1;
}

message VipReward {
  uint32 vip_level = 1;
  uint32 pay_hcoin = 2;
  repeated uint32 reward_id_list = 3;
  uint32 reward_batch = 4;
  repeated uint32 special_reward_id_list = 5;
  repeated uint32 is_special_shine_list = 6;
  repeated uint32 taken_reward_id_list = 7;
}

// CmdID: 6717
message GetVipRewardDataReq {
}

// CmdID: 6718
message GetVipRewardDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetVipRewardDataRsp.Retcode retcode = 1;
  uint32 total_pay_hcoin = 2;
  repeated VipReward vip_reward_list = 3;
}

// CmdID: 6719
message GetVipRewardReq {
  repeated uint32 vip_level_list = 1;
}

// CmdID: 6720
message GetVipRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    PAY_HCOIN_LACK = 2;
    REPEAT_GET = 3;
  }

  GetVipRewardRsp.Retcode retcode = 1;
  repeated RewardData reward_list = 2;
}

// CmdID: 6721
message GetCardProductInfoReq {
}

message CardProductInfo {
  string product_name = 1;
  uint32 expire_time = 2;
  uint32 reward_num = 3;
  uint32 hcoin = 4;
  uint32 take_reward_days = 5;
  uint32 last_daily_reward_time = 6;
  uint32 bonus_need_days = 7;
  uint32 bonus_hcoin = 8;
  uint32 bonus_max_save_days = 9;
  uint32 card_left_days = 10;
}

message CardProductReward {
  string product_name = 1;
  uint32 hcoin = 2;
  uint32 take_reward_days = 3;
}

// CmdID: 6722
message GetCardProductInfoRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  GetCardProductInfoRsp.Retcode retcode = 1;
  repeated CardProductInfo card_product_info_list = 2;
}

// CmdID: 6723
message TakeCardProductDailyRewardReq {
}

// CmdID: 6724
message TakeCardProductDailyRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  TakeCardProductDailyRewardRsp.Retcode retcode = 1;
  repeated CardProductReward card_product_reward_list = 2;
}

// CmdID: 6725
message TakeCardProductBonusRewardReq {
}

// CmdID: 6726
message TakeCardProductBonusRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  TakeCardProductBonusRewardRsp.Retcode retcode = 1;
  repeated CardProductReward card_product_reward_list = 2;
}

// CmdID: 6727
message TakeFoundationRewardReq {
  string product_name = 1;
  uint32 level = 2;
}

// CmdID: 6728
message TakeFoundationRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_BUY = 2;
    LEVEL_LACK = 3;
    HAS_TAKE = 4;
    PRODUCT_INVALID = 5;
  }

  TakeFoundationRewardRsp.Retcode retcode = 1;
  repeated RewardData reward_list = 2;
  string product_name = 3;
  repeated uint32 has_take_reward_level_list = 4;
}

// CmdID: 6729
message GetProductRecommendListReq {
}

// CmdID: 6730
message GetProductRecommendListRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetProductRecommendListRsp.Retcode retcode = 1;
  repeated uint32 recommend_list = 2;
}

// CmdID: 6731
message BuyProductReq {
  string name = 1;
  uint32 price = 2;
  string currency_code = 3;
  string format_price = 4;
}

// CmdID: 6732
message BuyProductRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    DEVICE_ERROR = 2;
    PRODUCT_INVALID = 3;
    TIMES_LIMIT = 4;
  }

  BuyProductRsp.Retcode retcode = 1;
}

// CmdID: 6733
message ExchangeHcoinByMcoinReq {
  string product_name = 1;
  uint32 mcoin_price = 2;
}

// CmdID: 6734
message ExchangeHcoinByMcoinRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    LACK_MCOIN = 2;
    PRODUCT_INVALID = 3;
  }

  ExchangeHcoinByMcoinRsp.Retcode retcode = 1;
  string product_name = 2;
  uint32 pay_hcoin = 3;
  uint32 free_hcoin = 4;
}

// CmdID: 6739
message GetMyCardAuthCodeReq {
  string fac_trade_seq = 1;
  string product_name = 2;
  string amount = 3;
}

// CmdID: 6740
message GetMyCardAuthCodeRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetMyCardAuthCodeRsp.Retcode retcode = 1;
  string auth_code = 2;
  string trade_seq = 3;
  string product_name = 4;
  string transaction_url = 5;
}

// CmdID: 6741
message VerifyMyCardOrderNotify {
  string auth_code = 1;
  string product_name = 2;
}

// CmdID: 6742
message RechargeFinishNotify {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ORDER_REPEAT = 2;
    ITUNES_RECEIPT_ERROR = 3;
    DUPLICATE_FAIL = 4;
  }

  RechargeFinishNotify.Retcode retcode = 1;
  string product_name = 2;
  uint32 pay_hcoin = 3;
  uint32 free_hcoin = 4;
  string product_desc = 5;
  repeated RewardData box_reward_list = 6;
  uint32 product_price = 7;
  string channel_name = 8;
  string channel_order_no = 9;
  bool is_add_hcoin = 10;
  uint32 mcoin = 11;
  uint32 goods_id = 12;
  string pay_currency = 13;
  string pay_price = 14;
  ProductType product_type = 15;
}

// CmdID: 6743
message ReportClickRechargeButtonNotify {
  string product_name = 1;
  string currency_code = 2;
  string price = 3;
}

// CmdID: 6744
message GlobalShopGoodsGetBuyOrderReq {
  uint32 shop_id = 1;
  uint32 goods_id = 2;
}

// CmdID: 6745
message GlobalShopGoodsGetBuyOrderRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GlobalShopGoodsGetBuyOrderRsp.Retcode retcode = 1;
  uint32 shop_id = 2;
  uint32 goods_id = 3;
  uint32 buy_order = 4;
}

enum CmdTypeShop {
  CMD_TYPE_SHOP_NONE = 0;
  CMD_GET_SHOP_LIST_REQ = 6700;
  CMD_GET_SHOP_LIST_RSP = 6701;
  CMD_GET_SHOPPING_MALL_LIST_REQ = 6702;
  CMD_GET_SHOPPING_MALL_LIST_RSP = 6703;
  CMD_GET_SINGLE_SHOP_WITHOUT_REFRESH_REQ = 6704;
  CMD_GET_SINGLE_SHOP_WITHOUT_REFRESH_RSP = 6705;
  CMD_GET_PRODUCT_LIST_REQ = 6706;
  CMD_GET_PRODUCT_LIST_RSP = 6707;
  CMD_MANUAL_REFRESH_SHOP_REQ = 6708;
  CMD_MANUAL_REFRESH_SHOP_RSP = 6709;
  CMD_GET_RECOMMEND_GOODS_REQ = 6710;
  CMD_GET_RECOMMEND_GOODS_RSP = 6711;
  CMD_BUY_GOODS_REQ = 6714;
  CMD_BUY_GOODS_RSP = 6715;
  CMD_GLOBAL_SHOP_GOODS_INFO_NOTIFY = 6716;
  CMD_GET_VIP_REWARD_DATA_REQ = 6717;
  CMD_GET_VIP_REWARD_DATA_RSP = 6718;
  CMD_GET_VIP_REWARD_REQ = 6719;
  CMD_GET_VIP_REWARD_RSP = 6720;
  CMD_GET_CARD_PRODUCT_INFO_REQ = 6721;
  CMD_GET_CARD_PRODUCT_INFO_RSP = 6722;
  CMD_TAKE_CARD_PRODUCT_DAILY_REWARD_REQ = 6723;
  CMD_TAKE_CARD_PRODUCT_DAILY_REWARD_RSP = 6724;
  CMD_TAKE_CARD_PRODUCT_BONUS_REWARD_REQ = 6725;
  CMD_TAKE_CARD_PRODUCT_BONUS_REWARD_RSP = 6726;
  CMD_TAKE_FOUNDATION_REWARD_REQ = 6727;
  CMD_TAKE_FOUNDATION_REWARD_RSP = 6728;
  CMD_GET_PRODUCT_RECOMMEND_LIST_REQ = 6729;
  CMD_GET_PRODUCT_RECOMMEND_LIST_RSP = 6730;
  CMD_BUY_PRODUCT_REQ = 6731;
  CMD_BUY_PRODUCT_RSP = 6732;
  CMD_EXCHANGE_HCOIN_BY_MCOIN_REQ = 6733;
  CMD_EXCHANGE_HCOIN_BY_MCOIN_RSP = 6734;
  CMD_GET_MYCARD_AUTH_CODE_REQ = 6739;
  CMD_GET_MYCARD_AUTH_CODE_RSP = 6740;
  CMD_VERIFY_MYCARD_ORDER_NOTIFY = 6741;
  CMD_RECHARGE_FINISH_NOTIFY = 6742;
  CMD_REPORT_CLICK_RECHARGE_BUTTON_NOTIFY = 6743;
  CMD_GLOBAL_SHOP_GOODS_GET_BUY_ORDER_REQ = 6744;
  CMD_GLOBAL_SHOP_GOODS_GET_BUY_ORDER_RSP = 6745;
}

enum ShopType {
  SHOP_TYPE_NONE = 0;
  SHOP_NORMAL = 1;
  SHOP_ENDLESS = 2;
  SHOP_ACTIVITY = 3;
  SHOP_EXTRASTORY = 4;
  SHOP_ARMADA = 5;
  SHOP_GACHATICKET = 6;
  SHOP_EXCHANGE_HOUSE = 7;
  SHOP_EXTRASTORY_ACTIVITY = 8;
  SHOP_MP = 9;
  SHOP_EXBOSS = 10;
  SHOP_SKIN = 11;
  SHOP_MASTER = 12;
  SHOP_DORM = 13;
  SHOP_FRAGMENT = 14;
  SHOP_ACTIVITY_EXCLUDE = 15;
  SHOP_MINUTE = 16;
  SHOP_DUNGEONS = 17;
  SHOP_GOBACK = 18;
  SHOP_MASTER_PUPIL = 19;
  SHOP_TYPE_ENCORE = 20;
  SHOP_TYPE_WANTED = 21;
  SHOP_TYPE_ADVENTURE = 22;
  SHOP_TYPE_NEWBIE_ACTIVITY = 23;
  SHOP_TYPE_VIP_EQUIPMENT = 24;
  SHOP_TYPE_GACHA_COIN = 25;
  SHOP_TYPE_MAIN_STORY = 26;
  SHOP_GOBACK_2 = 27;
  SHOP_GOBACK_3 = 28;
  SHOP_TYPE_NEWBIE_ACTIVITY_2 = 29;
  SHOP_TYPE_NEWBIE_ACTIVITY_3 = 30;
  SHOP_TYPE_GOD_WAR = 31;
  SHOP_TYPE_CHAPTER = 32;
  SHOP_TYPE_SC_DLC = 33;
  SHOP_TYPE_BP_ELITE_WORKS = 34;
  SHOP_TYPE_BP_STORE = 35;
  SHOP_TYPE_BP_ELITE_WORKS_VINTAGE = 36;
  SHOP_TYPE_NEWBIE_ACTIVITY_4 = 37;
  SHOP_TYPE_NEWBIE_ACTIVITY_5 = 38;
  SHOP_TYPE_CHAPTER_OW = 39;
  SHOP_GOBACK_SPECIAL = 40;
  SHOP_TYPE_BP_NEW_ELITE_WORKS = 41;
  SHOP_TYPE_BP_RESIDENT_WORKS = 42;
  SHOP_OPENWORLD = 100;
  SHOP_OPENWORLD_SENIOR = 101;
  SHOP_OPENWORLD_NEW = 102;
  SHOP_OPENWORLD_ACTIVITY = 103;
  SHOP_PJMS_MATERIAL = 104;
  SHOP_PJMS_BGM = 105;
  SHOP_PJMS_FURNITURE = 106;
  SHOP_TYPE_GIFT_PACK = 201;
  SHOP_ACTIVITY_2 = 302;
  SHOP_ACTIVITY_3 = 303;
  SHOP_ACTIVITY_4 = 304;
  SHOP_ACTIVITY_5 = 305;
  SHOP_ACTIVITY_6 = 306;
  SHOP_ACTIVITY_7 = 307;
  SHOP_ACTIVITY_8 = 308;
  SHOP_ACTIVITY_9 = 309;
  SHOP_ACTIVITY_10 = 310;
  SHOP_ACTIVITY_11 = 311;
  SHOP_ACTIVITY_12 = 312;
  SHOP_WEST = 1001;
}

enum ShopGoodsPoolUnlockType {
  SHOP_GOODS_POOL_UNLOCK_TYPE_NONE = 0;
  SHOP_GOODS_POOL_UNLOCK_PLAYER_LEVEL = 1;
  SHOP_GOODS_POOL_UNLOCK_MAX_QUEST_LEVEL = 3;
  SHOP_GOODS_POOL_UNLOCK_OPENWORLD_ACTIVITY_LEVEL = 4;
  SHOP_GOODS_POOL_UNLOCK_EX_BOSS_MONSTER_LEVEL = 5;
  SHOP_GOODS_POOL_UNLOCK_EX_BOSS_SCORE = 6;
  SHOP_GOODS_POOL_UNLOCK_ELF = 7;
  SHOP_GOODS_POOL_UNLOCK_GLOBALWAR_POINT_NUM = 8;
  SHOP_GOODS_POOL_UNLOCK_GLOBALWAR_POINT_ID = 9;
  SHOP_GOODS_POOL_UNLOCK_ADVENTURE_LEVEL = 10;
  SHOP_GOODS_POOL_UNLOCK_DAILY_DUTY_POINT = 11;
  SHOP_GOODS_POOL_UNLOCK_AVATAR = 12;
  SHOP_GOODS_POOL_UNLOCK_STAGE = 13;
  SHOP_GOODS_POOL_UNLOCK_MISSION = 15;
  SHOP_GOODS_POOL_UNLOCK_SANCTUARY_LEVEL = 16;
  SHOP_GOODS_POOL_UNLOCK_GOBACK_LEVEL = 17;
  SHOP_GOODS_POOL_UNLOCK_AVATAR_LOCKED = 18;
  SHOP_GOODS_POOL_UNLOCK_HAS_GOT_ITEM = 19;
  SHOP_GOODS_POOL_UNLOCK_AVATAR_DETAIL = 20;
  SHOP_GOODS_POOL_UNLOCK_ELF_DETAIL = 21;
  SHOP_GOODS_POOL_UNLOCK_BATTLE_PASS_TICKET = 22;
  SHOP_GOODS_POOL_UNLOCK_PRIVILEGE_DETAIL = 23;
  SHOP_GOODS_POOL_UNLOCK_HAS_NOT_GOT_ITEM = 24;
  SHOP_GOODS_POOL_UNLOCK_BP_LEVEL = 25;
  SHOP_GOODS_POOL_UNLOCK_PLAYER_LEVEL_LOCK_ID = 26;
  SHOP_GOODS_POOL_UNLOCK_GOBACK_NEWBIE_LEVEL = 27;
  SHOP_GOODS_POOL_UNLOCK_BGM_LOCKED = 28;
}

enum ShopGoodsMaxBuyType {
  SHOP_GOODS_MAX_BUY_TYPE_SCHEDULE_MAX_LIMIT = 0;
  SHOP_GOODS_MAX_BUY_TYPE_BACKPACK_MAX_LIMIT = 1;
  SHOP_GOODS_MAX_BUY_TYPE_NO_LIMIT = 2;
}

enum ShopGoodsAutoOpenType {
  SHOP_GOODS_NOT_AUTO_OPEN = 0;
  SHOP_GOODS_CLIENT_AUTO_OPEN_WITH_NOTIFY = 1;
  SHOP_GOODS_CLIENT_AUTO_OPEN_WITHOUT_NOTIFY = 2;
  SHOP_GOODS_SERVER_AUTO_OPEN = 3;
}

enum ProductType {
  PRODUCT_TYPE_NONE = 0;
  PRODUCT_NORMAL = 1;
  PRODUCT_LIMIT = 2;
  PRODUCT_CARD = 3;
  PRODUCT_SUBSCRIPTION = 4;
  PRODUCT_RANDOM_BOX = 5;
  PRODUCT_FIXED_BOX = 6;
  PRODUCT_MCOIN = 7;
  PRODUCT_FOUNDATION = 8;
  PRODUCT_SUBSCRIPTION_NON_RENEWING = 9;
  PRODUCT_MAIL_REWARD = 10;
  PRODUCT_PROMO_CODE = 11;
}

enum AccurateGoodsTriggerType {
  ACCURATE_GOODS_TRIGGER_TYPE_NONE = 0;
  ACCURATE_GOODS_TRIGGER_TYPE_UNLOCK_AVATAR = 1;
  ACCURATE_GOODS_TRIGGER_TYPE_FIRST_GOT = 2;
  ACCURATE_GOODS_TRIGGER_TYPE_REPEAT_GOT = 3;
  ACCURATE_GOODS_TRIGGER_TYPE_UNLOCK_ELF = 4;
  ACCURATE_GOODS_TRIGGER_TYPE_FINISH_MISSION = 5;
  ACCURATE_GOODS_TRIGGER_TYPE_EXCHANGE_SCOIN = 6;
  ACCURATE_GOODS_TRIGGER_TYPE_EXCHANGE_STAMINA = 7;
  ACCURATE_GOODS_TRIGGER_TYPE_LOSE_STAGE = 8;
  ACCURATE_GOODS_TRIGGER_TYPE_WIN_STAGE_FIRST = 9;
  ACCURATE_GOODS_TRIGGER_TYPE_AVATAR_LEVEL = 10;
  ACCURATE_GOODS_TRIGGER_TYPE_PLAYER_LEVEL = 11;
  ACCURATE_GOODS_TRIGGER_TYPE_GOBACK_DAYS = 12;
  ACCURATE_GOODS_TRIGGER_TYPE_AVATAR_STAR = 13;
}

enum VipRewardStatus {
  VIP_REWARD_STATUS_NONE = 0;
  VIP_REWARD_LOCKED = 1;
  VIP_REWARD_NOT_GET = 2;
  VIP_REWARD_HAS_GOT = 3;
  VIP_REWARD_HAS_GOT_BUT_SPECIAL = 4;
}

message SimplifiedGodWarChallengeAvatar {
  uint32 avatar_id = 1;
  uint32 hp_percent = 2;
  bool is_virtual = 3;
  uint32 weapon_id = 4;
  uint32 weapon_level = 5;
  SimplifiedGodWarChallengeStigmata stigmata_1 = 6;
  SimplifiedGodWarChallengeStigmata stigmata_2 = 7;
  SimplifiedGodWarChallengeStigmata stigmata_3 = 8;
  uint32 weapon_homology_level = 9;
  uint32 sp_percent = 10;
}

message SimplifiedGodWarChallengeElf {
  ElfBriefInfo elf_info = 1;
}

message SimplifiedGodWarChallengeStigmata {
  uint32 id = 1;
  uint32 level = 2;
  repeated StigmataRune rune_list = 3;
}

message SimplifiedGodWarBuff {
  uint32 buff_id = 1;
  uint32 buff_level = 2;
}

message SimplifiedGodWarOverall {
  uint32 overall_id = 1;
  uint32 overall_value = 2;
}

message SimplifiedGodWarActivity {
  uint32 activity_id = 1;
  uint32 challenge_schedule_id = 2;
  SimplifiedGodWarChallenge challenge = 3;
  repeated SimplifiedGodWarChallengeHistory challenge_history_list = 4;
}

message SimplifiedGodWarChallenge {
  repeated SimplifiedGodWarChallengeAvatar avatar_list = 1;
  repeated SimplifiedGodWarChallengeElf elf_list = 2;
  repeated uint32 support_avatar_id_list = 3;
  uint32 challenge_score = 4;
  uint32 random_seed = 5;
  bool is_use_virtual_avatar = 6;
  uint32 star_ring_energy = 7;
  uint32 cur_site_id = 8;
  uint32 cur_theme_id = 9;
  repeated SimplifiedGodWarBuff buff_list = 11;
  repeated uint32 assist_role_id_list = 12;
  repeated uint32 selected_buff_id_list = 13;
  repeated uint32 selected_assist_rold_id_list = 14;
  repeated SimplifiedGodWarOverall overall_list = 15;
  string challenge_transaction_str = 16;
}

message SimplifiedGodWarChallengeHistory {
  uint32 theme_id = 1;
  uint32 avatar_id = 2;
  bool is_challenge_succ = 3;
  uint32 max_challenge_score = 4;
  uint32 accumulate_challenge_score = 5;
}

// CmdID: 8250
message SimplifiedGodWarGetActivityReq {
}

// CmdID: 8251
message SimplifiedGodWarGetActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    GOD_WAR_LOCKED = 3;
    FEATURE_CLOSED = 4;
  }

  SimplifiedGodWarGetActivityRsp.Retcode retcode = 1;
  SimplifiedGodWarActivity activity = 2;
}

// CmdID: 8252
message SimplifiedGodWarSelectChallengeAvatarReq {
  repeated uint32 avatar_id_list = 1;
  repeated uint32 support_avatar_id_list = 2;
  uint32 elf_id = 3;
  bool is_use_virtual_avatar = 4;
  uint32 theme_id = 5;
}

// CmdID: 8253
message SimplifiedGodWarSelectChallengeAvatarRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ALREADY_SELECTED = 2;
    AVATAR_ERROR = 3;
    SUPPORT_AVATAR_ERROR = 4;
    ELF_ERROR = 5;
    CHALLENGE_SCHEDULE_ERROR = 6;
    FEATURE_CLOSED = 7;
    FORCE_SETTLE = 8;
    NOT_OPEN = 9;
    GOD_WAR_LOCKED = 10;
    THEME_LOCKED = 11;
  }

  SimplifiedGodWarSelectChallengeAvatarRsp.Retcode retcode = 1;
}

// CmdID: 8254
message SimplifiedGodWarResetChallengeReq {
}

// CmdID: 8255
message SimplifiedGodWarResetChallengeRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    FEATURE_CLOSED = 2;
    FORCE_SETTLE = 3;
    NOT_OPEN = 4;
    GOD_WAR_LOCKED = 5;
  }

  SimplifiedGodWarResetChallengeRsp.Retcode retcode = 1;
  repeated SimplifiedGodWarChallengeAvatar avatar_list = 2;
  repeated SimplifiedGodWarBuff buff_list = 3;
  bool is_challenge_succ = 4;
  uint32 challenge_score = 5;
  repeated Material reward_material_list = 6;
  uint32 site_idx = 7;
  RewardData first_win_reward = 8;
  bool is_use_virtual_avatar = 9;
  uint32 challenge_cost_time = 10;
  uint32 grade = 11;
  uint32 activity_id = 12;
  uint32 theme_id = 13;
  uint32 total_score = 14;
}

// CmdID: 8256
message SimplifiedGodWarGetBuffReq {
}

// CmdID: 8257
message SimplifiedGodWarGetBuffRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    FEATURE_CLOSED = 2;
    NOT_OPEN = 3;
    GOD_WAR_LOCKED = 4;
    SITE_ERROR = 5;
  }

  SimplifiedGodWarGetBuffRsp.Retcode retcode = 1;
  repeated uint32 candidate_buff_suit_id_list = 2;
}

// CmdID: 8258
message SimplifiedGodWarSelectBuffReq {
  uint32 buff_suit_id = 1;
  uint32 core_buff_id = 2;
}

// CmdID: 8259
message SimplifiedGodWarSelectBuffRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    FEATURE_CLOSED = 2;
    NOT_OPEN = 3;
    NOT_CANDIDATE = 4;
    GOD_WAR_LOCKED = 5;
    SITE_ERROR = 6;
    HAS_SELECTED = 7;
  }

  SimplifiedGodWarSelectBuffRsp.Retcode retcode = 1;
  uint32 buff_suit_id = 2;
  uint32 core_buff_id = 3;
}

// CmdID: 8260
message SimplifiedGodWarGetAssistRoleReq {
}

// CmdID: 8261
message SimplifiedGodWarGetAssistRoleRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    FEATURE_CLOSED = 2;
    NOT_OPEN = 3;
    GOD_WAR_LOCKED = 4;
    SITE_ERROR = 5;
  }

  SimplifiedGodWarGetAssistRoleRsp.Retcode retcode = 1;
  repeated uint32 candidate_assist_rold_id_list = 2;
}

// CmdID: 8262
message SimplifiedGodWarSelectAssistRoleReq {
  uint32 assist_role_id = 1;
}

// CmdID: 8263
message SimplifiedGodWarSelectAssistRoleRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    FEATURE_CLOSED = 2;
    NOT_OPEN = 3;
    NOT_CANDIDATE = 4;
    GOD_WAR_LOCKED = 5;
    SITE_ERROR = 6;
    HAS_SELECTED = 7;
  }

  SimplifiedGodWarSelectAssistRoleRsp.Retcode retcode = 1;
  uint32 assist_role_id = 2;
}

// CmdID: 8264
message SimplifiedGodWarEnterSiteReq {
}

// CmdID: 8265
message SimplifiedGodWarEnterSiteRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    FEATURE_CLOSED = 2;
    NOT_OPEN = 3;
    GOD_WAR_LOCKED = 4;
    THEME_LOCKED = 5;
  }

  SimplifiedGodWarEnterSiteRsp.Retcode retcode = 1;
  uint32 site_id = 2;
}

enum CmdTypeSimplifiedgodwar {
  CMD_TYPE_SIMPLIFIEDGODWAR_NONE = 0;
  CMD_SIMPLIFIED_GOD_WAR_GET_ACTIVITY_REQ = 8250;
  CMD_SIMPLIFIED_GOD_WAR_GET_ACTIVITY_RSP = 8251;
  CMD_SIMPLIFIED_GOD_WAR_SELECT_CHALLENGE_AVATAR_REQ = 8252;
  CMD_SIMPLIFIED_GOD_WAR_SELECT_CHALLENGE_AVATAR_RSP = 8253;
  CMD_SIMPLIFIED_GOD_WAR_RESET_CHALLENGE_REQ = 8254;
  CMD_SIMPLIFIED_GOD_WAR_RESET_CHALLENGE_RSP = 8255;
  CMD_SIMPLIFIED_GOD_WAR_GET_BUFF_REQ = 8256;
  CMD_SIMPLIFIED_GOD_WAR_GET_BUFF_RSP = 8257;
  CMD_SIMPLIFIED_GOD_WAR_SELECT_BUFF_REQ = 8258;
  CMD_SIMPLIFIED_GOD_WAR_SELECT_BUFF_RSP = 8259;
  CMD_SIMPLIFIED_GOD_WAR_GET_ASSIST_ROLE_REQ = 8260;
  CMD_SIMPLIFIED_GOD_WAR_GET_ASSIST_ROLE_RSP = 8261;
  CMD_SIMPLIFIED_GOD_WAR_SELECT_ASSIST_ROLE_REQ = 8262;
  CMD_SIMPLIFIED_GOD_WAR_SELECT_ASSIST_ROLE_RSP = 8263;
  CMD_SIMPLIFIED_GOD_WAR_ENTER_SITE_REQ = 8264;
  CMD_SIMPLIFIED_GOD_WAR_ENTER_SITE_RSP = 8265;
}

enum SimplifiedGodWarSiteType {
  SIMPLIFIED_GOD_WAR_SITE_TYPE_NONE = 0;
  SIMPLIFIED_GOD_WAR_SITE_TYPE_START = 1;
  SIMPLIFIED_GOD_WAR_SITE_TYPE_NORMAL = 2;
  SIMPLIFIED_GOD_WAR_SITE_TYPE_ASSIST_ROLE = 3;
  SIMPLIFIED_GOD_WAR_SITE_TYPE_FINAL_BOSS = 4;
}

message SlgBattleBuffData {
  uint32 buff_id = 1;
  SlgBuffType type = 2;
  uint32 num = 3;
}

message SlgBattleCountryData {
  uint32 country_id = 1;
  uint32 take_down_boss_num = 2;
  repeated SlgBattleBuffData buff_list = 3;
  uint32 country_score = 4;
}

message SlgBattlePointCountryData {
  uint32 country_id = 1;
  uint64 point_score_u64 = 2;
}

message SlgBattlePointBossData {
  uint32 boss_id = 1;
  SlgBossType type = 2;
  bool is_alive = 3;
  uint32 boss_schedule_id = 4;
}

message SlgBattlePointData {
  uint32 point_id = 1;
  uint32 occupy_country_id = 2;
  repeated SlgBattlePointCountryData point_country_data_list = 3;
  SlgBattlePointBossData boss_data = 4;
  repeated uint32 occupied_country_list = 5;
}

message SlgBattlePlayerData {
  uint32 country_id = 1;
  repeated uint32 buff_list = 2;
  uint32 score = 3;
}

message SlgBattleData {
  uint32 battle_id = 1;
  uint32 battle_schedule_id = 2;
  repeated SlgBattleCountryData country_data_list = 3;
  repeated SlgBattlePointData point_data_list = 4;
  uint32 begin_time = 5;
  uint32 end_time = 6;
  uint32 today_begin_time = 7;
  uint32 today_end_time = 8;
  SlgBattlePlayerData player_data = 9;
  repeated uint32 adjoining_point_list = 10;
  uint32 last_settle_time = 11;
  bool is_settled = 12;
  uint32 level_group_id = 13;
}

message SlgBattleBriefCountryData {
  uint32 country_id = 1;
  uint32 country_score = 2;
}

message SlgBriefBattleData {
  uint32 battle_id = 1;
  uint32 battle_schedule_id = 2;
  uint32 country_id = 3;
  repeated SlgBattleBriefCountryData country_data_list = 4;
  bool is_settled = 5;
}

// CmdID: 6050
message SlgGetDataReq {
  uint32 country_id = 1;
  string region = 2;
}

// CmdID: 6051
message SlgGetDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    BATTLE_NOT_FOUND = 3;
    NOT_IN_BATTLE = 4;
    FEATURE_CLOSED = 5;
  }

  SlgGetDataRsp.Retcode retcode = 1;
  uint32 schedule_id = 2;
  uint32 next_battle_begin_time = 3;
  SlgBattleData battle_data = 4;
  uint32 activity_stamina_num = 5;
  uint32 last_recover_activity_stamina_time = 6;
  uint32 begin_time = 7;
  uint32 end_time = 8;
  repeated uint32 unlock_story_id_list = 9;
  repeated SlgBriefBattleData history_battle_data_list = 10;
  uint32 battle_schedule_id = 11;
  SlgEnrollData current_enroll_data = 12;
  repeated uint32 taken_score_reward_id_list = 13;
  uint32 total_score = 14;
}

// CmdID: 6052
message SlgPointSweepReq {
  uint32 point_id = 1;
}

// CmdID: 6053
message SlgPointSweepRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 3;
    POINT_INVALID = 4;
    COST_MATERIAL_LACK = 5;
    EQUIPMENT_FULL = 6;
  }

  SlgPointSweepRsp.Retcode retcode = 1;
  uint32 point_id = 2;
  RewardData reward_data = 3;
}

message SlgEnrollData {
  uint32 enroll_battle_schedule_id = 1;
  uint32 enroll_begin_time = 2;
  uint32 enroll_end_time = 3;
  bool is_enrolled = 4;
}

// CmdID: 6054
message SlgBattleMatchRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NO_BATTLE_AVAILABLE = 2;
  }

  SlgBattleMatchRsp.Retcode retcode = 1;
  uint32 battle_id = 2;
  uint32 battle_schedule_id = 3;
}

// CmdID: 6055
message SlgEnrollReq {
  uint32 battle_schedule_id = 1;
  uint32 group_id = 2;
  uint32 match_score = 3;
  string region_name = 4;
}

// CmdID: 6056
message SlgEnrollRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    BATTLE_SCHEDULE_ID_ERROR = 2;
    HAS_ENROLL = 3;
    TOO_FREQUENT = 4;
    FEATURE_CLOSED = 5;
  }

  SlgEnrollRsp.Retcode retcode = 1;
  uint32 battle_schedule_id = 2;
}

// CmdID: 6057
message SlgGetActivityStaminaReq {
}

// CmdID: 6058
message SlgGetActivityStaminaRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_SCHEDULE = 2;
  }

  SlgGetActivityStaminaRsp.Retcode retcode = 1;
  uint32 activity_stamina_num = 2;
  uint32 last_recover_activity_stamina_time = 3;
}

// CmdID: 6059
message SlgTakeScoreRewardReq {
  SlgScoreRewardType score_reward_type = 1;
}

// CmdID: 6060
message SlgTakeScoreRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_SCHEDULE = 2;
  }

  SlgTakeScoreRewardRsp.Retcode retcode = 1;
  repeated uint32 has_taken_score_reward_id_list = 2;
  RewardData reward_data = 3;
}

// CmdID: 6061
message SlgBattleAddScoreFailNotify {
  uint32 point_id = 1;
}

// CmdID: 6062
message SlgGetBattleRankReq {
  uint32 country_id = 1;
}

message SlgBattleRank {
  bool is_all = 1;
  uint32 country_id = 2;
  uint32 total_num = 3;
  RankShowData rank_data = 4;
}

// CmdID: 6063
message SlgGetBattleRankRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_SCHEDULE = 2;
    NOT_IN_BATTLE = 3;
  }

  SlgGetBattleRankRsp.Retcode retcode = 1;
  SlgBattleRank rank = 2;
  uint32 battle_schedule_id = 3;
}

// CmdID: 6064
message SlgGetPointRankReq {
  uint32 point_id = 1;
}

// CmdID: 6065
message SlgGetPointRankRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_SCHEDULE = 2;
    NOT_IN_BATTLE = 3;
    POINT_ERROR = 4;
  }

  SlgGetPointRankRsp.Retcode retcode = 1;
  uint32 battle_schedule_id = 2;
  uint32 point_id = 3;
  uint32 player_score = 4;
  repeated UserRankData rank_list = 5;
}

// CmdID: 6066
message SlgBattleSettleNotify {
  uint32 schedule_id = 1;
  uint32 battle_schedule_id = 2;
  RewardData reward_data = 3;
  uint32 rank = 5;
}

message SlgBroadcastPlayer {
  uint32 uid = 1;
  uint32 country_id = 2;
  string nickname = 3;
}

message SlgBattleBroadcast {
  uint32 broadcast_id = 1;
  uint32 trigger_time = 2;
  uint32 point_id = 3;
  uint32 para = 4;
  SlgBroadcastPlayer trigger_player = 5;
}

// CmdID: 6068
message SlgBroadcastNotify {
  repeated SlgBattleBroadcast broadcast_list = 1;
}

// CmdID: 6069
message SlgMainPageReq {
  bool is_in_main_page = 1;
}

// CmdID: 6070
message SlgBattleInSettleNotify {
}

// CmdID: 6071
message SlgGetBriefRankReq {
}

// CmdID: 6072
message SlgGetBriefRankRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_BATTLE = 2;
  }

  SlgGetBriefRankRsp.Retcode retcode = 1;
  uint32 all_country_rank = 2;
  uint32 self_country_rank = 3;
}

enum CmdTypeSlg {
  CMD_TYPE_SLG_NONE = 0;
  CMD_SLG_GET_DATA_REQ = 6050;
  CMD_SLG_GET_DATA_RSP = 6051;
  CMD_SLG_POINT_SWEEP_REQ = 6052;
  CMD_SLG_POINT_SWEEP_RSP = 6053;
  CMD_SLG_BATTLE_MATCH_RSP = 6054;
  CMD_SLG_ENROLL_REQ = 6055;
  CMD_SLG_ENROLL_RSP = 6056;
  CMD_SLG_GET_ACTIVITY_STAMINA_REQ = 6057;
  CMD_SLG_GET_ACTIVITY_STAMINA_RSP = 6058;
  CMD_SLG_TAKE_SCORE_REWARD_REQ = 6059;
  CMD_SLG_TAKE_SCORE_REWARD_RSP = 6060;
  CMD_SLG_BATTLE_ADD_SCORE_FAIL_NOTIFY = 6061;
  CMD_SLG_GET_BATTLE_RANK_REQ = 6062;
  CMD_SLG_GET_BATTLE_RANK_RSP = 6063;
  CMD_SLG_GET_POINT_RANK_REQ = 6064;
  CMD_SLG_GET_POINT_RANK_RSP = 6065;
  CMD_SLG_BATTLE_SETTLE_NOTIFY = 6066;
  CMD_SLG_BROADCAST_NOTIFY = 6068;
  CMD_SLG_MAIN_PAGE_REQ = 6069;
  CMD_SLG_BATTLE_IN_SETTLE_NOTIFY = 6070;
  CMD_SLG_GET_BRIEF_RANK_REQ = 6071;
  CMD_SLG_GET_BRIEF_RANK_RSP = 6072;
  CMD_SLG_DUMMY = 6149;
}

enum SlgMatchFactorType {
  SLG_MATCH_FACTOR_TYPE_NONE = 0;
  SLG_MATCH_FACTOR_TYPE_CRYSTAL_COST = 1;
  SLG_MATCH_FACTOR_TYPE_PLAYER_LEVEL = 2;
  SLG_MATCH_FACTOR_TYPE_TOP_AVATAR_COMBAT_SUM = 3;
  SLG_MATCH_FACTOR_TYPE_CUR_BATTLE_SCORE = 4;
}

enum SlgBuffType {
  SLG_BUFF_TYPE_NONE = 0;
  SLG_BUFF_TYPE_ACTIVITY_STAMINA_COST = 1;
  SLG_BUFF_TYPE_STAGE_SCORE = 2;
  SLG_BUFF_TYPE_SETTLE_SCORE = 3;
  SLG_BUFF_TYPE_STAGE = 4;
}

enum SlgBuildingType {
  SLG_BUILDING_TYPE_NONE = 0;
  SLG_BUILDING_TYPE_OCCUPY_OWNER_BUFF = 1;
  SLG_BUILDING_TYPE_OCCUPY_OTHERS_BUFF = 2;
  SLG_BUILDING_TYPE_SMALL_BOSS = 3;
  SLG_BUILDING_TYPE_BIG_BOSS = 4;
}

enum SlgBossType {
  SLG_BOSS_TYPE_NONE = 0;
  SLG_BOSS_TYPE_SMALL_BOSS = 1;
  SLG_BOSS_TYPE_BIG_BOSS = 2;
}

enum SlgScoreRewardType {
  SLG_SCORE_REWARD_TYPE_NONE = 0;
  SLG_SCORE_REWARD_TYPE_PERSONAL_TOTAL = 1;
  SLG_SCORE_REWARD_TYPE_COUNTRY = 2;
}

enum SlgBroadcastType {
  SLG_BROADCAST_TYPE_NONE = 0;
  SLG_BROADCAST_TYPE_OCCUPY = 1;
  SLG_BROADCAST_TYPE_SCORE_STREAK = 2;
  SLG_BROADCAST_TYPE_OCCUPY_STREAK = 3;
}

enum SlgBattleRankType {
  SLG_BATTLE_RANK_TYPE_NONE = 0;
  SLG_BATTLE_RANK_NORMAL_POINT = 1;
  SLG_BATTLE_RANK_BIG_BOSS = 2;
  SLG_BATTLE_RANK_COUNTRY = 3;
}

message SwitchData {
  FeatureSwitchType type = 1;
  bytes data = 2;
  uint32 min_level = 3;
  uint32 max_level = 4;
  uint32 begin_time = 5;
  uint32 end_time = 6;
}

// CmdID: 3700
message SwitchDataNotify {
  repeated SwitchData data_list = 1;
}

// CmdID: 3701
message SwitchChangeDataNotify {
  FeatureSwitchOpType op_type = 1;
  repeated SwitchData data_list = 2;
}

message StageSwitchData {
  uint32 stage_id = 1;
}

message ShopSwitchData {
  uint32 shop_id = 1;
}

message ShopGoodsPoolSwitchData {
  uint32 pool_id = 1;
}

message ActivityPanelSwitchData {
  uint32 panel_id = 1;
}

message MissionHideSwitchData {
  uint32 mission_id = 1;
}

message ItemUseSwitchData {
  uint32 use_id = 1;
}

message MaterialHideSwitchData {
  uint32 material_id = 1;
}

message MissionRewardSwitchData {
  uint32 mission_id = 1;
}

message MailAttachmentTakeSwitchData {
}

message DanmakuSwitchData {
}

message ExBossSwitchData {
  uint32 boss_group_id = 1;
}

message ShopGoodsPoolHideSwitchData {
  uint32 shop_id = 1;
  uint32 pool_id = 2;
}

message ChatSwitchData {
  uint32 chat_switch_channel_type = 1;
}

message HexieSwitchData {
}

message McoinBuySwitchData {
  uint32 account_type = 1;
}

message ShopGoodsSwitchData {
  uint32 goods_id = 1;
}

message CommandCDSwitchData {
  uint32 cmd_id = 1;
  uint32 cd = 2;
}

message EndlessSwitchData {
  uint32 endless_type = 1;
  uint32 player_group = 2;
}

message ExBossEnterSwitchData {
  uint32 ex_boss_id = 1;
}

message GachaSwitchData {
  uint32 gacha_id = 1;
  uint32 gacha_type = 2;
}

message AvatarFragmentSwitchData {
  uint32 avatar_id = 1;
}

message ElfFragmentSwitchData {
  uint32 elf_id = 1;
}

message EquipForgeSwitchData {
  uint32 equip_forge_id = 1;
}

message BattlePassSwitchData {
}

message GachaCoinTransferData {
  uint32 gacha_type = 1;
}

message RpgTaleSwitchData {
  uint32 tale_id = 1;
  uint32 site_id = 2;
}

message ActivitySwitchData {
  uint32 activity_type = 1;
}

message ThemeWantedSwitchData {
}

message SnsRequestSwitchData {
}

message GodWarSwitchData {
  uint32 god_war_id = 1;
}

message ServerStopGachaMsgData {
}

message RefineRuneSwitchData {
}

message ChangeFriendRemarkSwitchData {
}

message GachaDailyTimesLimitSwitchData {
}

message InviteActivitySwitchData {
}

message QCandyBattleActivitySwitchData {
  uint32 switch_type = 1;
}

message GlobalExploreSwitchData {
}

message RpgTaleActivitySwitchData {
  uint32 tale_id = 1;
  uint32 schedule_id = 2;
}

message RankSwitchData {
  string rank_key = 1;
}

message ChapterBwWorldSwitchData {
  uint32 chapter_id = 1;
}

message UltraEndlessForceSyncLocalScoreSwitchData {
}

message ExBossLockAvatarSwitchData {
}

message ChapterArkSwitchData {
  uint32 chapter_id = 1;
}

message RaidReplaceSwitchData {
  uint32 schedule_id = 1;
}

message PjmsEnterWorldSwitchData {
  uint32 world_id = 1;
}

message PjmsQuestSwitchData {
  uint32 chapter_id = 1;
  uint32 series_id = 2;
}

message PjmsActivitySwitchData {
  uint32 activity_id = 1;
}

message PjmsFirstEnterSwitchData {
}

message EquipmentQuickLevelUpSwitchData {
}

message SimplifiedGodWarSwitchData {
}

message DevilAutoChessSwitchData {
}

message TileSwitchData {
  uint32 tower_id = 1;
}

message FutariBattleSwitchData {
}

message RpgTaleAreaSwitchData {
  uint32 tale_id = 1;
  uint32 area_id = 2;
}

message PjmsChapterKnightRichManSwitchData {
  uint32 rich_man_id = 1;
}

message BattlePassUpgradeSwitchData {
}

message CrossRoomSwitchData {
  uint32 room_mode = 1;
}

message PjmsChapterKnightSpaceAdventureSwitchData {
  uint32 activity_id = 1;
  uint32 area_id = 2;
}

enum CmdTypeSwitch {
  CMD_TYPE_SWITCH_NONE = 0;
  CMD_SWITCH_DATA_NOTIFY = 3700;
  CMD_SWITCH_CHANGE_DATA_NOTIFY = 3701;
}

enum ChatSwitchChannelType {
  CHAT_SWITCH_CHANNEL_TYPE_NONE = 0;
  CHAT_SWITCH_CHANNEL_TYPE_WORLD = 1;
  CHAT_SWITCH_CHANNEL_TYPE_PRIVATE = 2;
  CHAT_SWITCH_CHANNEL_TYPE_ARMADA = 3;
  CHAT_SWITCH_CHANNEL_TYPE_TEAM = 4;
  CHAT_SWITCH_CHANNEL_TYPE_GROUP = 5;
  CHAT_SWITCH_CHANNEL_TYPE_COMMON_CHATWORLD = 6;
  CHAT_SWITCH_CHANNEL_TYPE_OTHERS = 7;
}

enum FeatureSwitchActivityType {
  FEATURE_SWITCH_ACTIVITY_TYPE_NONE = 0;
  FEATURE_SWITCH_ACTIVITY_TYPE_SLG_GAME = 1;
  FEATURE_SWITCH_ACTIVITY_TYPE_SLG_BATTLE = 2;
  FEATURE_SWITCH_ACTIVITY_TYPE_SLG_MATCH = 3;
  FEATURE_SWITCH_ACTIVITY_TYPE_GLOBAL_POLLING = 4;
  FEATURE_SWITCH_ACTIVITY_TYPE_SLG_CHAT = 5;
  FEATURE_SWITCH_ACTIVITY_TYPE_SLG_BROADCAST = 6;
  FEATURE_SWITCH_ACTIVITY_TYPE_GLOBAL_EXPLORE_BROADCAST = 7;
}

enum QCandyBattleActivitySwitchType {
  QCANDY_BATTLE_ACTIVITY_SWITCH_TYPE_NONE = 0;
  QCANDY_BATTLE_ACTIVITY_SWITCH_TYPE_PVP = 1;
  QCANDY_BATTLE_ACTIVITY_SWITCH_TYPE_RANK = 2;
}

// CmdID: 1000
message CheckExtraStoryLockedAvatarBindEquipReq {
}

// CmdID: 1001
message CheckExtraStoryLockedAvatarBindEquipRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  CheckExtraStoryLockedAvatarBindEquipRsp.Retcode retcode = 1;
  bool need_switch = 2;
}

// CmdID: 1002
message SwitchExtraStoryLockedAvatarBindEquipReq {
  AvatarBindEquipMode mode = 1;
}

// CmdID: 1003
message SwitchExtraStoryLockedAvatarBindEquipRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  SwitchExtraStoryLockedAvatarBindEquipRsp.Retcode retcode = 1;
  uint32 succ_cnt = 2;
  AvatarBindEquipMode mode = 3;
}

// CmdID: 1008
message TakeDormLikesDropReq {
}

// CmdID: 1009
message TakeDormLikesDropRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    LEVEL_LIMIT = 2;
    NO_DROP = 3;
    HAVE_TAKEN = 4;
  }

  TakeDormLikesDropRsp.Retcode retcode = 1;
  repeated DropItem drop_item_list = 2;
  uint32 yesterday_be_liked_num = 3;
}

// CmdID: 1010
message CheckDormLikesDropReq {
}

// CmdID: 1011
message CheckDormLikesDropRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    LEVEL_LIMIT = 2;
  }

  CheckDormLikesDropRsp.Retcode retcode = 1;
  bool has_likes_drop = 2;
  uint32 yesterday_be_liked_num = 3;
}

// CmdID: 1012
message GetWorldMapDataReq {
}

message WorldMapData {
  uint32 world_map_id = 1;
  uint32 begin_time = 2;
  uint32 end_time = 3;
  uint32 high_light_min_level = 4;
  uint32 high_light_max_level = 5;
  uint32 weight = 6;
  uint32 advance_time = 7;
  uint32 id = 8;
}

// CmdID: 1013
message GetWorldMapDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetWorldMapDataRsp.Retcode retcode = 1;
  repeated WorldMapData world_map_list = 2;
}

// CmdID: 1018
message GetMpStageRecordReq {
}

// CmdID: 1019
message GetMpStageRecordRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetMpStageRecordRsp.Retcode retcode = 1;
  repeated MpStageRecord record_list = 2;
}

// CmdID: 1026
message LobbySetClientStatusReq {
  LobbyClientStatus status = 1;
}

// CmdID: 1027
message LobbySetClientStatusRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_TEAM = 2;
  }

  LobbySetClientStatusRsp.Retcode retcode = 1;
}

// CmdID: 1028
message LobbyPrepareCountDownNotify {
  uint32 count_down_time = 1;
}

// CmdID: 1029
message MpStageVoteCountDownNotify {
  uint32 count_down_time = 1;
}

// CmdID: 1030
message MpStageVoteReq {
  MpStageVoteOption option = 1;
}

// CmdID: 1031
message MpStageVoteRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_TEAM = 2;
    NOT_VOTING = 3;
  }

  MpStageVoteRsp.Retcode retcode = 1;
  MpStageVoteOption option = 2;
}

// CmdID: 1032
message MpStageVoteResultNotify {
  uint32 option = 1;
}

// CmdID: 1033
message LobbyTimeoutNoLeaderNotify {
}

// CmdID: 1034
message TakeWeekDayActivityReturnCoinReq {
}

// CmdID: 1035
message TakeWeekDayActivityReturnCoinRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NO_RETURN = 2;
    COIN_LIMIT = 3;
  }

  TakeWeekDayActivityReturnCoinRsp.Retcode retcode = 1;
  uint32 num = 2;
  bool is_coin_full_after_taken = 3;
}

// CmdID: 1036
message MpStageGetVoteInfoReq {
}

message MpStageVoteInfo {
  uint32 uid = 1;
  uint32 option = 2;
}

// CmdID: 1037
message MpStageGetVoteInfoRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_TEAM = 2;
    NOT_IN_VOTING = 3;
  }

  MpStageGetVoteInfoRsp.Retcode retcode = 1;
  repeated MpStageVoteInfo vote_info_list = 2;
  uint32 vote_end_time = 3;
}

// CmdID: 1038
message MpStageMemberVoteNotify {
  repeated MpStageVoteInfo vote_info_list = 1;
}

// CmdID: 1039
message SwitchExtraStoryLineEnhanceReq {
}

// CmdID: 1040
message SwitchExtraStoryLineEnhanceRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  SwitchExtraStoryLineEnhanceRsp.Retcode retcode = 1;
  bool is_open_enhance = 2;
}

// CmdID: 1043
message GetChallengeStepBonusReq {
  uint32 step_id = 1;
}

// CmdID: 1044
message GetChallengeStepBonusRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    STEP_ID_ERROR = 2;
    BONUS_HAS_TAKEN = 3;
    STEP_NOT_FINISH = 4;
    EQUIPMENT_FULL = 5;
    EQUIPMENT_MATERIAL_LIMIT = 6;
    EQUIPMENT_FRAGMENT_LIMIT = 7;
    EQUIPMENT_ELF_FRAGMENT_LIMIT = 8;
  }

  GetChallengeStepBonusRsp.Retcode retcode = 1;
  repeated RewardData reward_list = 2;
}

message CityActivitySite {
  uint32 site_id = 1;
  uint32 site_begin_time = 2;
  uint32 site_end_time = 3;
  uint32 activity_schedule_id = 4;
  uint32 activity_begin_time = 5;
  uint32 activity_end_time = 6;
}

message CityActivityRole {
  uint32 role_id = 1;
  uint32 affinity = 2;
  uint32 affinity_level = 3;
  bool is_like_type_gift_received = 4;
  bool is_favourite_gift_received = 5;
}

message CityActivityEvent {
  uint32 site_id = 1;
  repeated uint32 event_id_list = 2;
}

message CityActivityPhoneEvent {
  uint32 role_id = 1;
  uint32 phone_event_id = 2;
  PhoneEventStatus status = 3;
}

message CityActivityAffinityDropInfo {
  uint32 max_daily_affinity_drop_in_stage = 1;
  uint32 today_affinity_drop_in_stage = 2;
}

// CmdID: 1101
message MpLeaveTeamNotify {
  int32 reason = 1;
}

// CmdID: 1102
message GetLobbyStatReq {
  repeated uint32 stage_id_list = 1;
}

message LobbyTeamPlayerNum {
  LobbyStatus status = 1;
  uint32 player_num = 2;
}

message LobbyStat {
  uint32 stage_id = 1;
  repeated LobbyTeamPlayerNum in_team_player_num_list = 2;
  uint32 wait_player_num = 3;
}

// CmdID: 1103
message GetLobbyStatRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetLobbyStatRsp.Retcode retcode = 1;
  repeated LobbyStat lobby_stat_list = 2;
  LobbyStat lobby_total_stat = 3;
}

// CmdID: 1134
message DisjoinFurnitureReq {
  repeated DepotFurniture furniture_list = 1;
}

// CmdID: 1135
message DisjoinFurnitureRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    FURNITURE_LACK = 2;
  }

  DisjoinFurnitureRsp.Retcode retcode = 1;
  repeated Material material_list = 2;
}

message ChatReport {
  uint32 target_uid = 1;
  uint32 report_type = 2;
  string report_detail = 3;
  uint32 reporter_uid = 4;
}

// CmdID: 1150
message ChatReportReq {
  ChatReport chat_report = 1;
}

// CmdID: 1151
message ChatReportRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    CHAT_BLOCKED = 2;
    IN_REPORT_CD = 3;
    SENSITIVE_WORDS = 4;
  }

  ChatReportRsp.Retcode retcode = 1;
  uint32 cd_left_time = 2;
}

// CmdID: 1152
message ChatReportNotify {
  uint32 report_uid = 1;
  uint32 target_uid = 2;
  uint32 report_type = 3;
  uint32 lost_chat_credit = 4;
  uint32 chat_forbid_times = 5;
}

// CmdID: 1153
message ChatUnforbidNotify {
  repeated uint32 uid_list = 1;
}

// CmdID: 1154
message ChatForbidNotify {
  enum ForbidType {
    FORBID_COMMON = 0;
    REPEAT_CHAT = 1;
  }

  uint32 forbid_finish_time = 1;
  ChatForbidNotify.ForbidType forbid_type = 2;
}

// CmdID: 1159
message GetChatReportInfoReq {
}

// CmdID: 1160
message GetChatReportInfoRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetChatReportInfoRsp.Retcode retcode = 1;
  uint32 chat_forbid_finish_time = 2;
  uint32 chat_forbid_times = 3;
  uint32 lost_chat_credit = 4;
}

// CmdID: 1161
message ChatForbidSnsNotify {
  uint32 credit_bound = 1;
  uint32 chat_forbid_finish_time = 2;
  uint32 chat_forbid_times = 3;
}

// CmdID: 1162
message RecoverChatCreditNotify {
  uint32 lost_chat_credit = 1;
}

// CmdID: 1163
message SendChatRedEnvelopeReq {
  uint32 item_id = 1;
  uint32 channel = 2;
  string msg = 3;
  string nickname = 4;
  uint32 armada_id = 5;
  uint32 red_envelope_id = 6;
}

// CmdID: 1164
message SendChatRedEnvelopeRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    LACK_ITEM = 2;
    LACK_TIMES = 3;
    CHAT_FORBIDEN = 4;
    LACK_CD = 5;
    LACK_LEVEL = 6;
    NOT_IN_CHATWORLD = 7;
    NOT_IN_ARMADA = 8;
    NOT_IN_WORLD_CHATROOM = 9;
    SENSITIVE_WORDS = 10;
  }

  SendChatRedEnvelopeRsp.Retcode retcode = 1;
  uint32 item_id = 2;
  uint32 channel = 3;
  string msg = 4;
  uint32 red_envelope_id = 5;
  uint32 expire_time = 6;
}

// CmdID: 1165
message TakeChatRedEnvelopeReq {
  uint32 channel = 1;
  uint32 sender_uid = 2;
  uint32 red_envelope_id = 3;
  uint32 item_id = 4;
  uint32 armada_id = 5;
  bool is_sender_npc = 6;
  string nickname = 7;
}

// CmdID: 1166
message TakeChatRedEnvelopeRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    HAS_TAKEN = 2;
    OVER = 3;
    LACK_TIMES = 4;
    LACK_LEVEL = 5;
    EXPIRE_TIME = 6;
    TAKE_BY_OTHERS = 7;
    NO_CHATROOM = 8;
    NOT_IN_ARMADA = 9;
    NOT_IN_WORLD_CHATROOM = 10;
  }

  TakeChatRedEnvelopeRsp.Retcode retcode = 1;
  uint32 channel = 2;
  uint32 sender_uid = 3;
  string sender_nickname = 4;
  uint32 item_id = 5;
  uint32 take_scoin = 6;
  repeated DropItem drop_item_list = 7;
  string msg = 8;
  uint32 red_envelope_id = 9;
  uint32 drop_id = 10;
  uint32 take_hcoin = 11;
  bool is_sender_npc = 12;
  Material take_material = 13;
  bool is_take_over = 14;
  uint32 red_envelope_take_num_today = 15;
  uint32 red_envelope_take_num_per_day = 16;
}

// CmdID: 1191
message GetPhotoDataReq {
  uint32 type = 1;
}

// CmdID: 1192
message GetPhotoDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetPhotoDataRsp.Retcode retcode = 1;
  uint32 type = 2;
  repeated uint32 photo_id_list = 3;
}

// CmdID: 1193
message GetWikiDataReq {
}

// CmdID: 1194
message GetWikiDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetWikiDataRsp.Retcode retcode = 1;
  repeated uint32 has_take_rating_reward_list = 2;
  repeated uint32 has_take_activity_suit_reward_list = 3;
}

// CmdID: 1195
message TakeWikiRatingRewardReq {
  uint32 rating_id = 1;
  uint32 rating_score = 2;
  repeated uint32 cg_list = 3;
}

// CmdID: 1196
message TakeWikiRatingRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    HAS_TKAE = 3;
    SCORE_LACK = 4;
  }

  TakeWikiRatingRewardRsp.Retcode retcode = 1;
  repeated RewardData reward_list = 2;
  uint32 rating_id = 3;
}

// CmdID: 1197
message GetPhonePendantDataReq {
  repeated uint32 phone_pendant_id_list = 1;
}

// CmdID: 1198
message GetPhonePendantDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetPhonePendantDataRsp.Retcode retcode = 1;
  bool is_all = 2;
  repeated PhonePendant phone_pendant_list = 3;
}

// CmdID: 1199
message PhonePendantOpReq {
  PhonePendantOpType op = 1;
  uint32 on_id = 2;
  uint32 off_id = 3;
}

// CmdID: 1200
message PhonePendantOpRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NO_OWN = 2;
    EXPIRED = 3;
    OFF_ID_ERROR = 4;
  }

  PhonePendantOpRsp.Retcode retcode = 1;
  PhonePendantOpType op = 2;
  uint32 on_id = 3;
  uint32 off_id = 4;
}

// CmdID: 1215
message GetTeamListReq {
  repeated uint32 stage_id_list = 1;
  repeated uint32 team_id_list = 2;
  bool is_select_in_order = 3;
  uint32 level = 4;
}

// CmdID: 1216
message GetTeamListRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NO_STAGE = 2;
    SERVER_BUSY = 3;
  }

  GetTeamListRsp.Retcode retcode = 1;
  repeated MpTeamData team_data_list = 2;
}

// CmdID: 1245
message GetEmojiDataReq {
}

// CmdID: 1246
message GetEmojiDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetEmojiDataRsp.Retcode retcode = 1;
  repeated uint32 emoji_id_list = 2;
  bool is_all = 3;
}

message MpMatchStage {
  uint32 stage_id = 1;
  bool has_leader_stamina = 2;
  bool has_leader_enter_times = 3;
  AvatarDetailData avatar_detail = 4;
  repeated AvatarDetailData backup_avatar_list = 5;
  bool has_leader_theme_wanted_ticket = 6;
}

// CmdID: 1247
message MpFastMatchReq {
  repeated uint32 stage_id_list = 1;
  uint32 device_score = 2;
  repeated MpMatchStage match_stage_list = 3;
  uint32 level = 4;
  uint32 client_rtt = 5;
  MpTeamMember member = 6;
  uint32 report_num = 7;
}

// CmdID: 1248
message MpFastMatchRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    STAGE_ERROR = 2;
    CLIENT_VERSION_ERROR = 3;
    BAD_NETWORK = 4;
    SERVER_BUSY = 5;
    ALREADY_IN_TEAM = 6;
    MATCH_STAGE_EXCEED_MAX = 7;
    IN_SQUAD = 8;
    IN_SQUAD_MATCH = 9;
    IN_ROOM = 10;
  }

  MpFastMatchRsp.Retcode retcode = 1;
  repeated uint32 stage_id_list = 2;
  uint32 lobby_id = 3;
}

message SnsShowExBossData {
  uint32 cur_rank = 1;
  uint32 total_score = 2;
  repeated FinishedExBossInfo finished_boss_info_list = 3;
  uint32 rank_id = 4;
  uint32 cur_rank_percent = 5;
}

message SnsShowEndlessData {
  EndlessType cur_type = 1;
  OpenworldEndlessPlayer openworld_endless_player_data = 3;
}

message SnsShowTowerRaidData {
  uint32 hard_level = 1;
  uint32 max_hard_level = 2;
  uint32 total_enter_times = 3;
  uint32 total_battle_during_time = 4;
}

// CmdID: 1266
message GetSnsShowDataReq {
  uint32 sns_show_type = 1;
  uint32 target_uid = 2;
  bool is_friend = 3;
  uint32 ex_boss_schedule_id = 4;
}

// CmdID: 1267
message GetSnsShowDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NO_PRIVILEDGE = 2;
  }

  GetSnsShowDataRsp.Retcode retcode = 1;
  uint32 sns_show_type = 2;
  uint32 target_uid = 3;
  SnsShowEndlessData sns_show_endless_data = 4;
  SnsShowExBossData sns_show_ex_boss_data = 5;
  repeated WikiDetailData wiki_detail_data_list = 6;
  PlayerCardData card_data = 7;
  PlayerDetailData player_data = 8;
  uint32 target_uid_level = 9;
  SnsShowTowerRaidData sns_show_tower_raid_data = 10;
}

message MasterPupilTagSwitch {
  MasterPupilType type = 1;
  bool is_open = 2;
}

// CmdID: 1270
message GetClientSettingReq {
  uint32 client_setting_type = 1;
}

message AvatarArtifactSwitch {
  uint32 avatar_id = 1;
  bool is_artifact_switch_on = 2;
}

// CmdID: 1271
message UpdateClientSettingReq {
  uint32 client_setting_type = 1;
  bool is_weekly_guide_switch_on = 2;
  repeated SnsShowPriviledge sns_show_priviledge_list = 3;
  AvatarArtifactSwitch avatar_artifact_switch = 4;
  MasterPupilTagSwitch master_pupil_tag_switch = 5;
}

// CmdID: 1272
message GetClientSettingRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetClientSettingRsp.Retcode retcode = 1;
  uint32 client_setting_type = 2;
  bool is_weekly_guide_switch_on = 3;
  repeated SnsShowPriviledge sns_show_priviledge_list = 4;
  repeated AvatarArtifactSwitch avatar_artifact_switch_list = 5;
  repeated MasterPupilTagSwitch master_pupil_tag_switch_list = 6;
}

// CmdID: 1273
message GetOtherPlayerClientSettingReq {
  uint32 target_uid = 1;
  uint32 client_setting_type = 2;
}

// CmdID: 1274
message GetOtherPlayerClientSettingRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetOtherPlayerClientSettingRsp.Retcode retcode = 1;
  uint32 target_uid = 2;
  uint32 client_setting_type = 3;
  bool is_weekly_guide_switch_on = 4;
  repeated SnsShowPriviledge sns_show_priviledge_list = 5;
}

// CmdID: 1365
message UpdateLobbySettingReq {
  string team_name = 1;
  uint32 min_level = 3;
  LobbyEnterType lobby_enter_type = 4;
  uint32 max_level = 5;
}

// CmdID: 1366
message UpdateLobbySettingRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_LOBBY = 2;
    NOT_LEADER = 3;
    TEAM_NAME_ERROR = 4;
  }

  UpdateLobbySettingRsp.Retcode retcode = 1;
}

// CmdID: 1367
message ExchangePurpleJadeReq {
  uint32 hcoin_num = 1;
  uint32 mcoin_num = 2;
}

// CmdID: 1368
message ExchangePurpleJadeRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    LACK_HCOIN = 2;
    CAN_NOT_EXCHANGE = 3;
    LIMIT_FOR_EXCHANGE = 4;
    LACK_EXCHANGE_NUM = 5;
    LACK_MCOIN = 6;
  }

  ExchangePurpleJadeRsp.Retcode retcode = 1;
  uint32 hcoin_cost = 2;
  uint32 purple_jade_added = 3;
  uint32 mcoin_cost = 4;
}

// CmdID: 1374
message GetBriefDataListReq {
  repeated uint32 uid_list = 1;
}

// CmdID: 1375
message GetBriefDataListRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    UID_NUM_LIMIT = 2;
    TOO_FREQUENT = 3;
  }

  GetBriefDataListRsp.Retcode retcode = 1;
  repeated PlayerFriendBriefData uid_brief_data_list = 2;
}

// CmdID: 1378
message FinishPlotReq {
  uint32 plot_type = 1;
  uint32 plot_id = 3;
  uint32 dialog_id = 4;
  repeated uint32 avatar_id_list = 5;
  uint32 visual_novel_id = 6;
}

// CmdID: 1379
message FinishPlotRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    PLOT_ERROR = 2;
    PLOT_FINISHED = 3;
  }

  FinishPlotRsp.Retcode retcode = 1;
  uint32 plot_type = 2;
  uint32 plot_id = 4;
  uint32 dialog_id = 5;
  repeated RewardData reward_list = 6;
  repeated DropItem drop_item_list = 7;
}

// CmdID: 1380
message GetRegionUidRangeReq {
}

message RegionUidRange {
  string region_name = 1;
  uint32 start_uid = 2;
  uint32 end_uid = 3;
}

// CmdID: 1381
message GetRegionUidRangeRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetRegionUidRangeRsp.Retcode retcode = 1;
  string local_region_name = 2;
  repeated RegionUidRange region_uid_range_list = 3;
}

// CmdID: 1382
message GetPlotListReq {
}

// CmdID: 1383
message GetPlotListRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetPlotListRsp.Retcode retcode = 1;
  repeated uint32 plot_list = 2;
}

message FarmProduceMaterialDetail {
  uint32 material_id = 1;
  uint32 has_produce_times_total = 2;
}

message FarmSlotDetail {
  uint32 slot_id = 1;
  uint32 slot_status = 2;
  uint32 produce_begin_time = 3;
  uint32 produce_end_time = 4;
  uint32 produce_material_id = 5;
  uint32 has_produce_times_daily = 6;
}

// CmdID: 1385
message GetFarmActivityDataReq {
}

// CmdID: 1386
message GetFarmActivityDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_SCHEDULE = 2;
  }

  GetFarmActivityDataRsp.Retcode retcode = 1;
  uint32 schedule_id = 2;
  uint32 farm_level = 3;
  uint32 farm_exp = 4;
  repeated FarmSlotDetail slot_detail_list = 5;
  repeated FarmProduceMaterialDetail produce_material_list = 6;
}

// CmdID: 1387
message UnlockFarmSlotReq {
  uint32 slot_id = 1;
}

// CmdID: 1388
message UnlockFarmSlotRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    FARM_LEVEL_LACK = 2;
    MATERIAL_LACK = 3;
  }

  UnlockFarmSlotRsp.Retcode retcode = 1;
  uint32 slot_id = 2;
}

// CmdID: 1389
message StartFarmProduceReq {
  uint32 slot_id = 1;
  uint32 produce_material_id = 2;
}

// CmdID: 1390
message StartFarmProduceRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    SLOT_LOCKED = 2;
    SLOT_IN_PRODUCE = 3;
    EQUIPMENT_MATERIAL_LIMIT = 4;
    PRODUCE_MATERIAL_LIMIT = 5;
    PRODUCE_TIMES_LIMIT = 6;
  }

  StartFarmProduceRsp.Retcode retcode = 1;
  uint32 slot_id = 2;
  uint32 produce_material_id = 3;
  FarmSlotDetail slot_detail = 4;
}

// CmdID: 1391
message FinishFarmProduceReq {
  uint32 slot_id = 1;
  bool is_finish_all = 2;
}

// CmdID: 1392
message FinishFarmProduceRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    SLOT_LOCKED = 2;
    NOT_IN_PRODUCE = 3;
    NOT_FINISH = 4;
  }

  FinishFarmProduceRsp.Retcode retcode = 1;
  uint32 slot_id = 2;
  bool is_finish_all = 3;
  uint32 reward_farm_exp = 4;
  repeated Material produce_material_list = 5;
  RewardData reward_data = 6;
}

// CmdID: 1393
message SpeedUpFarmProduceReq {
  uint32 slot_id = 1;
  uint32 speed_up_material_id = 2;
  uint32 speed_up_material_num = 3;
}

// CmdID: 1394
message SpeedUpFarmProduceRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_PRODUCE = 2;
    MATERIAL_LACK = 3;
  }

  SpeedUpFarmProduceRsp.Retcode retcode = 1;
  uint32 slot_id = 2;
  uint32 speed_up_material_id = 3;
  uint32 speed_up_material_num = 4;
}

// CmdID: 1395
message FarmActivityNotify {
  uint32 farm_level = 1;
  uint32 farm_exp = 2;
  repeated FarmSlotDetail slot_detail_list = 3;
  repeated FarmProduceMaterialDetail produce_material_list = 4;
}

// CmdID: 1444
message AvatarArtifactUnlockReq {
  uint32 avatar_id = 1;
  uint32 artifact_id = 2;
}

// CmdID: 1445
message AvatarArtifactUnlockRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    AVATAR_LEVEL_LACK = 2;
    AVATAR_STAR_LACK = 3;
    MATERIAL_LACK = 4;
    FEATURE_CLOSED = 5;
  }

  AvatarArtifactUnlockRsp.Retcode retcode = 1;
  uint32 avatar_id = 2;
  uint32 artifact_id = 3;
  RewardData reward_data = 4;
}

// CmdID: 1446
message AvatarArtifactLevelUpReq {
  uint32 avatar_id = 1;
  uint32 artifact_id = 2;
}

// CmdID: 1447
message AvatarArtifactLevelUpRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    AVATAR_LEVEL_LACK = 2;
    AVATAR_STAR_LACK = 3;
    MATERIAL_LACK = 4;
    FEATURE_CLOSED = 5;
  }

  AvatarArtifactLevelUpRsp.Retcode retcode = 1;
  uint32 avatar_id = 2;
  uint32 artifact_id = 3;
  AvatarDetailData avatar_detail = 4;
  RewardData reward_data = 5;
}

// CmdID: 1448
message TakeGobackScoreRewardReq {
  uint32 score_id = 1;
}

// CmdID: 1449
message TakeGobackScoreRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    SCORE_LACK = 2;
    NOT_GOBACK = 3;
    HAS_TAKE = 4;
  }

  TakeGobackScoreRewardRsp.Retcode retcode = 1;
  uint32 score_id = 2;
  repeated RewardData reward_list = 3;
  uint32 score = 4;
}

message AvatarEquipSuite {
  uint32 suite_id = 1;
  uint32 weapon_unique_id = 2;
  uint32 stigmata_unique_id_1 = 3;
  uint32 stigmata_unique_id_2 = 4;
  uint32 stigmata_unique_id_3 = 5;
  string suite_name = 6;
}

// CmdID: 1454
message GetAvatarEquipSuiteReq {
  uint32 avatar_id = 1;
}

// CmdID: 1455
message GetAvatarEquipSuiteRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetAvatarEquipSuiteRsp.Retcode retcode = 1;
  uint32 avatar_id = 2;
  repeated AvatarEquipSuite equip_suite_list = 3;
}

// CmdID: 1456
message SetAvatarEquipSuiteReq {
  uint32 avatar_id = 1;
  uint32 suite_id = 2;
  AvatarEquipSuite suite = 3;
}

// CmdID: 1457
message SetAvatarEquipSuiteRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    AVATAR_LOCK = 2;
    SLOT_WEAPON = 3;
    SLOT_STIGMATA_1 = 4;
    SLOT_STIGMATA_2 = 5;
    SLOT_STIGMATA_3 = 6;
    SUITE_ID = 7;
    SENSITIVE_WORDS = 8;
    NAME_LEN_ERROR = 9;
    TOO_FREQUENT = 10;
    FORMAT_ERROR = 11;
  }

  SetAvatarEquipSuiteRsp.Retcode retcode = 1;
  uint32 suite_id = 2;
}

// CmdID: 1458
message SelectAvatarEquipSuiteReq {
  uint32 avatar_id = 1;
  uint32 suite_id = 2;
}

// CmdID: 1459
message SelectAvatarEquipSuiteRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    AVATAR_LOCK = 2;
    SLOT_WEAPON = 3;
    SLOT_STIGMATA_1 = 4;
    SLOT_STIGMATA_2 = 5;
    SLOT_STIGMATA_3 = 6;
  }

  SelectAvatarEquipSuiteRsp.Retcode retcode = 1;
  uint32 succ_num = 2;
  uint32 suite_id = 3;
}

// CmdID: 1473
message RefreshAndSyncMissionNotify {
}

// CmdID: 1480
message GetCurrencyExchangeInfoReq {
}

// CmdID: 1481
message GetCurrencyExchangeInfoRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetCurrencyExchangeInfoRsp.Retcode retcode = 1;
  uint32 purple_jade_exchanged_num = 3;
}

// CmdID: 1488
message SetLevelLockReq {
  uint32 level_lock_id = 1;
}

// CmdID: 1489
message SetLevelLockRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_MEET_MAX_LEVEL = 2;
    NOT_NEXT_ID = 3;
  }

  SetLevelLockRsp.Retcode retcode = 1;
  uint32 level_lock_id = 2;
}

message FastPassParaOw {
  uint32 map_id = 1;
  uint32 quest_id = 2;
  repeated uint32 finish_challenge_list = 3;
}

message FastPassParaWeekday {
  uint32 stage_id = 1;
}

// CmdID: 1490
message FinishFastPassReq {
  uint32 fast_pass_type = 1;
  FastPassParaOw fast_pass_para_ow = 2;
  FastPassParaWeekday fast_pass_para_weekday = 3;
}

// CmdID: 1491
message FinishFastPassRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_SCHEDULE = 2;
    MATERIAL_LACK = 3;
    QUEST_NOT_EXIST = 4;
    QUEST_NOT_DOING = 5;
    MAP_NOT_FOUND = 6;
    NO_USE_TIMES = 7;
    STAGE_NOT_EXIST = 8;
    STAGE_CANT_FAST_PASS = 9;
    NO_ENTER_TIMES = 10;
    STAMINA_LACK = 11;
    EQUIPMENT_FULL = 12;
    GENERATE_DROP_FAILED = 13;
  }

  FinishFastPassRsp.Retcode retcode = 1;
  uint32 fast_pass_type = 2;
  repeated DropItem drop_item_list = 4;
  FastPassParaOw fast_pass_para_ow = 5;
  FastPassParaWeekday fast_pass_para_weekday = 6;
  uint32 player_exp_reward = 7;
  uint32 scoin_reward = 8;
  uint32 exp_convert_scoin = 9;
}

// CmdID: 1492
message SetWarshipAvatarReq {
  uint32 first_avatar_id = 1;
  uint32 second_avatar_id = 2;
}

// CmdID: 1493
message SetWarshipAvatarRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    AVATAR_NOT_EXIST = 2;
    AVATAR_NOT_TWINS = 3;
  }

  SetWarshipAvatarRsp.Retcode retcode = 1;
}

// CmdID: 1494
message CreateAlipayOrderReq {
  enum TradeType {
    NONE = 0;
    APP = 1;
    QR_CODE = 2;
    HUA_BEI = 3;
  }

  string product_name = 1;
  string total_fee = 2;
  string notify_url = 3;
  string body = 4;
  CreateAlipayOrderReq.TradeType trade_type = 5;
}

// CmdID: 1495
message CreateAlipayOrderRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  CreateAlipayOrderRsp.Retcode retcode = 1;
  string qr_code_url = 2;
  string product_name = 3;
  string order_string = 4;
}

message Subscription {
  uint32 subs_id = 1;
  uint32 expires_time = 2;
}

// CmdID: 1496
message SubscriptionStatusNotify {
  repeated Subscription subs_list = 1;
}

// CmdID: 1502
message GetChatRedEnvelopeInfoReq {
  uint32 sender_uid = 1;
  uint32 red_envelope_id = 2;
}

// CmdID: 1503
message GetChatRedEnvelopeInfoRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetChatRedEnvelopeInfoRsp.Retcode retcode = 1;
  uint32 sender_uid = 2;
  uint32 red_envelope_id = 3;
  uint32 taken_num = 4;
  uint32 expire_time = 5;
  repeated TakeChatRedEnvelopePlayer take_red_envelope_list = 6;
}

// CmdID: 1517
message WantedMirrorRecoveryReq {
  EquipmentItemList consume_item_list = 1;
}

// CmdID: 1518
message WantedMirrorRecoveryRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    LOCK = 3;
    CONSUME_ITEM_NOT_EXIST = 4;
    CONSUME_ITEM_IN_USE = 5;
    CONSUME_ITEM_REPEAT = 6;
    CONSUME_ITEM_PROTECTED = 7;
    COST_GACHA_TICKET = 8;
    COST_SENIOR_EQUIP_FROM_NEW_DEVICE = 9;
    COST_SENIOR_EQUIP_CANCEL_PROTECT_TOO_SOON = 10;
    CONSUME_ITEM_GRAND_KEY = 11;
    CONSUME_ITEM_IN_FACILITY = 12;
    LACK_TICKET = 13;
    CONSUME_ITEM_PROTECTED_BY_SECURITY_PASSWORD = 14;
  }

  WantedMirrorRecoveryRsp.Retcode retcode = 1;
  RewardData reward_data = 2;
}

message RecommendMissionPanel {
  uint32 panel_id = 1;
  bool is_panel_show = 2;
  uint32 mission_begin_time = 3;
}

// CmdID: 1519
message GetRecommendMissionPanelListReq {
}

// CmdID: 1520
message GetRecommendMissionPanelListRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
  }

  GetRecommendMissionPanelListRsp.Retcode retcode = 1;
  repeated RecommendMissionPanel recommend_mission_panel_list = 2;
}

// CmdID: 1523
message GetCustomHeadDataReq {
}

// CmdID: 1524
message GetCustomHeadDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetCustomHeadDataRsp.Retcode retcode = 1;
  bool is_all = 2;
  repeated CustomHead custom_head_list = 3;
}

// CmdID: 1525
message SetCustomHeadReq {
  uint32 id = 1;
}

// CmdID: 1526
message SetCustomHeadRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    LOCKED = 2;
  }

  SetCustomHeadRsp.Retcode retcode = 1;
}

// CmdID: 1528
message GetStageBuffReq {
  repeated uint32 stage_id_list = 1;
  repeated uint32 activity_buff_id_list = 2;
}

message StageBuff {
  uint32 stage_id = 1;
  repeated uint32 gen_buff_id_list = 2;
  repeated uint32 hold_buff_id_list = 3;
  bool is_new = 4;
  repeated uint32 carry_buff_id_list = 5;
}

message ActivityBuff {
  message Buff {
    uint32 buff_id = 1;
    uint32 buff_num = 2;
  }

  uint32 id = 1;
  repeated uint32 candidate_buff_id_list = 2;
  repeated ActivityBuff.Buff buff_list = 3;
  uint32 charge_value = 4;
  uint32 buff_charged_times = 5;
}

// CmdID: 1529
message GetStageBuffRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetStageBuffRsp.Retcode retcode = 1;
  repeated StageBuff stage_buff_list = 2;
  repeated ActivityBuff activity_buff_list = 3;
}

// CmdID: 1530
message ChooseStageBuffReq {
  uint32 activity_buff_id = 1;
  repeated uint32 buff_id_list = 2;
}

// CmdID: 1531
message ChooseStageBuffRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  ChooseStageBuffRsp.Retcode retcode = 1;
  uint32 activity_buff_id = 2;
}

// CmdID: 1538
message TriggerRecommendGoodsNotify {
  uint32 recommend_id = 1;
  repeated uint32 shop_goods_schedule_id_list = 2;
  uint32 trigger_recommend_goods_time = 3;
}

// CmdID: 1539
message ConfirmRecommendGoodsReq {
  uint32 recommend_id = 1;
}

// CmdID: 1540
message ConfirmRecommendGoodsRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  ConfirmRecommendGoodsRsp.Retcode retcode = 1;
  uint32 recommend_id = 2;
}

// CmdID: 1541
message GetStageRecommendAvatarReq {
  repeated string id_list = 1;
  AvatarRecommendType type = 2;
}

message RecommendAvatar {
  LineupBriefInfo lineup_info = 1;
  uint32 battle_times = 2;
  float battle_rate = 3;
  AvatarRecommendSource source = 5;
  string ext_info = 8;
  uint32 recommend_style = 9;
  uint32 rank = 10;
  bool is_has_course_info = 11;
}

message StageRecommendAvatar {
  string id = 1;
  repeated RecommendAvatar recommend_avatar_list = 2;
  AvatarRecommendType type = 3;
}

// CmdID: 1542
message GetStageRecommendAvatarRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ID_TOO_MUCH = 2;
  }

  GetStageRecommendAvatarRsp.Retcode retcode = 1;
  repeated StageRecommendAvatar stage_recommend_avatar_list = 2;
}

// CmdID: 1543
message SendDanmakuReq {
  uint32 danmaku_slot = 1;
  string content = 2;
}

// CmdID: 1544
message SendDanmakuRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    SENSITIVE_WORDS = 2;
    CHAT_FORBIDEN = 3;
    TOO_FREQUENT = 4;
    DANMAKU_CLOSED = 5;
    IN_BLACKLIST = 6;
    NUM_LIMIT = 7;
    LENGTH_LIMIT = 8;
  }

  SendDanmakuRsp.Retcode retcode = 1;
  uint32 danmaku_slot = 2;
  DanmakuContent content = 3;
  uint32 blacklist_expire_time = 4;
}

// CmdID: 1545
message GetDanmakuListReq {
  uint32 danmaku_slot = 1;
  uint32 start_idx = 2;
  uint32 end_idx = 3;
}

message DanmakuContent {
  string danmaku_id = 1;
  uint32 sender_uid = 2;
  string nickname = 3;
  uint32 send_time = 4;
  string content = 5;
}

// CmdID: 1546
message GetDanmakuListRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    DANMAKU_CLOSED = 2;
  }

  GetDanmakuListRsp.Retcode retcode = 1;
  uint32 danmaku_slot = 2;
  uint32 danmaku_slot_status = 3;
  uint32 start_idx = 4;
  uint32 end_idx = 5;
  repeated DanmakuContent danmaku_list = 6;
}

// CmdID: 1547
message GetDanmakuBriefInfoReq {
  uint32 danmaku_slot = 1;
}

message DanmakuSlotBriefInfo {
  uint32 danmaku_slot = 1;
  uint32 danmaku_slot_status = 2;
  uint32 danmaku_num = 3;
}

// CmdID: 1548
message GetDanmakuBriefInfoRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    DANMAKU_CLOSED = 2;
  }

  GetDanmakuBriefInfoRsp.Retcode retcode = 1;
  uint32 danmaku_slot = 2;
  DanmakuSlotBriefInfo brief_info = 3;
}

// CmdID: 1549
message ImpeachDanmakuReq {
  uint32 danmaku_slot = 1;
  uint32 sender_uid = 2;
  string danmaku_id = 3;
}

// CmdID: 1550
message ImpeachDanmakuRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    TOO_FREQUENT = 2;
    IMPEACH_SELF = 3;
  }

  ImpeachDanmakuRsp.Retcode retcode = 1;
}

// CmdID: 1551
message DanmakuBlacklistNotify {
  uint32 blacklist_expire_time = 1;
}

// CmdID: 1553
message GetTeamStatusReq {
  repeated uint32 team_id_list = 1;
}

// CmdID: 1554
message GetTeamStatusRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    SERVER_BUSY = 2;
  }

  GetTeamStatusRsp.Retcode retcode = 1;
  repeated MpTeamData team_data_list = 2;
}

// CmdID: 1555
message GetFastPassDataReq {
  uint32 fast_pass_type = 1;
}

// CmdID: 1556
message GetFastPassDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_EXIST = 2;
  }

  GetFastPassDataRsp.Retcode retcode = 1;
  uint32 fast_pass_type = 2;
  uint32 use_times = 3;
}

// CmdID: 1576
message GetPlayerOnlineStatusReq {
  repeated uint32 uid_list = 1;
}

message PlayerOnlineStatusInfo {
  uint32 uid = 1;
  uint32 online_status = 2;
  uint32 last_login_time = 3;
  uint32 last_logout_time = 4;
}

// CmdID: 1577
message GetPlayerOnlineStatusRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetPlayerOnlineStatusRsp.Retcode retcode = 1;
  repeated PlayerOnlineStatusInfo online_status_list = 2;
}

// CmdID: 1579
message MpSyncActionFromPlayerNotify {
  MpAction action = 1;
}

// CmdID: 1580
message MpSyncActionFromServerNotify {
  uint32 uid = 1;
  MpAction action = 2;
}

// CmdID: 1581
message VerifySamSungOrderNotify {
  string purchase_id = 1;
}

message ClientData {
  ClientDataType type = 1;
  uint32 id = 2;
  bytes data = 3;
}

// CmdID: 1586
message GetClientDataReq {
  ClientDataType type = 1;
  uint32 id = 2;
}

// CmdID: 1587
message GetClientDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_FOUND = 2;
  }

  GetClientDataRsp.Retcode retcode = 1;
  ClientDataType type = 2;
  uint32 id = 3;
  repeated ClientData client_data_list = 4;
}

// CmdID: 1588
message SetClientDataReq {
  ClientData client_data = 1;
}

// CmdID: 1589
message SetClientDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    SIZE_LIMIT = 2;
    UNKNOWN_ID = 3;
  }

  SetClientDataRsp.Retcode retcode = 1;
  ClientDataType type = 2;
  uint32 id = 3;
}

// CmdID: 1592
message WikiTakeActivitySuitRewardReq {
  uint32 suit_id = 1;
}

// CmdID: 1593
message WikiTakeActivitySuitRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    HAS_TAKE = 2;
    NOT_GET = 3;
  }

  WikiTakeActivitySuitRewardRsp.Retcode retcode = 1;
  uint32 suit_id = 2;
  RewardData reward = 3;
}

// CmdID: 1594
message GetBlackListReq {
  bool is_only_uid = 1;
}

// CmdID: 1595
message GetBlackListRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetBlackListRsp.Retcode retcode = 1;
  repeated PlayerFriendBriefData black_list = 2;
  bool is_whole_data = 3;
  bool is_only_uid = 4;
}

// CmdID: 1596
message AddToBlackListReq {
  uint32 target_uid = 1;
}

// CmdID: 1597
message AddToBlackListRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ALREADY_IN_LIST = 2;
    LIST_FULL = 3;
    TARGET_NOT_EXIST = 4;
  }

  AddToBlackListRsp.Retcode retcode = 1;
  uint32 target_uid = 2;
}

// CmdID: 1598
message DelFromBlackListReq {
  uint32 target_uid = 1;
}

// CmdID: 1599
message DelFromBlackListRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_LIST = 2;
  }

  DelFromBlackListRsp.Retcode retcode = 1;
  uint32 target_uid = 2;
}

// CmdID: 1600
message DebugHotPatchFileNotify {
  string file_url = 1;
}

message WebActivity {
  uint32 activity_id = 1;
  uint32 show_type = 2;
}

// CmdID: 1601
message GetWebActivityInfoReq {
}

// CmdID: 1602
message GetWebActivityInfoRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetWebActivityInfoRsp.Retcode retcode = 1;
  repeated WebActivity web_activity_list = 2;
}

// CmdID: 1603
message GetMiniRankReq {
  uint32 type = 1;
  uint32 stage_id = 2;
  uint32 activity_id = 3;
  uint32 avatar_id = 4;
  uint32 rank_id = 5;
  uint32 challenge_id = 6;
  uint32 entity_id = 7;
}

// CmdID: 1604
message GetMiniRankRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetMiniRankRsp.Retcode retcode = 1;
  uint32 type = 2;
  uint32 stage_id = 3;
  RankShowData rank_data = 4;
  uint32 activity_id = 5;
  uint32 avatar_id = 6;
  uint32 challenge_id = 7;
  uint32 entity_id = 8;
}

// CmdID: 1605
message ChargeActivityBuffReq {
  uint32 activity_buff_id = 1;
}

// CmdID: 1606
message ChargeActivityBuffRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_FOUND = 2;
    NOT_ALLOWED = 3;
    FULL_CHARGED = 4;
    MATERIAL_LACK = 5;
  }

  ChargeActivityBuffRsp.Retcode retcode = 1;
  uint32 activity_buff_id = 2;
}

// CmdID: 1607
message LoginWishGetMainDataReq {
}

message LoginWish {
  uint32 login_day = 1;
  uint32 wish_id = 2;
  uint32 choose_reward_id = 3;
  bool is_reward_taken = 4;
}

message LoginWishActivity {
  uint32 activity_id = 1;
  uint32 show_begin_time = 2;
  uint32 show_end_time = 3;
  uint32 begin_time = 4;
  uint32 end_time = 5;
  uint32 login_days = 6;
  repeated uint32 has_take_reward_login_day_list = 7;
  repeated uint32 has_take_reward_special_day_list = 8;
  repeated LoginWish has_made_wish_list = 9;
}

// CmdID: 1608
message LoginWishGetMainDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  LoginWishGetMainDataRsp.Retcode retcode = 1;
  repeated LoginWishActivity activity_list = 2;
}

// CmdID: 1609
message LoginWishTakeLoginRewardReq {
  uint32 activity_id = 1;
  uint32 login_day = 2;
}

// CmdID: 1610
message LoginWishTakeLoginRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    DAY_LACK = 2;
    ALREADY_TAKEN = 3;
  }

  LoginWishTakeLoginRewardRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 login_day = 3;
  RewardData reward_data = 4;
}

// CmdID: 1611
message LoginWishTakeSpecialRewardReq {
  uint32 activity_id = 1;
  uint32 login_day = 2;
}

// CmdID: 1612
message LoginWishTakeSpecialRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    DAY_LACK = 2;
    ALREADY_TAKEN = 3;
  }

  LoginWishTakeSpecialRewardRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 login_day = 3;
  RewardData reward_data = 4;
}

// CmdID: 1613
message LoginWishMakeWishReq {
  uint32 activity_id = 1;
  uint32 login_day = 2;
  uint32 choose_reward_id = 3;
}

// CmdID: 1614
message LoginWishMakeWishRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    DAY_LACK = 3;
    REWARD_TAKEN = 4;
  }

  LoginWishMakeWishRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 login_day = 3;
  uint32 choose_reward_id = 4;
}

// CmdID: 1615
message LoginWishTakeWishRewardReq {
  uint32 activity_id = 1;
}

// CmdID: 1616
message LoginWishTakeWishRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  LoginWishTakeWishRewardRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  RewardData reward_data = 3;
}

// CmdID: 1619
message DevLevelChangeNotify {
  string dev_level_msg = 1;
}

// CmdID: 1620
message DelAvatarEquipSuiteReq {
  uint32 avatar_id = 1;
  uint32 suite_id = 2;
}

// CmdID: 1621
message DelAvatarEquipSuiteRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    AVATAR_LOCK = 2;
    SUITE_NOT_EXIST = 3;
    SUITE_ID_LIMIT = 4;
  }

  DelAvatarEquipSuiteRsp.Retcode retcode = 1;
  uint32 avatar_id = 2;
  uint32 suite_id = 3;
}

// CmdID: 1626
message ClientCheckNetworkEnvReq {
  string token_str = 1;
}

// CmdID: 1627
message ClientCheckNetworkEnvRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  ClientCheckNetworkEnvRsp.Retcode retcode = 1;
  string token_str = 2;
}

// CmdID: 1630
message GetStageRecommendAvatarCourseInfoReq {
  string id = 1;
  AvatarRecommendType type = 2;
  uint32 recommend_style = 3;
  uint32 rank = 4;
}

// CmdID: 1631
message GetStageRecommendAvatarCourseInfoRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetStageRecommendAvatarCourseInfoRsp.Retcode retcode = 1;
  string course_info = 2;
}

// CmdID: 1632
message GetMissionStepCompensationInfoReq {
}

message MissionCompensationReward {
  uint32 mission_id = 1;
  uint32 mission_compensation_reward_id = 2;
}

message MissionStepCompensation {
  uint32 type_id = 1;
  uint32 old_step_id = 2;
  uint32 new_step_id = 3;
  uint32 old_step_compensation_reward_id = 4;
  uint32 old_step_reward_id = 5;
  repeated MissionCompensationReward mission_compensation_list = 6;
  repeated uint32 old_step_compensation_reward_id_list = 7;
}

// CmdID: 1633
message GetMissionStepCompensationInfoRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NO_REWARD = 2;
  }

  GetMissionStepCompensationInfoRsp.Retcode retcode = 1;
  repeated MissionStepCompensation challenge_mission_compensation_list = 2;
  MissionStepCompensation mainline_misssion_compensation = 3;
  bool has_take_reward = 4;
}

// CmdID: 1634
message TakeMissionStepCompensationReq {
}

// CmdID: 1635
message TakeMissionStepCompensationRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    HAS_TAKEN = 2;
    NO_REWARD = 3;
  }

  TakeMissionStepCompensationRsp.Retcode retcode = 1;
  repeated RewardData reward_list = 2;
}

// CmdID: 1636
message GetEliteChapterCompensationInfoReq {
  uint32 chapter_id = 1;
}

message EliteChapterStageCompensation {
  uint32 stage_id = 1;
  bool is_first_win = 2;
  repeated uint32 challenge_reward_id_list = 3;
}

message EliteChapterActCompensation {
  uint32 act_id = 1;
  uint32 difficulty = 2;
  repeated uint32 challenge_reward_id_list = 3;
}

message EliteChapterCompensationInfo {
  uint32 chapter_id = 1;
  repeated EliteChapterStageCompensation stage_compensation_list = 2;
  repeated EliteChapterActCompensation act_compensation_list = 3;
  bool has_taken_compensation = 4;
}

// CmdID: 1637
message GetEliteChapterCompensationInfoRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetEliteChapterCompensationInfoRsp.Retcode retcode = 1;
  repeated EliteChapterCompensationInfo chapter_list = 2;
}

// CmdID: 1638
message TakeEliteChapterCompensationReq {
  uint32 chapter_id = 1;
}

// CmdID: 1639
message TakeEliteChapterCompensationRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    HAS_TAKEN = 2;
    NO_REWARD = 3;
    CHAPTER_NOT_FINISH = 4;
  }

  TakeEliteChapterCompensationRsp.Retcode retcode = 1;
  repeated RewardData reward_list = 2;
}

// CmdID: 1642
message UnlockPrivilegeReq {
  uint32 privilege_id = 1;
}

// CmdID: 1643
message UnlockPrivilegeRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    LEVEL_LACK = 2;
    NEWBIE_SCHEDULE_ERROR = 3;
    NEWBIE_DAY_LACK = 4;
    BUY_TIMES_LACK = 5;
    MCOIN_LACK = 6;
  }

  UnlockPrivilegeRsp.Retcode retcode = 1;
}

// CmdID: 1644
message MpSetExtraSkillReq {
  uint32 extra_skill_id = 1;
}

// CmdID: 1645
message MpSetExtraSkillRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_TEAM = 2;
  }

  MpSetExtraSkillRsp.Retcode retcode = 1;
}

// CmdID: 1646
message GetPrivilegeInfoReq {
}

message PrivilegeRightInfo {
  uint32 right_id = 1;
  uint32 type = 2;
  uint32 total_used_times = 3;
  uint32 max_use_times = 4;
  uint32 use_times = 5;
  uint32 next_auto_refresh_time = 6;
}

message PrivilegeInfo {
  uint32 privilege_id = 1;
  uint32 expire_time = 2;
  repeated PrivilegeRightInfo right_info_list = 3;
}

// CmdID: 1647
message GetPrivilegeInfoRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetPrivilegeInfoRsp.Retcode retcode = 1;
  repeated PrivilegeInfo privilege_list = 2;
}

// CmdID: 1648
message CreateSteamOrderReq {
  string product_name = 1;
  string product_desc = 2;
  string account_id = 3;
  uint64 order_id = 4;
}

// CmdID: 1649
message CreateSteamOrderRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  CreateSteamOrderRsp.Retcode retcode = 1;
}

// CmdID: 1650
message VerifySteamOrderNotify {
  string order_id = 1;
}

// CmdID: 1651
message UnlockGobackFundReq {
}

// CmdID: 1652
message UnlockGobackFundRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ALREADY_UNLOCKED = 2;
    MCOIN_LACK = 3;
  }

  UnlockGobackFundRsp.Retcode retcode = 1;
}

// CmdID: 1653
message TakeGobackFundRewardReq {
  uint32 progress_id = 1;
}

// CmdID: 1654
message TakeGobackFundRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ALREADY_TAKEN = 2;
    NO_REWARD = 3;
    FUND_LOCKED = 4;
  }

  TakeGobackFundRewardRsp.Retcode retcode = 1;
  RewardData reward_data = 2;
}

// CmdID: 1655
message ExBossSweepReq {
  uint32 boss_id = 1;
}

// CmdID: 1656
message ExBossSweepRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    LEVEL_LIMIT = 2;
    ENTER_TIMES_LACK = 3;
    FEATURE_LIMIT = 4;
    FEATURE_CLOSED = 5;
    FINISHED = 6;
    NOT_OPEN = 7;
  }

  ExBossSweepRsp.Retcode retcode = 1;
  uint32 boss_id = 2;
}

// CmdID: 1657
message ExBossTakeBossScoreRewardNotify {
  repeated RewardData reward_list = 1;
}

// CmdID: 1658
message BindHoyolabAccountReq {
  uint32 hoyolab_channel_id = 1;
  string hoyolab_account_uid = 2;
  string hoyolab_token = 3;
}

// CmdID: 1659
message BindHoyolabAccountRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ALREADY_BIND = 2;
    BIND_BY_OTHER = 3;
  }

  BindHoyolabAccountRsp.Retcode retcode = 1;
  string hoyolab_account_uid = 2;
}

// CmdID: 1660
message ChapterGroupGetDataReq {
  uint32 chapter_group_id = 1;
}

message ChapterGroupSite {
  uint32 site_id = 1;
  uint32 chapter_id = 2;
  ChapterGroupSiteStatus status = 3;
}

message ChapterGroup {
  uint32 id = 1;
  repeated ChapterGroupSite site_list = 2;
}

// CmdID: 1661
message ChapterGroupGetDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_EXIST = 2;
  }

  ChapterGroupGetDataRsp.Retcode retcode = 1;
  repeated ChapterGroup chapter_group_list = 2;
  bool is_all = 3;
  uint32 chapter_group_id = 4;
}

// CmdID: 1664
message WeekDayActivitySweepReq {
  repeated uint32 stage_id_list = 1;
}

// CmdID: 1665
message WeekDayActivitySweepRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  WeekDayActivitySweepRsp.Retcode retcode = 1;
  RewardData reward_data = 2;
  repeated DropItem drop_item_list = 3;
}

// CmdID: 1666
message GetWeekDayActivityCompensationInfoReq {
}

message WeekDayActivityStageCompensation {
  uint32 stage_id = 1;
  bool is_first_win = 2;
  repeated uint32 challenge_reward_list = 3;
}

// CmdID: 1667
message GetWeekDayActivityCompensationInfoRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetWeekDayActivityCompensationInfoRsp.Retcode retcode = 1;
  repeated WeekDayActivityStageCompensation stage_compensation_list = 2;
  bool has_taken_compensation = 3;
}

// CmdID: 1668
message TakeWeekDayActivityCompensationReq {
}

// CmdID: 1669
message TakeWeekDayActivityCompensationRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    HAS_TAKEN = 2;
    LEVEL_LACK = 3;
  }

  TakeWeekDayActivityCompensationRsp.Retcode retcode = 1;
  repeated RewardData reward_data_list = 2;
}

// CmdID: 1670
message RequestLogoffReq {
}

// CmdID: 1671
message RequestLogoffRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  RequestLogoffRsp.Retcode retcode = 1;
}

// CmdID: 1672
message GetChapterCompensationInfoReq {
  uint32 chapter_id = 1;
}

message ChapterStageCompensation {
  uint32 stage_id = 1;
  bool is_first_win = 2;
  repeated uint32 challenge_reward_id_list = 3;
}

message ChapterActCompensation {
  uint32 act_id = 1;
  uint32 difficulty = 2;
  repeated uint32 challenge_reward_id_list = 3;
}

message ChapterCompensationInfo {
  uint32 compensation_id = 1;
  repeated ChapterStageCompensation stage_compensation_list = 2;
  repeated ChapterActCompensation act_compensation_list = 3;
  bool is_taken_compensation = 4;
  uint32 chapter_id = 5;
}

// CmdID: 1673
message GetChapterCompensationInfoRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetChapterCompensationInfoRsp.Retcode retcode = 1;
  bool is_all = 2;
  repeated ChapterCompensationInfo compensate_list = 3;
}

// CmdID: 1674
message TakeChapterCompensationReq {
  uint32 chapter_id = 1;
}

// CmdID: 1675
message TakeChapterCompensationRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    HAS_TAKEN = 2;
    NO_REWARD = 3;
    CHAPTER_NOT_FINISH = 4;
  }

  TakeChapterCompensationRsp.Retcode retcode = 1;
  repeated RewardData reward_list = 2;
}

// CmdID: 1676
message GetChallengeStepCompensationInfoReq {
}

message StepMissionCompensation {
  uint32 mission_id = 1;
  uint32 reward_id = 2;
}

message StepCompensation {
  uint32 step_id = 1;
  uint32 step_reward_id = 2;
  repeated StepMissionCompensation mission_list = 3;
}

message ChallengeStepCompensation {
  uint32 compensation_id = 1;
  bool is_take_compensation = 2;
  repeated StepCompensation new_challenge_step_compensation_list = 3;
  repeated StepCompensation old_challenge_step_compensation_list = 4;
  repeated StepCompensation mainline_step_compensation_list = 5;
}

// CmdID: 1677
message GetChallengeStepCompensationInfoRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetChallengeStepCompensationInfoRsp.Retcode retcode = 1;
  repeated ChallengeStepCompensation compensation_list = 2;
}

// CmdID: 1678
message TakeChallengeStepCompensationReq {
  uint32 compensation_id = 1;
}

// CmdID: 1679
message TakeChallengeStepCompensationRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    HAS_TAKEN = 2;
    LEVEL_LACK = 3;
    NO_REWARD = 4;
  }

  TakeChallengeStepCompensationRsp.Retcode retcode = 1;
  repeated RewardData reward_list = 2;
}

// CmdID: 1684
message GetSpecificRankReq {
  SpecificRankType type = 1;
  uint32 param = 2;
}

// CmdID: 1685
message GetSpecificRankRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetSpecificRankRsp.Retcode retcode = 1;
  SpecificRankType type = 2;
  uint32 param = 3;
  RankShowData rank_data = 4;
}

// CmdID: 1690
message GetInviteActivityInviterDataReq {
}

message InviterActivity {
  uint32 schedule_id = 1;
  uint32 invite_num = 2;
  uint32 taken_reward_progress = 3;
  uint32 accept_invite_num = 4;
}

// CmdID: 1691
message GetInviteActivityInviterDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    LEVEL_LACK = 2;
    FEATURE_CLOSED = 3;
  }

  GetInviteActivityInviterDataRsp.Retcode retcode = 1;
  string my_invite_code = 2;
  repeated InviterActivity inviter_activity_info_list = 3;
}

// CmdID: 1692
message TakeInviteActivityInviterProgressRewardReq {
  InviterActivityType activity_type = 1;
}

// CmdID: 1693
message TakeInviteActivityInviterProgressRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NO_REWARD = 2;
    FEATURE_CLOSED = 3;
  }

  TakeInviteActivityInviterProgressRewardRsp.Retcode retcode = 1;
  InviterActivityType activity_type = 2;
  uint32 taken_reward_progress = 3;
  RewardData reward_data = 4;
}

message InviteeActivity {
  uint32 schedule_id = 1;
  InviteeActivityType activity_type = 2;
  uint32 taken_invitee_reward_id = 3;
  uint32 end_time = 4;
}

// CmdID: 1694
message GetInviteActivityInviteeDataReq {
}

// CmdID: 1695
message GetInviteActivityInviteeDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    FEATURE_CLOSED = 2;
  }

  GetInviteActivityInviteeDataRsp.Retcode retcode = 1;
  repeated InviteeActivity invitee_activity_info_list = 2;
}

// CmdID: 1696
message InviteActivityAcceptInviteReq {
  string invite_code = 1;
}

// CmdID: 1697
message InviteActivityAcceptInviteRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    INVITE_CODE_ERROR = 2;
    LEVEL_LACK = 3;
    INVITE_FULL = 4;
    INVITE_INVALID_REGION = 5;
    INVITE_CONDITION_ERROR = 6;
    NO_ACTIVITY = 7;
    ALREADY_INVITED = 8;
    INVITE_DAILY_LIMIT = 9;
    FEATURE_CLOSED = 10;
  }

  InviteActivityAcceptInviteRsp.Retcode retcode = 1;
  uint32 invite_uid = 2;
  InviteeActivityType invite_type = 3;
  RewardData reward_data = 4;
}

// CmdID: 1703
message GetMainStoryBlessReq {
}

// CmdID: 1704
message GetMainStoryBlessRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetMainStoryBlessRsp.Retcode retcode = 1;
  repeated string bless_list = 2;
  string self_bless = 3;
}

// CmdID: 1701
message GetMainStoryMemoirsDataReq {
}

message MemoirsSpecialData {
  uint32 id = 1;
  uint32 value = 2;
  string str_value = 3;
  MemoirsDataType type = 4;
}

// CmdID: 1702
message GetMainStoryMemoirsDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    TOO_FREQUENT = 2;
  }

  GetMainStoryMemoirsDataRsp.Retcode retcode = 1;
  repeated MemoirsSpecialData data_list = 2;
  uint32 register_time = 3;
}

// CmdID: 1705
message GetActivityMainDataReq {
}

// CmdID: 1706
message GetActivityMainDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetActivityMainDataRsp.Retcode retcode = 1;
  repeated uint32 activity_module_type_list = 2;
}

// CmdID: 1707
message SetRedPointStatusNotify {
  uint32 content_id = 1;
  uint32 red_point_type = 2;
  bool is_show = 3;
}

message ManifestInfo {
  PlatFormType platform_type = 1;
  string name = 2;
}

message ManifestData {
  ManifestType type = 1;
  uint32 revision = 2;
  repeated ManifestInfo info_list = 3;
}

// CmdID: 1708
message ClientResetNotify {
  repeated ManifestData manifest_list = 1;
  uint32 data_version_num = 2;
}

// CmdID: 1709
message AddCustomAvatarTeamReq {
}

// CmdID: 1710
message AddCustomAvatarTeamRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    CUSTOM_AVATAR_TEAM_NUM_LIMIT = 2;
  }

  AddCustomAvatarTeamRsp.Retcode retcode = 1;
}

// CmdID: 1711
message DelCustomAvatarTeamReq {
  uint32 team_id = 1;
}

// CmdID: 1712
message DelCustomAvatarTeamRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    TEAM_ID_ERROR = 2;
  }

  DelCustomAvatarTeamRsp.Retcode retcode = 1;
}

// CmdID: 1713
message GetWorldMapRecommendReq {
}

message WorldMapRecommend {
  uint32 world_map_id = 1;
  int32 weight = 2;
  repeated uint32 active_condition_list = 3;
}

// CmdID: 1714
message GetWorldMapRecommendRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetWorldMapRecommendRsp.Retcode retcode = 1;
  repeated WorldMapRecommend activity_recommend_list = 2;
  repeated WorldMapRecommend permanent_recommend_list = 3;
}

// CmdID: 1715
message UnlockCollectionReq {
  repeated uint32 collection_id_list = 1;
}

// CmdID: 1716
message UnlockCollectionRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  UnlockCollectionRsp.Retcode retcode = 1;
  repeated uint32 collection_id_list = 2;
}

// CmdID: 1717
message GetCollectionListReq {
  repeated uint32 collection_id_list = 1;
}

// CmdID: 1718
message GetCollectionListRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetCollectionListRsp.Retcode retcode = 1;
  repeated uint32 collection_id_list = 2;
  repeated uint32 active_collection_id_list = 3;
}

// CmdID: 1719
message ActivateCollectionReq {
  uint32 collection_id = 1;
}

// CmdID: 1720
message ActivateCollectionRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    LOCKED = 2;
    CANNOT_ACTIVATE = 3;
  }

  ActivateCollectionRsp.Retcode retcode = 1;
  uint32 collection_id = 2;
}

// CmdID: 1721
message ExchangeAvatarStigmataReq {
  uint32 avatar_id_1 = 1;
  uint32 avatar_id_2 = 2;
  EquipmentSlot slot = 3;
}

// CmdID: 1722
message ExchangeAvatarStigmataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    SLOT_ERROR = 2;
    AVATAR_ERROR = 3;
  }

  ExchangeAvatarStigmataRsp.Retcode retcode = 1;
  uint32 avatar_id_1 = 2;
  uint32 avatar_id_2 = 3;
  EquipmentSlot slot = 4;
}

// CmdID: 1723
message ChooseSpecialGobackReq {
  uint32 special_id = 1;
}

// CmdID: 1724
message ChooseSpecialGobackRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_SPECIAL = 2;
    SPECIAL_ERROR = 3;
    ALREADY_CHOOSEN = 4;
  }

  ChooseSpecialGobackRsp.Retcode retcode = 1;
}

// CmdID: 1725
message GobackSpecialBpPurchaseReq {
}

// CmdID: 1726
message GobackSpecialBpPurchaseRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_SPECIAL = 2;
    NOT_CHOOSEN = 3;
    ALREADY_PURCHASED = 4;
    MCOIN_LACK = 5;
  }

  GobackSpecialBpPurchaseRsp.Retcode retcode = 1;
}

// CmdID: 1727
message GobackSpecialBpTakeRewardReq {
}

// CmdID: 1728
message GobackSpecialBpTakeRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_SPECIAL = 2;
    NOT_CHOOSEN = 3;
  }

  GobackSpecialBpTakeRewardRsp.Retcode retcode = 1;
  repeated RewardData reward_list = 2;
}

// CmdID: 1734
message WeaponHomologyReq {
  uint32 target_unique_id = 1;
  EquipmentItemList consume_item_list = 2;
  uint32 cur_homology_level = 3;
}

// CmdID: 1735
message WeaponHomologyRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    CAN_NOT_HOMOLOGY = 2;
    CONSUME_ITEM_NOT_EXIST = 3;
    CONSUME_ITEM_IN_USE = 4;
    CONSUME_ITEM_REPEAT = 5;
    CONSUME_ITEM_PROTECTED = 6;
    CONSUME_WEAPON_MAX_HOMOLOGY = 7;
    NOT_SAME_HOMOLOGY = 8;
    TARGET_WEAPON_MAX_HOMOLOGY = 9;
    TARGET_WEAPON_NOT_EXIST = 10;
    CONSUME_ITEM_OVERFLOW = 11;
    TARGET_WEAPON_IN_CONSUME_LIST = 12;
    CONSUME_ITEM_GRAND_KEY = 13;
    CONSUME_ITEM_PROTECTED_BY_SECURITY_PASSWORD = 14;
    NOT_HOMOLOGY_MATERIAL = 15;
    CONSUME_ITEM_TYPE_INVALID = 16;
  }

  WeaponHomologyRsp.Retcode retcode = 1;
  uint32 target_unique_id = 2;
}

message UpdateMission {
  MissionFinishWay finish_way = 1;
  uint32 finish_para = 2;
  string finish_para_str = 3;
  uint32 progress_add = 4;
  uint32 stage_id = 5;
}

// CmdID: 1736
message UpdateMultiMissionProgressReq {
  repeated UpdateMission update_mission_list = 1;
}

// CmdID: 1737
message UpdateMultiMissionProgressRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  UpdateMultiMissionProgressRsp.Retcode retcode = 1;
}

// CmdID: 1738
message WeaponLevelUpUseTicketReq {
  uint32 weapon_unique_id = 1;
}

// CmdID: 1739
message WeaponLevelUpUseTicketRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    WEAPON_NOT_EXIST = 2;
    WEAPON_QUALITY_ERROR = 3;
    LEVEL_LACK = 4;
    TICKET_LACK = 5;
  }

  WeaponLevelUpUseTicketRsp.Retcode retcode = 1;
  uint32 new_weapon_id = 2;
}

// CmdID: 1740
message StigmataLevelUpUseTicketReq {
  uint32 stigmata_unique_id = 1;
}

// CmdID: 1741
message StigmataLevelUpUseTicketRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    STIGMATA_NOT_EXIST = 2;
    STIGMATA_QUALITY_ERROR = 3;
    LEVEL_LACK = 4;
    TICKET_LACK = 5;
  }

  StigmataLevelUpUseTicketRsp.Retcode retcode = 1;
  uint32 new_stigmata_id = 2;
}

enum CmdTypeThree {
  CMD_TYPE_THREE_NONE = 0;
  CMD_CHECK_EXTRA_STORY_LOCKED_AVATAR_BIND_EQUIP_REQ = 1000;
  CMD_CHECK_EXTRA_STORY_LOCKED_AVATAR_BIND_EQUIP_RSP = 1001;
  CMD_SWITCH_EXTRA_STORY_LOCKED_AVATAR_BIND_EQUIP_REQ = 1002;
  CMD_SWITCH_EXTRA_STORY_LOCKED_AVATAR_BIND_EQUIP_RSP = 1003;
  CMD_TAKE_DORM_LIKES_DROP_REQ = 1008;
  CMD_TAKE_DORM_LIKES_DROP_RSP = 1009;
  CMD_CHECK_DORM_LIKES_DROP_REQ = 1010;
  CMD_CHECK_DORM_LIKES_DROP_RSP = 1011;
  CMD_GET_WORLD_MAP_DATA_REQ = 1012;
  CMD_GET_WORLD_MAP_DATA_RSP = 1013;
  CMD_GET_MP_STAGE_RECORD_REQ = 1018;
  CMD_GET_MP_STAGE_RECORD_RSP = 1019;
  CMD_LOBBY_SET_CLIENT_STATUS_REQ = 1026;
  CMD_LOBBY_SET_CLIENT_STATUS_RSP = 1027;
  CMD_LOBBY_PREPARE_COUNT_DOWN_NOTIFY = 1028;
  CMD_MP_STAGE_VOTE_COUNT_DOWN_NOTIFY = 1029;
  CMD_MP_STAGE_VOTE_REQ = 1030;
  CMD_MP_STAGE_VOTE_RSP = 1031;
  CMD_MP_STAGE_VOTE_RESULT_NOTIFY = 1032;
  CMD_LOBBY_TIMEOUT_NO_LEADER_NOTIFY = 1033;
  CMD_TAKE_WEEK_DAY_ACTIVITY_RETURN_COIN_REQ = 1034;
  CMD_TAKE_WEEK_DAY_ACTIVITY_RETURN_COIN_RSP = 1035;
  CMD_MP_STAGE_GET_VOTE_INFO_REQ = 1036;
  CMD_MP_STAGE_GET_VOTE_INFO_RSP = 1037;
  CMD_MP_STAGE_MEMBER_VOTE_NOTIFY = 1038;
  CMD_SWITCH_EXTRA_STORY_LINE_ENHANCE_REQ = 1039;
  CMD_SWITCH_EXTRA_STORY_LINE_ENHANCE_RSP = 1040;
  CMD_GET_CHALLENGE_STEP_BONUS_REQ = 1043;
  CMD_GET_CHALLENGE_STEP_BONUS_RSP = 1044;
  CMD_LEAVE_TEAM_NOTIFY = 1101;
  CMD_GET_LOBBY_STAT_REQ = 1102;
  CMD_GET_LOBBY_STAT_RSP = 1103;
  CMD_DISJOIN_FURNITURE_REQ = 1134;
  CMD_DISJOIN_FURNITURE_RSP = 1135;
  CMD_CHAT_REPORT_REQ = 1150;
  CMD_CHAT_REPORT_RSP = 1151;
  CMD_CHAT_REPORT_NOTIFY = 1152;
  CMD_CHAT_UNFORBID_NOTIFY = 1153;
  CMD_CHAT_FORBID_NOTIFY = 1154;
  CMD_GET_CHAT_REPORT_INFO_REQ = 1159;
  CMD_GET_CHAT_REPORT_INFO_RSP = 1160;
  CMD_CHAT_FORBID_SNS_NOTIFY = 1161;
  CMD_RECOVER_CHAT_CREDIT_NOTIFY = 1162;
  CMD_SEND_CHAT_RED_ENVELOPE_REQ = 1163;
  CMD_SEND_CHAT_RED_ENVELOPE_RSP = 1164;
  CMD_TAKE_CHAT_RED_ENVELOPE_REQ = 1165;
  CMD_TAKE_CHAT_RED_ENVELOPE_RSP = 1166;
  CMD_GET_PHOTO_DATA_REQ = 1191;
  CMD_GET_PHOTO_DATA_RSP = 1192;
  CMD_GET_WIKI_DATA_REQ = 1193;
  CMD_GET_WIKI_DATA_RSP = 1194;
  CMD_TAKE_WIKI_RATING_REWARD_REQ = 1195;
  CMD_TAKE_WIKI_RATING_REWARD_RSP = 1196;
  CMD_GET_PHONE_PENDANT_DATA_REQ = 1197;
  CMD_GET_PHONE_PENDANT_DATA_RSP = 1198;
  CMD_PHONE_PENDANT_OP_REQ = 1199;
  CMD_PHONE_PENDANT_OP_RSP = 1200;
  CMD_GET_TEAM_LIST_REQ = 1215;
  CMD_GET_TEAM_LIST_RSP = 1216;
  CMD_GET_EMOJI_DATA_REQ = 1245;
  CMD_GET_EMOJI_DATA_RSP = 1246;
  CMD_MP_FAST_MATCH_REQ = 1247;
  CMD_MP_FAST_MATCH_RSP = 1248;
  CMD_GET_SNS_SHOW_DATA_REQ = 1266;
  CMD_GET_SNS_SHOW_DATA_RSP = 1267;
  CMD_GET_CLIENT_SETTING_REQ = 1270;
  CMD_UPDATE_CLIENT_SETTING_REQ = 1271;
  CMD_GET_CLIENT_SETTING_RSP = 1272;
  CMD_GET_OTHER_PLAYER_CLIENT_SETTING_REQ = 1273;
  CMD_GET_OTHER_PLAYER_CLIENT_SETTING_RSP = 1274;
  CMD_UPDATE_LOBBY_SETTING_REQ = 1365;
  CMD_UPDATE_LOBBY_SETTING_RSP = 1366;
  CMD_EXCHANGE_PURPLE_JADE_REQ = 1367;
  CMD_EXCHANGE_PURPLE_JADE_RSP = 1368;
  CMD_GET_BRIEF_DATA_LIST_REQ = 1374;
  CMD_GET_BRIEF_DATA_LIST_RSP = 1375;
  CMD_FINISH_PLOT_REQ = 1378;
  CMD_FINISH_PLOT_RSP = 1379;
  CMD_GET_REGION_UID_RANGE_REQ = 1380;
  CMD_GET_REGION_UID_RANGE_RSP = 1381;
  CMD_GET_PLOT_LIST_REQ = 1382;
  CMD_GET_PLOT_LIST_RSP = 1383;
  CMD_GET_FARM_ACTIVITY_DATA_REQ = 1385;
  CMD_GET_FARM_ACTIVITY_DATA_RSP = 1386;
  CMD_UNLOCK_FARM_SLOT_REQ = 1387;
  CMD_UNLOCK_FARM_SLOT_RSP = 1388;
  CMD_START_FARM_PRODUCE_REQ = 1389;
  CMD_START_FARM_PRODUCE_RSP = 1390;
  CMD_FINISH_FARM_PRODUCE_REQ = 1391;
  CMD_FINISH_FARM_PRODUCE_RSP = 1392;
  CMD_SPEED_UP_FARM_PRODUCE_REQ = 1393;
  CMD_SPEED_UP_FARM_PRODUCE_RSP = 1394;
  CMD_SYNC_FARM_ACTIVITY_DATA_NOTIFY = 1395;
  CMD_AVATAR_ARTIFACT_UNLOCK_REQ = 1444;
  CMD_AVATAR_ARTIFACT_UNLOCK_RSP = 1445;
  CMD_AVATAR_ARTIFACT_LEVEL_UP_REQ = 1446;
  CMD_AVATAR_ARTIFACT_LEVEL_UP_RSP = 1447;
  CMD_TAKE_GOBACK_SCORE_REWARD_REQ = 1448;
  CMD_TAKE_GOBACK_SCORE_REWARD_RSP = 1449;
  CMD_GET_AVATAR_EQUIP_SUITE_REQ = 1454;
  CMD_GET_AVATAR_EQUIP_SUITE_RSP = 1455;
  CMD_SET_AVATAR_EQUIP_SUITE_REQ = 1456;
  CMD_SET_AVATAR_EQUIP_SUITE_RSP = 1457;
  CMD_SELECT_AVATAR_EQUIP_SUITE_REQ = 1458;
  CMD_SELECT_AVATAR_EQUIP_SUITE_RSP = 1459;
  CMD_REFRESH_AND_SYNC_MISSION_NOTIFY = 1473;
  CMD_GET_CURRENCY_EXCHANGE_INFO_REQ = 1480;
  CMD_GET_CURRENCY_EXCHANGE_INFO_RSP = 1481;
  CMD_SET_LEVEL_LOCK_REQ = 1488;
  CMD_SET_LEVEL_LOCK_RSP = 1489;
  CMD_FINISH_FAST_PASS_REQ = 1490;
  CMD_FINISH_FAST_PASS_RSP = 1491;
  CMD_SET_WARSHIP_AVATAR_REQ = 1492;
  CMD_SET_WARSHIP_AVATAR_RSP = 1493;
  CMD_CREATE_ALIPAY_ORDER_REQ = 1494;
  CMD_CREATE_ALIPAY_ORDER_RSP = 1495;
  CMD_SUBSCRIPTION_STATUS_NOTIFY = 1496;
  CMD_GET_CHAT_RED_ENVELOPE_INFO_REQ = 1502;
  CMD_GET_CHAT_RED_ENVELOPE_INFO_RSP = 1503;
  CMD_WANTED_MIRROR_RECOVERY_REQ = 1517;
  CMD_WANTED_MIRROR_RECOVERY_RSP = 1518;
  CMD_GET_RECOMMEND_MISSION_PANEL_LIST_REQ = 1519;
  CMD_GET_RECOMMEND_MISSION_PANEL_LIST_RSP = 1520;
  CMD_GET_CUSTOM_HEAD_DATA_REQ = 1523;
  CMD_GET_CUSTOM_HEAD_DATA_RSP = 1524;
  CMD_SET_CUSTOM_HEAD_REQ = 1525;
  CMD_SET_CUSTOM_HEAD_RSP = 1526;
  CMD_GET_STAGE_BUFF_REQ = 1528;
  CMD_GET_STAGE_BUFF_RSP = 1529;
  CMD_CHOOSE_STAGE_BUFF_REQ = 1530;
  CMD_CHOOSE_STAGE_BUFF_RSP = 1531;
  CMD_TRIGGER_RECOMMEND_GOODS_NOTIFY = 1538;
  CMD_CONFIRM_RECOMMEND_GOODS_REQ = 1539;
  CMD_CONFIRM_RECOMMEND_GOODS_RSP = 1540;
  CMD_GET_STAGE_RECOMMEND_AVATAR_REQ = 1541;
  CMD_GET_STAGE_RECOMMEND_AVATAR_RSP = 1542;
  CMD_SEND_DANMAKU_REQ = 1543;
  CMD_SEND_DANMAKU_RSP = 1544;
  CMD_GET_DANMAKU_LIST_REQ = 1545;
  CMD_GET_DANMAKU_LIST_RSP = 1546;
  CMD_GET_DANMAKU_BRIEF_INFO_REQ = 1547;
  CMD_GET_DANMAKU_BRIEF_INFO_RSP = 1548;
  CMD_IMPEACH_DANMAKU_REQ = 1549;
  CMD_IMPEACH_DANMAKU_RSP = 1550;
  CMD_DANMAKU_BLACKLIST_NOTIFY = 1551;
  CMD_GET_TEAM_STATUS_REQ = 1553;
  CMD_GET_TEAM_STATUS_RSP = 1554;
  CMD_GET_FAST_PASS_DATA_REQ = 1555;
  CMD_GET_FAST_PASS_DATA_RSP = 1556;
  CMD_GET_PLAYER_ONLINE_STATUS_REQ = 1576;
  CMD_GET_PLAYER_ONLINE_STATUS_RSP = 1577;
  CMD_MP_SYNC_ACTION_FROM_PLAYER_NOTIFY = 1579;
  CMD_MP_SYNC_ACTION_FROM_SERVER_NOTIFY = 1580;
  CMD_VERIFY_SAMSUNG_ORDER_NOTIFY = 1581;
  CMD_GET_CLIENT_DATA_REQ = 1586;
  CMD_GET_CLIENT_DATA_RSP = 1587;
  CMD_SET_CLIENT_DATA_REQ = 1588;
  CMD_SET_CLIENT_DATA_RSP = 1589;
  CMD_WIKI_TAKE_ACTIVITY_SUIT_REWARD_REQ = 1592;
  CMD_WIKI_TAKE_ACTIVITY_SUIT_REWARD_RSP = 1593;
  CMD_GET_BLACK_LIST_REQ = 1594;
  CMD_GET_BLACK_LIST_RSP = 1595;
  CMD_ADD_TO_BLACK_LIST_REQ = 1596;
  CMD_ADD_TO_BLACK_LIST_RSP = 1597;
  CMD_DEL_FROM_BLACK_LIST_REQ = 1598;
  CMD_DEL_FROM_BLACK_LIST_RSP = 1599;
  CMD_DEBUG_HOT_PATCH_FILE_NOTIFY = 1600;
  CMD_GET_WEB_ACTIVITY_INFO_REQ = 1601;
  CMD_GET_WEB_ACTIVITY_INFO_RSP = 1602;
  CMD_GET_MINI_RANK_REQ = 1603;
  CMD_GET_MINI_RANK_RSP = 1604;
  CMD_CHARGE_ACTIVITY_BUFF_REQ = 1605;
  CMD_CHARGE_ACTIVITY_BUFF_RSP = 1606;
  CMD_LOGIN_WISH_GET_MAIN_DATA_REQ = 1607;
  CMD_LOGIN_WISH_GET_MAIN_DATA_RSP = 1608;
  CMD_LOGIN_WISH_TAKE_LOGIN_REWARD_REQ = 1609;
  CMD_LOGIN_WISH_TAKE_LOGIN_REWARD_RSP = 1610;
  CMD_LOGIN_WISH_TAKE_SPECIAL_REWARD_REQ = 1611;
  CMD_LOGIN_WISH_TAKE_SPECIAL_REWARD_RSP = 1612;
  CMD_LOGIN_WISH_MAKE_WISH_REQ = 1613;
  CMD_LOGIN_WISH_MAKE_WISH_RSP = 1614;
  CMD_LOGIN_WISH_TAKE_WISH_REWARD_REQ = 1615;
  CMD_LOGIN_WISH_TAKE_WISH_REWARD_RSP = 1616;
  CMD_DEV_LEVEL_CHANGE_NOTIFY = 1619;
  CMD_DEL_AVATAR_EQUIP_SUITE_REQ = 1620;
  CMD_DEL_AVATAR_EQUIP_SUITE_RSP = 1621;
  CMD_CLIENT_CHECK_NETWORK_ENV_REQ = 1626;
  CMD_CLIENT_CHECK_NETWORK_ENV_RSP = 1627;
  CMD_GET_STAGE_RECOMMEND_AVATAR_COURSE_INFO_REQ = 1630;
  CMD_GET_STAGE_RECOMMEND_AVATAR_COURSE_INFO_RSP = 1631;
  CMD_GET_MISSION_STEP_COMPENSATION_INFO_REQ = 1632;
  CMD_GET_MISSION_STEP_COMPENSATION_INFO_RSP = 1633;
  CMD_TAKE_MISSION_STEP_COMPENSATION_REQ = 1634;
  CMD_TAKE_MISSION_STEP_COMPENSATION_RSP = 1635;
  CMD_GET_ELITE_CHAPTER_COMPENSATION_INFO_REQ = 1636;
  CMD_GET_ELITE_CHAPTER_COMPENSATION_INFO_RSP = 1637;
  CMD_TAKE_ELITE_CHAPTER_COMPENSATION_REQ = 1638;
  CMD_TAKE_ELITE_CHAPTER_COMPENSATION_RSP = 1639;
  CMD_UNLOCK_PRIVILEGE_REQ = 1642;
  CMD_UNLOCK_PRIVILEGE_RSP = 1643;
  CMD_MP_SET_EXTRA_SKILL_REQ = 1644;
  CMD_MP_SET_EXTRA_SKILL_RSP = 1645;
  CMD_GET_PRIVILEGE_INFO_REQ = 1646;
  CMD_GET_PRIVILEGE_INFO_RSP = 1647;
  CMD_CREATE_STEAM_ORDER_REQ = 1648;
  CMD_CREATE_STEAM_ORDER_RSP = 1649;
  CMD_VERIFY_STEAM_ORDER_NOTIFY = 1650;
  CMD_UNLOCK_GOBACK_FUND_REQ = 1651;
  CMD_UNLOCK_GOBACK_FUND_RSP = 1652;
  CMD_TAKE_GOBACK_FUND_REWARD_REQ = 1653;
  CMD_TAKE_GOBACK_FUND_REWARD_RSP = 1654;
  CMD_EX_BOSS_SWEEP_REQ = 1655;
  CMD_EX_BOSS_SWEEP_RSP = 1656;
  CMD_EX_BOSS_TAKE_BOSS_SCORE_REWARD_NOTIFY = 1657;
  CMD_BIND_HOYOLAB_ACCOUNT_REQ = 1658;
  CMD_BIND_HOYOLAB_ACCOUNT_RSP = 1659;
  CMD_CHAPTER_GROUP_GET_DATA_REQ = 1660;
  CMD_CHAPTER_GROUP_GET_DATA_RSP = 1661;
  CMD_WEEK_DAY_ACTIVITY_SWEEP_REQ = 1664;
  CMD_WEEK_DAY_ACTIVITY_SWEEP_RSP = 1665;
  CMD_GET_WEEK_DAY_ACTIVITY_COMPENSATION_INFO_REQ = 1666;
  CMD_GET_WEEK_DAY_ACTIVITY_COMPENSATION_INFO_RSP = 1667;
  CMD_TAKE_WEEK_DAY_ACTIVITY_COMPENSATION_REQ = 1668;
  CMD_TAKE_WEEK_DAY_ACTIVITY_COMPENSATION_RSP = 1669;
  CMD_REQUEST_LOGOFF_REQ = 1670;
  CMD_REQUEST_LOGOFF_RSP = 1671;
  CMD_GET_CHAPTER_COMPENSATION_INFO_REQ = 1672;
  CMD_GET_CHAPTER_COMPENSATION_INFO_RSP = 1673;
  CMD_TAKE_CHAPTER_COMPENSATION_REQ = 1674;
  CMD_TAKE_CHAPTER_COMPENSATION_RSP = 1675;
  CMD_GET_CHALLENGE_STEP_COMPENSATION_INFO_REQ = 1676;
  CMD_GET_CHALLENGE_STEP_COMPENSATION_INFO_RSP = 1677;
  CMD_TAKE_CHALLENGE_STEP_COMPENSATION_REQ = 1678;
  CMD_TAKE_CHALLENGE_STEP_COMPENSATION_RSP = 1679;
  CMD_GET_SPECIFIC_RANK_REQ = 1684;
  CMD_GET_SPECIFIC_RANK_RSP = 1685;
  CMD_GET_INVITE_ACTIVITY_INVITER_DATA_REQ = 1690;
  CMD_GET_INVITE_ACTIVITY_INVITER_DATA_RSP = 1691;
  CMD_TAKE_INVITE_ACTIVITY_INVITER_PROGRESS_REWARD_REQ = 1692;
  CMD_TAKE_INVITE_ACTIVITY_INVITER_PROGRESS_REWARD_RSP = 1693;
  CMD_GET_INVITE_ACTIVITY_INVITEE_DATA_REQ = 1694;
  CMD_GET_INVITE_ACTIVITY_INVITEE_DATA_RSP = 1695;
  CMD_INVITE_ACTIVITY_ACCEPT_INVITE_REQ = 1696;
  CMD_INVITE_ACTIVITY_ACCEPT_INVITE_RSP = 1697;
  CMD_GET_MAIN_STORY_MEMOIRS_DATA_REQ = 1701;
  CMD_GET_MAIN_STORY_MEMOIRS_DATA_RSP = 1702;
  CMD_GET_MAIN_STORY_BLESS_REQ = 1703;
  CMD_GET_MAIN_STORY_BLESS_RSP = 1704;
  CMD_GET_ACTIVITY_MAIN_DATA_REQ = 1705;
  CMD_GET_ACTIVITY_MAIN_DATA_RSP = 1706;
  CMD_SET_RED_POINT_STATUS_NOTIFY = 1707;
  CMD_CLIENT_RESET_NOTIFY = 1708;
  CMD_ADD_CUSTOM_AVATAR_TEAM_REQ = 1709;
  CMD_ADD_CUSTOM_AVATAR_TEAM_RSP = 1710;
  CMD_DEL_CUSTOM_AVATAR_TEAM_REQ = 1711;
  CMD_DEL_CUSTOM_AVATAR_TEAM_RSP = 1712;
  CMD_GET_WORLD_MAP_RECOMMEND_REQ = 1713;
  CMD_GET_WORLD_MAP_RECOMMEND_RSP = 1714;
  CMD_UNLOCK_COLLECTION_REQ = 1715;
  CMD_UNLOCK_COLLECTION_RSP = 1716;
  CMD_GET_COLLECTION_LIST_REQ = 1717;
  CMD_GET_COLLECTION_LIST_RSP = 1718;
  CMD_ACTIVATE_COLLECTION_REQ = 1719;
  CMD_ACTIVATE_COLLECTION_RSP = 1720;
  CMD_EXCHANGE_AVATAR_STIGMATA_REQ = 1721;
  CMD_EXCHANGE_AVATAR_STIGMATA_RSP = 1722;
  CMD_CHOOSE_SPECIAL_GOBACK_REQ = 1723;
  CMD_CHOOSE_SPECIAL_GOBACK_RSP = 1724;
  CMD_GOBACK_SPECIAL_BP_PURCHASE_REQ = 1725;
  CMD_GOBACK_SPECIAL_BP_PURCHASE_RSP = 1726;
  CMD_GOBACK_SPECIAL_BP_TAKE_REWARD_REQ = 1727;
  CMD_GOBACK_SPECIAL_BP_TAKE_REWARD_RSP = 1728;
  CMD_WEAPON_HOMOLOGY_REQ = 1734;
  CMD_WEAPON_HOMOLOGY_RSP = 1735;
  CMD_UPDATE_MULTI_MISSION_PROGRESS_REQ = 1736;
  CMD_UPDATE_MULTI_MISSION_PROGRESS_RSP = 1737;
  CMD_WEAPON_LEVEL_UP_USE_TICKET_REQ = 1738;
  CMD_WEAPON_LEVEL_UP_USE_TICKET_RSP = 1739;
  CMD_STIGMATA_LEVEL_UP_USE_TICKET_REQ = 1740;
  CMD_STIGMATA_LEVEL_UP_USE_TICKET_RSP = 1741;
  CMD_THREE_DEAD_LINE = 1999;
}

enum MpStageVoteOption {
  MP_STAGE_VOTE_OPTION_STAY_IN_TEAM = 0;
  MP_STAGE_VOTE_OPTION_STAGE_AGAIN = 1;
  MP_STAGE_VOTE_OPTION_NEXT_STAGE = 2;
}

enum CityActivityDataType {
  CITY_ACTIVITY_DATA_ALL = 0;
  CITY_ACTIVITY_DATA_EVENT = 1;
  CITY_ACTIVITY_DATA_PHONE_EVENT = 2;
  CITY_ACTIVITY_DATA_PHOTO = 3;
}

enum EmojiUnlockType {
  EMOJI_UNLOCK_TYPE_NONE = 0;
  EMOJI_UNLOCK_TYPE_DEFAULT = 1;
  EMOJI_UNLOCK_TYPE_ITEM_DROP = 2;
}

enum WikiDetailType {
  WIKI_UNKNOWN = 0;
  WIKI_ALL = 1;
  WIKI_STIGMATA = 2;
  WIKI_WEAPON = 3;
  WIKI_DORM = 4;
  WIKI_CG = 5;
  WIKI_MEDAL = 6;
  WIKI_ACHIEVEMENT = 7;
  WIKI_SKIN = 8;
  WIKI_EMOJI = 9;
  WIKI_AVATAR = 10;
}

enum ClientSettingType {
  CLIENT_SETTING_NONE = 0;
  CLIENT_SETTING_ALL = 1;
  CLIENT_SETTING_WEEKLY_GUIDE_SWITCH = 2;
  CLIENT_SETTING_SNS_SHOW = 3;
  CLIENT_SETTING_AVATAR_ARTIFACT = 4;
  CLIENT_SETTING_MASTER_PUPIL_TAG_SWITCH = 5;
}

enum PlotType {
  PLOT_TYPE_NORMAL = 0;
  PLOT_TYPE_DORM = 1;
  PLOT_TYPE_MATRIX = 2;
  PLOT_TYPE_RPG = 3;
  PLOT_TYPE_ISLAND = 4;
  PLOT_TYPE_CITY_ACTIVITY = 5;
}

enum FarmSlotStatus {
  FARM_SLOT_NONE = 0;
  FARM_SLOT_LOCKED = 1;
  FARM_SLOT_FREE = 2;
  FARM_SLOT_IN_PRODUCE = 3;
  FARM_SLOT_FINISH_PRODUCE = 4;
}

enum FastPassLimitType {
  FAST_PASS_LIMIT_NONE = 0;
  FAST_PASS_LIMIT_DAILY = 1;
  FAST_PASS_LIMIT_WEEKLY = 2;
}

enum FastPassType {
  FAST_PASS_TYPE_NONE = 0;
  FAST_PASS_TYPE_OW = 1;
  FAST_PASS_TYPE_WEEKDAY = 2;
}

enum PlatFormType {
  PLATFORM_NONE = 0;
  PLATFORM_ANDROID = 100001;
  PLATFORM_IOS = 200002;
  PLATFORM_PC = 300003;
}

enum CustomHeadType {
  CUSTOM_HEAD_TYPE_NONE = 0;
  CUSTOM_HEAD_TYPE_AVATAR = 1;
  CUSTOM_HEAD_TYPE_DRESS = 2;
  CUSTOM_HEAD_TYPE_NORMAL = 3;
}

enum AvatarRecommendType {
  AVATAR_RECOMMEND_NONE = 0;
  AVATAR_RECOMMEND_STAGE = 1;
  AVATAR_RECOMMEND_EXBOSS = 2;
  AVATAR_RECOMMEND_WEEKLY_REPORT_ENDLESS = 3;
  AVATAR_RECOMMEND_WEEKLY_REPORT_EX_BOSS = 4;
  AVATAR_RECOMMEND_WEEKLY_REPORT_ULTRA_ENDLESS = 5;
  AVATAR_RECOMMEND_ULTRA_ENDLESS = 6;
  AVATAR_RECOMMEND_GREEDY = 7;
  AVATAR_RECOMMEND_WEEKLY_REPORT_GREEDY = 8;
}

enum AvatarRecommendStyle {
  AVATAR_RECOMMEND_STYLE_NONE = 0;
  AVATAR_RECOMMEND_STYLE_HOT = 1;
  AVATAR_RECOMMEND_STYLE_CHOICE = 2;
  AVATAR_RECOMMEND_STYLE_SINGLE_AVATAR = 3;
}

enum AvatarRecommendSource {
  AVATAR_RECOMMEND_SOURCE_NONE = 0;
  AVATAR_RECOMMEND_SOURCE_DB = 1;
  AVATAR_RECOMMEND_SOURCE_DESIGN_DATA = 2;
}

enum DanmakuSlotStatus {
  DANMAKU_SLOT_STATUS_NONE = 0;
  DANMAKU_SLOT_STATUS_CLOSE = 1;
  DANMAKU_SLOT_STATUS_FAKE = 2;
}

enum PlayerOnlineStatus {
  PLAYER_ONLINE_STATUS_NONE = 0;
  PLAYER_ONLINE_STATUS_ONLINE = 1;
  PLAYER_ONLINE_STATUS_WAIT_SAVE = 2;
  PLAYER_ONLINE_STATUS_OFFLINE = 3;
}

enum MpAction {
  MP_ACTION_ERROR = 0;
  MP_ACTION_CLOSE_MVP_PAGE = 1;
  MP_ACTION_CLOSE_LIKE_PAGE = 2;
}

enum ClientDataType {
  CLIENT_DATA_NONE = 0;
  CLIENT_DATA_ALL = 1;
  CLIENT_DATA_RPG_TALE = 2;
  CLIENT_DATA_WORLDMAP = 3;
  CLIENT_DATA_KINGDOM_WAR = 4;
  CLIENT_DATA_AUGMENT_PERFORMANCE = 5;
  CLIENT_DATA_AVATAR = 6;
  CLIENT_DATA_OPENWORLD_CHAPTER = 7;
  CLIENT_DATA_OPENWORLD = 8;
  CLIENT_DATA_NINJA = 9;
  CLIENT_DATA_AVATAR_TUTORIAL = 10;
  CLIENT_DATA_PHONE_NOTICE = 11;
  CLIENT_DATA_NEWBIE_ACTIVITY = 12;
  CLIENT_DATA_CHATWORLD = 13;
  CLIENT_DATA_MAINSTORY_LEVEL_SPECIAL_JOB = 14;
  CLIENT_DATA_MEMOIRS = 15;
  CLIENT_DATA_GODWAR = 16;
  CLIENT_DATA_THEME_TOWER = 17;
  CLIENT_DATA_MAINLINE_BAG = 18;
  CLIENT_DATA_GOBACK = 19;
  CLIENT_DATA_ADVENTURE_GROUP = 20;
  CLIENT_DATA_NEW_RED_DOT_DRESS_ID = 21;
  CLIENT_DATA_NEW_ELF = 22;
  CLIENT_DATA_PJMS_ACTIVITY = 23;
  CLIENT_DATA_PJMS_AVATAR_TRIAL = 24;
  CLIENT_DATA_RESIDENT_ACTIVITY = 25;
  CLIENT_DATA_DURANDAL_CUBE = 26;
  CLIENT_DATA_MCK_CHAPTER_REWARD = 27;
  CLIENT_DATA_TILED_GAME_INN = 28;
}

enum WebActivityShowType {
  WEB_ACTIVITY_SHOW_TYPE_NONE = 0;
  WEB_ACTIVITY_SHOW_TYPE_TRACK_POINT = 1;
  WEB_ACTIVITY_SHOW_TYPE_FINISH = 2;
  WEB_ACTIVITY_SHOW_TYPE_HIDE = 3;
}

enum MiniRankType {
  MINI_RANK_TYPE_NONE = 0;
  MINI_RANK_RPG_STAGE = 1;
  MINI_RANK_GENERAL_ACTIVITY_STAGE = 2;
  MINI_RANK_CHAPTER_ACTIVITY_STAGE = 3;
  MINI_RANK_RPG_SCHEDULE = 4;
  MINI_RANK_RANCH_ACTIVITY_STAGE = 5;
  MINI_RANK_OPENWORLD_CHAPTER_CHALLENGE = 6;
  MINI_RANK_GLOBAL_EXPLORE_ENTITY_CONTRIBUTION = 7;
  MINI_RANK_GLOBAL_EXPLORE_TOTAL_CONTRIBUTION = 8;
  MINI_RANK_GLOBAL_EXPLORE_STAGE = 9;
  MINI_RANK_THEME_TOWER_STAGE = 10;
  MINI_RANK_FUTARI_BATTLE = 11;
  MINI_RANK_MONSTER_CARD_PVP = 12;
}

enum ChapterGroupSiteStatus {
  CHAPTER_GROUP_SITE_STATUS_INVALID = 0;
  CHAPTER_GROUP_SITE_STATUS_LOCKED = 1;
  CHAPTER_GROUP_SITE_STATUS_UNLOCKED = 2;
  CHAPTER_GROUP_SITE_STATUS_FINISHED = 3;
}

enum ChapterGroupSiteType {
  CHAPTER_GROUP_SITE_TYPE_INVALID = 0;
  CHAPTER_GROUP_SITE_TYPE_CHAPTER = 1;
  CHAPTER_GROUP_SITE_TYPE_VIDEO = 2;
  CHAPTER_GROUP_SITE_TYPE_OPENWORLD = 3;
  CHAPTER_GROUP_SITE_TYPE_OW_STAGE = 4;
  CHAPTER_GROUP_SITE_TYPE_PJMS = 5;
  CHAPTER_GROUP_SITE_TYPE_PJMS_NO_ENTER_WORLD = 6;
}

enum SpecificRankType {
  SPECIFIC_RANK_NONE = 0;
  SPECIFIC_RANK_GLOBAL_GOODS = 1;
}

enum MemoirsDataType {
  MEMOIRS_DATA_TYPE_NONE = 0;
  MEMOIRS_DATA_TYPE_UINT = 1;
  MEMOIRS_DATA_TYPE_TIMESTAMP = 2;
  MEMOIRS_DATA_TYPE_AVATAR_TEAM = 3;
  MEMOIRS_DATA_TYPE_BOOL = 4;
}

enum MemoirsSourceType {
  MEMOIRS_SOURCE_TYPE_NONE = 0;
  MEMOIRS_SOURCE_TYPE_DB = 1;
  MEMOIRS_SOURCE_TYPE_BIN = 2;
}

enum MemoirsId {
  MEMOIRS_NONE = 0;
  MEMOIRS_ENDLESS_GROUP_LEVEL = 101;
  MEMOIRS_ENDLESS_PROGRESS = 102;
  MEMOIRS_BRONYA_STAGE_WIN_STATUS = 103;
  MEMOIRS_BRONYA_STAGE_MIN_TIME = 104;
  MEMOIRS_BRONYA_STAGE_ENTER_TIMES = 105;
  MEMOIRS_CHAPTER4_PASS_STATUS = 106;
  MEMOIRS_OPENWORLD_SAKURA_MAX_STORY_ID = 201;
  MEMOIRS_EXBOSS_MAX_SCORE = 301;
  MEMOIRS_EXBOSS_MAX_RANK = 302;
  MEMOIRS_CAMP_WAR_1005_CAMP_ID = 303;
  MEMOIRS_CAMP_WAR_1005_SCORE = 304;
  MEMOIRS_CAMP_WAR_1006_CAMP_ID = 305;
  MEMOIRS_CAMP_WAR_1006_SCORE = 306;
  MEMOIRS_CAMP_WAR_1007_CAMP_ID = 307;
  MEMOIRS_CAMP_WAR_1007_SCORE = 308;
  MEMOIRS_DORM_UNLOCK_AVATAR_NUM = 401;
  MEMOIRS_GRADUATED_PUPIL_NUM = 402;
  MEMOIRS_CITY_ACTIVITY_AFFINITY_SUM = 501;
  MEMOIRS_AVATAR_KIANA_C5_YL_UNLOCK_TIME = 601;
  MEMOIRS_ACT_CHALLENGE_STAGE_WIN_STATUS = 701;
  MEMOIRS_ACT_CHALLENGE_STAGE_ENTER_TIMES = 702;
  MEMOIRS_DIRAC_ENDLESS_GROUP_ID = 801;
  MEMOIRS_DIRAC_ENDLESS_HARD_LEVEL = 802;
  MEMOIRS_WINTER_ACTIVITY_MAX_SITE_ID = 804;
  MEMOIRS_CAMPAIGN_ACTIVITY_PASS_TIMES = 901;
  MEMOIRS_KINGDOM_WAR_1_KINGDOM_ID = 1001;
  MEMOIRS_KINGDOM_WAR_1_SCORE = 1002;
  MEMOIRS_KINGDOM_WAR_2_KINGDOM_ID = 1003;
  MEMOIRS_KINGDOM_WAR_2_SCORE = 1004;
  MEMOIRS_QUANTUM_ENDLESS_GROUP_ID = 1006;
  MEMOIRS_QUANTUM_ENDLESS_MAX_LAYER = 1007;
  MEMOIRS_QUANTUM_ENDLESS_AVATAR_TEAM = 1008;
  MEMOIRS_QUANTUM_ENDLESS_HARD_LEVEL = 1009;
  MEMOIRS_AVATAR_BRONYA_C7_GZ_UNLOCK_TIME = 1101;
  MEMOIRS_AVATAR_SEELE_C2_HY_UNLOCK_TIME = 1201;
  MEMOIRS_FIRST_LEVEL55_WEAPON_ID = 1202;
  MEMOIRS_NINJA_ACTIVITY_MAX_STAGE_ID = 1301;
  MEMOIRS_QAVATAR_MAX_SITE_ID = 1302;
  MEMOIRS_KINGDOM_WAR_0_KINGDOM_ID = 1501;
  MEMOIRS_KINGDOM_WAR_0_SCORE = 1502;
  MEMOIRS_THERESA_ACTIVITY_MAX_STAGE_ID = 1503;
  MEMOIRS_AVATAR_MEI_C5_AC_UNLOCK_TIME = 1601;
  MEMOIRS_ULTRA_ENDLESS_MAX_CUP_NUM = 1701;
  MEMOIRS_ULTRA_ENDLESS_MAX_SCORE = 1702;
  MEMOIRS_ULTRA_ENDLESS_AVATAR_TEAM = 1703;
  MEMOIRS_AVATAR_FUKA_C6_FL_UNLOCK_TIME = 1801;
  MEMOIRS_PAIMON_MEDAL_UNLOCK_STATUS = 1901;
  MEMOIRS_AVATAR_KIANA_C6_MH_UNLOCK_TIME = 2001;
  MEMOIRS_GOD_WAR_MAX_PUNISH_LEVEL = 2101;
  MEMOIRS_GOD_WAR_AVATAR_ID = 2102;
  MEMOIRS_AVATAR_DURANDAL_C4_DK_UNLOCK_TIME = 2201;
  MEMOIRS_CHAPTER31_MAX_STORY_ID = 2301;
  MEMOIRS_DICEY_DUNGEON_ACTIVITY_PROGRESS = 2302;
  MEMOIRS_PVZ_ACTIVITY_PROGRESS = 2303;
  MEMOIRS_HAS_GOT_PVZ_OR_DICEY_ACTIVITY_MATERIAL = 2304;
  MEMOIRS_AVATAR_ELYSIA_C2_MC_UNLOCK_TIME = 2401;
  MEMOIRS_AICYBER_REPAIR_PROGRESS = 2501;
}

enum ActivityModuleType {
  ACTIVITY_MODULE_INVALID = 0;
  ACTIVITY_MODULE_MISC = 1;
  ACTIVITY_MODULE_FLOP = 3;
  ACTIVITY_MODULE_BINGO = 4;
  ACTIVITY_MODULE_BULLETIN_SCORE = 5;
  ACTIVITY_MODULE_RELATION = 6;
  ACTIVITY_MODULE_FARM = 7;
  ACTIVITY_MODULE_TOWER_RAID = 8;
  ACTIVITY_MODULE_CONTINUOUS_RECHARGE = 9;
  ACTIVITY_MODULE_MISSION_THEME = 10;
  ACTIVITY_MODULE_OFFLINE_RESOURECE = 11;
  ACTIVITY_MODULE_WEEKLY_ROUTINE = 12;
  ACTIVITY_MODULE_AVATAR_MISSION = 13;
  ACTIVITY_MODULE_KINGDOW_WAR = 14;
  ACTIVITY_MODULE_CHAPTER = 16;
  ACTIVITY_MODULE_BATTLE_PASS = 17;
  ACTIVITY_MODULE_MONOPOLY = 18;
  ACTIVITY_MODULE_RAFFLE = 19;
  ACTIVITY_MODULE_OVERLAP = 20;
  ACTIVITY_MODULE_GLOBAL_WAR = 21;
  ACTIVITY_MODULE_SCRATCH_TICKET = 23;
  ACTIVITY_MODULE_BBQ = 24;
  ACTIVITY_MODULE_NEWBIE = 25;
  ACTIVITY_MODULE_MOSAIC = 26;
  ACTIVITY_MODULE_NINJA = 27;
  ACTIVITY_MODULE_FAST_PASS = 28;
  ACTIVITY_MODULE_QUESTION = 29;
  ACTIVITY_MODULE_TRADING_CARD = 30;
  ACTIVITY_MODULE_ARMADA_STAGE_SCORE = 31;
  ACTIVITY_MODULE_PICTURE = 32;
  ACTIVITY_MODULE_JIGSAW = 33;
  ACTIVITY_MODULE_ARMADA_REUNION = 34;
  ACTIVITY_MODULE_GARDEN = 35;
  ACTIVITY_MODULE_CHATWORLD_DISH = 36;
  ACTIVITY_MODULE_DROP_LIMIT = 37;
  ACTIVITY_MODULE_LOGIN_MISSION = 38;
  ACTIVITY_MODULE_SANCTUARY = 40;
  ACTIVITY_MODULE_REWARD_STATISTIC = 41;
  ACTIVITY_MODULE_SLOT_MACHINE = 42;
  ACTIVITY_MODULE_EXAMINATION = 43;
  ACTIVITY_MODULE_SUPPORT = 44;
  ACTIVITY_MODULE_LOGIN_WISH = 46;
  ACTIVITY_MODULE_RPG_DUNGEON = 49;
  ACTIVITY_MODULE_REUNION_COOK = 50;
  ACTIVITY_MODULE_DREAM = 51;
  ACTIVITY_MODULE_SLG = 52;
  ACTIVITY_MODULE_THEME_WANTED = 53;
  ACTIVITY_MODULE_GLOBAL_POLLING = 54;
  ACTIVITY_MODULE_RANCH = 55;
  ACTIVITY_MODULE_RESTAURANT = 56;
  ACTIVITY_MODULE_TOWN = 57;
  ACTIVITY_MODULE_WEB = 58;
  ACTIVITY_MODULE_MONSTER_CARD = 59;
  ACTIVITY_MODULE_DICEY_DUNGEON = 60;
  ACTIVITY_MODULE_PVZ = 61;
  ACTIVITY_MODULE_BUFF_ASSIST = 62;
  ACTIVITY_MODULE_INVITE = 63;
  ACTIVITY_MODULE_QCANDY_BATTLE = 64;
  ACTIVITY_MODULE_WAVE_RUSH = 65;
  ACTIVITY_MODULE_AI_CYBER = 66;
  ACTIVITY_MODULE_MINI_MONOPOLY = 67;
  ACTIVITY_MODULE_GLOBAL_EXPLORE = 68;
  ACTIVITY_MODULE_PLATFORM_SHOOTER = 69;
  ACTIVITY_MODULE_AVATAR_CULTIVATE = 70;
  ACTIVITY_MODULE_MIRAGE = 71;
  ACTIVITY_MODULE_SUSANA_TRIAL = 72;
  ACTIVITY_MODULE_MATCH_THREE = 73;
  ACTIVITY_MODULE_CHAPTER_BW_WORLD = 74;
  ACTIVITY_MODULE_SHIGURE_KIRA = 75;
  ACTIVITY_MODULE_THEME_TOWER = 76;
  ACTIVITY_MODULE_MAHOU_CARD = 77;
  ACTIVITY_MODULE_PON_MACHINE = 78;
  ACTIVITY_MODULE_TILED_GAME_LUNA = 80;
  ACTIVITY_MODULE_CARNIVAL_LOTTERY = 81;
  ACTIVITY_MODULE_CHAPTER_ARK = 82;
  ACTIVITY_MODULE_TILED_GAME_FARM = 83;
  ACTIVITY_MODULE_MINION_CLASH = 84;
  ACTIVITY_MODULE_ARK_PLUS = 85;
  ACTIVITY_MODULE_MARBLES_SHOOT = 86;
  ACTIVITY_MODULE_GOURMET_HUNT = 87;
  ACTIVITY_MODULE_THELEMA_ACTIVITY = 88;
  ACTIVITY_MODULE_MATCH_THREE_PLUS = 89;
  ACTIVITY_MODULE_DEVIL_AUTO_CHESS = 90;
  ACTIVITY_MODULE_TILED_GAME_SRPG = 91;
  ACTIVITY_MODULE_SIMPLIFIED_GOD_WAR = 92;
  ACTIVITY_MODULE_GAME_ROOM = 93;
  ACTIVITY_MODULE_CORRIDOR = 94;
  ACTIVITY_MODULE_QRTS = 95;
  ACTIVITY_MODULE_RE = 96;
  ACTIVITY_MODULE_BURDEN_ALLEVIATION_V2 = 97;
  ACTIVITY_MODULE_FUTARI_BATTLE = 98;
  ACTIVITY_MODULE_TILED_GAME_MONSTER_FARM = 99;
  ACTIVITY_MODULE_TILED_GAME_PRPG = 100;
  ACTIVITY_MODULE_MONSTER_CARD_PVP = 101;
  ACTIVITY_MODULE_MONSTER_MORPH = 102;
  ACTIVITY_MODULE_KIANA_AUTO_CHESS = 103;
  ACTIVITY_MODULE_CRYSTAL_LOTTERY = 104;
  ACTIVITY_MODULE_TILED_GAME_INN = 105;
  ACTIVITY_MODULE_TOWER_DEFENSE = 106;
}

enum ManifestType {
  MANIFEST_NONE = 0;
  MANIFEST_AUDIO = 1;
  MANIFEST_AUDIO_PRE_DOWNLOAD = 2;
  MANIFEST_VIDEO_ENCRYPT = 3;
  MANIFEST_DATA_VERSION = 4;
}

enum WorldMapRecommendConditionType {
  RECOMMEND_CONDITION_TYPE_NONE = 0;
  RECOMMEND_CONDITION_TYPE_WEEKDAY_ACTIVITY_ALL_FINISH = 1;
  RECOMMEND_CONDITION_TYPE_EXBOSS_FINISH_NUM = 2;
  RECOMMEND_CONDITION_TYPE_EXBOSS_SINGLE_BOSS_REWARD = 3;
  RECOMMEND_CONDITION_TYPE_EXBOSS_NOT_OPEN = 4;
  RECOMMEND_CONDITION_TYPE_PLAYER_LEVEL = 5;
  RECOMMEND_CONDITION_TYPE_MATERIAL_LESS = 6;
  RECOMMEND_CONDITION_TYPE_DROP_LIMITED_MATERIAL = 7;
  RECOMMEND_CONDITION_TYPE_MISSION_CLOSE = 8;
  RECOMMEND_CONDITION_TYPE_OW_FINISH_PERIOD = 9;
  RECOMMEND_CONDITION_TYPE_OW_NO_QUEST = 10;
  RECOMMEND_CONDITION_TYPE_ARMADA_STAGE_SCORE = 11;
  RECOMMEND_CONDITION_TYPE_ARMADA_STAGE_NOT_OPEN = 12;
  RECOMMEND_CONDITION_TYPE_ULTRA_ENDLESS_SCORE = 13;
  RECOMMEND_CONDITION_TYPE_ULTRA_ENDLESS_SCHEDULE = 14;
  RECOMMEND_CONDITION_TYPE_ULTRA_ENDLESS_NOT_OPEN = 15;
  RECOMMEND_CONDITION_TYPE_ENDLESS_CHALLENGE_FINISH = 16;
  RECOMMEND_CONDITION_TYPE_ENDLESS_SCHEDULE = 17;
  RECOMMEND_CONDITION_TYPE_ENDLESS_NOT_OPEN = 18;
  RECOMMEND_CONDITION_TYPE_MISSION_NOT_DOING = 19;
  RECOMMEND_CONDITION_TYPE_EXBOSS_RANK_FINISH_NUM = 20;
  RECOMMEND_CONDITION_TYPE_RAID_REPLACE_CHALLENGE_NUM = 21;
}

enum CollectionUnlockType {
  COLLECTION_UNLOCK_TYPE_NONE = 0;
  COLLECTION_UNLOCK_TYPE_STAGE = 1;
  COLLECTION_UNLOCK_TYPE_MATERIAL_AUTO_USE = 2;
  COLLECTION_UNLOCK_TYPE_PLOT = 3;
}

message TileWaitSelectPath {
  repeated uint32 candidate_path_cell_id_list = 1;
  uint32 left_step_num = 2;
}

message TileFloor {
  uint32 floor_id = 1;
  TileFloorStatus floor_status = 2;
}

message TileMapCell {
  message CellLayer {
    uint32 model_id = 1;
    uint32 direction = 2;
    repeated TileMapCell.CellDataType updated_type_list = 3;
  }

  enum CellDataType {
    CELL_DATA_TYPE_NONE = 0;
    CELL_DATA_TYPE_BARRIER = 1;
    CELL_DATA_TYPE_FOG = 2;
    CELL_DATA_TYPE_TERRAIN = 3;
    CELL_DATA_TYPE_LAYER_MODEL_ID = 4;
    CELL_DATA_TYPE_LAYER_DIRECTION = 5;
    CELL_DATA_TYPE_HEIGHT = 6;
  }

  uint32 cell_id = 1;
  TileMapCell.CellLayer ground = 2;
  TileMapCell.CellLayer decoration = 3;
  uint32 barrier = 4;
  uint32 fog = 5;
  uint32 terrain = 6;
  repeated TileMapCell.CellDataType updated_type_list = 7;
  uint32 height = 8;
}

message TileTrigger {
  uint32 id = 1;
  bool is_active = 2;
  uint32 position = 3;
}

message TileMark {
  uint32 mark_id = 1;
  uint32 mark_value = 2;
}

message TilePlayerInfo {
  uint32 uid = 1;
  string nickname = 2;
  uint32 avatar_id = 3;
}

message TileNpcInfo {
  uint32 id = 1;
}

message TileEntity {
  uint32 unique_id = 1;
  uint32 entity_type = 2;
  uint32 position = 3;
  uint32 direction = 4;
  uint32 reset_tag = 5;
  TilePlayerInfo player_info = 11;
  TileNpcInfo npc_info = 12;
}

message TileMap {
  uint32 map_id = 1;
  uint32 width = 2;
  uint32 height = 3;
  repeated TileMapCell cell_list = 5;
  repeated TileTrigger trigger_list = 6;
  repeated TileEntity entity_list = 7;
  repeated TileMark mark_list = 8;
  repeated uint32 finished_linear_drama_id_list = 9;
}

// CmdID: 4900
message GetTileMapReq {
  uint32 tower_id = 1;
  uint32 floor_id = 2;
}

// CmdID: 4901
message GetTileMapRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    LOCKED = 2;
    FEATURE_CLOSED = 3;
  }

  GetTileMapRsp.Retcode retcode = 1;
  uint32 tower_id = 2;
  uint32 floor_id = 3;
  TileMap map = 4;
  bool is_incremental_sync = 5;
}

message TileUpdateMapOperation {
  message MoveEntity {
    uint32 unique_id = 1;
    uint32 to_position = 2;
    repeated uint32 path_cell_id_list = 3;
    uint32 direction = 4;
    uint32 saved_position = 5;
  }

  repeated TileMapCell cell_list = 1;
  repeated TileTrigger trigger_list = 2;
  repeated TileEntity create_entity_list = 3;
  repeated TileUpdateMapOperation.MoveEntity move_entity_list = 4;
  repeated uint32 delete_entity_list = 5;
  repeated TileMark mark_list = 6;
  repeated uint32 rpg_content_id_list = 7;
}

// CmdID: 4902
message TileUpdateMapReq {
  message MoveEntity {
    uint32 unique_id = 1;
    uint32 to_position = 2;
    repeated uint32 path_cell_id_list = 3;
    uint32 direction = 4;
    uint32 saved_position = 5;
  }

  message OuterValue {
    enum Type {
      NONE = 0;
      RPG_OVERALL = 1;
    }

    TileUpdateMapReq.OuterValue.Type type = 1;
    uint32 key = 2;
    uint32 value = 3;
  }

  message ResetRegion {
    enum Type {
      TILE_RESET_REGION_TYPE_ALL = 0;
      TILE_RESET_REGION_TYPE_ENTITY = 1;
    }

    uint32 reset_tag = 3;
    TileUpdateMapReq.ResetRegion.Type reset_type = 4;
  }

  uint32 tower_id = 1;
  uint32 floor_id = 2;
  repeated TileMapCell cell_list = 3;
  repeated TileTrigger trigger_list = 4;
  repeated TileEntity create_entity_list = 5;
  repeated TileUpdateMapReq.MoveEntity move_entity_list = 6;
  repeated uint32 delete_entity_list = 7;
  repeated TileMark mark_list = 8;
  repeated TileUpdateMapReq.OuterValue outer_value_list = 9;
  repeated uint32 rpg_content_id_list = 10;
  repeated TileUpdateMapOperation operation_list = 11;
  uint32 linear_drama_id = 12;
  repeated TileUpdateMapReq.ResetRegion reset_region_list = 13;
}

// CmdID: 4903
message TileUpdateMapRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    START_CELL_ERROR = 2;
    NOT_REACHABLE = 3;
    FEATURE_CLOSED = 4;
  }

  TileUpdateMapRsp.Retcode retcode = 1;
  repeated TileEntity created_entity_list = 2;
  repeated uint32 failed_content_id_list = 3;
  uint32 not_reachable_cell_id = 4;
  uint32 linear_drama_id = 5;
  bool is_reset_region_has_type_all = 6;
}

// CmdID: 4904
message TileGetTowerReq {
  uint32 tower_id = 1;
}

// CmdID: 4905
message TileGetTowerRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    FEATURE_CLOSED = 2;
  }

  TileGetTowerRsp.Retcode retcode = 1;
  uint32 cur_floor_id = 2;
  repeated uint32 finished_dialog_id_list = 3;
  repeated uint32 settled_event_id_list = 4;
  repeated TileFloor floor_list = 5;
  uint32 tower_id = 6;
}

// CmdID: 4906
message TileEnterReq {
  uint32 tower_id = 1;
  uint32 floor_id = 2;
  bool is_teleport_player = 3;
  uint32 teleport_position = 4;
}

// CmdID: 4907
message TileEnterRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    LOCKED = 2;
    TELEPORT_FAIL = 3;
    FEATURE_CLOSED = 4;
  }

  TileEnterRsp.Retcode retcode = 1;
}

// CmdID: 4908
message TileSaveProgressReq {
  uint32 tower_id = 1;
  repeated uint32 finished_dialog_id_list = 2;
}

// CmdID: 4909
message TileSaveProgressRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    FEATURE_CLOSED = 2;
  }

  TileSaveProgressRsp.Retcode retcode = 1;
  repeated uint32 finished_dialog_id_list = 2;
}

// CmdID: 4912
message TileResetFloorReq {
  uint32 tower_id = 1;
  repeated uint32 floor_id_list = 2;
}

// CmdID: 4913
message TileResetFloorRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    FEATURE_CLOSED = 2;
  }

  TileResetFloorRsp.Retcode retcode = 1;
  uint32 tower_id = 2;
  repeated uint32 floor_id_list = 3;
}

// CmdID: 4914
message TileEntityOpNotify {
  message StatusOp {
    uint32 status = 1;
  }

  message MoveOp {
    repeated uint32 path_cell_id_list = 1;
    TileMoveType move_type = 2;
    uint32 direction = 3;
  }

  message UpdateCellOp {
    repeated TileMapCell cell_list = 1;
    repeated TileTrigger trigger_list = 2;
  }

  message UpdateEntityOp {
    repeated TileEntity create_entity_list = 1;
    repeated uint32 delete_entity_list = 2;
  }

  message TileEntityOp {
    uint32 unique_id = 1;
    TileEntityOpNotify.MoveOp move = 2;
    TileWaitSelectPath wait_select_path = 3;
    TileEntityOpNotify.UpdateCellOp update_cell = 4;
    TileEntityOpNotify.UpdateEntityOp update_entity = 5;
    TileEntityOpNotify.StatusOp status = 6;
  }

  uint32 tower_id = 1;
  uint32 floor_id = 2;
  repeated TileEntityOpNotify.TileEntityOp entity_op_list = 3;
}

// CmdID: 4915
message TileSelectPathReq {
  uint32 tower_id = 1;
  uint32 next_path_cell_id = 2;
}

// CmdID: 4916
message TileSelectPathRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NO_CANDIDATE = 2;
    FEATURE_CLOSED = 3;
  }

  TileSelectPathRsp.Retcode retcode = 1;
  uint32 tower_id = 2;
  uint32 next_path_cell_id = 3;
}

// CmdID: 4919
message TileReportSavedPositionReq {
  uint32 tower_id = 1;
  uint32 floor_id = 2;
  uint32 position = 3;
}

// CmdID: 4920
message TileReportSavedPositionRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    POSITION_ERROR = 2;
    FEATURE_CLOSED = 3;
  }

  TileReportSavedPositionRsp.Retcode retcode = 1;
}

// CmdID: 4921
message TileLoadSavedPositionReq {
  uint32 tower_id = 1;
  uint32 floor_id = 2;
  repeated uint32 rpg_content_id_list = 10;
}

// CmdID: 4922
message TileLoadSavedPositionRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NO_SAVED = 2;
    FEATURE_CLOSED = 3;
  }

  TileLoadSavedPositionRsp.Retcode retcode = 1;
  uint32 position = 2;
  repeated uint32 failed_content_id_list = 3;
}

// CmdID: 4923
message TileMapUpdateNotify {
  uint32 tower_id = 1;
  uint32 floor_id = 2;
  repeated TileMapCell cell_list = 3;
  repeated TileEntity entity_list = 4;
  repeated uint32 deleted_entity_list = 5;
}

// CmdID: 4924
message TileGetPartialMapAsUpdateReq {
  uint32 tower_id = 1;
  uint32 floor_id = 2;
  repeated uint32 cell_id_list = 3;
}

// CmdID: 4925
message TileGetPartialMapAsUpdateRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    FEATURE_CLOSED = 2;
  }

  TileGetPartialMapAsUpdateRsp.Retcode retcode = 1;
}

// CmdID: 4926
message GetTileMiniMapReq {
  uint32 activity_id = 1;
  repeated uint32 map_id_list = 2;
  bool is_all = 3;
}

message TileMiniMapCell {
  uint32 cell_id = 1;
  uint32 fog = 2;
}

message TileMiniMapEntity {
  uint32 unique_id = 1;
  uint32 entity_type = 2;
  uint32 position = 3;
  uint32 id = 4;
}

message TileMiniMapMark {
  uint32 mark_id = 1;
  uint32 mark_value = 2;
}

message TileMiniMap {
  uint32 map_id = 1;
  uint32 width = 2;
  uint32 height = 3;
  repeated TileMiniMapCell cell_list = 4;
  repeated TileMiniMapEntity entity_list = 5;
  bool is_active = 6;
  repeated TileMiniMapMark mark_list = 7;
}

// CmdID: 4927
message GetTileMiniMapRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetTileMiniMapRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  repeated uint32 map_id_list = 3;
  repeated TileMiniMap tile_map_list = 4;
  bool is_all = 5;
}

enum CmdTypeTile {
  CMD_TYPE_TILE_NONE = 0;
  CMD_GET_TILE_MAP_REQ = 4900;
  CMD_GET_TILE_MAP_RSP = 4901;
  CMD_TILE_UPDATE_MAP_REQ = 4902;
  CMD_TILE_UPDATE_MAP_RSP = 4903;
  CMD_TILE_GET_TOWER_REQ = 4904;
  CMD_TILE_GET_TOWER_RSP = 4905;
  CMD_TILE_ENTER_REQ = 4906;
  CMD_TILE_ENTER_RSP = 4907;
  CMD_TILE_SAVE_PROGRESS_REQ = 4908;
  CMD_TILE_SAVE_PROGRESS_RSP = 4909;
  CMD_TILE_SETTLE_EVENT_REQ = 4910;
  CMD_TILE_SETTLE_EVENT_RSP = 4911;
  CMD_TILE_RESET_FLOOR_REQ = 4912;
  CMD_TILE_RESET_FLOOR_RSP = 4913;
  CMD_TILE_ENTITY_OP_NOTIFY = 4914;
  CMD_TILE_SELECT_PATH_REQ = 4915;
  CMD_TILE_SELECT_PATH_RSP = 4916;
  CMD_TILE_REPORT_SAVED_POSITION_REQ = 4919;
  CMD_TILE_REPORT_SAVED_POSITION_RSP = 4920;
  CMD_TILE_LOAD_SAVED_POSITION_REQ = 4921;
  CMD_TILE_LOAD_SAVED_POSITION_RSP = 4922;
  CMD_TILE_MAP_UPDATE_NOTIFY = 4923;
  CMD_TILE_GET_PARTIAL_MAP_AS_UPDATE_REQ = 4924;
  CMD_TILE_GET_PARTIAL_MAP_AS_UPDATE_RSP = 4925;
  CMD_GET_TILE_MINI_MAP_REQ = 4926;
  CMD_GET_TILE_MINI_MAP_RSP = 4927;
}

enum TileEntityType {
  TILE_ENTITY_TYPE_NONE = 0;
  TILE_ENTITY_TYPE_PLAYER = 1;
  TILE_ENTITY_TYPE_NPC = 2;
  TILE_ENTITY_TYPE_ROADBLOCK = 3;
  TILE_ENTITY_TYPE_TOWN_AVATAR = 4;
  TILE_ENTITY_TYPE_TOWN_BUILDING = 5;
  TILE_ENTITY_TYPE_ITEM = 6;
}

enum TileBarrierType {
  TILE_BARRIER_TYPE_NONE = 0;
  TILE_BARRIER_TYPE_PERMANENT = 1;
  TILE_BARRIER_TYPE_BLOCK = 2;
  TILE_BARRIER_TYPE_STOP_ON_PLAYER = 3;
  TILE_BARRIER_TYPE_STOP_ON_ONCE = 4;
  TILE_BARRIER_TYPE_NON_ROADBLOCK = 5;
}

enum TileFloorStatus {
  TILE_FLOOR_STATUS_NONE = 0;
  TILE_FLOOR_STATUS_LOCKED = 1;
  TILE_FLOOR_STATUS_UNLOCKED = 2;
  TILE_FLOOR_STATUS_VISTIED = 3;
}

enum TileMoveType {
  TILE_MOVE_WALK = 0;
  TILE_MOVE_TELEPORT = 1;
  TILE_MOVE_KNOCK_OFF = 2;
}

enum SetTileDataType {
  SET_TILE_DATA_TYPE_NONE = 0;
  SET_TILE_DATA_TYPE_CELL_GROUND = 1;
  SET_TILE_DATA_TYPE_CELL_DECORATION = 2;
  SET_TILE_DATA_TYPE_CELL_EXTRA = 3;
  SET_TILE_DATA_TYPE_ENTITY_ADD = 4;
  SET_TILE_DATA_TYPE_ENTITY_MODIFY = 5;
  SET_TILE_DATA_TYPE_ENTITY_DELETE = 6;
  SET_TILE_DATA_TYPE_TRIGGER = 7;
  SET_TILE_DATA_TYPE_MARK = 8;
}

// CmdID: 8000
message TiledGameFarmGetDataReq {
  uint32 activity_id = 1;
}

message TiledGameFarmFarmland {
  uint32 cell_id = 1;
  uint32 mature_time = 2;
}

message TiledGameFarmLivestock {
  uint32 unique_entity_id = 1;
  uint32 domestication = 2;
  uint32 last_taming_time = 3;
  uint32 last_feed_time = 4;
  uint32 holding_product_num = 5;
  uint32 product_progress = 6;
  uint32 get_time = 7;
  uint32 last_refresh_product_time = 8;
}

message TiledGameFarmLivestockShed {
  uint32 livestock_id = 1;
  uint32 left_food_num = 2;
  repeated TiledGameFarmLivestock livestock_list = 3;
  uint32 level = 4;
  uint32 privilege_stored_product_num = 5;
}

message TiledGameFarmMine {
  uint32 visited_max_floor = 1;
  uint32 cur_floor = 2;
}

message TiledGameFarmFishingFailStatus {
  uint32 fish_id = 1;
  uint32 continuous_fail_num = 2;
}

message TiledGameFarmFishingSpot {
  uint32 spot_cell_id = 1;
  uint32 left_fish_num = 2;
}

message TiledGameFarmFishingGround {
  uint32 cur_fishing_cell_id = 1;
  uint32 cur_fish_id = 2;
  repeated TiledGameFarmFishingFailStatus fail_status_list = 3;
  bool is_super_fishing_used_today = 4;
  repeated TiledGameFarmFishingSpot fishing_spot_list = 5;
}

message TiledGameFarmRestaurant {
  uint32 level = 1;
  uint32 today_use_meal_voucher_num = 2;
}

message TiledGameFarmQuestBoard {
  bool is_quest_chosen_today = 1;
  uint32 cur_quest_id = 2;
  repeated uint32 finished_extra_quest_id_list = 3;
}

message TiledGameFarmCropBuyNum {
  uint32 crop_id = 1;
  uint32 buy_num = 2;
}

// CmdID: 8001
message TiledGameFarmGetDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  TiledGameFarmGetDataRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 activity_stamina = 3;
  repeated TiledGameFarmFarmland farmland_list = 4;
  repeated TiledGameFarmLivestockShed livestock_shed_list = 5;
  TiledGameFarmMine farm_mine = 6;
  TiledGameFarmFishingGround farm_fishing_ground = 7;
  uint32 max_stamina = 8;
  uint32 next_recover_stamina_time = 9;
  TiledGameFarmRestaurant farm_restaurant = 10;
  uint32 cur_tower_id = 11;
  TiledGameFarmQuestBoard farm_quest_board = 12;
  repeated uint32 scene_finished_avatar_id_list = 13;
  repeated TiledGameFarmCropBuyNum crop_buy_num_list = 14;
  repeated uint32 matured_farmland_id_list = 15;
  uint32 last_refresh_time = 16;
  repeated uint32 unlock_gallery_id_list = 17;
}

// CmdID: 8002
message TiledGameFarmUseToolReq {
  uint32 activity_id = 1;
  uint32 item_id = 2;
  repeated uint32 cell_id_list = 3;
}

// CmdID: 8003
message TiledGameFarmUseToolRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    LACK_STAMINA = 2;
    RANGE_ERROR = 3;
    ITEM_ERROR = 4;
    LACK_ITEM = 5;
  }

  TiledGameFarmUseToolRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 item_id = 3;
  repeated uint32 failed_cell_id_list = 4;
}

// CmdID: 8004
message TiledGameFarmRefreshFarmlandReq {
  uint32 activity_id = 1;
  repeated uint32 cell_id_list = 2;
}

// CmdID: 8005
message TiledGameFarmRefreshFarmlandRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  TiledGameFarmRefreshFarmlandRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
}

// CmdID: 8006
message TiledGameFarmEnterMineFloorReq {
  uint32 activity_id = 1;
  uint32 floor_id = 2;
  bool is_teleport = 3;
  bool is_teleport_player = 4;
  uint32 teleport_position = 5;
}

// CmdID: 8007
message TiledGameFarmEnterMineFloorRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MINE_REFRESHED = 2;
    NOT_TELEPORTABLE = 3;
    NOT_VISITED = 4;
  }

  TiledGameFarmEnterMineFloorRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 floor_id = 3;
  uint32 tower_id = 4;
  bool is_teleport_player = 5;
  uint32 teleport_position = 6;
}

// CmdID: 8008
message TiledGameFarmSynthesisReq {
  uint32 activity_id = 1;
  uint32 blueprint_id = 2;
  uint32 synthesis_num = 3;
}

// CmdID: 8009
message TiledGameFarmSynthesisRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NO_MATERIAL = 2;
    BLUEPRINT_LOCKED = 3;
  }

  TiledGameFarmSynthesisRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  repeated TiledGameFarmItemInfo product_list = 3;
}

message TiledGameFarmItemInfo {
  uint32 item_id = 1;
  uint32 item_num = 2;
}

// CmdID: 8010
message TiledGameFarmTradeReq {
  enum TradeType {
    TRADE_TYPE_NONE = 0;
    TRADE_TYPE_BUY = 1;
    TRADE_TYPE_SELL = 2;
  }

  uint32 activity_id = 1;
  TiledGameFarmTradeReq.TradeType trade_type = 2;
  repeated TiledGameFarmItemInfo item_list = 3;
}

// CmdID: 8011
message TiledGameFarmTradeRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NO_MATERIAL = 2;
    NO_GOLD = 3;
    ITEM_LOCKED = 4;
    BUY_LIMIT = 5;
    MATERIAL_OVERFLOW = 6;
  }

  TiledGameFarmTradeRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
}

// CmdID: 8012
message TiledGameFarmBeginFishingNotify {
  uint32 activity_id = 1;
  uint32 fish_id = 2;
  uint32 cell_id = 3;
  uint32 continuous_fail_num = 4;
}

// CmdID: 8013
message TiledGameFarmEndFishingReq {
  uint32 activity_id = 1;
  bool is_success = 2;
}

// CmdID: 8014
message TiledGameFarmEndFishingRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_FISHING = 2;
  }

  TiledGameFarmEndFishingRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
}

// CmdID: 8015
message TiledGameFarmGemIdentifyReq {
  uint32 activity_id = 1;
  uint32 item_id = 2;
  uint32 item_num = 3;
}

message TiledGameFarmGemIdentifyResult {
  uint32 item_id = 1;
  uint32 item_num = 2;
}

// CmdID: 8016
message TiledGameFarmGemIdentifyRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ITEM_LACK = 2;
    GOLD_LACK = 3;
  }

  TiledGameFarmGemIdentifyRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  repeated TiledGameFarmGemIdentifyResult result_list = 3;
}

// CmdID: 8017
message TiledGameFarmFillShedFoodReq {
  uint32 activity_id = 1;
  uint32 shed_livestock_id = 2;
  uint32 food_num = 3;
}

// CmdID: 8018
message TiledGameFarmFillShedFoodRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ITEM_LACK = 2;
    FOOD_FULL = 3;
  }

  TiledGameFarmFillShedFoodRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 shed_livestock_id = 3;
}

// CmdID: 8019
message TiledGameFarmUpgradeFacilityReq {
  uint32 activity_id = 1;
  uint32 facility_id = 2;
  uint32 level = 3;
  TiledGameFarmFacilityType facility_type = 5;
}

// CmdID: 8020
message TiledGameFarmUpgradeFacilityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ITEM_LACK = 2;
    LEVEL_ERROR = 3;
    FACILITY_ID_ERROR = 4;
  }

  TiledGameFarmUpgradeFacilityRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 facility_id = 3;
  uint32 level = 4;
  TiledGameFarmFacilityType facility_type = 5;
}

// CmdID: 8021
message TiledGameFarmRefreshLivestockShedReq {
  uint32 activity_id = 1;
  uint32 shed_livestock_id = 2;
}

// CmdID: 8022
message TiledGameFarmRefreshLivestockShedRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  TiledGameFarmRefreshLivestockShedRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
}

// CmdID: 8023
message TiledGameFarmTameLivestockReq {
  uint32 activity_id = 1;
  uint32 unique_entity_id = 2;
}

// CmdID: 8024
message TiledGameFarmTameLivestockRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  TiledGameFarmTameLivestockRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 unique_entity_id = 3;
  bool is_add_domestication = 4;
}

// CmdID: 8025
message TiledGameFarmHarvestLivestockReq {
  uint32 activity_id = 1;
  uint32 unique_entity_id = 2;
  bool is_special_harvest = 3;
}

// CmdID: 8026
message TiledGameFarmHarvestLivestockRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NO_PRODUCT = 2;
    LACK_STAMINA = 3;
    AUTO_TAKE_CARE_LOCKED = 4;
  }

  TiledGameFarmHarvestLivestockRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 unique_entity_id = 3;
}

// CmdID: 8027
message TiledGameFarmPickItemReq {
  uint32 activity_id = 1;
  uint32 unique_entity_id = 2;
}

// CmdID: 8028
message TiledGameFarmPickItemRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NO_ENTITY = 2;
    ENTITY_TYPE_ERROR = 3;
  }

  TiledGameFarmPickItemRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
}

// CmdID: 8029
message TiledGameFarmUseMealVoucherReq {
  uint32 activity_id = 1;
}

// CmdID: 8030
message TiledGameFarmUseMealVoucherRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    USE_LIMIT = 2;
    NO_VOUCHER = 3;
  }

  TiledGameFarmUseMealVoucherRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
}

// CmdID: 8031
message TiledGameFarmBuyLivestockReq {
  uint32 activity_id = 1;
  uint32 livestock_id = 2;
  uint32 buy_num = 3;
}

// CmdID: 8032
message TiledGameFarmBuyLivestockRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_ENOUGH_GOLD = 2;
    NO_SHED = 3;
    SHED_FULL = 4;
  }

  TiledGameFarmBuyLivestockRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
}

// CmdID: 8033
message TiledGameFarmGetSelectQuestReq {
  uint32 activity_id = 1;
}

// CmdID: 8034
message TiledGameFarmGetSelectQuestRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    CHOSEN = 2;
    NO_CHOOSE_NUM = 3;
  }

  TiledGameFarmGetSelectQuestRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  repeated uint32 quest_id_list = 3;
}

// CmdID: 8035
message TiledGameFarmChooseQuestReq {
  uint32 activity_id = 1;
  uint32 quest_id = 2;
}

// CmdID: 8036
message TiledGameFarmChooseQuestRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    CHOSEN = 2;
    CAN_NOT_CHOOSE = 3;
  }

  TiledGameFarmChooseQuestRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 quest_id = 3;
}

// CmdID: 8037
message TiledGameFarmFinishQuestReq {
  uint32 activity_id = 1;
  uint32 quest_id = 2;
  repeated TiledGameFarmItemInfo commit_item_info_list = 3;
}

// CmdID: 8038
message TiledGameFarmFinishQuestRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ITEM_LACK = 2;
    ITEM_ERROR = 3;
    ITEM_OVER = 4;
  }

  TiledGameFarmFinishQuestRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 quest_id = 3;
  RewardData reward_data = 4;
}

// CmdID: 8039
message TiledGameFarmSuperFishingReq {
  uint32 activity_id = 1;
}

// CmdID: 8040
message TiledGameFarmSuperFishingRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    USED_TADAY = 2;
    SUPER_FISHING_LOCKED = 3;
    LACK_STAMINA = 4;
    NO_FISHING_ROD = 5;
  }

  TiledGameFarmSuperFishingRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
}

enum CmdTypeTiledgamefarm {
  CMD_TYPE_TILEDGAMEFARM_NONE = 0;
  CMD_TILED_GAME_FARM_GET_DATA_REQ = 8000;
  CMD_TILED_GAME_FARM_GET_DATA_RSP = 8001;
  CMD_TILED_GAME_FARM_USE_TOOL_REQ = 8002;
  CMD_TILED_GAME_FARM_USE_TOOL_RSP = 8003;
  CMD_TILED_GAME_FARM_REFRESH_FARMLAND_REQ = 8004;
  CMD_TILED_GAME_FARM_REFRESH_FARMLAND_RSP = 8005;
  CMD_TILED_GAME_FARM_ENTER_MINE_FLOOR_REQ = 8006;
  CMD_TILED_GAME_FARM_ENTER_MINE_FLOOR_RSP = 8007;
  CMD_TILED_GAME_FARM_SYNTHESIS_REQ = 8008;
  CMD_TILED_GAME_FARM_SYNTHESIS_RSP = 8009;
  CMD_TILED_GAME_FARM_TRADE_REQ = 8010;
  CMD_TILED_GAME_FARM_TRADE_RSP = 8011;
  CMD_TILED_GAME_FARM_BEGIN_FISHING_NOTIFY = 8012;
  CMD_TILED_GAME_FARM_END_FISHING_REQ = 8013;
  CMD_TILED_GAME_FARM_END_FISHING_RSP = 8014;
  CMD_TILED_GAME_FARM_GEM_IDENTIFY_REQ = 8015;
  CMD_TILED_GAME_FARM_GEM_IDENTIFY_RSP = 8016;
  CMD_TILED_GAME_FARM_FILL_SHED_FOOD_REQ = 8017;
  CMD_TILED_GAME_FARM_FILL_SHED_FOOD_RSP = 8018;
  CMD_TILED_GAME_FARM_UPGRADE_FACILITY_REQ = 8019;
  CMD_TILED_GAME_FARM_UPGRADE_FACILITY_RSP = 8020;
  CMD_TILED_GAME_FARM_REFRESH_LIVESTOCK_SHED_REQ = 8021;
  CMD_TILED_GAME_FARM_REFRESH_LIVESTOCK_SHED_RSP = 8022;
  CMD_TILED_GAME_FARM_TAME_LIVESTOCK_REQ = 8023;
  CMD_TILED_GAME_FARM_TAME_LIVESTOCK_RSP = 8024;
  CMD_TILED_GAME_FARM_HARVEST_LIVESTOCK_REQ = 8025;
  CMD_TILED_GAME_FARM_HARVEST_LIVESTOCK_RSP = 8026;
  CMD_TILED_GAME_FARM_PICK_ITEM_REQ = 8027;
  CMD_TILED_GAME_FARM_PICK_ITEM_RSP = 8028;
  CMD_TILED_GAME_FARM_USE_MEAL_VOUCHER_REQ = 8029;
  CMD_TILED_GAME_FARM_USE_MEAL_VOUCHER_RSP = 8030;
  CMD_TILED_GAME_FARM_BUY_LIVESTOCK_REQ = 8031;
  CMD_TILED_GAME_FARM_BUY_LIVESTOCK_RSP = 8032;
  CMD_TILED_GAME_FARM_GET_SELECT_QUEST_REQ = 8033;
  CMD_TILED_GAME_FARM_GET_SELECT_QUEST_RSP = 8034;
  CMD_TILED_GAME_FARM_CHOOSE_QUEST_REQ = 8035;
  CMD_TILED_GAME_FARM_CHOOSE_QUEST_RSP = 8036;
  CMD_TILED_GAME_FARM_FINISH_QUEST_REQ = 8037;
  CMD_TILED_GAME_FARM_FINISH_QUEST_RSP = 8038;
  CMD_TILED_GAME_FARM_SUPER_FISHING_REQ = 8039;
  CMD_TILED_GAME_FARM_SUPER_FISHING_RSP = 8040;
}

enum TiledGameFarmToolType {
  TILED_GAME_FARM_TOOL_TYPE_NONE = 0;
  TILED_GAME_FARM_TOOL_TYPE_HAMMER = 1;
  TILED_GAME_FARM_TOOL_TYPE_HOE = 2;
  TILED_GAME_FARM_TOOL_TYPE_WATERING_CAN = 3;
  TILED_GAME_FARM_TOOL_TYPE_SICKLE = 4;
  TILED_GAME_FARM_TOOL_TYPE_SEED = 5;
  TILED_GAME_FARM_TOOL_TYPE_FISHING_ROD = 6;
  TILED_GAME_FARM_TOOL_TYPE_GLOVE = 7;
}

enum TiledGameFarmFacilityType {
  TILED_GAME_FARM_FACILITY_TYPE_NONE = 0;
  TILED_GAME_FARM_FACILITY_TYPE_LIVESTOCK_SHED = 1;
  TILED_GAME_FARM_FACILITY_TYPE_RESTAURANT = 2;
}

enum TiledGameFarmPrivilegeType {
  TILED_GAME_FARM_PRIVILEGE_TYPE_NONE = 0;
  TILED_GAME_FARM_PRIVILEGE_TYPE_STARTUP_CAPITAL = 1;
  TILED_GAME_FARM_PRIVILEGE_TYPE_SHOP_ITEM_UNLOCK = 2;
  TILED_GAME_FARM_PRIVILEGE_TYPE_TELEPORT_UNLOCK = 3;
  TILED_GAME_FARM_PRIVILEGE_TYPE_SELL_MULTIFIER = 4;
  TILED_GAME_FARM_PRIVILEGE_TYPE_MAX_STAMINA_BOOST = 5;
  TILED_GAME_FARM_PRIVILEGE_TYPE_LEVEL_UP_RESTAURANT = 6;
  TILED_GAME_FARM_PRIVILEGE_TYPE_LIVESTOCK_AUTO_TAKE_CARE = 7;
  TILED_GAME_FARM_PRIVILEGE_TYPE_SUPER_FISHING = 8;
  TILED_GAME_FARM_PRIVILEGE_TYPE_UNLOCK_AND_UPGRADE_SEED = 9;
}

// CmdID: 8300
message TiledGameMonsterFarmGetDataReq {
  uint32 activity_id = 1;
}

message TiledGameMonsterFarmFarmland {
  uint32 cell_id = 1;
  uint32 mature_time = 2;
}

message TiledGameMonsterFarmFarm {
  repeated TiledGameMonsterFarmFarmland farmland_list = 1;
  repeated uint32 matured_farmland_id_list = 2;
}

message TiledGameMonsterFarmMine {
  uint32 visited_max_floor = 1;
  uint32 cur_floor = 2;
}

message TiledGameMonsterFarmFishingFailStatus {
  uint32 fish_id = 1;
  uint32 continuous_fail_num = 2;
}

message TiledGameMonsterFarmFishingSpot {
  uint32 spot_cell_id = 1;
  uint32 left_fish_num = 2;
}

message TiledGameMonsterFarmFishingGround {
  uint32 cur_fishing_cell_id = 1;
  uint32 cur_fish_id = 2;
  repeated TiledGameMonsterFarmFishingFailStatus fail_status_list = 3;
  repeated TiledGameMonsterFarmFishingSpot fishing_spot_list = 5;
}

message TiledGameMonsterFarmRestaurant {
  uint32 level = 1;
  uint32 today_use_meal_voucher_num = 2;
}

message TiledGameMonsterFarmQuestBoard {
  bool is_quest_chosen_today = 1;
  uint32 cur_quest_id = 2;
  repeated uint32 finished_extra_quest_id_list = 3;
}

message TiledGameMonsterFarmItemNum {
  uint32 item_id = 1;
  uint32 item_num = 2;
}

message TiledGameMonsterFarmMonsterAbility {
  uint32 ability_type = 1;
  uint32 ability_num = 2;
}

message TiledGameMonsterFarmMonster {
  uint32 unique_id = 1;
  uint32 monster_id = 2;
  uint32 mood = 3;
  uint32 description_id = 4;
  uint32 name_id = 5;
  uint32 generation_id = 6;
  uint32 work_building_type = 7;
  repeated TiledGameMonsterFarmMonsterAbility ability_list = 8;
  bool is_egg = 9;
  bool is_exceed_limit_monster = 10;
  uint32 work_produce_line_id = 11;
  uint32 rare_id = 12;
  bool is_mutated = 13;
  uint32 total_work_time = 14;
  bool is_dropped = 15;
  uint32 recover_all_mood_time = 16;
  uint32 cost_all_mood_time = 17;
  uint32 egg_rare_id = 18;
  uint32 left_breeding_times = 19;
}

message TiledGameMonsterFarmProduceLine {
  uint32 id = 1;
  uint32 recipe_id = 2;
  uint32 breeding_effect_item = 3;
  uint32 left_produce_num = 4;
  repeated TiledGameMonsterFarmItemNum produced_item_list = 5;
  repeated uint32 monster_id_list = 7;
  uint32 accumulate_work_time = 8;
  TiledGameMonsterFarmMonster breeding_monster = 9;
}

message TiledGameMonsterFarmBuilding {
  uint32 building_id = 1;
  repeated TiledGameMonsterFarmProduceLine produce_line_list = 3;
}

message TiledGameMonsterFarmMonsterRecord {
  uint32 monster_type = 1;
  uint32 max_rare_id = 2;
  repeated TiledGameMonsterFarmMonsterAbility max_ability_list = 3;
}

message TiledGameMonsterFarmMonsterMgr {
  repeated TiledGameMonsterFarmMonster farm_monster_list = 1;
  repeated TiledGameMonsterFarmMonsterRecord monster_max_record_list = 3;
  repeated uint32 monster_id_list = 4;
}

message TiledGameMonsterFarmBusinessReport {
  uint32 acquired_gold_num = 1;
  repeated TiledGameMonsterFarmItemNum sold_item_list = 2;
  uint32 star_monster_uid = 3;
  uint32 model_worker_monster_uid = 4;
  uint32 accumulate_operating_days = 5;
}

// CmdID: 8301
message TiledGameMonsterFarmGetDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  TiledGameMonsterFarmGetDataRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 activity_stamina = 3;
  TiledGameMonsterFarmFarm farm_farm = 4;
  TiledGameMonsterFarmMine farm_mine = 5;
  TiledGameMonsterFarmFishingGround farm_fishing_ground = 6;
  uint32 max_stamina = 7;
  uint32 next_recover_stamina_time = 8;
  uint32 cur_tower_id = 10;
  TiledGameMonsterFarmQuestBoard farm_quest_board = 11;
  repeated TiledGameMonsterFarmItemNum item_buy_num_list = 12;
  uint32 last_refresh_time = 14;
  repeated TiledGameMonsterFarmBuilding farm_building_list = 16;
  TiledGameMonsterFarmMonsterMgr farm_monster_mgr = 18;
  repeated uint32 unlocked_monster_type_list = 19;
  repeated uint32 finished_privilege_list = 20;
  repeated uint32 get_monster_tool_type_list = 21;
  uint32 level = 22;
  repeated uint32 unlock_gallery_id_list = 23;
}

// CmdID: 8304
message TiledGameMonsterFarmUseToolReq {
  uint32 activity_id = 1;
  uint32 item_id = 2;
  repeated uint32 cell_id_list = 3;
}

message TiledGameMonsterFarmPretenderMineCell {
  uint32 cell_id = 1;
  uint32 decoration_id = 2;
}

// CmdID: 8305
message TiledGameMonsterFarmUseToolRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    LACK_STAMINA = 2;
    RANGE_ERROR = 3;
    ITEM_ERROR = 4;
    LACK_ITEM = 5;
    MONSTER_FULL = 6;
  }

  TiledGameMonsterFarmUseToolRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 item_id = 3;
  repeated uint32 failed_cell_id_list = 4;
  repeated TiledGameMonsterFarmPretenderMineCell pretender_mine_cell_list = 5;
}

// CmdID: 8306
message TiledGameMonsterFarmRefreshFarmlandReq {
  uint32 activity_id = 1;
  repeated uint32 cell_id_list = 2;
}

// CmdID: 8307
message TiledGameMonsterFarmRefreshFarmlandRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  TiledGameMonsterFarmRefreshFarmlandRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
}

// CmdID: 8308
message TiledGameMonsterFarmEnterMineFloorReq {
  uint32 activity_id = 1;
  uint32 floor_id = 2;
  bool is_teleport = 3;
  bool is_teleport_player = 4;
  uint32 teleport_position = 5;
}

// CmdID: 8309
message TiledGameMonsterFarmEnterMineFloorRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MINE_REFRESHED = 2;
    NOT_TELEPORTABLE = 3;
    NOT_VISITED = 4;
  }

  TiledGameMonsterFarmEnterMineFloorRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 floor_id = 3;
  uint32 tower_id = 4;
  bool is_teleport_player = 5;
  uint32 teleport_position = 6;
}

message TiledGameMonsterFarmItemInfo {
  uint32 item_id = 1;
  uint32 item_num = 2;
}

// CmdID: 8310
message TiledGameMonsterFarmTradeReq {
  enum TradeType {
    TRADE_TYPE_NONE = 0;
    TRADE_TYPE_BUY = 1;
    TRADE_TYPE_SELL = 2;
  }

  uint32 activity_id = 1;
  TiledGameMonsterFarmTradeReq.TradeType trade_type = 2;
  repeated TiledGameMonsterFarmItemInfo item_list = 3;
}

// CmdID: 8311
message TiledGameMonsterFarmTradeRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NO_MATERIAL = 2;
    NO_GOLD = 3;
    ITEM_LOCKED = 4;
    BUY_LIMIT = 5;
    MATERIAL_OVERFLOW = 6;
  }

  TiledGameMonsterFarmTradeRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
}

// CmdID: 8312
message TiledGameMonsterFarmBeginFishingNotify {
  uint32 activity_id = 1;
  uint32 fish_id = 2;
  uint32 cell_id = 3;
  uint32 continuous_fail_num = 4;
}

// CmdID: 8313
message TiledGameMonsterFarmEndFishingReq {
  uint32 activity_id = 1;
  bool is_success = 2;
}

// CmdID: 8314
message TiledGameMonsterFarmEndFishingRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_FISHING = 2;
  }

  TiledGameMonsterFarmEndFishingRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
}

// CmdID: 8315
message TiledGameMonsterFarmGetQuestReq {
  uint32 activity_id = 1;
}

// CmdID: 8316
message TiledGameMonsterFarmGetQuestRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    CHOSEN = 2;
    NO_CHOOSE_NUM = 3;
  }

  TiledGameMonsterFarmGetQuestRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  repeated uint32 quest_id_list = 3;
}

// CmdID: 8317
message TiledGameMonsterFarmChooseQuestReq {
  uint32 activity_id = 1;
  uint32 quest_id = 2;
}

// CmdID: 8318
message TiledGameMonsterFarmChooseQuestRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    CHOSEN = 2;
    CAN_NOT_CHOOSE = 3;
  }

  TiledGameMonsterFarmChooseQuestRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 quest_id = 3;
}

// CmdID: 8319
message TiledGameMonsterFarmFinishQuestReq {
  uint32 activity_id = 1;
  uint32 quest_id = 2;
  repeated TiledGameMonsterFarmItemInfo commit_item_info_list = 3;
}

// CmdID: 8320
message TiledGameMonsterFarmFinishQuestRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ITEM_LACK = 2;
    ITEM_ERROR = 3;
    ITEM_OVER = 4;
  }

  TiledGameMonsterFarmFinishQuestRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 quest_id = 3;
  RewardData reward_data = 4;
}

// CmdID: 8321
message TiledGameMonsterFarmUseMealVoucherReq {
  uint32 activity_id = 1;
}

// CmdID: 8322
message TiledGameMonsterFarmUseMealVoucherRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    USE_LIMIT = 2;
    NO_VOUCHER = 3;
  }

  TiledGameMonsterFarmUseMealVoucherRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
}

// CmdID: 8323
message TiledGameMonsterFarmPickItemReq {
  uint32 activity_id = 1;
  uint32 unique_entity_id = 2;
}

// CmdID: 8324
message TiledGameMonsterFarmPickItemRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NO_ENTITY = 2;
    ENTITY_TYPE_ERROR = 3;
  }

  TiledGameMonsterFarmPickItemRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
}

// CmdID: 8325
message TiledGameMonsterFarmLevelUpReq {
  uint32 activity_id = 1;
}

// CmdID: 8326
message TiledGameMonsterFarmLevelUpRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MISSION_NOT_FINISH = 2;
  }

  TiledGameMonsterFarmLevelUpRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
}

// CmdID: 8327
message TiledGameMonsterFarmUpgradeBuildingReq {
  uint32 activity_id = 1;
  uint32 building_id = 2;
}

// CmdID: 8328
message TiledGameMonsterFarmUpgradeBuildingRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    BUILDING_NOT_EXIST = 2;
    MISSION_NOT_FINISH = 3;
    LACK_ITEM = 4;
  }

  TiledGameMonsterFarmUpgradeBuildingRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 old_building_id = 3;
  uint32 new_building_id = 4;
}

// CmdID: 8329
message TiledGameMonsterFarmManipulateMonsterReq {
  uint32 activity_id = 1;
  repeated uint32 monster_id_list = 2;
  uint32 building_id = 3;
  uint32 produce_line_id = 4;
  uint32 breeding_effect_item = 6;
}

// CmdID: 8330
message TiledGameMonsterFarmManipulateMonsterRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MONSTER_NOT_EXIST = 2;
    ITEM_LACK = 3;
    MONSTER_CANT_WORK = 4;
    MONSTER_CANT_BREEDING = 5;
  }

  TiledGameMonsterFarmManipulateMonsterRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
}

// CmdID: 8331
message TiledGameMonsterFarmRefreshBuildingReq {
  uint32 activity_id = 1;
  uint32 building_id = 2;
  uint32 produce_line_id = 3;
}

// CmdID: 8332
message TiledGameMonsterFarmRefreshBuildingRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  TiledGameMonsterFarmRefreshBuildingRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
}

// CmdID: 8333
message TiledGameMonsterFarmIncubateReq {
  uint32 activity_id = 1;
  uint32 monster_id = 2;
}

// CmdID: 8334
message TiledGameMonsterFarmIncubateRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ITEM_NOT_EXIST = 2;
    LACK_STAMINA = 3;
    MONSTER_NOT_EXIST = 4;
  }

  TiledGameMonsterFarmIncubateRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  TiledGameMonsterFarmMonster monster = 3;
}

// CmdID: 8335
message TiledGameMonsterFarmSetProduceLineReq {
  uint32 activity_id = 1;
  uint32 building_id = 2;
  uint32 produce_line_id = 3;
  uint32 recipe_id = 4;
  uint32 target_num = 5;
}

// CmdID: 8336
message TiledGameMonsterFarmSetProduceLineRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    BUILDING_NOT_EXIST = 2;
  }

  TiledGameMonsterFarmSetProduceLineRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
}

// CmdID: 8337
message TiledGameMonsterFarmDropMonsterReq {
  uint32 activity_id = 1;
  repeated uint32 monster_id_list = 2;
}

// CmdID: 8338
message TiledGameMonsterFarmDropMonsterRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MONSTER_NOT_EXIST = 2;
    MONSTER_IN_WORKING = 3;
  }

  TiledGameMonsterFarmDropMonsterRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  repeated uint32 drop_monster_id_list = 3;
}

message TiledGameMonsterFarmTakeBuildingData {
  uint32 building_id = 1;
  repeated uint32 produce_line_id_list = 2;
}

// CmdID: 8339
message TiledGameMonsterFarmTakeBuildingProductReq {
  uint32 activity_id = 1;
  repeated TiledGameMonsterFarmTakeBuildingData take_building_list = 5;
}

// CmdID: 8340
message TiledGameMonsterFarmTakeBuildingProductRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_FINISH = 2;
    MONSTER_FULL = 3;
  }

  TiledGameMonsterFarmTakeBuildingProductRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  repeated uint32 taken_monster_list = 3;
}

// CmdID: 8341
message TiledGameMonsterFarmSetBuildingProduceTargetReq {
  uint32 activity_id = 1;
  uint32 building_id = 2;
  uint32 produce_line_id = 3;
  uint32 recipe_id = 4;
  uint32 num = 6;
}

// CmdID: 8342
message TiledGameMonsterFarmSetBuildingProduceTargetRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    BUILDING_NOT_EXIST = 2;
    BUILDING_TYPE_ERROR = 3;
    PRODUCE_LINE_INVALID = 4;
    RECIPE_INVALID = 5;
    ITEM_LACK = 6;
  }

  TiledGameMonsterFarmSetBuildingProduceTargetRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
}

// CmdID: 8343
message TiledGameMonsterFarmGetBusinessReportReq {
  uint32 activity_id = 1;
}

// CmdID: 8344
message TiledGameMonsterFarmGetBusinessReportRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  TiledGameMonsterFarmGetBusinessReportRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  TiledGameMonsterFarmBusinessReport business_report = 3;
}

// CmdID: 8345
message TiledGameMonsterFarmGetRankReq {
  uint32 activity_id = 1;
  uint32 rank_type = 2;
}

// CmdID: 8346
message TiledGameMonsterFarmGetRankRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    TYPE_INVALID = 3;
  }

  TiledGameMonsterFarmGetRankRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 rank_type = 3;
  uint32 rank = 4;
  uint32 rank_percent = 5;
  RankShowData rank_data = 6;
}

enum CmdTypeTiledgamemonsterfarm {
  CMD_TYPE_TILEDGAMEMONSTERFARM_NONE = 0;
  CMD_TILED_GAME_MONSTER_FARM_GET_DATA_REQ = 8300;
  CMD_TILED_GAME_MONSTER_FARM_GET_DATA_RSP = 8301;
  CMD_TILED_GAME_MONSTER_FARM_USE_TOOL_REQ = 8304;
  CMD_TILED_GAME_MONSTER_FARM_USE_TOOL_RSP = 8305;
  CMD_TILED_GAME_MONSTER_FARM_REFRESH_FARMLAND_REQ = 8306;
  CMD_TILED_GAME_MONSTER_FARM_REFRESH_FARMLAND_RSP = 8307;
  CMD_TILED_GAME_MONSTER_FARM_ENTER_MINE_FLOOR_REQ = 8308;
  CMD_TILED_GAME_MONSTER_FARM_ENTER_MINE_FLOOR_RSP = 8309;
  CMD_TILED_GAME_MONSTER_FARM_TRADE_REQ = 8310;
  CMD_TILED_GAME_MONSTER_FARM_TRADE_RSP = 8311;
  CMD_TILED_GAME_MONSTER_FARM_BEGIN_FISHING_NOTIFY = 8312;
  CMD_TILED_GAME_MONSTER_FARM_END_FISHING_REQ = 8313;
  CMD_TILED_GAME_MONSTER_FARM_END_FISHING_RSP = 8314;
  CMD_TILED_GAME_MONSTER_FARM_GET_QUEST_REQ = 8315;
  CMD_TILED_GAME_MONSTER_FARM_GET_QUEST_RSP = 8316;
  CMD_TILED_GAME_MONSTER_FARM_CHOOSE_QUEST_REQ = 8317;
  CMD_TILED_GAME_MONSTER_FARM_CHOOSE_QUEST_RSP = 8318;
  CMD_TILED_GAME_MONSTER_FARM_FINISH_QUEST_REQ = 8319;
  CMD_TILED_GAME_MONSTER_FARM_FINISH_QUEST_RSP = 8320;
  CMD_TILED_GAME_MONSTER_FARM_USE_MEAL_VOUCHER_REQ = 8321;
  CMD_TILED_GAME_MONSTER_FARM_USE_MEAL_VOUCHER_RSP = 8322;
  CMD_TILED_GAME_MONSTER_FARM_PICK_ITEM_REQ = 8323;
  CMD_TILED_GAME_MONSTER_FARM_PICK_ITEM_RSP = 8324;
  CMD_TILED_GAME_MONSTER_FARM_LEVEL_UP_REQ = 8325;
  CMD_TILED_GAME_MONSTER_FARM_LEVEL_UP_RSP = 8326;
  CMD_TILED_GAME_MONSTER_FARM_UPGRADE_BUILDING_REQ = 8327;
  CMD_TILED_GAME_MONSTER_FARM_UPGRADE_BUILDING_RSP = 8328;
  CMD_TILED_GAME_MONSTER_FARM_MANIPULATE_MONSTER_REQ = 8329;
  CMD_TILED_GAME_MONSTER_FARM_MANIPULATE_MONSTER_RSP = 8330;
  CMD_TILED_GAME_MONSTER_FARM_REFRESH_BUILDING_REQ = 8331;
  CMD_TILED_GAME_MONSTER_FARM_REFRESH_BUILDING_RSP = 8332;
  CMD_TILED_GAME_MONSTER_FARM_INCUBATE_REQ = 8333;
  CMD_TILED_GAME_MONSTER_FARM_INCUBATE_RSP = 8334;
  CMD_TILED_GAME_MONSTER_FARM_SET_PRODUCE_LINE_REQ = 8335;
  CMD_TILED_GAME_MONSTER_FARM_SET_PRODUCE_LINE_RSP = 8336;
  CMD_TILED_GAME_MONSTER_FARM_DROP_MONSTER_REQ = 8337;
  CMD_TILED_GAME_MONSTER_FARM_DROP_MONSTER_RSP = 8338;
  CMD_TILED_GAME_MONSTER_FARM_TAKE_BUILDING_PRODUCT_REQ = 8339;
  CMD_TILED_GAME_MONSTER_FARM_TAKE_BUILDING_PRODUCT_RSP = 8340;
  CMD_TILED_GAME_MONSTER_FARM_SET_BUILDING_PRODUCE_TARGET_REQ = 8341;
  CMD_TILED_GAME_MONSTER_FARM_SET_BUILDING_PRODUCE_TARGET_RSP = 8342;
  CMD_TILED_GAME_MONSTER_FARM_GET_BUSINESS_REPORT_REQ = 8343;
  CMD_TILED_GAME_MONSTER_FARM_GET_BUSINESS_REPORT_RSP = 8344;
  CMD_TILED_GAME_MONSTER_FARM_GET_RANK_REQ = 8345;
  CMD_TILED_GAME_MONSTER_FARM_GET_RANK_RSP = 8346;
}

enum TiledGameMonsterFarmPrivilegeType {
  TILED_GAME_MONSTER_FARM_PRIVILEGE_TYPE_NONE = 0;
  TILED_GAME_MONSTER_FARM_PRIVILEGE_TYPE_STARTUP_CAPITAL = 1;
  TILED_GAME_MONSTER_FARM_PRIVILEGE_TYPE_REDUCE_BREAK_EGG_STAMINA = 2;
  TILED_GAME_MONSTER_FARM_PRIVILEGE_TYPE_REDUCE_COST_MODE_RATE = 3;
  TILED_GAME_MONSTER_FARM_PRIVILEGE_TYPE_ADD_MONSTER_POOL = 4;
  TILED_GAME_MONSTER_FARM_PRIVILEGE_TYPE_UNLOCK_QUICK_MANIPULATE_MONSTER = 5;
  TILED_GAME_MONSTER_FARM_PRIVILEGE_TYPE_UNLOCK_QUICK_USE_TOOL = 6;
}

enum TiledGameMonsterFarmRankType {
  TILED_GAME_MONSTER_FARM_RANK_TYPE_NONE = 0;
  TILED_GAME_MONSTER_FARM_RANK_TYPE_TOTAL_ACQUIRED_GOLD_NUM = 1;
  TILED_GAME_MONSTER_FARM_RANK_TYPE_TOTAL_GET_MONSTER_ABILITY_NUM = 2;
}

enum TiledGameMonsterFarmToolType {
  TILED_GAME_MONSTER_FARM_TOOL_TYPE_NONE = 0;
  TILED_GAME_MONSTER_FARM_TOOL_TYPE_HAMMER = 1;
  TILED_GAME_MONSTER_FARM_TOOL_TYPE_HOE = 2;
  TILED_GAME_MONSTER_FARM_TOOL_TYPE_WATERING_CAN = 3;
  TILED_GAME_MONSTER_FARM_TOOL_TYPE_SICKLE = 4;
  TILED_GAME_MONSTER_FARM_TOOL_TYPE_SEED = 5;
  TILED_GAME_MONSTER_FARM_TOOL_TYPE_FISHING_ROD = 6;
  TILED_GAME_MONSTER_FARM_TOOL_TYPE_GLOVE = 7;
}

enum TiledGameMonsterFarmItemType {
  TILED_GAME_MONSTER_FARM_ITEM_TYPE_NONE = 0;
  TILED_GAME_MONSTER_FARM_ITEM_TYPE_PRODUCT = 1;
  TILED_GAME_MONSTER_FARM_ITEM_TYPE_RAW_MATERIAL = 2;
  TILED_GAME_MONSTER_FARM_ITEM_TYPE_CROP = 3;
  TILED_GAME_MONSTER_FARM_ITEM_TYPE_TOOL = 4;
  TILED_GAME_MONSTER_FARM_ITEM_TYPE_MONSTER = 5;
}

enum TiledGameMonsterFarmBuildingType {
  TILED_GAME_MONSTER_FARM_BUILDING_TYPE_NONE = 0;
  TILED_GAME_MONSTER_FARM_BUILDING_TYPE_CITY_HALL = 1;
  TILED_GAME_MONSTER_FARM_BUILDING_TYPE_AGRICULTURAL_FACILITY = 2;
  TILED_GAME_MONSTER_FARM_BUILDING_TYPE_MINING_FACILITY = 3;
  TILED_GAME_MONSTER_FARM_BUILDING_TYPE_DORMITORY = 4;
  TILED_GAME_MONSTER_FARM_BUILDING_TYPE_PROCESSING_FACTORY = 5;
  TILED_GAME_MONSTER_FARM_BUILDING_TYPE_LAB = 6;
  TILED_GAME_MONSTER_FARM_BUILDING_TYPE_FISHERY = 7;
  TILED_GAME_MONSTER_FARM_BUILDING_TYPE_LIVESTOCK_SHED = 8;
}

enum TiledGameMonsterFarmSeedType {
  TILED_GAME_MONSTER_FARM_SEED_TYPE_NONE = 0;
  TILED_GAME_MONSTER_FARM_SEED_TYPE_NORMAL = 1;
  TILED_GAME_MONSTER_FARM_SEED_TYPE_MONSTER = 2;
}

enum TiledGameMonsterFarmAbilityType {
  TILED_GAME_MONSTER_FARM_ABILITY_TYPE_NONE = 0;
  TILED_GAME_MONSTER_FARM_ABILITY_TYPE_ONE = 1;
  TILED_GAME_MONSTER_FARM_ABILITY_TYPE_TWO = 2;
  TILED_GAME_MONSTER_FARM_ABILITY_TYPE_THREE = 3;
  TILED_GAME_MONSTER_FARM_ABILITY_TYPE_FOUR = 4;
}

enum TiledGameMonsterFarmMineralType {
  TILED_GAME_MONSTER_FARM_MINERAL_TYPE_NONE = 0;
  TILED_GAME_MONSTER_FARM_MINERAL_TYPE_NORMAL = 1;
  TILED_GAME_MONSTER_FARM_MINERAL_TYPE_MONSTER = 2;
  TILED_GAME_MONSTER_FARM_MINERAL_TYPE_PRETENDER = 3;
}

enum TiledGameMonsterFarmNameType {
  TILED_GAME_MONSTER_FARM_NAME_TYPE_NONE = 0;
  TILED_GAME_MONSTER_FARM_NAME_TYPE_DESCRIBE = 1;
  TILED_GAME_MONSTER_FARM_NAME_TYPE_NAME = 2;
}

enum TiledGameMonsterFarmNameConditionType {
  TILED_GAME_MONSTER_FARM_NAME_CONDITION_TYPE_NONE = 0;
  TILED_GAME_MONSTER_FARM_NAME_CONDITION_TYPE_MAX_ABILITY = 1;
  TILED_GAME_MONSTER_FARM_NAME_CONDITION_TYPE_ABILITY_RANGE = 2;
  TILED_GAME_MONSTER_FARM_NAME_CONDITION_TYPE_ABILITY_RARE = 3;
  TILED_GAME_MONSTER_FARM_NAME_CONDITION_TYPE_ABILITY_TYPEID = 4;
  TILED_GAME_MONSTER_FARM_NAME_CONDITION_TYPE_ABILITY_DEFAULT = 5;
}

message TiledGamePrpgCard {
  uint32 card_id = 1;
  uint32 level = 2;
}

message TiledGamePrpgDeck {
  uint32 deck_id = 1;
  uint32 level = 2;
  uint32 exp = 3;
}

message TiledGamePrpgBattleMember {
  uint32 uid = 1;
  string nickname = 2;
  uint32 custom_head_id = 3;
  uint32 frame_id = 4;
  uint32 card_back = 5;
  repeated TiledGamePrpgCard card_list = 6;
  uint32 rank_score = 7;
  uint32 hidden_score = 8;
  bool is_abandoned = 9;
  bool is_can_match_robot = 10;
}

message TiledGamePrpgHands {
  TiledGamePrpgHandType type = 1;
  repeated uint32 hands_list = 2;
}

message TiledGamePrpgBattleSettleInfo {
  uint32 win_rounds = 1;
  uint32 lose_rounds = 2;
  bool is_abandon = 3;
  uint32 max_round_score = 4;
  uint32 max_round_score_field_id = 5;
  TiledGamePrpgHands max_round_score_hands = 6;
  TiledGamePrpgHands best_hands = 7;
  TiledGamePrpgPvpSettleSituationType situation = 8;
}

message TiledGamePrpgBattleMemberSettleInfo {
  uint32 uid = 1;
  string nickname = 2;
  uint32 cur_rank_score = 3;
  bool is_abandoned = 4;
  TiledGamePrpgBattleSettleInfo settle_info = 6;
}

message TiledGamePrpgBestInfo {
  uint32 pvp_max_field_score = 1;
  repeated uint32 pvp_max_score_card_list = 2;
  uint32 pvp_win_times = 3;
  uint32 max_rank_score = 4;
  uint32 pvp_max_score_field_id = 5;
}

// CmdID: 8450
message TiledGamePrpgGetDataReq {
}

// CmdID: 8451
message TiledGamePrpgGetDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  TiledGamePrpgGetDataRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 rank_score = 3;
  uint32 pvp_card_back = 4;
  uint32 explore_level = 5;
  uint32 explore_exp = 6;
  repeated uint32 unlock_skill_list = 7;
  repeated TiledGamePrpgCard card_list = 8;
  repeated TiledGamePrpgDeck deck_list = 9;
  repeated uint32 passed_room_id_list = 10;
  uint32 last_take_explore_reward_level = 11;
  TiledGamePrpgBestInfo best_info = 12;
  uint32 daily_drop_num = 13;
}

// CmdID: 8452
message TiledGamePrpgPvpBattleBeginNotify {
  uint32 lobby_id = 1;
  uint32 battle_id = 2;
  string fightserver_ip_v4 = 3;
  string fightserver_ip_v6 = 4;
  uint32 fightserver_port = 5;
  uint32 activity_id = 6;
  bool is_reconnect = 7;
}

// CmdID: 8453
message TiledGamePrpgPvpBattleSettleNotify {
  uint32 activity_id = 1;
  uint32 lobby_id = 2;
  TiledGamePrpgBattleMemberSettleInfo settle_info = 3;
  uint32 rank_score_before = 4;
  uint32 rank_score_after = 5;
  string transaction_str = 6;
}

// CmdID: 8454
message TiledGamePrpgPvpEnterBattleReq {
  uint32 battle_id = 1;
}

// CmdID: 8455
message TiledGamePrpgPvpEnterBattleRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_BATTLE = 2;
  }

  TiledGamePrpgPvpEnterBattleRsp.Retcode retcode = 1;
  uint32 battle_id = 2;
  repeated TiledGamePrpgBattleMember member_list = 3;
}

// CmdID: 8456
message TiledGamePrpgPvpAbandonBattleReq {
  uint32 battle_id = 1;
}

// CmdID: 8457
message TiledGamePrpgPvpAbandonBattleRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_BATTLE = 2;
  }

  TiledGamePrpgPvpAbandonBattleRsp.Retcode retcode = 1;
  uint32 battle_id = 2;
}

// CmdID: 8458
message TiledGamePrpgPvpGetBattleInfoReq {
}

message TiledGamePrpgPvpBattleFieldPlayerInfo {
  uint32 uid = 1;
  repeated uint32 card_list = 2;
  TiledGamePrpgHandType hand_type = 3;
  repeated uint32 hand_type_card_list = 4;
  uint32 type_score = 5;
  uint32 point_score = 6;
  uint32 field_score = 7;
}

message TiledGamePrpgPvpBattleField {
  uint32 id = 1;
  repeated uint32 public_card_list = 2;
  repeated TiledGamePrpgPvpBattleFieldPlayerInfo player_card_list = 3;
}

message TiledGamePrpgPvpBattle {
  enum RoundState {
    ROUND_STATE_NONE = 0;
    ROUND_BEGIN = 1;
    IN_ROUND = 2;
    ROUND_END = 3;
  }

  uint32 battle_id = 1;
  uint32 cur_round = 2;
  TiledGamePrpgPvpBattle.RoundState round_state = 3;
  repeated TiledGamePrpgBattleMember member_list = 4;
  repeated TiledGamePrpgPvpBattleField field_list = 5;
  uint32 remain_exchange_times = 6;
  uint32 remain_put_card_times = 7;
  repeated uint32 hand_card_list = 8;
  bool is_auto_play = 9;
  repeated uint32 cur_round_used_card_list = 10;
}

// CmdID: 8459
message TiledGamePrpgPvpGetBattleInfoRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_BATTLE = 2;
  }

  TiledGamePrpgPvpGetBattleInfoRsp.Retcode retcode = 1;
  TiledGamePrpgPvpBattle battle_info = 2;
}

// CmdID: 8460
message TiledGamePrpgPvpMoveCardReq {
  enum MoveType {
    MOVE_TYPE_NONE = 0;
    MOVE_HAND_TO_FIELD = 1;
    MOVE_FIELD_TO_HAND = 2;
    MOVE_FIELD_TO_FIELD = 3;
    MOVE_SWAP_TWO_CARD = 4;
  }

  uint32 battle_id = 1;
  uint32 card_id = 2;
  TiledGamePrpgPvpMoveCardReq.MoveType move_type = 3;
  uint32 from_id = 4;
  uint32 target_id = 5;
}

// CmdID: 8461
message TiledGamePrpgPvpMoveCardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_BATTLE = 2;
    CARD_ID_ERROR = 3;
    RESTRICTED = 4;
    PUT_TIMES_LIMIT = 5;
    HAND_CARD_NUM_LIMIT = 6;
  }

  TiledGamePrpgPvpMoveCardRsp.Retcode retcode = 1;
  uint32 battle_id = 2;
}

// CmdID: 8462
message TiledGamePrpgPvpExchangeCardReq {
  uint32 battle_id = 1;
  uint32 card_id = 2;
}

// CmdID: 8463
message TiledGamePrpgPvpExchangeCardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_BATTLE = 2;
    CARD_ID_ERROR = 3;
    EXCHANGE_TIMES_LIMIT = 4;
  }

  TiledGamePrpgPvpExchangeCardRsp.Retcode retcode = 1;
  uint32 battle_id = 2;
  uint32 new_card_id = 3;
}

// CmdID: 8464
message TiledGamePrpgPvpEndRoundReq {
  uint32 battle_id = 1;
  uint32 cur_round = 2;
}

// CmdID: 8465
message TiledGamePrpgPvpEndRoundRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_BATTLE = 2;
    ROUND_MISMATCH = 3;
  }

  TiledGamePrpgPvpEndRoundRsp.Retcode retcode = 1;
  uint32 battle_id = 2;
}

// CmdID: 8466
message TiledGamePrpgPvpSyncRoundNotify {
  uint32 battle_id = 1;
  uint32 cur_round = 2;
  uint32 settle_round = 3;
  uint32 cur_time = 4;
  uint32 cur_round_end_time = 5;
}

// CmdID: 8467
message TiledGamePrpgPvpBattleEndNotify {
  uint32 battle_id = 1;
}

// CmdID: 8468
message TiledGamePrpgPvpSetCardBackReq {
  uint32 activity_id = 1;
  uint32 card_back_id = 2;
}

// CmdID: 8469
message TiledGamePrpgPvpSetCardBackRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    INVALID_CARD_BACK_ID = 3;
  }

  TiledGamePrpgPvpSetCardBackRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 card_back_id = 3;
}

// CmdID: 8470
message TiledGamePrpgUnlockSkillReq {
  uint32 activity_id = 1;
  uint32 skill_id = 2;
}

// CmdID: 8471
message TiledGamePrpgUnlockSkillRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    SKILL_ERROR = 3;
    PRE_SKILL_REQUIRED = 4;
    MATERIAL_LACK = 5;
  }

  TiledGamePrpgUnlockSkillRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 skill_id = 3;
}

// CmdID: 8472
message TiledGamePrpgLevelUpCardReq {
  uint32 activity_id = 1;
  uint32 card_id = 2;
  uint32 target_level = 3;
}

// CmdID: 8473
message TiledGamePrpgLevelUpCardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    CARD_ID_ERROR = 3;
    MATERIAL_LACK = 4;
    TARGET_LEVEL_ERROR = 5;
  }

  TiledGamePrpgLevelUpCardRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  TiledGamePrpgCard new_card = 3;
}

// CmdID: 8474
message TiledGamePrpgBattleBeginReq {
  uint32 activity_id = 1;
  uint32 room_id = 2;
}

// CmdID: 8475
message TiledGamePrpgBattleBeginRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    ROOM_ID_ERROR = 3;
    ROOM_TYPE_ERROR = 4;
  }

  TiledGamePrpgBattleBeginRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 room_id = 3;
  uint32 dynamic_level = 4;
  string transaction_str = 5;
}

// CmdID: 8476
message TiledGamePrpgBattleEndReq {
  enum Reason {
    REASON_NONE = 0;
    WIN = 1;
    LOSE = 2;
    EXIT = 3;
  }

  uint32 activity_id = 1;
  uint32 room_id = 2;
  TiledGamePrpgBattleEndReq.Reason end_reason = 3;
  uint32 score = 4;
}

// CmdID: 8477
message TiledGamePrpgBattleEndRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    ROOM_ID_MISMATCH = 3;
  }

  TiledGamePrpgBattleEndRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 room_id = 3;
  uint32 daily_material_drop_num = 4;
}

// CmdID: 8478
message TiledGamePrpgTakeExploreLevelRewardReq {
  uint32 activity_id = 1;
}

// CmdID: 8479
message TiledGamePrpgTakeExploreLevelRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    NO_REWARD = 3;
  }

  TiledGamePrpgTakeExploreLevelRewardRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  repeated RewardData reward_list = 3;
}

// CmdID: 8480
message TiledGamePrpgPvpSendEmojiReq {
  uint32 battle_id = 1;
  uint32 emoji_id = 2;
}

// CmdID: 8481
message TiledGamePrpgPvpSendEmojiRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_BATTLE = 2;
    INVALID_EMOJI = 3;
    IN_CD = 4;
  }

  TiledGamePrpgPvpSendEmojiRsp.Retcode retcode = 1;
  uint32 battle_id = 2;
  uint32 emoji_id = 3;
  uint32 next_can_send_emoji_time = 4;
}

// CmdID: 8482
message TiledGamePrpgPvpEmojiNotify {
  uint32 battle_id = 1;
  uint32 sender_uid = 2;
  uint32 emoji_id = 3;
}

enum CmdTypeTiledgameprpg {
  CMD_TYPE_TILEDGAMEPRPG_NONE = 0;
  CMD_TILED_GAME_PRPG_GET_DATA_REQ = 8450;
  CMD_TILED_GAME_PRPG_GET_DATA_RSP = 8451;
  CMD_TILED_GAME_PRPG_PVP_BATTLE_BEGIN_NOTIFY = 8452;
  CMD_TILED_GAME_PRPG_PVP_BATTLE_SETTLE_NOTIFY = 8453;
  CMD_TILED_GAME_PRPG_PVP_ENTER_BATTLE_REQ = 8454;
  CMD_TILED_GAME_PRPG_PVP_ENTER_BATTLE_RSP = 8455;
  CMD_TILED_GAME_PRPG_PVP_ABANDON_BATTLE_REQ = 8456;
  CMD_TILED_GAME_PRPG_PVP_ABANDON_BATTLE_RSP = 8457;
  CMD_TILED_GAME_PRPG_PVP_GET_BATTLE_INFO_REQ = 8458;
  CMD_TILED_GAME_PRPG_PVP_GET_BATTLE_INFO_RSP = 8459;
  CMD_TILED_GAME_PRPG_PVP_MOVE_CARD_REQ = 8460;
  CMD_TILED_GAME_PRPG_PVP_MOVE_CARD_RSP = 8461;
  CMD_TILED_GAME_PRPG_PVP_EXCHANGE_CARD_REQ = 8462;
  CMD_TILED_GAME_PRPG_PVP_EXCHANGE_CARD_RSP = 8463;
  CMD_TILED_GAME_PRPG_PVP_END_ROUND_REQ = 8464;
  CMD_TILED_GAME_PRPG_PVP_END_ROUND_RSP = 8465;
  CMD_TILED_GAME_PRPG_PVP_SYNC_ROUND_NOTIFY = 8466;
  CMD_TILED_GAME_PRPG_PVP_BATTLE_END_NOTIFY = 8467;
  CMD_TILED_GAME_PRPG_PVP_SET_CARD_BACK_REQ = 8468;
  CMD_TILED_GAME_PRPG_PVP_SET_CARD_BACK_RSP = 8469;
  CMD_TILED_GAME_PRPG_UNLOCK_SKILL_REQ = 8470;
  CMD_TILED_GAME_PRPG_UNLOCK_SKILL_RSP = 8471;
  CMD_TILED_GAME_PRPG_LEVEL_UP_CARD_REQ = 8472;
  CMD_TILED_GAME_PRPG_LEVEL_UP_CARD_RSP = 8473;
  CMD_TILED_GAME_PRPG_BATTLE_BEGIN_REQ = 8474;
  CMD_TILED_GAME_PRPG_BATTLE_BEGIN_RSP = 8475;
  CMD_TILED_GAME_PRPG_BATTLE_END_REQ = 8476;
  CMD_TILED_GAME_PRPG_BATTLE_END_RSP = 8477;
  CMD_TILED_GAME_PRPG_TAKE_EXPLORE_LEVEL_REWARD_REQ = 8478;
  CMD_TILED_GAME_PRPG_TAKE_EXPLORE_LEVEL_REWARD_RSP = 8479;
  CMD_TILED_GAME_PRPG_PVP_SEND_EMOJI_REQ = 8480;
  CMD_TILED_GAME_PRPG_PVP_SEND_EMOJI_RSP = 8481;
  CMD_TILED_GAME_PRPG_PVP_EMOJI_NOTIFY = 8482;
}

enum TiledGamePrpgPvpSettleSituationType {
  TILED_GAME_PRPG_PVP_SETTLE_SITUATION_TYPE_NONE = 0;
  TILED_GAME_PRPG_PVP_SETTLE_SITUATION_TYPE_WIN = 1;
  TILED_GAME_PRPG_PVP_SETTLE_SITUATION_TYPE_LOSE = 2;
  TILED_GAME_PRPG_PVP_SETTLE_SITUATION_TYPE_TIE = 3;
}

enum TiledGamePrpgPvpCardSuitType {
  TILED_GAME_PRPG_PVP_CARD_SUIT_INVALID = 0;
  TILED_GAME_PRPG_PVP_CARD_SUIT_SPADE = 1;
  TILED_GAME_PRPG_PVP_CARD_SUIT_HEART = 2;
  TILED_GAME_PRPG_PVP_CARD_SUIT_CLUB = 3;
  TILED_GAME_PRPG_PVP_CARD_SUIT_DIAMOND = 4;
  TILED_GAME_PRPG_PVP_CARD_SUIT_NONE = 5;
  TILED_GAME_PRPG_PVP_CARD_SUIT_ALL = 6;
}

enum TiledGamePrpgPvpCardRankType {
  TILED_GAME_PRPG_PVP_CARD_RANK_INVALID = 0;
  TILED_GAME_PRPG_PVP_CARD_RANK_ACE = 1;
  TILED_GAME_PRPG_PVP_CARD_RANK_2 = 2;
  TILED_GAME_PRPG_PVP_CARD_RANK_3 = 3;
  TILED_GAME_PRPG_PVP_CARD_RANK_4 = 4;
  TILED_GAME_PRPG_PVP_CARD_RANK_5 = 5;
  TILED_GAME_PRPG_PVP_CARD_RANK_6 = 6;
  TILED_GAME_PRPG_PVP_CARD_RANK_7 = 7;
  TILED_GAME_PRPG_PVP_CARD_RANK_8 = 8;
  TILED_GAME_PRPG_PVP_CARD_RANK_9 = 9;
  TILED_GAME_PRPG_PVP_CARD_RANK_10 = 10;
  TILED_GAME_PRPG_PVP_CARD_RANK_JACK = 11;
  TILED_GAME_PRPG_PVP_CARD_RANK_QUEUE = 12;
  TILED_GAME_PRPG_PVP_CARD_RANK_KING = 13;
  TILED_GAME_PRPG_PVP_CARD_RANK_NONE = 14;
  TILED_GAME_PRPG_PVP_CARD_RANK_ALL = 15;
  TILED_GAME_PRPG_PVP_CARD_RANK_NEGATIVE_SCORE = 16;
}

enum TiledGamePrpgPvpFieldTriggerTimingType {
  TILED_GAME_PRPG_PVP_FIELD_TRIGGER_TIMING_NONE = 0;
  TILED_GAME_PRPG_PVP_FIELD_TRIGGER_TIMING_ON_ROUND_BEGIN = 1;
  TILED_GAME_PRPG_PVP_FIELD_TRIGGER_TIMING_ON_ROUND_END = 2;
  TILED_GAME_PRPG_PVP_FIELD_TRIGGER_TIMING_ON_MOVE_CARD = 3;
  TILED_GAME_PRPG_PVP_FIELD_TRIGGER_TIMING_AURA = 4;
}

enum TiledGamePrpgPvpFieldTriggerConditionType {
  TILED_GAME_PRPG_PVP_FIELD_TRIGGER_CONDITION_ALWAYS = 0;
  TILED_GAME_PRPG_PVP_FIELD_TRIGGER_CONDITION_HAS_ANY_SPECIFIED_HAND_TYPE = 1;
  TILED_GAME_PRPG_PVP_FIELD_TRIGGER_CONDITION_FIELD_SCORE_COMP = 2;
  TILED_GAME_PRPG_PVP_FIELD_TRIGGER_CONDITION_POINT_SCORE_IS = 3;
  TILED_GAME_PRPG_PVP_FIELD_TRIGGER_CONDITION_HAS_ALL_SUIT = 4;
  TILED_GAME_PRPG_PVP_FIELD_TRIGGER_CONDITION_IS_REVEAL_ROUND = 5;
  TILED_GAME_PRPG_PVP_FIELD_TRIGGER_CONDITION_CUR_ROUND_GE = 6;
  TILED_GAME_PRPG_PVP_FIELD_TRIGGER_CONDITION_CUR_ROUND_EQUAL = 7;
}

enum TiledGamePrpgPvpFieldTriggerEffectType {
  TILED_GAME_PRPG_PVP_FIELD_TRIGGER_EFFECT_NONE = 0;
  TILED_GAME_PRPG_PVP_FIELD_TRIGGER_EFFECT_SET_FIELD_SCORE = 1;
  TILED_GAME_PRPG_PVP_FIELD_TRIGGER_EFFECT_SET_FIELD_SCORE_WITH_TAG_CARDS_NUM = 2;
  TILED_GAME_PRPG_PVP_FIELD_TRIGGER_EFFECT_SET_PUBLIC_CARD_NUM = 3;
  TILED_GAME_PRPG_PVP_FIELD_TRIGGER_EFFECT_SET_SETTLE_ROUND = 4;
  TILED_GAME_PRPG_PVP_FIELD_TRIGGER_EFFECT_ADD_EXCHANGE_TIMES = 5;
  TILED_GAME_PRPG_PVP_FIELD_TRIGGER_EFFECT_DRAW_CARDS = 6;
  TILED_GAME_PRPG_PVP_FIELD_TRIGGER_EFFECT_ADD_PUT_TIMES_IN_CUR_ROUND = 7;
  TILED_GAME_PRPG_PVP_FIELD_TRIGGER_EFFECT_MOVE_RANDOM_CARD_FROM_HAND = 8;
  TILED_GAME_PRPG_PVP_FIELD_TRIGGER_EFFECT_MOVE_RANDOM_CARD_FROM_CARD_VEC = 9;
  TILED_GAME_PRPG_PVP_FIELD_TRIGGER_EFFECT_MOVE_ALL_CARD_TO_OTHER_RANDOM_FIELD = 10;
  TILED_GAME_PRPG_PVP_FIELD_TRIGGER_EFFECT_SET_HAND_TYPE_CONFIG = 11;
  TILED_GAME_PRPG_PVP_FIELD_TRIGGER_EFFECT_HIDE_PLAYER_CARD_UNTIL = 12;
  TILED_GAME_PRPG_PVP_FIELD_TRIGGER_EFFECT_DESTROY_ONE_OTHER_RANDOM_FIELD = 13;
  TILED_GAME_PRPG_PVP_FIELD_TRIGGER_EFFECT_COPY_ONE_OTHER_RANDOM_FIELD = 14;
  TILED_GAME_PRPG_PVP_FIELD_TRIGGER_EFFECT_FORBID_MOVE_CARD_TO_THIS_FIELD = 15;
  TILED_GAME_PRPG_PVP_FIELD_TRIGGER_EFFECT_ALLOW_MOVE_FROM_THIS_FIELD = 16;
  TILED_GAME_PRPG_PVP_FIELD_TRIGGER_EFFECT_NO_VISIBLE_IN_THIS_FIELD_BEFORE_SETTLE = 17;
  TILED_GAME_PRPG_PVP_FIELD_TRIGGER_EFFECT_SET_FIELD_SCORE_WITH_FIELD_CARD_NUM = 18;
}

enum TiledGamePrpgPvpLobbyStatus {
  TILED_GAME_PRPG_PVP_LOBBY_STATUS_INVALID = 0;
  TILED_GAME_PRPG_PVP_LOBBY_STATUS_INIT = 1;
  TILED_GAME_PRPG_PVP_LOBBY_STATUS_FIGHT = 2;
  TILED_GAME_PRPG_PVP_LOBBY_STATUS_SETTLE = 3;
  TILED_GAME_PRPG_PVP_LOBBY_STATUS_DELETE = 4;
}

enum TiledGamePrpgHandType {
  TILED_GAME_PRPG_HAND_TYPE_INVALID = 0;
  TILED_GAME_PRPG_HAND_TYPE_NONE = 1;
  TILED_GAME_PRPG_HAND_TYPE_ONE_PAIR = 2;
  TILED_GAME_PRPG_HAND_TYPE_TWO_PAIR = 3;
  TILED_GAME_PRPG_HAND_TYPE_THREE_OF_A_KIND = 4;
  TILED_GAME_PRPG_HAND_TYPE_FULL_HOUSE = 5;
  TILED_GAME_PRPG_HAND_TYPE_STRAIGHT = 6;
  TILED_GAME_PRPG_HAND_TYPE_FLUSH = 7;
  TILED_GAME_PRPG_HAND_TYPE_FOUR_OF_A_KIND = 8;
  TILED_GAME_PRPG_HAND_TYPE_STRAIGHT_FLUSH = 9;
  TILED_GAME_PRPG_HAND_TYPE_FLUSH_FULL_HOUSE = 10;
  TILED_GAME_PRPG_HAND_TYPE_FIVE_OF_A_KIND = 11;
  TILED_GAME_PRPG_HAND_TYPE_FLUSH_FIVE_OF_A_KIND = 12;
}

enum TiledGamePrpgRoomType {
  TILED_GAME_PRPG_ROOM_TYPE_NONE = 0;
  TILED_GAME_PRPG_ROOM_TYPE_NORMAL = 1;
  TILED_GAME_PRPG_ROOM_TYPE_DAILY = 2;
  TILED_GAME_PRPG_ROOM_TYPE_SIDE = 3;
  TILED_GAME_PRPG_ROOM_TYPE_TUTORIAL = 4;
  TILED_GAME_PRPG_ROOM_TYPE_PVP = 5;
}

// CmdID: 6450
message TownActivityGetDataReq {
  uint32 town_id = 1;
}

message TownActivity {
  uint32 town_id = 1;
  uint32 tower_id = 2;
  uint32 game_round = 3;
  repeated TownAvatar avatar_list = 4;
  repeated uint32 brick_id_list = 5;
  uint32 next_brick_round = 6;
  repeated TownBuilding building_list = 7;
  repeated uint32 valid_building_id_list = 8;
  repeated TownMonster monster_list = 9;
  repeated TownEvent event_list = 10;
  TownBoss boss = 11;
  repeated TownBuff buff_list = 12;
  repeated TownPassByTrigger trigger_list = 13;
  repeated TownChallenge challenge_list = 14;
  repeated uint32 finished_tower_id_list = 15;
  bool is_game_end = 16;
  repeated TownPath path_list = 17;
  string transaction_str = 18;
}

message TownBuff {
  uint32 buff_id = 1;
  uint32 buff_num = 2;
  uint32 left_duration_num = 3;
}

message TownAvatar {
  enum Status {
    NORMAL = 0;
    HEALING = 1;
    DEAD = 2;
  }

  uint32 avatar_id = 1;
  uint32 tile_unique_id = 2;
  uint32 left_step = 3;
  uint32 tile_position = 4;
  uint32 left_hp_ratio = 5;
  TownAvatar.Status status = 6;
  uint32 status_begin_round = 7;
  uint32 check_in_building_unique_id = 8;
  repeated TownBuff buff_list = 9;
  uint32 speed_up_heal_times = 10;
}

message TownPassByTrigger {
  uint32 position = 1;
  uint32 skill_id = 2;
  uint32 building_unique_id = 3;
}

message TownBuilding {
  message SkillTriggerTimes {
    uint32 skill_id = 1;
    uint32 trigger_times = 2;
  }

  uint32 unique_id = 1;
  uint32 building_id = 2;
  uint32 position = 3;
  repeated uint32 occupy_position_list = 4;
  repeated TownBuilding.SkillTriggerTimes skill_trigger_times_list = 5;
  uint32 left_hp = 6;
  repeated uint32 activated_duration_skill_id_list = 7;
  repeated uint32 waiting_avatar_id_list = 8;
  uint32 next_interval_skill_round = 9;
}

message TownMonster {
  uint32 unique_id = 1;
  uint32 monster_id = 2;
  uint32 position = 3;
  uint32 strength = 4;
  uint32 left_hp_ratio = 5;
}

message TownBoss {
  uint32 monster_id = 1;
  uint32 unique_id = 2;
  uint32 strength = 3;
  uint32 left_hp_ratio = 4;
  uint32 born_round = 5;
  uint32 next_boss_born_round = 6;
  uint32 next_boss_monster_id = 7;
}

message TownEvent {
  uint32 position = 1;
  uint32 event_id = 2;
}

message TownPath {
  uint32 position = 1;
  uint32 next_position = 2;
}

// CmdID: 6451
message TownActivityGetDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  TownActivityGetDataRsp.Retcode retcode = 1;
  TownActivity town = 2;
}

message TownCommonHead {
  uint32 town_id = 1;
  uint32 tower_id = 2;
  uint32 game_round = 3;
}

// CmdID: 6452
message TownActivitySaveReq {
  TownCommonHead head = 1;
}

// CmdID: 6453
message TownActivitySaveRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  TownActivitySaveRsp.Retcode retcode = 1;
  TownCommonHead head = 2;
}

// CmdID: 6454
message TownActivityBuildReq {
  TownCommonHead head = 1;
  uint32 use_brick_index = 2;
  uint32 use_brick_position = 3;
  uint32 target_building_id = 4;
  uint32 target_building_position = 5;
  uint32 direction = 6;
  repeated uint32 consume_building_unique_id_list = 7;
}

// CmdID: 6455
message TownActivityBuildRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    INVALID_BRICK = 2;
    BLUEPRINT_ERROR = 3;
    INVALID_POSITION = 4;
    LIMIT = 5;
  }

  TownActivityBuildRsp.Retcode retcode = 1;
  TownCommonHead head = 2;
}

// CmdID: 6456
message TownActivityBattleReq {
  message AvatarBattleResult {
    uint32 avatar_id = 1;
    uint32 left_hp_ratio = 2;
  }

  message MonsterBattleResult {
    uint32 monster_unique_id = 1;
    uint32 left_hp_ratio = 2;
  }

  enum BattleEndStatus {
    BATTLE_END_STATUS_NONE = 0;
    WIN = 1;
    ALL_DEAD = 2;
  }

  TownCommonHead head = 1;
  TownActivityBattleReq.BattleEndStatus end_status = 2;
  repeated TownActivityBattleReq.AvatarBattleResult avatar_result_list = 3;
  TownActivityBattleReq.MonsterBattleResult monster_result = 4;
}

// CmdID: 6457
message TownActivityBattleRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    AVATAR_ERROR = 2;
    AVATAR_TEAM_NUM_ERROR = 3;
    POSITION_ERROR = 4;
    MONSTER_NOT_EXIST = 5;
  }

  TownActivityBattleRsp.Retcode retcode = 1;
  TownCommonHead head = 2;
  repeated DropItem drop_item_list = 3;
}

// CmdID: 6458
message TownActivitySellBuildingReq {
  TownCommonHead head = 1;
  uint32 sell_building_unique_id = 2;
}

// CmdID: 6459
message TownActivitySellBuildingRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    CAN_NOT_SELL = 2;
  }

  TownActivitySellBuildingRsp.Retcode retcode = 1;
  TownCommonHead head = 2;
  repeated Material return_material_list = 3;
}

// CmdID: 6460
message TownActivityHealAvatarReq {
  TownCommonHead head = 1;
  uint32 avatar_id = 2;
}

// CmdID: 6461
message TownActivityHealAvatarRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  TownActivityHealAvatarRsp.Retcode retcode = 1;
  TownCommonHead head = 2;
}

// CmdID: 6462
message TownActivitySellBrickReq {
  TownCommonHead head = 1;
  uint32 sell_brick_index = 2;
}

// CmdID: 6463
message TownActivitySellBrickRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    CAN_NOT_SELL = 2;
  }

  TownActivitySellBrickRsp.Retcode retcode = 1;
  TownCommonHead head = 2;
  repeated Material return_material_list = 3;
}

message TownChallenge {
  enum Status {
    NONE = 0;
    DOING = 1;
    FINISH = 2;
    CLOSE = 3;
  }

  uint32 challenge_id = 1;
  TownChallenge.Status status = 2;
  uint32 value = 3;
  uint32 tower_id = 4;
}

// CmdID: 6464
message TownActivityEndNotify {
  enum Status {
    WIN = 0;
    LOSE = 1;
    ABANDON = 2;
  }

  TownCommonHead head = 1;
  TownActivityEndNotify.Status status = 2;
  repeated TownChallenge challenge_list = 3;
  RewardData challenge_reward_data = 4;
  GenericItemNum talent_point_item = 5;
}

// CmdID: 6465
message TownActivityBossAttackNotify {
  TownCommonHead head = 1;
  repeated uint32 attacked_position_list = 2;
}

// CmdID: 6466
message TownActivityGetShopReq {
  TownCommonHead head = 1;
  uint32 building_unique_id = 2;
}

// CmdID: 6467
message TownActivityGetShopRsp {
  message ShopGoods {
    uint32 goods_id = 1;
    uint32 material_id = 2;
    uint32 left_buy_times = 3;
    uint32 cost_material_id = 4;
    uint32 cost_num = 5;
    uint32 limit_type = 6;
  }

  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  TownActivityGetShopRsp.Retcode retcode = 1;
  TownCommonHead head = 2;
  uint32 building_unique_id = 3;
  repeated TownActivityGetShopRsp.ShopGoods goods_list = 4;
}

// CmdID: 6468
message TownActivityShopBuyReq {
  TownCommonHead head = 1;
  uint32 shop_building_unique_id = 2;
  uint32 goods_id = 3;
}

// CmdID: 6469
message TownActivityShopBuyRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    COIN_LACK = 2;
    SOLD = 3;
    FORBID = 4;
  }

  TownActivityShopBuyRsp.Retcode retcode = 1;
  TownCommonHead head = 2;
  uint32 goods_id = 3;
  uint32 left_buy_times = 4;
}

// CmdID: 6470
message TownActivityMaterialUseReq {
  TownCommonHead head = 1;
  uint32 material_id = 2;
  uint32 target_param = 3;
}

// CmdID: 6471
message TownActivityMaterialUseRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MATERIAL_LACK = 2;
    NOT_USABLE = 3;
    INVALID_TARGET = 4;
    FORBID = 5;
  }

  TownActivityMaterialUseRsp.Retcode retcode = 1;
  TownCommonHead head = 2;
  uint32 material_id = 3;
}

// CmdID: 6472
message TownActivitySpeedUpHealReq {
  TownCommonHead head = 1;
  uint32 avatar_id = 2;
}

// CmdID: 6473
message TownActivitySpeedUpHealRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_HEALING = 2;
    LACK_MATERIAL = 3;
  }

  TownActivitySpeedUpHealRsp.Retcode retcode = 1;
  TownCommonHead head = 2;
}

// CmdID: 6474
message TownActivityCheckInOptionalReq {
  TownCommonHead head = 1;
  uint32 building_unique_id = 2;
  uint32 avatar_id = 3;
}

// CmdID: 6475
message TownActivityCheckInOptionalRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_LIST = 2;
    CHECKED_IN = 3;
  }

  TownActivityCheckInOptionalRsp.Retcode retcode = 1;
  TownCommonHead head = 2;
}

// CmdID: 6476
message TownActivityResetReq {
  uint32 town_id = 1;
}

// CmdID: 6477
message TownActivityResetRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  TownActivityResetRsp.Retcode retcode = 1;
  uint32 town_id = 2;
}

// CmdID: 6478
message TownActivityAlterPathReq {
  TownCommonHead head = 1;
  uint32 position = 2;
}

// CmdID: 6479
message TownActivityAlterPathRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NO_ALTER = 2;
    NOT_MEET_CONDITION = 3;
  }

  TownActivityAlterPathRsp.Retcode retcode = 1;
  TownCommonHead head = 2;
  uint32 position = 3;
  uint32 next_position = 4;
}

// CmdID: 6480
message TownActivityAttackEnemyBuffNotify {
  message Attack {
    uint32 building_unique_id = 1;
    uint32 skill_id = 2;
    repeated uint32 attacked_unique_id_list = 3;
  }

  TownCommonHead head = 1;
  repeated TownActivityAttackEnemyBuffNotify.Attack attack_list = 2;
  repeated DropItem drop_item_list = 3;
}

// CmdID: 6481
message TownActivityRefreshBrickReq {
  TownCommonHead head = 1;
}

// CmdID: 6482
message TownActivityRefreshBrickRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    LACK_COIN = 2;
    NO_BRICK = 3;
  }

  TownActivityRefreshBrickRsp.Retcode retcode = 1;
  TownCommonHead head = 2;
}

enum CmdTypeTown {
  CMD_TYPE_TOWN_NONE = 0;
  CMD_TOWN_ACTIVITY_GET_DATA_REQ = 6450;
  CMD_TOWN_ACTIVITY_GET_DATA_RSP = 6451;
  CMD_TOWN_ACTIVITY_SAVE_REQ = 6452;
  CMD_TOWN_ACTIVITY_SAVE_RSP = 6453;
  CMD_TOWN_ACTIVITY_BUILD_REQ = 6454;
  CMD_TOWN_ACTIVITY_BUILD_RSP = 6455;
  CMD_TOWN_ACTIVITY_BATTLE_REQ = 6456;
  CMD_TOWN_ACTIVITY_BATTLE_RSP = 6457;
  CMD_TOWN_ACTIVITY_SELL_BUILDING_REQ = 6458;
  CMD_TOWN_ACTIVITY_SELL_BUILDING_RSP = 6459;
  CMD_TOWN_ACTIVITY_HEAL_AVATAR_REQ = 6460;
  CMD_TOWN_ACTIVITY_HEAL_AVATAR_RSP = 6461;
  CMD_TOWN_ACTIVITY_SELL_BRICK_REQ = 6462;
  CMD_TOWN_ACTIVITY_SELL_BRICK_RSP = 6463;
  CMD_TOWN_ACTIVITY_END_NOTIFY = 6464;
  CMD_TOWN_ACTIVITY_BOSS_ATTACK_NOTIFY = 6465;
  CMD_TOWN_ACTIVITY_GET_SHOP_REQ = 6466;
  CMD_TOWN_ACTIVITY_GET_SHOP_RSP = 6467;
  CMD_TOWN_ACTIVITY_SHOP_BUY_REQ = 6468;
  CMD_TOWN_ACTIVITY_SHOP_BUY_RSP = 6469;
  CMD_TOWN_ACTIVITY_MATERIAL_USE_REQ = 6470;
  CMD_TOWN_ACTIVITY_MATERIAL_USE_RSP = 6471;
  CMD_TOWN_ACTIVITY_SPEED_UP_HEAL_REQ = 6472;
  CMD_TOWN_ACTIVITY_SPEED_UP_HEAL_RSP = 6473;
  CMD_TOWN_ACTIVITY_CHECK_IN_OPTIONAL_REQ = 6474;
  CMD_TOWN_ACTIVITY_CHECK_IN_OPTIONAL_RSP = 6475;
  CMD_TOWN_ACTIVITY_RESET_REQ = 6476;
  CMD_TOWN_ACTIVITY_RESET_RSP = 6477;
  CMD_TOWN_ACTIVITY_ALTER_PATH_REQ = 6478;
  CMD_TOWN_ACTIVITY_ALTER_PATH_RSP = 6479;
  CMD_TOWN_ACTIVITY_ATTACK_ENEMY_BUFF_NOTIFY = 6480;
  CMD_TOWN_ACTIVITY_REFRESH_BRICK_REQ = 6481;
  CMD_TOWN_ACTIVITY_REFRESH_BRICK_RSP = 6482;
}

enum TownActivityConst {
  TOWN_ACTIVITY_CONST_NONE = 0;
  TOWN_ACTIVITY_ROUND_PER_SECOND = 50;
  TOWN_ACTIVITY_STEP_PER_TILE_CELL = 10000;
  TOWN_ACTIVITY_MAX_HP_RATIO = 100000;
}

enum TownPropType {
  TOWN_NONE = 0;
  TOWN_AVATAR = 1;
  TOWN_MONSTER = 2;
}

enum TownRangeType {
  TOWN_RANGE_NONE = 0;
  TOWN_RANGE_CROSS = 1;
  TOWN_RANGE_ROUND = 2;
}

enum TownBuildingSkillTargetType {
  TOWN_TARGET_NONE = 0;
  TOWN_TARGET_AVATAR_CHECK_IN = 1;
  TOWN_TARGET_ALL_AVATAR = 2;
  TOWN_TARGET_ATTRIBUTE_AVATAR = 3;
  TOWN_TARGET_PASSED_AVATAR_IN_CROSS = 4;
  TOWN_TARGET_ROAD_IN_CROSS = 5;
  TOWN_TARGET_ROAD_IN_ROUND = 6;
  TOWN_TARGET_BUILDING = 7;
  TOWN_TARGET_PASSED_AVATAR_IN_ROUND = 8;
  TOWN_TARGET_SPECIFIC_AVATAR = 9;
  TOWN_TARGET_RANDOM_EMPTY_ROAD_IN_ROUND = 10;
  TOWN_TARGET_RANDOM_MONSTER_AOE = 11;
  TOWN_TARGET_BOSS = 12;
}

enum TownBuffType {
  TOWN_BUFF_TYPE_NONE = 0;
  TOWN_BUFF_ADD_STRENGTH_RATIO = 1;
  TOWN_BUFF_ADD_STRENGTH = 2;
  TOWN_BUFF_ADD_LUCK = 3;
  TOWN_BUFF_COIN_RATIO = 4;
  TOWN_BUFF_ADD_MATERIAL = 5;
  TOWN_BUFF_ADD_DAMAGE_RATIO = 6;
  TOWN_BUFF_CHANGE_TERRAIN = 7;
  TOWN_BUFF_CHANGE_GROUND = 8;
  TOWN_BUFF_ADD_DAMAGE_RECEIVED = 9;
  TOWN_BUFF_RPG_EVENT = 10;
  TOWN_BUFF_HEAL_HP_BY_RATIO = 11;
  TOWN_BUFF_HEAL = 12;
  TOWN_BUFF_CHECK_IN = 13;
  TOWN_BUFF_CHECK_OUT = 14;
  TOWN_BUFF_POSTPONE_BOSS = 15;
  TOWN_BUFF_CREATE_ENTITY = 16;
  TOWN_BUFF_REPLACE_ENTITY = 17;
  TOWN_BUFF_ADD_BRICK = 18;
  TOWN_BUFF_LOSE_GAME = 19;
  TOWN_BUFF_RESET_GROUND = 20;
  TOWN_BUFF_ADD_SPEED = 21;
  TOWN_BUFF_CHECK_IN_OPTIONAL = 22;
  TOWN_BUFF_ADD_MONSTER = 23;
  TOWN_BUFF_ADD_EVENT = 24;
  TOWN_BUFF_WIN_GAME = 25;
  TOWN_BUFF_RESET_TERRAIN = 26;
  TOWN_BUFF_BATTLE_SKILL = 27;
  TOWN_BUFF_CHANGE_BUILDING = 28;
  TOWN_BUFF_REDUCE_BOSS_INITIAL_HP_RATIO = 29;
  TOWN_BUFF_ATTACK_ENEMY = 30;
}

enum TownBuffDurationType {
  TOWN_BUFF_DURATION_PERMANENT = 0;
  TOWN_BUFF_DURATION_BATTLE = 1;
  TOWN_BUFF_DURATION_STEP = 2;
  TOWN_BUFF_DURATION_BOSS = 3;
}

enum TownBuildingSkillCondType {
  TOWN_BUILDING_COND_NONE = 0;
  TOWN_BUILDING_COND_SIDE_BUILDING = 1;
  TOWN_BUILDING_COND_SIDE_BUILDING_MAX_NUM = 2;
  TOWN_BUILDING_COND_NO_SIDE_BUILDING = 3;
  TOWN_BUILDING_COND_SIDE_ROAD = 4;
  TOWN_BUILDING_COND_TOTAL_BUILDING_NUM = 5;
  TOWN_BUILDING_COND_PASS_AVATAR = 6;
  TOWN_BUILDING_COND_SIDE_ROAD_WITH_TERRAIN = 7;
}

enum TownActivityGoodsLimitType {
  TOWN_ACTIVITY_GOODS_LIMIT_TYPE_NONE = 0;
  TOWN_ACTIVITY_GOODS_LIMIT_SHOP = 1;
  TOWN_ACTIVITY_GOODS_LIMIT_GLOBAL = 2;
}

enum TownActivityMaterialUseType {
  TOWN_ACTIVITY_MATERIAL_USE_TYPE_NONE = 0;
  TOWN_ACTIVITY_MATERIAL_USE_BUILDING = 1;
  TOWN_ACTIVITY_MATERIAL_USE_AVATAR_BUFF = 2;
  TOWN_ACTIVITY_MATERIAL_USE_KILL_MONSTER = 3;
  TOWN_ACTIVITY_MATERIAL_USE_GLOBAL_BUFF = 4;
}

enum TownActivityChallengeFinishWay {
  TOWN_ACTIVITY_CHALLENGE_FINISH_WAY_NONE = 0;
  TOWN_ACTIVITY_CHALLENGE_BUILDING_HP = 1;
  TOWN_ACTIVITY_CHALLENGE_AVATAR_DIE_TIMES = 2;
  TOWN_ACTIVITY_CHALLENGE_BUILDING_TIMES = 3;
  TOWN_ACTIVITY_CHALLENGE_STRENTH_AVATAR_NUM = 4;
  TOWN_ACTIVITY_CHALLENGE_COIN_NUM = 5;
}

enum TownActivityChallengeCmpType {
  TOWN_ACTIVITY_CHALLENGE_CMP_TYPE_NONE = 0;
  TOWN_ACTIVITY_CHALLENGE_CMP_GREATER = 1;
  TOWN_ACTIVITY_CHALLENGE_CMP_LESS = 2;
  TOWN_ACTIVITY_CHALLENGE_CMP_EQUAL = 3;
  TOWN_ACTIVITY_CHALLENGE_CMP_GREATER_EQUAL = 4;
  TOWN_ACTIVITY_CHALLENGE_CMP_LESS_EQUAL = 5;
}

enum TownActivityChallengeRecordType {
  TOWN_ACTIVITY_CHALLENGE_RECORD_TYPE_NONE = 0;
  TOWN_ACTIVITY_CHALLENGE_RECORD_IN_GAME = 1;
  TOWN_ACTIVITY_CHALLENGE_RECORD_SETTLE_GAME = 2;
}

enum TownActivityCondType {
  TOWN_ACTIVITY_COND_NONE = 0;
  TOWN_ACTIVITY_COND_TOTAL_STRENGTH = 1;
  TOWN_ACTIVITY_COND_TOTAL_SPEED = 2;
  TOWN_ACTIVITY_COND_TOTAL_LUCK = 3;
  TOWN_ACTIVITY_COND_COIN_MATERIAL_NUM = 4;
  TOWN_ACTIVITY_COND_BUILDING_NUM = 5;
}

// CmdID: 476
message GetBuffEffectReq {
  repeated uint32 effect_id_list = 1;
}

// CmdID: 477
message GetBuffEffectRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ADD_FAIL = 2;
  }

  GetBuffEffectRsp.Retcode retcode = 1;
  repeated BuffEffect effect_list = 2;
  repeated uint32 aura_effect_list = 3;
}

// CmdID: 506
message GetGrandKeyReq {
  repeated uint32 key_id_list = 1;
}

// CmdID: 507
message GetGrandKeyRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetGrandKeyRsp.Retcode retcode = 1;
  repeated GrandKey key_list = 2;
  bool is_all = 3;
}

// CmdID: 449
message GetMedalDataReq {
  repeated uint32 medal_id_list = 1;
}

// CmdID: 450
message GetMedalDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetMedalDataRsp.Retcode retcode = 1;
  repeated Medal medal_list = 2;
  bool is_all = 3;
}

// CmdID: 451
message MedalOpReq {
  MedalOpType op = 1;
  uint32 on_id = 2;
  uint32 off_id = 3;
}

// CmdID: 452
message MedalOpRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NO_OWN = 2;
    EXPIRED = 3;
    OFF_ID_ERROR = 4;
  }

  MedalOpRsp.Retcode retcode = 1;
  MedalOpType op = 2;
  uint32 on_id = 3;
  uint32 off_id = 4;
}

// CmdID: 456
message GetStageActDifficultyReq {
}

// CmdID: 457
message GetStageActDifficultyRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetStageActDifficultyRsp.Retcode retcode = 1;
  repeated StageActDifficultyInfo act_difficulty_list = 2;
}

// CmdID: 458
message TakeStageActChallengeRewardReq {
  uint32 act_id = 1;
  uint32 difficulty = 2;
  uint32 challenge_num_index = 3;
  repeated uint32 challenge_num_index_list = 4;
}

// CmdID: 459
message TakeStageActChallengeRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    HAS_TAKE = 2;
    CHALLENGE_NUM_LACK = 3;
    PART_FAIL = 4;
  }

  TakeStageActChallengeRewardRsp.Retcode retcode = 1;
  uint32 act_id = 2;
  uint32 difficulty = 3;
  uint32 challenge_num_index = 4;
  repeated RewardData reward_list = 5;
  repeated uint32 succ_challenge_num_index_list = 6;
  repeated uint32 fail_challenge_num_index_list = 7;
}

message StageChapterBoss {
  uint32 boss_stage_id = 1;
  uint32 left_hp = 2;
}

message StageChapterExclusive {
  uint32 group_id = 1;
  uint32 stage_id = 2;
}

message StageChapterInfo {
  uint32 chapter_id = 1;
  uint64 has_take_challenge = 2;
  uint32 enter_player_level = 3;
  repeated StageChapterBoss boss_list = 4;
  repeated StageChapterExclusive exclusive_stage_list = 5;
}

// CmdID: 965
message GetStageChapterReq {
}

// CmdID: 966
message GetStageChapterRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetStageChapterRsp.Retcode retcode = 1;
  repeated StageChapterInfo chapter_list = 2;
}

// CmdID: 967
message TakeChapterChallengeRewardReq {
  uint32 chapter_id = 1;
  uint32 challenge_num_index = 2;
}

// CmdID: 968
message TakeChapterChallengeRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    HAS_TAKE = 2;
    CHALLENGE_NUM_LACK = 3;
    REWARD_INVALID = 4;
  }

  TakeChapterChallengeRewardRsp.Retcode retcode = 1;
  uint32 chapter_id = 2;
  uint32 challenge_num_index = 3;
  repeated RewardData reward_list = 4;
}

// CmdID: 460
message TakeActivityChallengeRewardReq {
  uint32 activity_id = 1;
  uint32 challenge_num_index = 2;
}

// CmdID: 461
message TakeActivityChallengeRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    HAS_TAKE = 2;
    CHALLENGE_NUM_LACK = 3;
  }

  TakeActivityChallengeRewardRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 challenge_num_index = 3;
  repeated RewardData reward_list = 4;
}

// CmdID: 464
message GetPediaReq {
}

// CmdID: 465
message GetPediaRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetPediaRsp.Retcode retcode = 1;
  repeated uint32 black_list = 2;
}

// CmdID: 466
message MpGetMatchInfoReq {
}

// CmdID: 467
message MpGetMatchInfoRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NO_MATCH_ROOM = 2;
  }

  MpGetMatchInfoRsp.Retcode retcode = 1;
  repeated MpMatchInfo match_info_list = 2;
  uint32 battle_begin_time = 3;
  uint32 lobby_idx = 4;
}

// CmdID: 468
message MpCancelMatchReq {
}

// CmdID: 469
message MpCancelMatchRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  MpCancelMatchRsp.Retcode retcode = 1;
}

// CmdID: 470
message MpGetLobbyRecommendReq {
  uint32 stage_id = 1;
}

// CmdID: 471
message MpGetLobbyRecommendRsp {
  enum RecommendType {
    RECOMMEND_NONE = 0;
    RECOMMEND_CREATE = 1;
    RECOMMEND_ENTER = 2;
  }

  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  MpGetLobbyRecommendRsp.Retcode retcode = 1;
  uint32 stage_id = 2;
  MpGetLobbyRecommendRsp.RecommendType recommend_type = 3;
}

// CmdID: 478
message EquipSynthesisReq {
  Material material = 1;
  EquipmentItem equip_item = 2;
}

// CmdID: 479
message EquipSynthesisRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    FRAG_ERROR = 2;
    BAG_FULL = 3;
  }

  EquipSynthesisRsp.Retcode retcode = 1;
  EquipmentItemList equip_list = 2;
}

// CmdID: 480
message GetPlayerCardReq {
  PlayerCardType type = 1;
}

// CmdID: 481
message GetPlayerCardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetPlayerCardRsp.Retcode retcode = 1;
  PlayerCardType type = 2;
  repeated uint32 avatar_id_list = 3;
  repeated uint32 medal_id_list = 4;
  uint32 msg_config = 5;
  PlayerCardMsgData msg_data = 6;
  uint32 last_read_msg_index = 7;
  uint32 mp_like_num = 8;
  uint32 island_like_num = 9;
  repeated uint32 elf_id_list = 10;
  uint32 campaign_like_num = 11;
  repeated Medal medal_list = 12;
}

// CmdID: 482
message ChangePlayerCardReq {
  PlayerCardType type = 1;
  repeated PlayerCardSlot slot_list = 2;
  PlayerCardMsgConfig msg_config = 3;
}

// CmdID: 483
message ChangePlayerCardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  ChangePlayerCardRsp.Retcode retcode = 1;
  PlayerCardType type = 2;
  repeated PlayerCardSlot slot_list = 3;
  PlayerCardMsgConfig msg_config = 4;
}

// CmdID: 489
message DelPlayerCardMsgReq {
  uint32 target_uid = 1;
  repeated uint32 index_list = 2;
}

// CmdID: 492
message PlayerCardDataChangeNotify {
  uint32 uid = 1;
  uint32 msg_config = 2;
  PlayerCardMedalData medal = 3;
  PlayerCardAvatarData avatar = 4;
}

// CmdID: 486
message SendPlayerCardMsgReq {
  uint32 target_uid = 1;
  string msg = 2;
  ChatMsg chat_msg = 3;
  uint32 msg_num_limit = 4;
  bool is_friend = 5;
}

// CmdID: 493
message SendPlayerCardMsgRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    SEND_NUM_LIMIT = 2;
    SEND_NUM_LIMIT_PLAYER = 3;
    MSG_INVALID = 4;
    BLACK_LIST = 5;
    FORBIDDEN = 6;
    ONLY_FRIEND = 7;
    MSG_CLOSED = 8;
    FEATURE_CLOSED = 9;
  }

  SendPlayerCardMsgRsp.Retcode retcode = 1;
  uint32 target_uid = 2;
  uint32 msg_index = 3;
  uint32 forbidden_time = 4;
  ChatMsg chat_msg = 5;
}

// CmdID: 490
message GetOtherPlayerCardDataReq {
  uint32 target_uid = 1;
}

// CmdID: 491
message GetOtherPlayerCardDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_SAME_IDC = 2;
    HAS_LOGOFF = 3;
  }

  GetOtherPlayerCardDataRsp.Retcode retcode = 1;
  uint32 target_uid = 2;
  PlayerCardData card_data = 3;
  PlayerDetailData player_data = 4;
}

// CmdID: 487
message RecvPlayerCardMsgNotify {
  repeated PlayerCardMsg msg_list = 1;
  uint32 target_uid = 2;
}

message MapQuestSettleData {
  uint32 map_id = 1;
  uint32 old_level = 2;
  uint32 old_star = 3;
  uint32 cur_level = 4;
  uint32 cur_star = 5;
  uint32 sub_star = 6;
}

// CmdID: 496
message GetBossRushActivityReq {
  uint32 activity_id = 1;
}

message BossRushBuff {
  uint32 pool_id = 1;
  uint32 buff_id = 2;
}

// CmdID: 497
message GetBossRushActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ACTIVITY_NOT_OPEN = 2;
    ACTIVITY_ERROR = 3;
  }

  GetBossRushActivityRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 phase_id = 3;
  repeated BossRushBuff buff_list = 4;
}

// CmdID: 498
message ChooseBossRushBuffReq {
  uint32 activity_id = 1;
  uint32 pool_id = 2;
  uint32 buff_id = 3;
}

// CmdID: 499
message ChooseBossRushBuffRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ACTIVITY_NOT_OPEN = 2;
    ACTIVITY_ERROR = 3;
    POOL_ID_ERROR = 4;
    BUFF_ID_ERROR = 5;
    TIME_LIMIT = 6;
  }

  ChooseBossRushBuffRsp.Retcode retcode = 1;
  uint32 activity_id = 2;
  uint32 pool_id = 3;
  uint32 buff_id = 4;
}

// CmdID: 500
message GetDeleteMaterialReq {
}

// CmdID: 501
message GetDeleteMaterialRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetDeleteMaterialRsp.Retcode retcode = 1;
  repeated Material materials = 2;
  repeated GenericItemNum return_item_list = 3;
}

// CmdID: 502
message GetExtraStoryChallengeModeDataReq {
  uint32 chapter_id = 1;
}

// CmdID: 503
message GetExtraStoryChallengeModeDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    EXTRA_STORY_NOT_OPEN = 3;
  }

  GetExtraStoryChallengeModeDataRsp.Retcode retcode = 1;
  uint32 choose_difficulty = 2;
  bool is_can_reset = 3;
  repeated ChallengeModeArea challenge_area_list = 4;
  uint32 chapter_id = 5;
}

// CmdID: 504
message ResetExtraStoryChallengeModeReq {
  uint32 chapter_id = 1;
  uint32 difficulty = 2;
}

// CmdID: 505
message ResetExtraStoryChallengeModeRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    TIME_LIMIT = 2;
    EXTRA_STORY_NOT_OPEN = 3;
    RESET_TIMES_LACK = 4;
    DIFFICULTY_NOT_OPEN = 5;
    LEVEL_LIMIT = 6;
  }

  ResetExtraStoryChallengeModeRsp.Retcode retcode = 1;
  uint32 chapter_id = 2;
  uint32 difficulty = 3;
}

// CmdID: 508
message GetExBossScheduleReq {
}

// CmdID: 509
message GetExBossScheduleRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    FEATURE_CLOSED = 2;
  }

  GetExBossScheduleRsp.Retcode retcode = 1;
  uint32 begin_time = 2;
  uint32 end_time = 3;
  uint32 min_level = 4;
  string image_path = 5;
  uint32 schedule_id = 6;
  uint32 rank_id = 7;
}

message ExBossIdInfo {
  uint32 boss_id = 1;
  repeated uint32 avatar_id_list = 3;
  repeated uint32 weapon_id_list = 4;
  repeated uint32 stigmata_id_list = 5;
  uint32 score = 6;
  repeated uint32 last_avatar_id_list = 7;
  uint32 boss_times_score = 8;
}

message ExBossSingleBossScoreReward {
  uint32 boss_id = 1;
  uint32 max_settle_score = 2;
}

message ExBossInfo {
  uint32 enter_times = 1;
  uint32 schedule_id = 2;
  uint32 rank_id = 3;
  repeated ExBossIdInfo boss_id_list = 4;
  uint32 now_schedule_id = 5;
  repeated ExBossIdInfo ex_boss_list = 6;
  uint32 max_sweep_level = 7;
  repeated ExBossSingleBossScoreReward single_boss_score_reward_list = 8;
  uint32 cur_max_enter_times = 9;
  repeated uint32 has_taken_score_reward_id_list = 10;
}

// CmdID: 510
message GetExBossInfoReq {
}

// CmdID: 511
message GetExBossInfoRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    FEATURE_CLOSED = 3;
  }

  GetExBossInfoRsp.Retcode retcode = 1;
  ExBossInfo boss_info = 2;
}

// CmdID: 516
message TakeExBossRankRewardNotify {
  repeated RewardData reward_list = 1;
  uint32 rank = 2;
  uint32 score = 3;
}

// CmdID: 517
message GetNewConsignedOrderDataReq {
}

// CmdID: 518
message GetNewConsignedOrderDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_ARMADA = 2;
  }

  GetNewConsignedOrderDataRsp.Retcode retcode = 1;
  uint32 progress = 2;
  repeated ConsignedOrder order_list = 3;
  uint32 cd_finish_time = 4;
  uint32 finish_order_times = 5;
  uint32 total_order_times = 6;
}

// CmdID: 519
message GetConsignedRewardReq {
}

// CmdID: 520
message GetConsignedRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_ARMADA = 2;
  }

  GetConsignedRewardRsp.Retcode retcode = 1;
  repeated RewardData required_reward_list = 2;
  repeated RewardData optional_reward_list = 3;
  uint32 my_credit = 4;
  uint32 total_credit = 5;
  repeated uint32 my_optional_reward_list = 6;
}

// CmdID: 521
message ChooseConsignedRewardReq {
  repeated uint32 optional_reward_list = 1;
}

// CmdID: 522
message ChooseConsignedRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_ARMADA = 2;
    ITEM_NOT_EXIST = 3;
  }

  ChooseConsignedRewardRsp.Retcode retcode = 1;
  repeated uint32 optional_reward_list = 2;
}

// CmdID: 523
message TakeConsignedRewardReq {
  uint32 reliable_id = 1;
}

// CmdID: 524
message TakeConsignedRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_ARMADA = 2;
    REWARD_TAKEN = 3;
  }

  TakeConsignedRewardRsp.Retcode retcode = 1;
  repeated RewardData reward_list = 2;
  uint32 reliable_id = 3;
}

message ConsignedRewardLog {
  uint32 uid = 1;
  repeated RewardData reward_list = 2;
  uint32 credit = 3;
}

// CmdID: 525
message GetConsignedRewardLogReq {
}

// CmdID: 526
message GetConsignedRewardLogRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_ARMADA = 2;
  }

  GetConsignedRewardLogRsp.Retcode retcode = 1;
  repeated ConsignedRewardLog reward_log_list = 2;
}

// CmdID: 527
message GetExBossRankReq {
  uint32 rank_id = 1;
  uint32 boss_id = 2;
}

// CmdID: 528
message GetExBossRankRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    RANK_ERROR = 3;
    NOT_JOIN = 4;
    SCHEDULE_DISMATCH = 5;
    FEATURE_CLOSED = 6;
  }

  GetExBossRankRsp.Retcode retcode = 1;
  RankShowData rank_data = 2;
  uint32 rank_id = 3;
  bool is_filtered = 4;
  uint32 boss_id = 5;
}

// CmdID: 529
message ExBossStageBeginReq {
  repeated uint32 avatar_id_list = 1;
  uint32 boss_id = 2;
  bool is_training = 3;
  repeated uint32 elf_id_list = 4;
  bool is_turbo = 5;
}

// CmdID: 530
message ExBossStageBeginRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    AVATAR_ERROR = 3;
    DUP_AVATAR = 4;
    ENTER_TIMES_LACK = 5;
    EX_BOSS_LACK_SCORE = 6;
    ELF_ERROR = 7;
    ELF_CARRY_LEVEL_LIMIT = 8;
    NEED_FINISH_NORMAL = 9;
    FEATURE_LIMIT = 10;
    FEATURE_CLOSED = 11;
    NOT_OPEN = 12;
    NOT_ALLOW_TURBO = 13;
    NO_AVAILABLE_BOSS = 14;
    LACK_LOCK_SLOT = 15;
    PRE_BOSS_NOT_FINISH = 16;
    ELF_SYSTEM_ERROR = 17;
    AVATAR_NUM_ERROR = 18;
  }

  ExBossStageBeginRsp.Retcode retcode = 1;
  string stage_transaction_str = 2;
}

// CmdID: 531
message ExBossStageEndReq {
  StageEndStatus end_status = 1;
  repeated StageCheatData cheat_data_list = 3;
  uint32 boss_id = 4;
  uint32 score = 5;
}

// CmdID: 532
message ExBossStageEndRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_BEGIN = 3;
    NOT_OPEN = 4;
  }

  ExBossStageEndRsp.Retcode retcode = 1;
  StageEndStatus end_status = 2;
  uint32 boss_id = 3;
}

// CmdID: 533
message TakeExBossScoreRewardNotify {
  repeated RewardData reward_list = 1;
}

// CmdID: 534
message OpenWeekDayActivityReq {
  uint32 activity_id = 1;
}

// CmdID: 535
message OpenWeekDayActivityRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    IS_OPEN = 2;
    HAS_OPEN = 3;
    VALID_OPEN = 4;
    MATERIAL_LACK = 5;
    SCOIN_LACK = 6;
  }

  OpenWeekDayActivityRsp.Retcode retcode = 1;
}

// CmdID: 536
message GetChallengeStepRewardReq {
  uint32 step_id = 1;
}

// CmdID: 537
message GetChallengeStepRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    STEP_ID_ERROR = 2;
    STEP_STATUS_ERROR = 3;
    EQUIPMENT_FULL = 4;
    EQUIPMENT_MATERIAL_LIMIT = 5;
    EQUIPMENT_FRAGMENT_LIMIT = 6;
    EQUIPMENT_ELF_FRAGMENT_LIMIT = 7;
  }

  GetChallengeStepRewardRsp.Retcode retcode = 1;
  repeated RewardData reward_list = 2;
}

// CmdID: 538
message AddTechExpReq {
  uint32 material_id = 1;
  uint32 material_num = 2;
  uint32 map_id = 3;
}

// CmdID: 539
message AddTechExpRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    TECH_NOT_OPEN = 2;
    TECH_LEVEL_FULL = 3;
    MATERAIL_NOT_ENOUGH = 4;
    MATERAIL_CAN_NOT_ADD_EXP = 5;
  }

  AddTechExpRsp.Retcode retcode = 1;
}

// CmdID: 540
message TakeTechCollectRewardReq {
  uint32 map_id = 1;
}

// CmdID: 541
message TakeTechCollectRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    TECH_LEVEL_LIMIT = 2;
    IN_CD_TIME = 3;
  }

  TakeTechCollectRewardRsp.Retcode retcode = 1;
  repeated RewardData reward_list = 2;
  uint32 map_id = 3;
}

// CmdID: 553
message MaterialDeleteReturnReq {
}

// CmdID: 564
message TakeDailyCompensationRewardReq {
}

// CmdID: 565
message TakeDailyCompensationRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  TakeDailyCompensationRewardRsp.Retcode retcode = 1;
  repeated RewardData reward_list = 2;
}

// CmdID: 566
message AsMasterPupilCardReq {
  MasterPupilCard card = 1;
}

// CmdID: 567
message AsMasterPupilCardRsp {
  MasterPupilRetcode.Retcode retcode = 1;
  uint32 cd_end_time = 2;
}

// CmdID: 568
message GetMasterPupilDataReq {
  uint32 type = 1;
  uint32 time = 2;
}

// CmdID: 569
message GetMasterPupilDataRsp {
  MasterPupilRetcode.Retcode retcode = 1;
  uint32 type = 2;
  repeated MasterPupilData data_list = 3;
  uint32 dismissed_graduated_pupil_num = 4;
}

// CmdID: 570
message AskForMasterOrPupilReq {
  MasterPupilType type = 1;
  uint32 ask_uid = 2;
  uint32 time = 3;
}

// CmdID: 571
message AskForMasterOrPupilRsp {
  MasterPupilRetcode.Retcode retcode = 1;
  MasterPupilType type = 2;
  uint32 ask_uid = 3;
}

// CmdID: 572
message DealMasterPupilReq {
  uint32 uid = 1;
  MasterPupilOpType op = 2;
  MasterPupilType type = 3;
  uint32 time = 4;
  string nickname = 5;
}

// CmdID: 573
message DealMasterPupilRsp {
  MasterPupilRetcode.Retcode retcode = 1;
  uint32 uid = 2;
  MasterPupilOpType op = 3;
  MasterPupilType type = 4;
}

// CmdID: 574
message MasterPupilEvalReq {
  uint32 uid = 1;
  uint32 star = 2;
  uint32 step_id = 3;
  string comment = 4;
  uint32 level = 5;
  string nickname = 6;
  MasterPoolData pool_reward = 7;
}

// CmdID: 575
message MasterPupilEvalRsp {
  MasterPupilRetcode.Retcode retcode = 1;
  uint32 uid = 2;
  uint32 star = 3;
  uint32 step_id = 4;
  string comment = 5;
  MasterPoolData pool_reward = 6;
  uint32 master_score = 7;
}

// CmdID: 576
message GetMasterFameRewardReq {
  uint32 level = 1;
}

// CmdID: 577
message GetMasterFameRewardRsp {
  MasterPupilRetcode.Retcode retcode = 1;
  uint32 level = 2;
  repeated RewardData reward_list = 3;
}

// CmdID: 578
message MasterPupilCardReportReq {
  MasterPupilCard card = 1;
}

// CmdID: 583
message ActivateTrialAvatarReq {
  uint32 sample_id = 1;
}

// CmdID: 584
message ActivateTrialAvatarRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    REPEATE_ACTIVATE = 2;
    MATERIAL_LACK = 3;
    TYPE_ERROR = 4;
    LEVEL_LIMIT = 5;
  }

  ActivateTrialAvatarRsp.Retcode retcode = 1;
  TrialAvatar avatar = 2;
}

// CmdID: 585
message GetTrialAvatarReq {
}

// CmdID: 586
message GetTrialAvatarRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetTrialAvatarRsp.Retcode retcode = 1;
  repeated TrialAvatar avatar_list = 2;
  bool is_all_update = 3;
}

// CmdID: 587
message GetMasterPupilCardReq {
}

// CmdID: 588
message GetMasterPupilCardRsp {
  MasterPupilRetcode.Retcode retcode = 1;
  MasterPupilCard card = 2;
}

// CmdID: 589
message MasterPupilMsgNotify {
  uint32 target_uid = 1;
  MasterPupilEventType event = 2;
  MasterPupilEventData data = 3;
}

// CmdID: 590
message GetFrameDataReq {
}

message FrameData {
  uint32 id = 1;
  uint32 expire_time = 2;
}

// CmdID: 591
message GetFrameDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetFrameDataRsp.Retcode retcode = 1;
  repeated FrameData frame_list = 2;
  bool is_all = 3;
}

// CmdID: 592
message SetFrameUseReq {
  uint32 frame_id = 1;
}

// CmdID: 593
message SetFrameUseRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  SetFrameUseRsp.Retcode retcode = 1;
  uint32 frame_id = 2;
}

// CmdID: 601
message GetDormDataReq {
  DormDataType data_type = 1;
}

// CmdID: 602
message GetDormDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetDormDataRsp.Retcode retcode = 1;
  DormDataType data_type = 2;
  repeated DormHouse house_list = 3;
  repeated uint32 finish_talk_plot_id_list = 4;
  repeated DepotFurniture depot_furniture_list = 5;
  uint32 level_up_house_id = 6;
  uint32 level_up_end_time = 7;
  uint32 level_up_end_house_id = 8;
  DormFacilityData facility_data = 9;
  repeated DormEvent event_list = 10;
  uint32 show_house = 11;
  uint32 show_room = 12;
  uint32 visit_avatar = 13;
  bool is_allow_visit = 14;
  uint32 last_take_dorm_daily_stamina_time = 15;
  repeated uint32 unlock_avatar_list = 16;
}

// CmdID: 603
message GetDormHouseReq {
  repeated uint32 house_id_list = 1;
}

// CmdID: 604
message GetDormHouseRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    HOUSE_NOT_EXIST = 2;
  }

  GetDormHouseRsp.Retcode retcode = 1;
  repeated DormHouse house_list = 2;
}

// CmdID: 605
message EditDormRoomReq {
  uint32 house_id = 1;
  uint32 room_id = 2;
  repeated Furniture furniture_list = 3;
}

// CmdID: 606
message EditDormRoomRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ROOM_NOT_EXIST = 2;
    FURNITURE_LACK = 3;
    EFFECT_LACK = 4;
  }

  EditDormRoomRsp.Retcode retcode = 1;
}

// CmdID: 607
message GetDepotFurnitureReq {
  repeated uint32 furniture_id_list = 1;
}

// CmdID: 608
message GetDepotFurnitureRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetDepotFurnitureRsp.Retcode retcode = 1;
  repeated DepotFurniture depot_furniture_list = 2;
}

// CmdID: 609
message UnlockDormHouseReq {
  uint32 house_id = 1;
}

// CmdID: 610
message UnlockDormHouseRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    REPEAT_UNLOCK = 2;
    MATERIAL_LIMIT = 3;
    LEVEL_LIMIT = 4;
  }

  UnlockDormHouseRsp.Retcode retcode = 1;
  DormHouse house = 2;
}

// CmdID: 611
message SetDormAvatarReq {
  uint32 house_id = 1;
  repeated DormRoomAvatar room_avatar_list = 2;
}

// CmdID: 612
message SetDormAvatarRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    HOUSE_NOT_EXIST = 2;
    ROOM_NOT_EXIST = 3;
    AVATAR_NOT_EXIST = 4;
    AVATAR_LIMIT = 5;
  }

  SetDormAvatarRsp.Retcode retcode = 1;
}

// CmdID: 613
message LevelUpDormReq {
  uint32 house_id = 1;
  uint32 target_level = 2;
}

// CmdID: 614
message LevelUpDormRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    BUSY = 2;
    HOUSE_NOT_EXIST = 3;
    LEVEL_ERROR = 4;
    COMFORT_LIMIT = 5;
    MATERIAL_LIMIT = 6;
  }

  LevelUpDormRsp.Retcode retcode = 1;
  uint32 level_up_house_id = 2;
  uint32 level_up_end_time = 3;
}

// CmdID: 615
message SetDormNameReq {
  uint32 house_id = 1;
  uint32 room_id = 2;
  string name = 3;
}

// CmdID: 616
message SetDormNameRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    HOUSE_NOT_EXIST = 2;
    ROOM_NOT_EXIST = 3;
    FORMAT_ERROR = 4;
    SENSITIVE_WORDS = 5;
    NAME_REPEAT = 6;
    IN_AUDIT = 7;
    IN_CD = 8;
  }

  SetDormNameRsp.Retcode retcode = 1;
  uint32 cd_end_time = 2;
}

// CmdID: 617
message FinishDormEventReq {
  uint32 event_id = 1;
  uint32 avatar_id = 2;
}

// CmdID: 618
message FinishDormEventRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    CONDITION_LIMIT = 2;
  }

  FinishDormEventRsp.Retcode retcode = 1;
  repeated RewardData reward_list = 2;
  repeated DropItem drop_item_list = 3;
}

// CmdID: 619
message GetHasGotFurnitureIdListReq {
}

// CmdID: 620
message GetHasGotFurnitureIdListRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetHasGotFurnitureIdListRsp.Retcode retcode = 1;
  repeated uint32 furniture_id_list = 2;
  repeated uint32 has_unlock_furniture_id_list = 3;
}

// CmdID: 621
message BuyFurnitureReq {
  repeated DepotFurniture furniture_list = 1;
}

// CmdID: 622
message BuyFurnitureRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    LOCK = 2;
    HCOIN_LACK = 3;
    SCOIN_LACK = 4;
    MATERIAL_LACK = 5;
    KEEP_LIMIT = 6;
  }

  BuyFurnitureRsp.Retcode retcode = 1;
}

// CmdID: 633
message GetOtherDormDataReq {
  uint32 target_uid = 1;
  uint32 visit_avatar = 2;
  uint32 level = 3;
  string name = 4;
}

// CmdID: 634
message GetOtherDormDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    LEVEL_LIMIT = 2;
    VISIT_FORBID = 3;
    TARGET_ERROR = 4;
  }

  GetOtherDormDataRsp.Retcode retcode = 1;
  uint32 target_uid = 2;
  DormHouse house = 3;
  uint32 show_room = 4;
  uint32 visit_avatar = 5;
  uint32 be_liked_num = 6;
  repeated DormVisitRecord record_list = 7;
  uint32 be_visit_num = 8;
  bool is_receive_like_limit = 9;
  bool is_has_liked = 10;
  bool is_send_like_limit = 11;
  repeated DormFacility facility_list = 12;
  uint32 comfort_value = 13;
}

// CmdID: 635
message SetDormSnsInfoReq {
  uint32 show_house = 1;
  uint32 show_room = 2;
  uint32 visit_avatar = 3;
  bool is_allow_visit = 4;
}

// CmdID: 636
message SetDormSnsInfoRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    HOUSE_NOT_EXIST = 2;
    ROOM_NOT_EXIST = 3;
    AVATAR_NOT_EXIST = 4;
  }

  SetDormSnsInfoRsp.Retcode retcode = 1;
}

// CmdID: 637
message GetDormSnsDataReq {
}

// CmdID: 638
message GetDormSnsDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    LEVEL_LIMIT = 2;
  }

  GetDormSnsDataRsp.Retcode retcode = 1;
  uint32 be_liked_num = 2;
  repeated DormVisitRecord record_list = 3;
  uint32 be_visit_num = 4;
}

// CmdID: 639
message LikeDormReq {
  uint32 target_uid = 1;
}

// CmdID: 640
message LikeDormRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    LEVEL_LIMIT = 2;
    HAS_LIKED = 3;
    SEND_LIKE_LIMIT = 4;
    RECEIVE_LIKE_LIMIT = 5;
  }

  LikeDormRsp.Retcode retcode = 1;
  uint32 target_uid = 2;
  uint32 friends_point = 3;
}

// CmdID: 641
message FinishDormTalkReq {
  uint32 plot_id = 1;
  repeated uint32 avatar_id_list = 2;
}

// CmdID: 642
message FinishDormTalkRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    PLOT_ERROR = 2;
    PLOT_FINISHED = 3;
  }

  FinishDormTalkRsp.Retcode retcode = 1;
  repeated RewardData reward_list = 2;
  repeated DropItem drop_item_list = 3;
}

// CmdID: 643
message GetAvatarRollDataReq {
  repeated uint32 avatar_id_list = 1;
}

// CmdID: 644
message GetAvatarRollDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    AVATAR_NOT_EXIST = 2;
  }

  GetAvatarRollDataRsp.Retcode retcode = 1;
  repeated AvatarRoll roll_list = 2;
  bool is_all = 3;
}

// CmdID: 645
message TakeRollRewardReq {
  uint32 avatar_id = 1;
  uint32 reward_group_id = 2;
}

// CmdID: 646
message TakeRollRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    AVATAR_ERROR = 2;
    REWARD_ERROR = 3;
    PROGRESS_LACK = 4;
    REWARD_HAS_TAKE = 5;
  }

  TakeRollRewardRsp.Retcode retcode = 1;
  repeated RewardData reward_list = 2;
}

// CmdID: 649
message ClaimStaminaReq {
  uint32 stamina = 1;
}

// CmdID: 650
message ClaimStaminaRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    FACILITY_LOCK = 2;
    STORE_LACK = 3;
    POWER_LACK = 4;
    STAMINA_EXCEED = 5;
  }

  ClaimStaminaRsp.Retcode retcode = 1;
  uint32 stamina = 2;
}

// CmdID: 651
message GetPupilMissionReq {
  uint32 uid = 1;
}

// CmdID: 652
message GetPupilMissionRsp {
  MasterPupilRetcode.Retcode retcode = 1;
  uint32 uid = 2;
  uint32 step_id = 3;
  repeated Mission mission_list = 4;
  MasterPoolData pool_reward = 5;
  uint32 time = 6;
}

// CmdID: 653
message GetMasterPupilApplyReq {
  MasterPupilType type = 1;
  uint32 time = 2;
}

// CmdID: 654
message GetMasterPupilApplyRsp {
  MasterPupilRetcode.Retcode retcode = 1;
  MasterPupilType type = 2;
  repeated MasterPupilApplyMsg msg_list = 3;
  repeated MasterPupilApplyMsg send_msg_list = 4;
}

// CmdID: 655
message GetRecommendMasterPupilReq {
  MasterPupilType type = 1;
  MasterPupilCard card = 2;
}

// CmdID: 656
message GetRecommendMasterPupilRsp {
  MasterPupilRetcode.Retcode retcode = 1;
  MasterPupilType type = 2;
  repeated MasterPupilApplyMsg msg_list = 3;
}

// CmdID: 657
message GetMasterPupilMainDataReq {
  MasterPupilType type = 1;
}

// CmdID: 658
message GetMasterPupilMainDataRsp {
  MasterPupilRetcode.Retcode retcode = 1;
  MasterPupilType type = 2;
  MasterMainData master = 3;
  PupilMainData pupil = 4;
}

// CmdID: 659
message GetPupilEvalDataReq {
}

// CmdID: 660
message GetPupilEvalDataRsp {
  MasterPupilRetcode.Retcode retcode = 1;
  MasterPupilEvalMsg eval_msg = 2;
}

// CmdID: 662
message GetMasterRankReq {
}

// CmdID: 663
message GetMasterRankRsp {
  MasterPupilRetcode.Retcode retcode = 1;
  RankShowData rank_data = 2;
  uint32 refresh_time = 3;
}

// CmdID: 664
message GetOtherMasterPupilReq {
  repeated uint32 uid_list = 1;
}

// CmdID: 665
message GetOtherMasterPupilRsp {
  MasterPupilRetcode.Retcode retcode = 1;
  repeated uint32 uid_list = 2;
  repeated MasterPupilDetailData master_pupil_list = 3;
}

// CmdID: 680
message UnlockFurnitureReq {
  uint32 furniture_id = 1;
}

// CmdID: 681
message UnlockFurnitureRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    UNLOCK_FORBID = 2;
    HAS_UNLOCK = 3;
    HCOIN_LACK = 4;
    SCOIN_LACK = 5;
    MATERIAL_LACK = 6;
  }

  UnlockFurnitureRsp.Retcode retcode = 1;
}

// CmdID: 753
message GrandKeyLevelUpReq {
  uint32 key_id = 1;
}

// CmdID: 754
message GrandKeyLevelUpRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    WEAPON_LEVEL_LIMIT = 2;
    MATERIAL_LIMIT = 3;
    MAX_LEVEL = 4;
    PLAYER_LEVEL_LIMIT = 5;
  }

  GrandKeyLevelUpRsp.Retcode retcode = 1;
  uint32 key_id = 2;
  uint32 level = 3;
}

// CmdID: 755
message GrandKeyResetReq {
  repeated uint32 key_id_list = 1;
}

// CmdID: 756
message GrandKeyResetRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GrandKeyResetRsp.Retcode retcode = 1;
  repeated uint32 key_id_list = 2;
}

// CmdID: 757
message GrandKeyBreachReq {
  uint32 key_id = 1;
}

// CmdID: 758
message GrandKeyBreachRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    WEAPON_LIMIT = 2;
  }

  GrandKeyBreachRsp.Retcode retcode = 1;
  uint32 key_id = 2;
  uint32 breach_level = 3;
}

// CmdID: 759
message GrandKeyActivateSkillReq {
  repeated GrandKeySkill key_list = 1;
}

// CmdID: 760
message GrandKeyActivateSkillRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MATERIAL_LIMIT = 2;
    REPEAT_ACTIVATE = 3;
    SKILL_LOCK = 4;
    NUM_LIMIT = 5;
  }

  GrandKeyActivateSkillRsp.Retcode retcode = 1;
}

// CmdID: 761
message GrandKeyContrastReq {
  uint32 unique_id = 1;
}

// CmdID: 762
message GrandKeyContrastRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GrandKeyContrastRsp.Retcode retcode = 1;
  uint32 unique_id = 2;
  uint32 unique_id_after = 3;
}

// CmdID: 763
message GrandKeySetSkillReq {
  repeated GrandKeySkill key_list = 1;
}

// CmdID: 764
message GrandKeySetSkillRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_ACTIVE = 2;
    SKILL_LOCKED = 3;
    NUM_LIMIT = 4;
  }

  GrandKeySetSkillRsp.Retcode retcode = 1;
}

// CmdID: 765
message GrandKeyUnlockSkillReq {
  repeated GrandKeySkill skill_list = 1;
}

// CmdID: 766
message GrandKeyUnlockSkillRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    SKILL_NOT_EXIST = 2;
    SKILL_AUTO_UNLOCKED = 3;
    NOT_MEET_CONDITION = 4;
    SKILL_HAS_UNLOCKED = 5;
  }

  GrandKeyUnlockSkillRsp.Retcode retcode = 1;
}

// CmdID: 801
message PushClientMsgNotify {
  repeated string platform_list = 1;
  repeated string uid_list = 2;
  repeated string tag_list = 3;
  repeated string tag_and_list = 4;
  repeated string tag_not_list = 5;
  string content = 6;
}

// CmdID: 802
message SetPlayerTagNotify {
  string uid = 1;
  repeated string tag_list = 2;
}

// CmdID: 803
message SyncTimeReq {
  uint32 seq = 1;
}

// CmdID: 804
message SyncTimeRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  SyncTimeRsp.Retcode retcode = 1;
  uint32 cur_time = 2;
  uint32 seq = 3;
}

// CmdID: 807
message TakeExtraStoryChallengeModeChapterRewardReq {
  uint32 chapter_id = 1;
  uint32 difficulty = 2;
}

// CmdID: 808
message TakeExtraStoryChallengeModeChapterRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_OPEN = 2;
    LEVEL_LIMIT = 3;
    DIFFICULTY_NOT_OPEN = 4;
    NOT_FINISHED = 5;
    HAS_TAKEN = 6;
    NO_CHAPTER_REWARD = 7;
  }

  TakeExtraStoryChallengeModeChapterRewardRsp.Retcode retcode = 1;
  RewardData chapter_reward = 2;
}

// CmdID: 809
message GetAvatarBindEquipInChallengeModeReq {
  repeated uint32 avatar_id_list = 1;
}

message AvatarBindEquipData {
  uint32 avatar_id = 1;
  uint32 weapon_uid = 2;
  repeated uint32 stigmata_uid_list = 3;
}

// CmdID: 810
message GetAvatarBindEquipInChallengeModeRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetAvatarBindEquipInChallengeModeRsp.Retcode retcode = 1;
  repeated AvatarBindEquipData avatar_equip_list = 2;
}

// CmdID: 813
message GetGalInteractTriggerEventReq {
  uint32 avatar_id = 1;
  repeated uint32 event_id_list = 2;
}

// CmdID: 814
message GetGalInteractTriggerEventRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NO_SUCH_AVATAR = 2;
  }

  GetGalInteractTriggerEventRsp.Retcode retcode = 1;
  uint32 event_id = 2;
  uint32 avatar_id = 3;
}

// CmdID: 815
message TakeGalInteractTriggerEventReq {
  uint32 avatar_id = 1;
  uint32 event_id = 2;
}

// CmdID: 816
message TakeGalInteractTriggerEventRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NO_SUCH_AVATAR = 2;
    EVENT_ID_ERROR = 3;
  }

  TakeGalInteractTriggerEventRsp.Retcode retcode = 1;
  uint32 avatar_id = 2;
  uint32 event_id = 3;
  RewardData reward_data = 4;
  DropItem drop_item = 5;
}

// CmdID: 827
message AvatarFragmentTransformReq {
  uint32 id = 1;
  uint32 num = 2;
  repeated GenericItemNum fragment_list = 3;
}

// CmdID: 828
message AvatarFragmentTransformRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NEED_SSS = 2;
    LACK = 3;
    FULL = 4;
    FEATURE_CLOSED = 5;
  }

  AvatarFragmentTransformRsp.Retcode retcode = 1;
  uint32 return_id = 2;
  uint32 return_num = 3;
  repeated GenericItemNum return_list = 4;
}

// CmdID: 829
message StageBattleSaveClientDataReq {
  uint32 stage_id = 1;
  uint32 act_id = 2;
  string client_data = 3;
}

// CmdID: 830
message StageBattleSaveClientDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ONE_VALID_ID = 2;
    STAGE_BEGIN = 3;
  }

  StageBattleSaveClientDataRsp.Retcode retcode = 1;
}

// CmdID: 836
message TakeExtraStoryLineStoryFinishRewardReq {
  uint32 line_id = 1;
}

// CmdID: 837
message TakeExtraStoryLineStoryFinishRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_FINISH = 2;
    HAS_TAKEN = 3;
  }

  TakeExtraStoryLineStoryFinishRewardRsp.Retcode retcode = 1;
  uint32 line_id = 2;
  RewardData reward_data = 3;
}

// CmdID: 961
message UnbindAccountReq {
  uint32 account_type = 1;
  string account_uid = 2;
  string account_token = 3;
  string token = 4;
}

// CmdID: 962
message UnbindAccountRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    ACCOUNT_VERIFY_ERROR = 2;
    ACCOUNT_TYPE_ERROR = 3;
    NOT_BIND = 4;
    IS_LOGIN = 5;
  }

  UnbindAccountRsp.Retcode retcode = 1;
}

// CmdID: 969
message SyncDutyNotify {
  uint32 daily_duty_point = 1;
  repeated uint32 has_take_daily_duty_id_list = 2;
  uint32 weekly_duty_point = 3;
  repeated uint32 has_take_weekly_duty_id_list = 4;
}

// CmdID: 970
message RecallMasterPupilApplicationReq {
  uint32 target_uid = 1;
  string self_nickname = 2;
}

// CmdID: 971
message RecallMasterPupilApplicationRsp {
  MasterPupilRetcode.Retcode retcode = 1;
}

// CmdID: 972
message SetFriendRemarkReq {
  uint32 uid = 1;
  string new_remark = 2;
  string old_remark = 3;
}

// CmdID: 973
message SetFriendRemarkRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_FRIEND = 2;
    FORMAT_ERROR = 3;
    SENSITIVE_WORDS = 4;
    SAME_REMARK = 5;
    FEATURE_CLOSED = 6;
    IN_AUDIT = 7;
    IN_CD = 8;
  }

  SetFriendRemarkRsp.Retcode retcode = 1;
  uint32 uid = 2;
  string remark = 3;
  uint32 set_friend_remark_cd_end_time = 4;
}

// CmdID: 974
message GetFriendRemarkListReq {
}

message FriendRemark {
  uint32 uid = 1;
  string remark = 2;
}

// CmdID: 975
message GetFriendRemarkListRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetFriendRemarkListRsp.Retcode retcode = 1;
  repeated FriendRemark friend_remark_list = 2;
}

// CmdID: 976
message PlayerLevelUpNotify {
  uint32 old_level = 1;
  uint32 new_level = 2;
  RewardData reward_data = 3;
}

enum CmdTypeTwo {
  CMD_TYPE_TWO_NONE = 0;
  CMD_GET_MEDAL_DATA_REQ = 449;
  CMD_GET_MEDAL_DATA_RSP = 450;
  CMD_MEDAL_OP_REQ = 451;
  CMD_MEDAL_OP_RSP = 452;
  CMD_GET_STAGE_ACT_DIFFICULTY_REQ = 456;
  CMD_GET_STAGE_ACT_DIFFICULTY_RSP = 457;
  CMD_TAKE_STAGE_ACT_CHALLENGE_REWARD_REQ = 458;
  CMD_TAKE_STAGE_ACT_CHALLENGE_REWARD_RSP = 459;
  CMD_TAKE_ACTIVITY_CHALLENGE_REWARD_REQ = 460;
  CMD_TAKE_ACTIVITY_CHALLENGE_REWARD_RSP = 461;
  CMD_GET_PEDIA_REQ = 464;
  CMD_GET_PEDIA_RSP = 465;
  CMD_MP_GET_MATCH_INFO_REQ = 466;
  CMD_MP_GET_MATCH_INFO_RSP = 467;
  CMD_MP_CANCEL_MATCH_REQ = 468;
  CMD_MP_CANCEL_MATCH_RSP = 469;
  CMD_MP_GET_LOBBY_RECOMMEND_REQ = 470;
  CMD_MP_GET_LOBBY_RECOMMEND_RSP = 471;
  CMD_GET_BUFF_EFFECT_REQ = 476;
  CMD_GET_BUFF_EFFECT_RSP = 477;
  CMD_EQUIP_SYNTHESIS_REQ = 478;
  CMD_EQUIP_SYNTHESIS_RSP = 479;
  CMD_GET_PLAYER_CARD_REQ = 480;
  CMD_GET_PLAYER_CARD_RSP = 481;
  CMD_CHANGE_PLAYER_CARD_REQ = 482;
  CMD_CHANGE_PLAYER_CARD_RSP = 483;
  CMD_SEND_PLAYER_CARD_MSG = 486;
  CMD_RECV_PLAYER_CARD_MSG = 487;
  CMD_DEL_PLAYER_CARD_MSG_REQ = 489;
  CMD_GET_OTHER_PLAYER_CARD_DATA_REQ = 490;
  CMD_GET_OTHER_PLAYER_CARD_DATA_RSP = 491;
  CMD_CHANGE_PLAYER_CARD_DATA_NOTIFY = 492;
  CMD_SEND_PLAYER_CARD_MSG_RSP = 493;
  CMD_GET_BOSS_RUSH_ACTIVITY_REQ = 496;
  CMD_GET_BOSS_RUSH_ACTIVITY_RSP = 497;
  CMD_CHOOSE_BOSS_RUSH_BUFF_REQ = 498;
  CMD_CHOOSE_BOSS_RUSH_BUFF_RSP = 499;
  CMD_GET_DELETE_MATERIAL_REQ = 500;
  CMD_GET_DELETE_MATERIAL_RSP = 501;
  CMD_GET_EXTRA_STORY_CHALLENGE_MODE_DATA_REQ = 502;
  CMD_GET_EXTRA_STORY_CHALLENGE_MODE_DATA_RSP = 503;
  CMD_RESET_EXTRA_STORY_CHALLENGE_MODE_REQ = 504;
  CMD_RESET_EXTRA_STORY_CHALLENGE_MODE_RSP = 505;
  CMD_GET_GRAND_KEY_REQ = 506;
  CMD_GET_GRAND_KEY_RSP = 507;
  CMD_GET_EX_BOSS_SCHEDULE_REQ = 508;
  CMD_GET_EX_BOSS_SCHEDULE_RSP = 509;
  CMD_GET_EX_BOSS_INFO_REQ = 510;
  CMD_GET_EX_BOSS_INFO_RSP = 511;
  CMD_TAKE_EX_BOSS_RANK_REWARD_NOTIFY = 516;
  CMD_GET_NEW_CONSIGNED_ORDER_DATA_REQ = 517;
  CMD_GET_NEW_CONSIGNED_ORDER_DATA_RSP = 518;
  CMD_GET_CONSIGNED_REWARD_REQ = 519;
  CMD_GET_CONSIGNED_REWARD_RSP = 520;
  CMD_CHOOSE_CONSIGNED_REWARD_REQ = 521;
  CMD_CHOOSE_CONSIGNED_REWARD_RSP = 522;
  CMD_TAKE_CONSIGNED_REWARD_REQ = 523;
  CMD_TAKE_CONSIGNED_REWARD_RSP = 524;
  CMD_GET_CONSIGNED_REWARD_LOG_REQ = 525;
  CMD_GET_CONSIGNED_REWARD_LOG_RSP = 526;
  CMD_GET_EX_BOSS_RANK_REQ = 527;
  CMD_GET_EX_BOSS_RANK_RSP = 528;
  CMD_EX_BOSS_STAGE_BEGIN_REQ = 529;
  CMD_EX_BOSS_STAGE_BEGIN_RSP = 530;
  CMD_EX_BOSS_STAGE_END_REQ = 531;
  CMD_EX_BOSS_STAGE_END_RSP = 532;
  CMD_TAKE_EX_BOSS_SCORE_REWARD_NOTIFY = 533;
  CMD_OPEN_WEEK_DAY_ACTIVITY_REQ = 534;
  CMD_OPEN_WEEK_DAY_ACTIVITY_RSP = 535;
  CMD_GET_CHALLENGE_STEP_REWARD_REQ = 536;
  CMD_GET_CHALLENGE_STEP_REWARD_RSP = 537;
  CMD_ADD_TECH_EXP_REQ = 538;
  CMD_ADD_TECH_EXP_RSP = 539;
  CMD_TAKE_TECH_COLLECT_REWARD_REQ = 540;
  CMD_TAKE_TECH_COLLECT_REWARD_RSP = 541;
  CMD_MATERIAL_DELETE_RETURN_REQ = 553;
  CMD_TAKE_DAILY_COMPENSATION_REWARD_REQ = 564;
  CMD_TAKE_DAILY_COMPENSATION_REWARD_RSP = 565;
  CMD_AS_MASTER_PUPIL_CARD_REQ = 566;
  CMD_AS_MASTER_PUPIL_CARD_RSP = 567;
  CMD_GET_MASTER_PUPIL_DATA_REQ = 568;
  CMD_GET_MASTER_PUPIL_DATA_RSP = 569;
  CMD_ASK_FOR_MASTER_PUPIL_REQ = 570;
  CMD_ASK_FOR_MASTER_PUPIL_RSP = 571;
  CMD_DEAL_MASTER_PUPIL_REQ = 572;
  CMD_DEAL_MASTER_PUPIL_RSP = 573;
  CMD_MASTER_PUPIL_EVA_REQ = 574;
  CMD_MASTER_PUPIL_EVA_RSP = 575;
  CMD_GET_MASTER_FAME_REWARD_REQ = 576;
  CMD_GET_MASTER_FAME_REWARD_RSP = 577;
  CMD_MASTER_PUPIL_CARD_REPORT_REQ = 578;
  CMD_ACTIVATE_TRIAL_AVATAR_REQ = 583;
  CMD_ACTIVATE_TRIAL_AVATAR_RSP = 584;
  CMD_GET_TRIAL_AVATAR_REQ = 585;
  CMD_GET_TRIAL_AVATAR_RSP = 586;
  CMD_GET_MASTER_PUPIL_CARD_REQ = 587;
  CMD_GET_MASTER_PUPIL_CARD_RSP = 588;
  CMD_MASTER_PUPIL_NOTIFY = 589;
  CMD_GET_FRAME_DATA_REQ = 590;
  CMD_GET_FRAME_DATA_RSP = 591;
  CMD_SET_USE_FRAME_REQ = 592;
  CMD_SET_USE_FRAME_RSP = 593;
  CMD_GET_DORM_DATA_REQ = 601;
  CMD_GET_DORM_DATA_RSP = 602;
  CMD_GET_DORM_HOUSE_REQ = 603;
  CMD_GET_DORM_HOUSE_RSP = 604;
  CMD_EDIT_DORM_ROOM_REQ = 605;
  CMD_EDIT_DORM_ROOM_RSP = 606;
  CMD_GET_DEPOT_FURNITURE_REQ = 607;
  CMD_GET_DEPOT_FURNITURE_RSP = 608;
  CMD_UNLOCK_DORM_HOUSE_REQ = 609;
  CMD_UNLOCK_DORM_HOUSE_RSP = 610;
  CMD_SET_DORM_AVATAR_REQ = 611;
  CMD_SET_DORM_AVATAR_RSP = 612;
  CMD_LEVEL_UP_DORM_REQ = 613;
  CMD_LEVEL_UP_DORM_RSP = 614;
  CMD_SET_DORM_NAME_REQ = 615;
  CMD_SET_DORM_NAME_RSP = 616;
  CMD_FINISH_DORM_EVENT_REQ = 617;
  CMD_FINISH_DORM_EVENT_RSP = 618;
  CMD_GET_HAS_GOT_FURNITURE_ID_LIST_REQ = 619;
  CMD_GET_HAS_GOT_FURNITURE_ID_LIST_RSP = 620;
  CMD_BUY_FURNITURE_REQ = 621;
  CMD_BUY_FURNITURE_RSP = 622;
  CMD_GET_OTHER_DORM_DATA_REQ = 633;
  CMD_GET_OTHER_DORM_DATA_RSP = 634;
  CMD_SET_DORM_SNS_INFO_REQ = 635;
  CMD_SET_DORM_SNS_INFO_RSP = 636;
  CMD_GET_DORM_SNS_DATA_REQ = 637;
  CMD_GET_DORM_SNS_DATA_RSP = 638;
  CMD_LIKE_DORM_REQ = 639;
  CMD_LIKE_DORM_RSP = 640;
  CMD_FINISH_DORM_TALK_REQ = 641;
  CMD_FINISH_DORM_TALK_RSP = 642;
  CMD_GET_AVATAR_ROLL_DATA_REQ = 643;
  CMD_GET_AVATAR_ROLL_DATA_RSP = 644;
  CMD_TAKE_ROLL_REWARD_REQ = 645;
  CMD_TAKE_ROLL_REWARD_RSP = 646;
  CMD_CLAIM_STAMINA_REQ = 649;
  CMD_CLAIM_STAMINA_RSP = 650;
  CMD_GET_PUPIL_MISSION_REQ = 651;
  CMD_GET_PUPIL_MISSION_RSP = 652;
  CMD_GET_MASTER_PUPIL_APPLY_REQ = 653;
  CMD_GET_MASTER_PUPIL_APPLY_RSP = 654;
  CMD_GET_RECOMMEND_MASTER_PUPIL_REQ = 655;
  CMD_GET_RECOMMEND_MASTER_PUPIL_RSP = 656;
  CMD_GET_MASTER_PUPIL_MAIN_DATA_REQ = 657;
  CMD_GET_MASTER_PUPIL_MAIN_DATA_RSP = 658;
  CMD_GET_PUPIL_EVAL_DATA_REQ = 659;
  CMD_GET_PUPIL_EVAL_DATA_RSP = 660;
  CMD_GET_MASTER_RANK_REQ = 662;
  CMD_GET_MASTER_RANK_RSP = 663;
  CMD_GET_OTHER_MASTER_PUPIL_REQ = 664;
  CMD_GET_OTHER_MASTER_PUPIL_RSP = 665;
  CMD_UNLOCK_FURNITURE_REQ = 680;
  CMD_UNLOCK_FURNITURE_RSP = 681;
  CMD_GRAND_KEY_LEVEL_UP_REQ = 753;
  CMD_GRAND_KEY_LEVEL_UP_RSP = 754;
  CMD_GRAND_KEY_RESET_REQ = 755;
  CMD_GRAND_KEY_RESET_RSP = 756;
  CMD_GRAND_KEY_BREACH_REQ = 757;
  CMD_GRAND_KEY_BREACH_RSP = 758;
  CMD_GRAND_KEY_ACTIVATE_SKILL_REQ = 759;
  CMD_GRAND_KEY_ACTIVATE_SKILL_RSP = 760;
  CMD_GRAND_KEY_CONTRAST_REQ = 761;
  CMD_GRAND_KEY_CONTRAST_RSP = 762;
  CMD_GRAND_KEY_SET_SKILL_REQ = 763;
  CMD_GRAND_KEY_SET_SKILL_RSP = 764;
  CMD_GRAND_KEY_UNLOCK_SKILL_REQ = 765;
  CMD_GRAND_KEY_UNLOCK_SKILL_RSP = 766;
  CMD_GET_STAGE_DROP_LIMIT_ACTIVITY_REQ = 776;
  CMD_GET_STAGE_DROP_LIMIT_ACTIVITY_RSP = 777;
  CMD_PUSH_CLIENT_MSG_NOTIFY = 801;
  CMD_SET_PLAYER_TAG_NOTIFY = 802;
  CMD_SYNC_TIME_REQ = 803;
  CMD_SYNC_TIME_RSP = 804;
  CMD_TAKE_EXTRA_STORY_CHALLENGE_MODE_CHAPTER_REWARD_REQ = 807;
  CMD_TAKE_EXTRA_STORY_CHALLENGE_MODE_CHAPTER_REWARD_RSP = 808;
  CMD_GET_AVATAR_BIND_EQUIP_IN_CHALLENGE_MODE_REQ = 809;
  CMD_GET_AVATAR_BIND_EQUIP_IN_CHALLENGE_MODE_RSP = 810;
  CMD_GET_GALINTERACT_TRIGGER_EVENT_REQ = 813;
  CMD_GET_GALINTERACT_TRIGGER_EVENT_RSP = 814;
  CMD_TAKE_GALINTERACT_TRIGGER_EVENT_REQ = 815;
  CMD_TAKE_GALINTERACT_TRIGGER_EVENT_RSP = 816;
  CMD_AVATAE_FRAGMENT_TRANSFORM_REQ = 827;
  CMD_AVATAE_FRAGMENT_TRANSFORM_RSP = 828;
  CMD_STAGE_BATTLE_SAVE_CLIENT_DATA_REQ = 829;
  CMD_STAGE_BATTLE_SAVE_CLIENT_DATA_RSP = 830;
  CMD_TAKE_EXTRA_STORY_LINE_STORY_FINISH_REWARD_REQ = 836;
  CMD_TAKE_EXTRA_STORY_LINE_STORY_FINISH_REWARD_RSP = 837;
  CMD_UNBIND_ACCOUNT_REQ = 961;
  CMD_UNBIND_ACCOUNT_RSP = 962;
  CMD_GET_STAGE_CHAPTER_REQ = 965;
  CMD_GET_STAGE_CHAPTER_RSP = 966;
  CMD_TAKE_CHAPTER_CHALLENGE_REWARD_REQ = 967;
  CMD_TAKE_CHAPTER_CHALLENGE_REWARD_RSP = 968;
  CMD_SYNC_DUTY_NOTIFY = 969;
  CMD_RECALL_MASTER_PUPIL_APPLICATION_REQ = 970;
  CMD_RECALL_MASTER_PUPIL_APPLICATION_RSP = 971;
  CMD_SET_FRIEND_REMARK_REQ = 972;
  CMD_SET_FRIEND_REMARK_RSP = 973;
  CMD_GET_FRIEND_REMARK_LIST_REQ = 974;
  CMD_GET_FRIEND_REMARK_LIST_RSP = 975;
  CMD_PLAYER_LEVEL_UP_NOTIFY = 976;
}

// CmdID: 5200
message UltraEndlessGetTopRankReq {
  uint32 schedule_id = 1;
}

// CmdID: 5201
message UltraEndlessGetTopRankRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  UltraEndlessGetTopRankRsp.Retcode retcode = 1;
  uint32 schedule_id = 2;
  RankShowData rank_data = 3;
}

// CmdID: 5202
message UltraEndlessGetMainDataReq {
  uint32 player_level = 1;
  uint32 cur_schedule_id = 2;
  uint32 max_stage_score = 3;
  LineupBriefInfo lineup_info = 4;
}

message UltraEndlessPlayer {
  uint32 uid = 1;
  uint32 group_level = 2;
  uint32 cup_num = 3;
  uint32 max_stage_score = 4;
  uint32 score_update_time = 5;
  LineupBriefInfo lineup_info = 6;
}

message UltraEndlessFloor {
  uint32 floor = 1;
  uint32 max_score = 2;
}

message UltraEndlessSite {
  uint32 site_id = 1;
  repeated UltraEndlessFloor floor_list = 2;
  uint32 max_score_cost_time = 3;
}

message OldEndlessPlayerSettle {
  uint32 uid = 1;
  uint32 begin_time = 2;
  uint32 endless_type = 3;
  uint32 group_level = 4;
}

message UltraEndlessSettleInfo {
  uint32 schedule_id = 1;
  uint32 group_level = 2;
  uint32 max_stage_score = 3;
  uint32 group_member_num = 4;
  uint32 rank = 5;
  uint32 cup_num_before = 6;
  uint32 cup_num_after_schedule_settle = 7;
  uint32 cup_num_after_season_settle = 8;
  uint32 cup_num_before_season_settle = 9;
  uint32 cup_num = 10;
  repeated OldEndlessPlayerSettle old_endless_settle_list = 11;
  uint32 mmr_score = 12;
  uint32 buffer_cup_before_schedule_settle = 13;
  uint32 buffer_cup = 15;
}

message UltraEndlessMainData {
  uint32 schedule_id = 1;
  uint32 effect_time = 2;
  uint32 begin_time = 3;
  uint32 end_time = 4;
  uint32 close_time = 5;
  uint32 last_schedule_id = 6;
  repeated UltraEndlessSite site_list = 8;
  uint32 last_settle_top_rank_schedule_id = 10;
  uint32 cur_season_id = 11;
  uint32 last_settle_season_id = 12;
}

// CmdID: 5203
message UltraEndlessGetMainDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    PLAYER_LEVEL_LACK = 2;
    NOT_OPEN = 3;
    IN_OLD_ENDLESS = 4;
    FEATURE_CLOSED = 5;
  }

  UltraEndlessGetMainDataRsp.Retcode retcode = 1;
  uint32 schedule_id = 2;
  uint32 group_level = 3;
  uint32 top_group_level = 4;
  uint32 cup_num = 5;
  UltraEndlessMainData main_data = 6;
  UltraEndlessSettleInfo last_settle_info = 7;
  bool is_just_join = 8;
  uint32 dynamic_hard_level = 9;
  repeated UltraEndlessPlayer endless_player_list = 10;
  repeated PlayerFriendBriefData brief_data_list = 11;
}

// CmdID: 5205
message UltraEndlessLastSettleRewardNotify {
  UltraEndlessSettleInfo settle_info = 1;
  RewardData settle_reward_data = 2;
  RewardData group_level_reward_data = 3;
}

// CmdID: 5206
message UltraEndlessReportSiteFloorReq {
  uint32 site_id = 1;
  uint32 floor = 2;
  uint32 score = 3;
  uint32 cost_time = 4;
  uint32 total_cost_time = 5;
  repeated uint32 avatar_id_list = 6;
  repeated uint32 elf_id_list = 7;
  bool is_up_floor = 8;
}

// CmdID: 5207
message UltraEndlessReportSiteFloorRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    PRE_NOT_FINISH = 2;
    NOT_IN_SCHEDULE = 3;
  }

  UltraEndlessReportSiteFloorRsp.Retcode retcode = 1;
  uint32 site_id = 2;
  uint32 floor = 3;
  bool is_up_floor = 4;
}

// CmdID: 5210
message UltraEndlessBriefDataNotify {
  UltraEndlessMainData main_data = 1;
}

// CmdID: 5211
message UltraEndlessEnterSiteReq {
  uint32 site_id = 1;
}

// CmdID: 5212
message UltraEndlessEnterSiteRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_SCHEDULE = 2;
    PRE_NOT_FINISH = 3;
    ALREADY_FINISH = 4;
  }

  UltraEndlessEnterSiteRsp.Retcode retcode = 1;
  uint32 site_id = 2;
}

// CmdID: 5215
message UltraEndlessTopRankRewardReq {
}

// CmdID: 5216
message UltraEndlessTopRankRewardRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_IN_RANK = 2;
    ALREADY_TAKEN = 3;
  }

  UltraEndlessTopRankRewardRsp.Retcode retcode = 1;
  uint32 schedule_id = 2;
  uint32 rank = 3;
  RewardData reward_data = 4;
}

// CmdID: 5219
message UltraEndlessClientReportNotify {
  enum ClientReportType {
    CLIENT_REPORT_TYPE_NONE = 0;
    CLIENT_REPORT_TYPE_STAGE_BEGIN = 1;
  }

  UltraEndlessClientReportNotify.ClientReportType client_report_type = 1;
  string client_transaction_str = 2;
  string report_msg = 3;
}

// CmdID: 5220
message UltraEndlessFirstJoinRewardNotify {
  RewardData medal_reward = 1;
  RewardData promote_reward = 2;
}

// CmdID: 5298
message UltraEndlessCommonNotify {
  enum EventType {
    EVENT_NONE = 0;
    EVENT_IN_SETTLE = 1;
  }

  UltraEndlessCommonNotify.EventType event_type = 1;
}

enum CmdTypeUltraendless {
  CMD_TYPE_ULTRAENDLESS_NONE = 0;
  CMD_ULTRA_ENDLESS_GET_TOP_RANK_REQ = 5200;
  CMD_ULTRA_ENDLESS_GET_TOP_RANK_RSP = 5201;
  CMD_ULTRA_ENDLESS_GET_MAIN_DATA_REQ = 5202;
  CMD_ULTRA_ENDLESS_GET_MAIN_DATA_RSP = 5203;
  CMD_ULTRA_ENDLESS_LAST_SETTLE_REWARD_NOTIFY = 5205;
  CMD_ULTRA_ENDLESS_REPORT_SITE_FLOOR_REQ = 5206;
  CMD_ULTRA_ENDLESS_REPORT_SITE_FLOOR_RSP = 5207;
  CMD_ULTRA_ENDLESS_BRIEF_DATA_NOTIFY = 5210;
  CMD_ULTRA_ENDLESS_ENTER_SITE_REQ = 5211;
  CMD_ULTRA_ENDLESS_ENTER_SITE_RSP = 5212;
  CMD_ULTRA_ENDLESS_GROUP_LEVEL_REWARD_REQ = 5213;
  CMD_ULTRA_ENDLESS_GROUP_LEVEL_REWARD_RSP = 5214;
  CMD_ULTRA_ENDLESS_TOP_RANK_REWARD_REQ = 5215;
  CMD_ULTRA_ENDLESS_TOP_RANK_REWARD_RSP = 5216;
  CMD_ULTRA_ENDLESS_CLIENT_REPORT_NOTIFY = 5219;
  CMD_ULTRA_ENDLESS_FIRST_JOIN_REWARD_NOTIFY = 5220;
  CMD_ULTRA_ENDLESS_COMMON_NOTIFY = 5298;
  CMD_ULTRA_ENDLESS_DUMMY = 5299;
}

enum UltraEndlessSiteTag {
  ULTRA_ENDLESS_SITE_TAG_NONE = 0;
  ULTRA_ENDLESS_SITE_TAG_NORMAL_1 = 1;
  ULTRA_ENDLESS_SITE_TAG_NORMAL_2 = 2;
  ULTRA_ENDLESS_SITE_TAG_BOSS = 3;
  ULTRA_ENDLESS_SITE_TAG_BRANCH = 4;
}

message VirtualTrainCommon {
  enum GroupType {
    GROUP_TYPE_NONE = 0;
    GROUP_CHAPTER = 1;
    GROUP_RPG_TALE = 2;
  }

  enum ItemType {
    ITEM_NONE = 0;
    ITEM_AVATAR = 1;
    ITEM_WEAPON = 2;
    ITEM_STIGMATA = 3;
    ITEM_BUFF = 4;
  }

  enum VirtualAvatarType {
    VIRTUAL_AVATAR_NONE = 0;
    VIRTUAL_AVATAR_NORMAL = 1;
    VIRTUAL_AVATAR_QAVATAR = 2;
  }

}

message VirtualTrainCustom {
  uint32 custom_id = 1;
  uint32 level = 2;
  uint32 choosed_index = 3;
  uint32 max_index = 4;
}

message VirtualTrainRole {
  uint32 virtual_role_id = 1;
  repeated VirtualTrainCustom custom_list = 2;
}

message VirtualAvatarGroup {
  uint32 group_id = 1;
  repeated VirtualAvatar virtual_avatar_list = 2;
  repeated uint32 virtual_weapon_id_list = 3;
  repeated uint32 virtual_stigmata_id_list = 4;
  repeated uint32 virtual_avatar_team_list = 5;
  repeated VirtualTrainRole virtual_role_list = 6;
  bool is_locked = 7;
}

message VirtualAvatarGroupBriefData {
  uint32 group_id = 1;
  uint32 chapter_id = 2;
}

// CmdID: 3502
message GetVirtualAvatarGroupDetailReq {
  uint32 group_id = 1;
}

// CmdID: 3503
message GetVirtualAvatarGroupDetailRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetVirtualAvatarGroupDetailRsp.Retcode retcode = 1;
  VirtualAvatarGroup virtual_avatar_group = 2;
}

// CmdID: 3504
message SetVirtualAvatarTeamReq {
  uint32 group_id = 1;
  repeated uint32 avatar_team_list = 2;
}

// CmdID: 3505
message SetVirtualAvatarTeamRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    AVATAR_NOT_EXIST = 2;
    AVATAR_REPEATED = 3;
    AVATAR_EMPTY = 4;
    TEAM_SIZE_LIMIT = 5;
    LOCK = 6;
  }

  SetVirtualAvatarTeamRsp.Retcode retcode = 1;
  uint32 group_id = 2;
  repeated uint32 avatar_team_list = 3;
}

// CmdID: 3506
message DressVirtualEquipmentReq {
  uint32 group_id = 1;
  uint32 virtual_avatar_id = 2;
  uint32 equip_type = 3;
  uint32 slot = 4;
  uint32 virtual_equip_id = 5;
}

// CmdID: 3507
message DressVirtualEquipmentRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    AVATAR_NOT_EXIST = 2;
    EQUIP_NOT_EXIST = 3;
    HAVE_DRESSED = 4;
  }

  DressVirtualEquipmentRsp.Retcode retcode = 1;
  uint32 group_id = 2;
  VirtualAvatar virtual_avatar = 3;
}

message VirtualGachaPool {
  uint32 pool_id = 1;
  uint32 gacha_times = 2;
  uint32 total_times = 3;
}

message VirtualGacha {
  enum Status {
    NORMAL = 0;
    EMPTY = 1;
  }

  uint32 box_id = 1;
  VirtualGacha.Status status = 2;
  repeated VirtualGachaPool pool_list = 3;
}

// CmdID: 3508
message VirtualGachaReq {
  uint32 box_id = 1;
  VirtualGachaType gacha_type = 2;
}

// CmdID: 3509
message VirtualGachaRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    WAIT_CHOOSE = 2;
    MATERIAL_LACK = 3;
    EMPTY = 4;
  }

  VirtualGachaRsp.Retcode retcode = 1;
  uint32 item_id = 2;
  repeated uint32 candidate_item_id_list = 3;
  VirtualGacha gacha_status = 4;
  repeated uint32 item_list = 5;
}

// CmdID: 3510
message GetVirtualGachaStatusReq {
  uint32 group_id = 1;
}

// CmdID: 3511
message GetVirtualGachaStatusRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetVirtualGachaStatusRsp.Retcode retcode = 1;
  repeated VirtualGacha gacha_list = 2;
  uint32 group_id = 3;
  uint32 candidate_gacha_box_id = 4;
  repeated uint32 candidate_item_id_list = 5;
  uint32 candidate_gacha_pool_id = 6;
}

// CmdID: 3512
message VirtualAvatarGroupChangeNotify {
  VirtualAvatarGroup virtual_avatar_group = 1;
}

// CmdID: 3513
message VirtualTrainDirectGachaNotify {
  uint32 group_id = 1;
  uint32 item_id = 2;
}

// CmdID: 3514
message ChooseVirtualTrainGachaItemReq {
  uint32 group_id = 1;
  uint32 item_id = 2;
}

// CmdID: 3515
message ChooseVirtualTrainGachaItemRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NO_CANDIDATE = 2;
    ITEM_ERROR = 3;
  }

  ChooseVirtualTrainGachaItemRsp.Retcode retcode = 1;
  uint32 group_id = 2;
  uint32 item_id = 3;
}

// CmdID: 3516
message ChooseVirtualDefaultAvatarNotify {
  uint32 group_id = 1;
  repeated uint32 candidate_avatar_list = 2;
}

// CmdID: 3517
message SyncVirtualGachaStatusNotify {
  uint32 group_id = 1;
  VirtualGacha gacha = 2;
}

// CmdID: 3518
message VirtualTrainRoleCustomLevelUpReq {
  uint32 group_id = 1;
  uint32 virtual_role_id = 2;
  uint32 custom_id = 3;
}

// CmdID: 3519
message VirtualTrainRoleCustomLevelUpRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    MATERIAL_NOT_ENOUGH = 2;
    LEVEL_MAX = 3;
    ROLE_NOT_EXIST = 4;
    STAGE_NOT_FINISH = 5;
    PRE_CUSTOM_LEVEL_LACK = 6;
  }

  VirtualTrainRoleCustomLevelUpRsp.Retcode retcode = 1;
  uint32 group_id = 2;
  uint32 virtual_role_id = 3;
  uint32 custom_id = 4;
  uint32 level = 5;
}

// CmdID: 3520
message VirtualTrainRoleCustomChooseReq {
  uint32 group_id = 1;
  uint32 virtual_role_id = 2;
  uint32 custom_id = 3;
  uint32 index = 4;
}

// CmdID: 3521
message VirtualTrainRoleCustomChooseRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    LOCKED = 2;
    ROLE_NOT_EXIST = 3;
  }

  VirtualTrainRoleCustomChooseRsp.Retcode retcode = 1;
}

// CmdID: 3522
message VirtualTrainEvoReq {
  uint32 group_id = 1;
  uint32 evo_avatar_id = 2;
  bool is_quick_evo = 3;
}

// CmdID: 3523
message VirtualTrainEvoRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    AVATAR_NOT_EXIST = 2;
    NO_NEXT_AVATAR = 3;
    CAN_NOT_EVO = 4;
    MATERIAL_LACK = 5;
    EVO_LIMIT = 6;
  }

  VirtualTrainEvoRsp.Retcode retcode = 1;
  uint32 group_id = 2;
  uint32 evo_avatar_id = 3;
}

message VirtualTrainItemDrop {
  uint32 item_id = 1;
  uint32 item_num = 2;
  repeated Material split_material_list = 3;
}

// CmdID: 3524
message VirtualTrainItemDropNotify {
  enum DropSrcType {
    DROP_SRC_NONE = 0;
    DROP_SRC_RPG_STAGE = 1;
    DROP_SRC_RPG_MISSION = 2;
    DROP_SRC_RPG_QAVATAR = 3;
    DROP_SRC_GM = 10;
  }

  uint32 group_id = 1;
  VirtualTrainItemDropNotify.DropSrcType drop_src_type = 2;
  repeated VirtualTrainItemDrop item_drop_list = 3;
  uint32 stage_id = 4;
}

enum CmdTypeVirtualtrain {
  CMD_TYPE_VIRTUALTRAIN_NONE = 0;
  CMD_GET_VIRTUAL_AVATAR_GROUP_DETAIL_REQ = 3502;
  CMD_GET_VIRTUAL_AVATAR_GROUP_DETAIL_RSP = 3503;
  CMD_SET_VIRTUAL_AVATAR_TEAM_REQ = 3504;
  CMD_SET_VIRTUAL_AVATAR_TEAM_RSP = 3505;
  CMD_DRESS_VIRTUAL_EQUIPMENT_REQ = 3506;
  CMD_DRESS_VIRTUAL_EQUIPMENT_RSP = 3507;
  CMD_VIRTUAL_GACHA_REQ = 3508;
  CMD_VIRTUAL_GACHA_RSP = 3509;
  CMD_GET_VIRTUAL_GACHA_STATUS_REQ = 3510;
  CMD_GET_VIRTUAL_GACHA_STATUS_RSP = 3511;
  CMD_VIRTUAL_AVATAR_GROUP_CHANGE_NOTIFY = 3512;
  CMD_VIRTUAL_TRAIN_DIRECT_GACHA_NOTIFY = 3513;
  CMD_CHOOSE_VIRTUAL_GACHA_ITEM_REQ = 3514;
  CMD_CHOOSE_VIRTUAL_GACHA_ITEM_RSP = 3515;
  CMD_CHOOSE_VIRTUAL_DEFAULT_AVATAR_NOTIFY = 3516;
  CMD_SYNC_VIRTUAL_GACHA_STATUS_NOTIFY = 3517;
  CMD_VIRTUAL_TRAIN_ROLE_CUSTOM_LEVEL_UP_REQ = 3518;
  CMD_VIRTUAL_TRAIN_ROLE_CUSTOM_LEVEL_UP_RSP = 3519;
  CMD_VIRTUAL_TRAIN_ROLE_CUSTOM_CHOOSE_REQ = 3520;
  CMD_VIRTUAL_TRAIN_ROLE_CUSTOM_CHOOSE_RSP = 3521;
  CMD_VIRTUAL_TRAIN_EVO_REQ = 3522;
  CMD_VIRTUAL_TRAIN_EVO_RSP = 3523;
  CMD_VIRTUAL_TRAIN_ITEM_DROP_NOTIFY = 3524;
  CMD_VIRTUAL_TRAIN_DUMMY = 3549;
}

enum VirtualGachaType {
  VIRTUAL_GACHA_TYPE_NONE = 0;
  VRITUAL_GACHA_TYPE_SINGLE = 1;
  VIRTUAL_GACHA_TYPE_BATCH = 2;
}

message TrialWarship {
  uint32 sample_id = 1;
  uint32 end_time = 2;
}

// CmdID: 5450
message GetWarshipItemDataReq {
  repeated uint32 warship_item_id_list = 1;
  bool is_all = 2;
}

// CmdID: 5451
message GetWarshipItemDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetWarshipItemDataRsp.Retcode retcode = 1;
  repeated uint32 warship_item_id_list = 2;
  bool is_all = 3;
}

// CmdID: 5452
message GetWarshipTrialDataReq {
  repeated uint32 sample_id_list = 1;
  bool is_all = 2;
}

// CmdID: 5453
message GetWarshipTrialDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetWarshipTrialDataRsp.Retcode retcode = 1;
  repeated TrialWarship trial_warship_list = 2;
  bool is_all = 3;
}

// CmdID: 5454
message GetWarshipDataReq {
  repeated uint32 warship_id_list = 1;
  bool is_all = 2;
}

// CmdID: 5455
message GetWarshipDataRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetWarshipDataRsp.Retcode retcode = 1;
  repeated WarshipThemeData warship_list = 2;
  bool is_all = 3;
}

// CmdID: 5456
message SetWarshipReq {
  uint32 warship_id = 1;
}

// CmdID: 5457
message SetWarshipRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    NOT_EXIST = 2;
  }

  SetWarshipRsp.Retcode retcode = 1;
}

// CmdID: 5458
message SetWarshipComponentReq {
  uint32 warship_id = 1;
  repeated WarshipComponent component_list = 2;
}

// CmdID: 5459
message SetWarshipComponentRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    WARSHIP_NOT_EXIST = 2;
    COMPONENT_TYPE_ERROR = 3;
    COMPONENT_NOT_EXIST = 4;
    WARSHIP_ERROR = 5;
  }

  SetWarshipComponentRsp.Retcode retcode = 1;
}

// CmdID: 5460
message SetWarshipSettingReq {
  uint32 warship_id = 1;
  WarshipSettingType setting_type = 2;
  WarshipBgmPlayMode bgm_play_mode = 3;
  bool is_weather_fixed = 4;
  uint32 weather_idx = 5;
}

// CmdID: 5461
message SetWarshipSettingRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
    WARSHIP_NOT_EXIST = 2;
  }

  SetWarshipSettingRsp.Retcode retcode = 1;
}

// CmdID: 5462
message WarshipItemReturnMaterialNotify {
  uint32 warship_item_id = 1;
  uint32 convert_num = 2;
  uint32 return_material_id = 3;
  uint32 return_material_num = 4;
}

// CmdID: 5463
message AddWarshipItemNotify {
  repeated uint32 warship_item_id_list = 1;
}

enum CmdTypeWarship {
  CMD_TYPE_WARSHIP_NONE = 0;
  CMD_GET_WARSHIP_ITEM_DATA_REQ = 5450;
  CMD_GET_WARSHIP_ITEM_DATA_RSP = 5451;
  CMD_GET_WARSHIP_TRIAL_DATA_REQ = 5452;
  CMD_GET_WARSHIP_TRIAL_DATA_RSP = 5453;
  CMD_GET_WARSHIP_DATA_REQ = 5454;
  CMD_GET_WARSHIP_DATA_RSP = 5455;
  CMD_SET_WARSHIP_REQ = 5456;
  CMD_SET_WARSHIP_RSP = 5457;
  CMD_SET_WARSHIP_COMPONENT_REQ = 5458;
  CMD_SET_WARSHIP_COMPONENT_RSP = 5459;
  CMD_SET_WARSHIP_SETTING_REQ = 5460;
  CMD_SET_WARSHIP_SETTING_RSP = 5461;
  CMD_WARSHIP_ITEM_RETURN_MATERIAL_NOTIFY = 5462;
  CMD_ADD_WARSHIP_ITEM_NOTIFY = 5463;
}

enum TrialWarshipTimeType {
  TRIAL_WARSHIP_TIME_TYPE_NONE = 0;
  TRIAL_WARSHIP_TIME_UNTIL = 1;
  TRIAL_WARSHIP_TIME_DURATION = 2;
}

enum WarshipSettingType {
  WARSHIP_SETTING_TYPE_NONE = 0;
  WARSHIP_SETTING_BGM_PLAY_MODE = 1;
  WARSHIP_SETTING_BGM_WEATHER = 2;
}

// CmdID: 5100
message GetWeeklyReportReq {
  uint32 target_uid = 1;
}

message WeeklyReportExBossGroup {
  uint32 boss_group_id = 1;
  FinishedExBossInfo finished_boss_info = 2;
}

message WeeklyReportExBoss {
  uint32 schedule_id = 1;
  uint32 rank_id = 2;
  uint32 times_score = 3;
  repeated WeeklyReportExBossGroup boss_group_list = 4;
  uint32 rank_percent = 5;
  uint32 rank = 6;
  uint32 begin_time = 7;
  uint32 end_time = 8;
  repeated uint32 reward_id_list = 9;
}

message WeeklyReportEndless {
  EndlessType endless_type = 1;
  uint32 begin_time = 2;
  uint32 group_level = 3;
  uint32 final_boss_id = 4;
  uint32 score = 6;
  LineupBriefInfo lineup_info = 7;
  uint32 reward_progress = 8;
  EndlessRewardType reward_type = 9;
  uint32 single_mode_score = 10;
  uint32 battle_config_id = 11;
  uint32 single_mode_activity_id = 12;
  uint32 end_time = 13;
  RewardData greedy_reward_data = 14;
  uint32 greedy_max_finish_floor = 15;
}

message WeeklyReportUltraEndless {
  uint32 schedule_id = 1;
  uint32 group_level = 2;
  uint32 max_stage_score = 3;
  uint32 group_member_num = 4;
  uint32 rank = 5;
  uint32 cup_num_before_schedule_begin = 6;
  uint32 cup_num_after_schedule_settle = 7;
  uint32 top_rank = 8;
  uint32 top_rank_reward_id = 9;
  uint32 group_level_reward_id = 10;
  LineupBriefInfo lineup_info = 11;
  uint32 max_mission_num = 12;
  uint32 finished_mission_num = 13;
  repeated uint32 mission_reward_list = 14;
  uint32 begin_time = 15;
  uint32 end_time = 16;
  uint32 battle_config_id = 17;
}

// CmdID: 5101
message GetWeeklyReportRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetWeeklyReportRsp.Retcode retcode = 1;
  repeated WeeklyReportExBoss ex_boss_data_list = 2;
  repeated WeeklyReportEndless endless_data_list = 3;
  repeated WeeklyReportUltraEndless ultra_endless_list = 4;
  uint32 target_uid = 6;
}

// CmdID: 5102
message GetWeeklyReportEndlessRecommendPlayerReq {
  uint32 begin_time = 1;
  uint32 group_level = 2;
}

// CmdID: 5103
message GetWeeklyReportEndlessRecommendPlayerRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetWeeklyReportEndlessRecommendPlayerRsp.Retcode retcode = 1;
  uint32 begin_time = 2;
  uint32 group_level = 3;
  RankShowData rank_data = 4;
  EndlessType endless_type = 5;
}

// CmdID: 5104
message GetWeeklyReportExBossRecommendPlayerReq {
  uint32 schedule_id = 1;
  uint32 rank_reward_id = 2;
}

// CmdID: 5105
message GetWeeklyReportExBossRecommendPlayerRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetWeeklyReportExBossRecommendPlayerRsp.Retcode retcode = 1;
  uint32 schedule_id = 2;
  uint32 rank_reward_id = 3;
  RankShowData rank_data = 4;
}

// CmdID: 5106
message GetWeeklyReportUltraEndlessRecommendPlayerReq {
  uint32 schedule_id = 1;
  uint32 group_id = 2;
}

// CmdID: 5107
message GetWeeklyReportUltraEndlessRecommendPlayerRsp {
  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  GetWeeklyReportUltraEndlessRecommendPlayerRsp.Retcode retcode = 1;
  uint32 schedule_id = 2;
  uint32 group_id = 3;
  RankShowData rank_data = 4;
}

enum CmdTypeWeeklyreport {
  CMD_TYPE_WEEKLYREPORT_NONE = 0;
  CMD_GET_WEEKLY_REPORT_REQ = 5100;
  CMD_GET_WEEKLY_REPORT_RSP = 5101;
  CMD_GET_WEEKLY_REPORT_ENDLESS_RECOMMEND_PLAYER_REQ = 5102;
  CMD_GET_WEEKLY_REPORT_ENDLESS_RECOMMEND_PLAYER_RSP = 5103;
  CMD_GET_WEEKLY_REPORT_EX_BOSS_RECOMMEND_PLAYER_REQ = 5104;
  CMD_GET_WEEKLY_REPORT_EX_BOSS_RECOMMEND_PLAYER_RSP = 5105;
  CMD_GET_WEEKLY_REPORT_ULTRA_ENDLESS_RECOMMEND_PLAYER_REQ = 5106;
  CMD_GET_WEEKLY_REPORT_ULTRA_ENDLESS_RECOMMEND_PLAYER_RSP = 5107;
}

